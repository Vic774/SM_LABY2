
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800aba8  0800aba8  0001aba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd4  0800afd4  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afdc  0800afdc  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800afe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  20000218  0800b1fc  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  0800b1fc  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6b8  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f7  00000000  00000000  0003b8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  000407a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b321  00000000  00000000  00041bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4d6  00000000  00000000  0006ced1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103bd7  00000000  00000000  000883a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bf7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a7c  00000000  00000000  0018bfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000218 	.word	0x20000218
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ab8c 	.word	0x0800ab8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000021c 	.word	0x2000021c
 800023c:	0800ab8c 	.word	0x0800ab8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	4613      	mov	r3, r2
 8000604:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fa5b 	bl	8000ac2 <null_ptr_check>
 800060c:	4603      	mov	r3, r0
 800060e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d11c      	bne.n	8000652 <bmp280_get_regs+0x5e>
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d019      	beq.n	8000652 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685c      	ldr	r4, [r3, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7858      	ldrb	r0, [r3, #1]
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	b29b      	uxth	r3, r3
 800063a:	7bf9      	ldrb	r1, [r7, #15]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	47a0      	blx	r4
 8000640:	4603      	mov	r3, r0
 8000642:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d004      	beq.n	8000656 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 800064c:	23fc      	movs	r3, #252	; 0xfc
 800064e:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000650:	e001      	b.n	8000656 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4613      	mov	r3, r2
 8000670:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b04      	cmp	r3, #4
 8000676:	d901      	bls.n	800067c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 800067c:	6838      	ldr	r0, [r7, #0]
 800067e:	f000 fa20 	bl	8000ac2 <null_ptr_check>
 8000682:	4603      	mov	r3, r0
 8000684:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14d      	bne.n	800072a <bmp280_set_regs+0xc8>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d04a      	beq.n	800072a <bmp280_set_regs+0xc8>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d047      	beq.n	800072a <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d041      	beq.n	8000724 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d114      	bne.n	80006d8 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	76fb      	strb	r3, [r7, #27]
 80006b2:	e00d      	b.n	80006d0 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80006b4:	7efb      	ldrb	r3, [r7, #27]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	7efb      	ldrb	r3, [r7, #27]
 80006be:	68f9      	ldr	r1, [r7, #12]
 80006c0:	440b      	add	r3, r1
 80006c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ca:	7efb      	ldrb	r3, [r7, #27]
 80006cc:	3301      	adds	r3, #1
 80006ce:	76fb      	strb	r3, [r7, #27]
 80006d0:	7efa      	ldrb	r2, [r7, #27]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3ed      	bcc.n	80006b4 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d90d      	bls.n	80006fa <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f107 0110 	add.w	r1, r7, #16
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f000 fa0b 	bl	8000b02 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	83bb      	strh	r3, [r7, #28]
 80006f8:	e001      	b.n	80006fe <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	689c      	ldr	r4, [r3, #8]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	7858      	ldrb	r0, [r3, #1]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	7819      	ldrb	r1, [r3, #0]
 800070a:	8bbb      	ldrh	r3, [r7, #28]
 800070c:	f107 0210 	add.w	r2, r7, #16
 8000710:	47a0      	blx	r4
 8000712:	4603      	mov	r3, r0
 8000714:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800071e:	23fc      	movs	r3, #252	; 0xfc
 8000720:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000722:	e005      	b.n	8000730 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000724:	23fd      	movs	r3, #253	; 0xfd
 8000726:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000728:	e002      	b.n	8000730 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	77fb      	strb	r3, [r7, #31]
 800072e:	e000      	b.n	8000732 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000730:	bf00      	nop
    }

    return rslt;
 8000732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}

0800073e <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800074a:	23b6      	movs	r3, #182	; 0xb6
 800074c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 f9b7 	bl	8000ac2 <null_ptr_check>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000760:	f107 010d 	add.w	r1, r7, #13
 8000764:	f107 000e 	add.w	r0, r7, #14
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	f7ff ff79 	bl	8000662 <bmp280_set_regs>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	2002      	movs	r0, #2
 800077a:	4798      	blx	r3
    }

    return rslt;
 800077c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f994 	bl	8000ac2 <null_ptr_check>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d150      	bne.n	8000848 <bmp280_init+0xc0>
    {
        while (try_count)
 80007a6:	e02d      	b.n	8000804 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	20d0      	movs	r0, #208	; 0xd0
 80007b0:	f7ff ff20 	bl	80005f4 <bmp280_get_regs>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d11a      	bne.n	80007f6 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80007c4:	2b56      	cmp	r3, #86	; 0x56
 80007c6:	d007      	beq.n	80007d8 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b57      	cmp	r3, #87	; 0x57
 80007ce:	d003      	beq.n	80007d8 <bmp280_init+0x50>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b58      	cmp	r3, #88	; 0x58
 80007d6:	d10e      	bne.n	80007f6 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffb0 	bl	800073e <bmp280_soft_reset>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d110      	bne.n	800080c <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f9b5 	bl	8000b5a <get_calib_param>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007f4:	e00a      	b.n	800080c <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	200a      	movs	r0, #10
 80007fc:	4798      	blx	r3
            --try_count;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	3b01      	subs	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ce      	bne.n	80007a8 <bmp280_init+0x20>
 800080a:	e000      	b.n	800080e <bmp280_init+0x86>
                break;
 800080c:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000814:	23fe      	movs	r3, #254	; 0xfe
 8000816:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8000818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d113      	bne.n	8000848 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000862:	6838      	ldr	r0, [r7, #0]
 8000864:	f000 f92d 	bl	8000ac2 <null_ptr_check>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d137      	bne.n	80008e4 <bmp280_get_config+0x90>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d034      	beq.n	80008e4 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800087a:	f107 010c 	add.w	r1, r7, #12
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2202      	movs	r2, #2
 8000882:	20f4      	movs	r0, #244	; 0xf4
 8000884:	f7ff feb6 	bl	80005f4 <bmp280_get_regs>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000894:	7b3b      	ldrb	r3, [r7, #12]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	109b      	asrs	r3, r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	095b      	lsrs	r3, r3, #5
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	109b      	asrs	r3, r3, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	332c      	adds	r3, #44	; 0x2c
 80008da:	6810      	ldr	r0, [r2, #0]
 80008dc:	6018      	str	r0, [r3, #0]
 80008de:	7912      	ldrb	r2, [r2, #4]
 80008e0:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008e2:	e001      	b.n	80008e8 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f9c7 	bl	8000c96 <conf_sensor>
 8000908:	4603      	mov	r3, r0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 f8cf 	bl	8000ac2 <null_ptr_check>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d109      	bne.n	8000944 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f9ab 	bl	8000c96 <conf_sensor>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	2300      	movs	r3, #0
 8000960:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f000 f8ad 	bl	8000ac2 <null_ptr_check>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800096c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d133      	bne.n	80009dc <bmp280_get_uncomp_data+0x8c>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d030      	beq.n	80009dc <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800097a:	f107 0108 	add.w	r1, r7, #8
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2206      	movs	r2, #6
 8000982:	20f7      	movs	r0, #247	; 0xf7
 8000984:	f7ff fe36 	bl	80005f4 <bmp280_get_regs>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800098c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d120      	bne.n	80009d6 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000994:	7a3b      	ldrb	r3, [r7, #8]
 8000996:	031a      	lsls	r2, r3, #12
 8000998:	7a7b      	ldrb	r3, [r7, #9]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4313      	orrs	r3, r2
 800099e:	7aba      	ldrb	r2, [r7, #10]
 80009a0:	0912      	lsrs	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	031a      	lsls	r2, r3, #12
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	4313      	orrs	r3, r2
 80009b4:	7b7a      	ldrb	r2, [r7, #13]
 80009b6:	0912      	lsrs	r2, r2, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4610      	mov	r0, r2
 80009cc:	f000 fa18 	bl	8000e00 <st_check_boundaries>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009d4:	e004      	b.n	80009e0 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009d6:	23f3      	movs	r3, #243	; 0xf3
 80009d8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009da:	e001      	b.n	80009e0 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009dc:	23ff      	movs	r3, #255	; 0xff
 80009de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f862 	bl	8000ac2 <null_ptr_check>
 80009fe:	4603      	mov	r3, r0
 8000a00:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8000a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d150      	bne.n	8000aac <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	da00      	bge.n	8000a12 <bmp280_get_comp_temp_32bit+0x26>
 8000a10:	3307      	adds	r3, #7
 8000a12:	10db      	asrs	r3, r3, #3
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	8a1b      	ldrh	r3, [r3, #16]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da01      	bge.n	8000a30 <bmp280_get_comp_temp_32bit+0x44>
 8000a2c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a30:	12db      	asrs	r3, r3, #11
 8000a32:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <bmp280_get_comp_temp_32bit+0x50>
 8000a3a:	330f      	adds	r3, #15
 8000a3c:	111b      	asrs	r3, r3, #4
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	8a1b      	ldrh	r3, [r3, #16]
 8000a44:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da00      	bge.n	8000a4e <bmp280_get_comp_temp_32bit+0x62>
 8000a4c:	330f      	adds	r3, #15
 8000a4e:	111b      	asrs	r3, r3, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8a1b      	ldrh	r3, [r3, #16]
 8000a56:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da01      	bge.n	8000a64 <bmp280_get_comp_temp_32bit+0x78>
 8000a60:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a64:	131b      	asrs	r3, r3, #12
 8000a66:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a6e:	fb02 f303 	mul.w	r3, r2, r3
        var2 =
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da03      	bge.n	8000a7e <bmp280_get_comp_temp_32bit+0x92>
 8000a76:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	139b      	asrs	r3, r3, #14
 8000a80:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	441a      	add	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	3380      	adds	r3, #128	; 0x80
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da00      	bge.n	8000a9e <bmp280_get_comp_temp_32bit+0xb2>
 8000a9c:	33ff      	adds	r3, #255	; 0xff
 8000a9e:	121b      	asrs	r3, r3, #8
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	77fb      	strb	r3, [r7, #31]
 8000aaa:	e004      	b.n	8000ab6 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8000ab2:	23f2      	movs	r3, #242	; 0xf2
 8000ab4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8000ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00b      	beq.n	8000ae8 <null_ptr_check+0x26>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <null_ptr_check+0x26>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <null_ptr_check+0x26>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000ae8:	23ff      	movs	r3, #255	; 0xff
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e001      	b.n	8000af2 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b087      	sub	sp, #28
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000b10:	2301      	movs	r3, #1
 8000b12:	75fb      	strb	r3, [r7, #23]
 8000b14:	e016      	b.n	8000b44 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	441a      	add	r2, r3
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	3b01      	subs	r3, #1
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	440b      	add	r3, r1
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	441a      	add	r2, r3
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4619      	mov	r1, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	440b      	add	r3, r1
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	3301      	adds	r3, #1
 8000b42:	75fb      	strb	r3, [r7, #23]
 8000b44:	7dfa      	ldrb	r2, [r7, #23]
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d3e4      	bcc.n	8000b16 <interleave_data+0x14>
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	371c      	adds	r7, #28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b08a      	sub	sp, #40	; 0x28
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa3 	bl	8000ac2 <null_ptr_check>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000b82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d17f      	bne.n	8000c8a <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000b8a:	f107 010c 	add.w	r1, r7, #12
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2218      	movs	r2, #24
 8000b92:	2088      	movs	r0, #136	; 0x88
 8000b94:	f7ff fd2e 	bl	80005f4 <bmp280_get_regs>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000b9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d171      	bne.n	8000c8a <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000ba6:	7b7b      	ldrb	r3, [r7, #13]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	7b3b      	ldrb	r3, [r7, #12]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000bcc:	7c7b      	ldrb	r3, [r7, #17]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	7c3b      	ldrb	r3, [r7, #16]
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000bde:	7cfb      	ldrb	r3, [r7, #19]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	7cbb      	ldrb	r3, [r7, #18]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000bf2:	7d7b      	ldrb	r3, [r7, #21]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	7d3b      	ldrb	r3, [r7, #20]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	7dbb      	ldrb	r3, [r7, #22]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000c16:	7e7b      	ldrb	r3, [r7, #25]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7e3b      	ldrb	r3, [r7, #24]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000c28:	7efb      	ldrb	r3, [r7, #27]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7ebb      	ldrb	r3, [r7, #26]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000c3a:	7f7b      	ldrb	r3, [r7, #29]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	7f3b      	ldrb	r3, [r7, #28]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000c4c:	7ffb      	ldrb	r3, [r7, #31]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	7fbb      	ldrb	r3, [r7, #30]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000c5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000c8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000ca8:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8000cac:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff07 	bl	8000ac2 <null_ptr_check>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 8095 	bne.w	8000dec <conf_sensor+0x156>
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 8091 	beq.w	8000dec <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000cca:	f107 0114 	add.w	r1, r7, #20
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	20f4      	movs	r0, #244	; 0xf4
 8000cd4:	f7ff fc8e 	bl	80005f4 <bmp280_get_regs>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 8086 	bne.w	8000df2 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fd29 	bl	800073e <bmp280_soft_reset>
 8000cec:	4603      	mov	r3, r0
 8000cee:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d17c      	bne.n	8000df2 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000cf8:	7d3b      	ldrb	r3, [r7, #20]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	f003 031f 	and.w	r3, r3, #31
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	015b      	lsls	r3, r3, #5
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	f023 031c 	bic.w	r3, r3, #28
 8000d1a:	b25a      	sxtb	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	785b      	ldrb	r3, [r3, #1]
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	f003 031c 	and.w	r3, r3, #28
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000d32:	7d7b      	ldrb	r3, [r7, #21]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	b25a      	sxtb	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	015b      	lsls	r3, r3, #5
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000d4c:	7d7b      	ldrb	r3, [r7, #21]
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	f023 031c 	bic.w	r3, r3, #28
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	f003 031c 	and.w	r3, r3, #28
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000d6c:	7d7b      	ldrb	r3, [r7, #21]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000d8a:	f107 0114 	add.w	r1, r7, #20
 8000d8e:	f107 0010 	add.w	r0, r7, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2202      	movs	r2, #2
 8000d96:	f7ff fc64 	bl	8000662 <bmp280_set_regs>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d125      	bne.n	8000df2 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	332c      	adds	r3, #44	; 0x2c
 8000dac:	6810      	ldr	r0, [r2, #0]
 8000dae:	6018      	str	r0, [r3, #0]
 8000db0:	7912      	ldrb	r2, [r2, #4]
 8000db2:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d01b      	beq.n	8000df2 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000dba:	7d3b      	ldrb	r3, [r7, #20]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	f023 0303 	bic.w	r3, r3, #3
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000dd6:	f107 0114 	add.w	r1, r7, #20
 8000dda:	f107 0010 	add.w	r0, r7, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f7ff fc3e 	bl	8000662 <bmp280_set_regs>
 8000de6:	4603      	mov	r3, r0
 8000de8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000dea:	e002      	b.n	8000df2 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000dec:	23ff      	movs	r3, #255	; 0xff
 8000dee:	75fb      	strb	r3, [r7, #23]
 8000df0:	e000      	b.n	8000df4 <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8000df2:	bf00      	nop
    }

    return rslt;
 8000df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd03      	ble.n	8000e1c <st_check_boundaries+0x1c>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <st_check_boundaries+0x6c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	dd09      	ble.n	8000e30 <st_check_boundaries+0x30>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dd03      	ble.n	8000e2a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <st_check_boundaries+0x6c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	dd02      	ble.n	8000e30 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000e2a:	23f4      	movs	r3, #244	; 0xf4
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e015      	b.n	8000e5c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	dd03      	ble.n	8000e3e <st_check_boundaries+0x3e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <st_check_boundaries+0x6c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	dd02      	ble.n	8000e44 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000e3e:	23f6      	movs	r3, #246	; 0xf6
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e00b      	b.n	8000e5c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dd03      	ble.n	8000e52 <st_check_boundaries+0x52>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <st_check_boundaries+0x6c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	dd02      	ble.n	8000e58 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000e52:	23f5      	movs	r3, #245	; 0xf5
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e001      	b.n	8000e5c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	000fffef 	.word	0x000fffef

08000e70 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff fc85 	bl	8000788 <bmp280_init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fce3 	bl	8000854 <bmp280_get_config>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8000e92:	2300      	movs	r3, #0
 8000e94:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8000e96:	2301      	movs	r3, #1
 8000e98:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fd23 	bl	80008f4 <bmp280_set_config>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f7ff fd2c 	bl	8000912 <bmp280_set_power_mode>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]

  return rslt;
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	603a      	str	r2, [r7, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	460b      	mov	r3, r1
 8000edc:	71bb      	strb	r3, [r7, #6]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t iError = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  #ifdef DEBUG
  	  uint8_t data[BMP280_SPI_BUFFER_LEN] = {0,};
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]
  	  memcpy(data, reg_data, length);
 8000f04:	88ba      	ldrh	r2, [r7, #4]
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	6839      	ldr	r1, [r7, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 ff6d 	bl	8007dec <memcpy>
  #endif

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <bmp280_spi_reg_write+0xdc>)
 8000f16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <bmp280_spi_reg_write+0xe0>)
 8000f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	f001 fb85 	bl	8002634 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(BMP280_SPI, &reg_addr, BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000f2a:	1db9      	adds	r1, r7, #6
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	2201      	movs	r2, #1
 8000f30:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <bmp280_spi_reg_write+0xe4>)
 8000f32:	f002 ff00 	bl	8003d36 <HAL_SPI_Transmit>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  status += HAL_SPI_Transmit(BMP280_SPI,  reg_data, length,            BMP280_TIMEOUT);
 8000f3c:	88ba      	ldrh	r2, [r7, #4]
 8000f3e:	2305      	movs	r3, #5
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <bmp280_spi_reg_write+0xe4>)
 8000f44:	f002 fef7 	bl	8003d36 <HAL_SPI_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f50:	4413      	add	r3, r2
 8000f52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f5c:	e012      	b.n	8000f84 <bmp280_spi_reg_write+0xb8>
    HAL_GPIO_WritePin(BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET);
 8000f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <bmp280_spi_reg_write+0xdc>)
 8000f64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <bmp280_spi_reg_write+0xe0>)
 8000f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	f001 fb5d 	bl	8002634 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0e8      	beq.n	8000f5e <bmp280_spi_reg_write+0x92>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8000f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <bmp280_spi_reg_write+0xce>
    iError = -1;
 8000f94:	23ff      	movs	r3, #255	; 0xff
 8000f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return iError;
 8000f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	20000250 	.word	0x20000250

08000fb4 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	603a      	str	r2, [r7, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t iError = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <bmp280_spi_reg_read+0xdc>)
 8000fda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <bmp280_spi_reg_read+0xe0>)
 8000fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f001 fb23 	bl	8002634 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(BMP280_SPI, &reg_addr, BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8000fee:	1db9      	adds	r1, r7, #6
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4828      	ldr	r0, [pc, #160]	; (8001098 <bmp280_spi_reg_read+0xe4>)
 8000ff6:	f002 fe9e 	bl	8003d36 <HAL_SPI_Transmit>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  status += HAL_SPI_Receive( BMP280_SPI,  reg_data, length,            BMP280_TIMEOUT);
 8001000:	88ba      	ldrh	r2, [r7, #4]
 8001002:	2305      	movs	r3, #5
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	4824      	ldr	r0, [pc, #144]	; (8001098 <bmp280_spi_reg_read+0xe4>)
 8001008:	f003 f803 	bl	8004012 <HAL_SPI_Receive>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001014:	4413      	add	r3, r2
 8001016:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001020:	e012      	b.n	8001048 <bmp280_spi_reg_read+0x94>
    HAL_GPIO_WritePin(BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET);
 8001022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <bmp280_spi_reg_read+0xdc>)
 8001028:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800102c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <bmp280_spi_reg_read+0xe0>)
 8001032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001036:	2201      	movs	r2, #1
 8001038:	4619      	mov	r1, r3
 800103a:	f001 fafb 	bl	8002634 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800103e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001042:	3301      	adds	r3, #1
 8001044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0e8      	beq.n	8001022 <bmp280_spi_reg_read+0x6e>

  #ifdef DEBUG
  	  uint8_t data[BMP280_SPI_BUFFER_LEN] = {0,};
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
  	  memcpy(data, reg_data, length);
 8001066:	88ba      	ldrh	r2, [r7, #4]
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f006 febc 	bl	8007dec <memcpy>
  #endif

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001074:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <bmp280_spi_reg_read+0xce>
    iError = -1;
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return iError;
 8001082:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001086:	4618      	mov	r0, r3
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004
 8001098:	20000250 	.word	0x20000250

0800109c <BMP280_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP280 device structure
 *
 *  @return Temperature measurement [degC]
 */
float BMP280_ReadTemperature_degC(struct bmp280_dev *dev)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  int32_t temp_int;
  struct bmp280_uncomp_data bmp280_data;
  bmp280_get_uncomp_data(&bmp280_data, dev);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fc50 	bl	8000950 <bmp280_get_uncomp_data>
  bmp280_get_comp_temp_32bit(&temp_int,  bmp280_data.uncomp_temp,  dev);
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc97 	bl	80009ec <bmp280_get_comp_temp_32bit>
  return (float)temp_int / 100.0f;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010e0 <BMP280_ReadTemperature_degC+0x44>
 80010cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	42c80000 	.word	0x42c80000

080010e4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <MX_GPIO_Init+0x204>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a7a      	ldr	r2, [pc, #488]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b75      	ldr	r3, [pc, #468]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a74      	ldr	r2, [pc, #464]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b72      	ldr	r3, [pc, #456]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <MX_GPIO_Init+0x204>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a6e      	ldr	r2, [pc, #440]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b6c      	ldr	r3, [pc, #432]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a68      	ldr	r2, [pc, #416]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <MX_GPIO_Init+0x204>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a62      	ldr	r2, [pc, #392]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a5c      	ldr	r2, [pc, #368]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800118a:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <MX_GPIO_Init+0x204>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <MX_GPIO_Init+0x204>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4851      	ldr	r0, [pc, #324]	; (80012ec <MX_GPIO_Init+0x208>)
 80011a8:	f001 fa44 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f244 0181 	movw	r1, #16513	; 0x4081
 80011b2:	484f      	ldr	r0, [pc, #316]	; (80012f0 <MX_GPIO_Init+0x20c>)
 80011b4:	f001 fa3e 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	484d      	ldr	r0, [pc, #308]	; (80012f4 <MX_GPIO_Init+0x210>)
 80011be:	f001 fa39 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80011c2:	2310      	movs	r3, #16
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4844      	ldr	r0, [pc, #272]	; (80012ec <MX_GPIO_Init+0x208>)
 80011da:	f001 f87f 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4840      	ldr	r0, [pc, #256]	; (80012f8 <MX_GPIO_Init+0x214>)
 80011f6:	f001 f871 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011fa:	2332      	movs	r3, #50	; 0x32
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120a:	230b      	movs	r3, #11
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4838      	ldr	r0, [pc, #224]	; (80012f8 <MX_GPIO_Init+0x214>)
 8001216:	f001 f861 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800121a:	2386      	movs	r3, #134	; 0x86
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800122a:	230b      	movs	r3, #11
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4831      	ldr	r0, [pc, #196]	; (80012fc <MX_GPIO_Init+0x218>)
 8001236:	f001 f851 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800123a:	f244 0381 	movw	r3, #16513	; 0x4081
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_GPIO_Init+0x20c>)
 8001254:	f001 f842 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126a:	230b      	movs	r3, #11
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	481e      	ldr	r0, [pc, #120]	; (80012f0 <MX_GPIO_Init+0x20c>)
 8001276:	f001 f831 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_GPIO_Init+0x210>)
 8001292:	f001 f823 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <MX_GPIO_Init+0x210>)
 80012aa:	f001 f817 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c0:	230b      	movs	r3, #11
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	480a      	ldr	r0, [pc, #40]	; (80012f4 <MX_GPIO_Init+0x210>)
 80012cc:	f001 f806 	bl	80022dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2028      	movs	r0, #40	; 0x28
 80012d6:	f000 ff38 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012da:	2028      	movs	r0, #40	; 0x28
 80012dc:	f000 ff51 	bl	8002182 <HAL_NVIC_EnableIRQ>

}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020000 	.word	0x40020000

08001300 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// timers callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	; 0x38
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d126      	bne.n	800135e <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
	  char str_buffer[32];
	  char pomiar[10];

	  temp_flt = BMP280_ReadTemperature_degC(&hbmp280_1);
 8001310:	4816      	ldr	r0, [pc, #88]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001312:	f7ff fec3 	bl	800109c <BMP280_ReadTemperature_degC>
 8001316:	eef0 7a40 	vmov.f32	s15, s0
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800131c:	edc3 7a00 	vstr	s15, [r3]
	  temp = (int)temp_flt;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132a:	ee17 2a90 	vmov	r2, s15
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001330:	601a      	str	r2, [r3, #0]
	  sprintf(str_buffer, "Temperature: %2.3f\r\n", temp_flt);
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800133c:	f107 000c 	add.w	r0, r7, #12
 8001340:	ec53 2b17 	vmov	r2, r3, d7
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001346:	f007 f9a9 	bl	800869c <siprintf>
	  send_string(str_buffer);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f820 	bl	8001394 <send_string>
//	  sprintf(str_buffer, "%8d,", sample_number);
//	  sample_number = sample_number + 1;
//	  sprintf(pomiar, "%2.3f\r\n", temp_flt);
//	  strcat( str_buffer, pomiar);

	  send_string(str_buffer);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f81b 	bl	8001394 <send_string>
  }
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002b8 	.word	0x200002b8
 800136c:	20000008 	.word	0x20000008
 8001370:	20000248 	.word	0x20000248
 8001374:	2000024c 	.word	0x2000024c
 8001378:	0800aba8 	.word	0x0800aba8

0800137c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
//	char str_buffer[32];
//	sprintf(str_buffer, "Sample number (step = 1s), Temp\r\n");
//	send_string(str_buffer);
//
//	HAL_TIM_Base_Start_IT(&htim3);
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <send_string>:

void send_string(char* s)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7fe ff4f 	bl	8000240 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <send_string+0x24>)
 80013ac:	f004 fea2 	bl	80060f4 <HAL_UART_Transmit_IT>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000350 	.word	0x20000350

080013bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	uint8_t Data[5];
	sprintf(Data, "%s",Received);
 80013c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_UART_RxCpltCallback+0x6c>)
 80013ca:	4918      	ldr	r1, [pc, #96]	; (800142c <HAL_UART_RxCpltCallback+0x70>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 f965 	bl	800869c <siprintf>
	if(Data[0]=='P')
 80013d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d6:	2b50      	cmp	r3, #80	; 0x50
 80013d8:	d11d      	bne.n	8001416 <HAL_UART_RxCpltCallback+0x5a>
	{
		int value = atoi(&Data[1]);
 80013da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013de:	3301      	adds	r3, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 fcd5 	bl	8007d90 <atoi>
 80013e6:	6378      	str	r0, [r7, #52]	; 0x34
		if(value >= 0 && value <=100)
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db13      	blt.n	8001416 <HAL_UART_RxCpltCallback+0x5a>
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	2b64      	cmp	r3, #100	; 0x64
 80013f2:	dc10      	bgt.n	8001416 <HAL_UART_RxCpltCallback+0x5a>
		{
			char str_buffer[32];
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value-1);
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_UART_RxCpltCallback+0x74>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
			sprintf(str_buffer, "PWM duty set at: %4d%% \r\n", value);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001404:	490b      	ldr	r1, [pc, #44]	; (8001434 <HAL_UART_RxCpltCallback+0x78>)
 8001406:	4618      	mov	r0, r3
 8001408:	f007 f948 	bl	800869c <siprintf>
			send_string(str_buffer);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ffbf 	bl	8001394 <send_string>
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 4);
 8001416:	2204      	movs	r2, #4
 8001418:	4903      	ldr	r1, [pc, #12]	; (8001428 <HAL_UART_RxCpltCallback+0x6c>)
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <HAL_UART_RxCpltCallback+0x7c>)
 800141c:	f004 fec8 	bl	80061b0 <HAL_UART_Receive_IT>
}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000234 	.word	0x20000234
 800142c:	0800abc0 	.word	0x0800abc0
 8001430:	200002b8 	.word	0x200002b8
 8001434:	0800abc4 	.word	0x0800abc4
 8001438:	20000350 	.word	0x20000350

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f000 fd27 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f000 f834 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001448:	f7ff fe4c 	bl	80010e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800144c:	f000 fbb8 	bl	8001bc0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001450:	f000 fc4e 	bl	8001cf0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8001454:	f000 f8a4 	bl	80015a0 <MX_SPI4_Init>
  MX_TIM3_Init();
 8001458:	f000 fa78 	bl	800194c <MX_TIM3_Init>
  MX_TIM4_Init();
 800145c:	f000 fac6 	bl	80019ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <main+0x5c>)
 8001462:	f003 fc95 	bl	8004d90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <main+0x60>)
 8001468:	f003 fc92 	bl	8004d90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800146c:	2100      	movs	r1, #0
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <main+0x60>)
 8001470:	f003 fd68 	bl	8004f44 <HAL_TIM_PWM_Start>
  BMP280_Init(&hbmp280_1);
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <main+0x64>)
 8001476:	f7ff fcfb 	bl	8000e70 <BMP280_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, Received, 4);
 800147a:	2204      	movs	r2, #4
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <main+0x68>)
 800147e:	480a      	ldr	r0, [pc, #40]	; (80014a8 <main+0x6c>)
 8001480:	f004 fe96 	bl	80061b0 <HAL_UART_Receive_IT>
  temp_flt = BMP280_ReadTemperature_degC(&hbmp280_1);
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <main+0x64>)
 8001486:	f7ff fe09 	bl	800109c <BMP280_ReadTemperature_degC>
 800148a:	eef0 7a40 	vmov.f32	s15, s0
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <main+0x70>)
 8001490:	edc3 7a00 	vstr	s15, [r3]

  while (1)
 8001494:	e7fe      	b.n	8001494 <main+0x58>
 8001496:	bf00      	nop
 8001498:	200002b8 	.word	0x200002b8
 800149c:	20000304 	.word	0x20000304
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000234 	.word	0x20000234
 80014a8:	20000350 	.word	0x20000350
 80014ac:	20000248 	.word	0x20000248

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2234      	movs	r2, #52	; 0x34
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fca2 	bl	8007e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014d4:	f001 fa28 	bl	8002928 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <SystemClock_Config+0xdc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a2b      	ldr	r2, [pc, #172]	; (800158c <SystemClock_Config+0xdc>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <SystemClock_Config+0xdc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <SystemClock_Config+0xe0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <SystemClock_Config+0xe0>)
 80014fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <SystemClock_Config+0xe0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001510:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001514:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001520:	2304      	movs	r3, #4
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001528:	2302      	movs	r3, #2
 800152a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001530:	2302      	movs	r3, #2
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fa55 	bl	80029e8 <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001544:	f000 f826 	bl	8001594 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001548:	f001 f9fe 	bl	8002948 <HAL_PWREx_EnableOverDrive>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001552:	f000 f81f 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	2103      	movs	r1, #3
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fce6 	bl	8002f44 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800157e:	f000 f809 	bl	8001594 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	; 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>
	...

080015a0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_SPI4_Init+0x74>)
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <MX_SPI4_Init+0x78>)
 80015a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_SPI4_Init+0x74>)
 80015ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_SPI4_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_SPI4_Init+0x74>)
 80015ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015be:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_SPI4_Init+0x74>)
 80015c2:	2202      	movs	r2, #2
 80015c4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_SPI4_Init+0x74>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_SPI4_Init+0x74>)
 80015ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_SPI4_Init+0x74>)
 80015d6:	2218      	movs	r2, #24
 80015d8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_SPI4_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_SPI4_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_SPI4_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_SPI4_Init+0x74>)
 80015ee:	2207      	movs	r2, #7
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_SPI4_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_SPI4_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_SPI4_Init+0x74>)
 8001600:	f002 faee 	bl	8003be0 <HAL_SPI_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800160a:	f7ff ffc3 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000250 	.word	0x20000250
 8001618:	40013400 	.word	0x40013400

0800161c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_SPI_MspInit+0x8c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12f      	bne.n	800169e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_SPI_MspInit+0x90>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <HAL_SPI_MspInit+0x90>)
 8001644:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_SPI_MspInit+0x90>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_SPI_MspInit+0x90>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_SPI_MspInit+0x90>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_SPI_MspInit+0x90>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800167e:	2305      	movs	r3, #5
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <HAL_SPI_MspInit+0x94>)
 800168a:	f000 fe27 	bl	80022dc <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2054      	movs	r0, #84	; 0x54
 8001694:	f000 fd59 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001698:	2054      	movs	r0, #84	; 0x54
 800169a:	f000 fd72 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40013400 	.word	0x40013400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_MspInit+0x44>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x44>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x44>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x44>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x44>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 fbe0 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM3_IRQHandler+0x10>)
 8001756:	f003 fcef 	bl	8005138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002b8 	.word	0x200002b8

08001764 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <USART3_IRQHandler+0x10>)
 800176a:	f004 fd65 	bl	8006238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000350 	.word	0x20000350

08001778 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800177c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001780:	f000 ff72 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <SPI4_IRQHandler+0x10>)
 800178e:	f002 ff83 	bl	8004698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000250 	.word	0x20000250

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b6:	f006 faef 	bl	8007d98 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
	return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
	}

return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e009      	b.n	8001840 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf1      	blt.n	800182c <_write+0x12>
	}
	return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_close>:

int _close(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187a:	605a      	str	r2, [r3, #4]
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_isatty>:

int _isatty(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f006 fa54 	bl	8007d98 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20080000 	.word	0x20080000
 800191c:	00000400 	.word	0x00000400
 8001920:	200002b4 	.word	0x200002b4
 8001924:	200008f8 	.word	0x200008f8

08001928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_TIM3_Init+0x98>)
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <MX_TIM3_Init+0x9c>)
 800196e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001972:	f242 527f 	movw	r2, #9599	; 0x257f
 8001976:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_TIM3_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001980:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001984:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_TIM3_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001992:	4814      	ldr	r0, [pc, #80]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001994:	f003 f9a4 	bl	8004ce0 <HAL_TIM_Base_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800199e:	f7ff fdf9 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	480d      	ldr	r0, [pc, #52]	; (80019e4 <MX_TIM3_Init+0x98>)
 80019b0:	f003 fdf6 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80019ba:	f7ff fdeb 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_TIM3_Init+0x98>)
 80019cc:	f004 fa98 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80019d6:	f7ff fddd 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200002b8 	.word	0x200002b8
 80019e8:	40000400 	.word	0x40000400

080019ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	615a      	str	r2, [r3, #20]
 8001a1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a20:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <MX_TIM4_Init+0xec>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a26:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001a2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a34:	2263      	movs	r2, #99	; 0x63
 8001a36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a44:	4823      	ldr	r0, [pc, #140]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a46:	f003 f94b 	bl	8004ce0 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001a50:	f7ff fda0 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481c      	ldr	r0, [pc, #112]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a62:	f003 fd9d 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001a6c:	f7ff fd92 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a70:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a72:	f003 fa05 	bl	8004e80 <HAL_TIM_PWM_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001a7c:	f7ff fd8a 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001a90:	f004 fa36 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a9a:	f7ff fd7b 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9e:	2360      	movs	r3, #96	; 0x60
 8001aa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 90;
 8001aa2:	235a      	movs	r3, #90	; 0x5a
 8001aa4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001ab6:	f003 fc5f 	bl	8005378 <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001ac0:	f7ff fd68 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM4_Init+0xe8>)
 8001ac6:	f000 f843 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3738      	adds	r7, #56	; 0x38
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000304 	.word	0x20000304
 8001ad8:	40000800 	.word	0x40000800

08001adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_TIM_Base_MspInit+0x68>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d114      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	201d      	movs	r0, #29
 8001b0c:	f000 fb1d 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b10:	201d      	movs	r0, #29
 8001b12:	f000 fb36 	bl	8002182 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b16:	e010      	b.n	8001b3a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_TIM_Base_MspInit+0x70>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10b      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40000800 	.word	0x40000800

08001b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_TIM_MspPostInit+0x64>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d11c      	bne.n	8001bac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_TIM_MspPostInit+0x68>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_TIM_MspPostInit+0x68>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_TIM_MspPostInit+0x68>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001ba8:	f000 fb98 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40000800 	.word	0x40000800
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <MX_USART3_UART_Init+0x5c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_USART3_UART_Init+0x58>)
 8001c04:	f004 fa28 	bl	8006058 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f7ff fcc1 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000350 	.word	0x20000350
 8001c1c:	40004800 	.word	0x40004800

08001c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	; 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2290      	movs	r2, #144	; 0x90
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 f8e1 	bl	8007e08 <memset>
  if(uartHandle->Instance==USART3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_UART_MspInit+0xc4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d144      	bne.n	8001cda <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fb96 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff fc93 	bl	8001594 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <HAL_UART_MspInit+0xcc>)
 8001cc6:	f000 fb09 	bl	80022dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2027      	movs	r0, #39	; 0x27
 8001cd0:	f000 fa3b 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cd4:	2027      	movs	r0, #39	; 0x27
 8001cd6:	f000 fa54 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cda:	bf00      	nop
 8001cdc:	37b8      	adds	r7, #184	; 0xb8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40004800 	.word	0x40004800
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020c00 	.word	0x40020c00

08001cf0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cfe:	2206      	movs	r2, #6
 8001d00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d04:	2202      	movs	r2, #2
 8001d06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d34:	f000 fcb0 	bl	8002698 <HAL_PCD_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d3e:	f7ff fc29 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200003d8 	.word	0x200003d8

08001d4c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0ae      	sub	sp, #184	; 0xb8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2290      	movs	r2, #144	; 0x90
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 f84b 	bl	8007e08 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d7a:	d159      	bne.n	8001e30 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 faff 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001d98:	f7ff fbfc 	bl	8001594 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001db4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4818      	ldr	r0, [pc, #96]	; (8001e3c <HAL_PCD_MspInit+0xf0>)
 8001ddc:	f000 fa7e 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4810      	ldr	r0, [pc, #64]	; (8001e3c <HAL_PCD_MspInit+0xf0>)
 8001dfc:	f000 fa6e 	bl	80022dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e22:	6453      	str	r3, [r2, #68]	; 0x44
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_PCD_MspInit+0xec>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	37b8      	adds	r7, #184	; 0xb8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e46:	490e      	ldr	r1, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e5c:	4c0b      	ldr	r4, [pc, #44]	; (8001e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e6a:	f7ff fd5d 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f005 ff99 	bl	8007da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7ff fae3 	bl	800143c <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001e84:	0800afe4 	.word	0x0800afe4
  ldr r2, =_sbss
 8001e88:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001e8c:	200008f4 	.word	0x200008f4

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>

08001e92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e96:	2003      	movs	r0, #3
 8001e98:	f000 f94c 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 f805 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea2:	f7ff fc07 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f967 	bl	800219e <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f92f 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000003c 	.word	0x2000003c
 8001f04:	20000044 	.word	0x20000044
 8001f08:	20000040 	.word	0x20000040

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000044 	.word	0x20000044
 8001f30:	200008e0 	.word	0x200008e0

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200008e0 	.word	0x200008e0

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000044 	.word	0x20000044

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	05fa0000 	.word	0x05fa0000

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	; (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff feb6 	bl	8001f34 <HAL_GetTick>
 80021c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d008      	beq.n	80021e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e052      	b.n	800228e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0216 	bic.w	r2, r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002206:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d103      	bne.n	8002218 <HAL_DMA_Abort+0x62>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0208 	bic.w	r2, r2, #8
 8002226:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002238:	e013      	b.n	8002262 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223a:	f7ff fe7b 	bl	8001f34 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b05      	cmp	r3, #5
 8002246:	d90c      	bls.n	8002262 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e015      	b.n	800228e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e4      	bne.n	800223a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	223f      	movs	r2, #63	; 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e00c      	b.n	80022ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2205      	movs	r2, #5
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e175      	b.n	80025e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8164 	bne.w	80025e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x56>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80be 	beq.w	80025e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	4b66      	ldr	r3, [pc, #408]	; (8002600 <HAL_GPIO_Init+0x324>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a65      	ldr	r2, [pc, #404]	; (8002600 <HAL_GPIO_Init+0x324>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_GPIO_Init+0x324>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800247e:	4a61      	ldr	r2, [pc, #388]	; (8002604 <HAL_GPIO_Init+0x328>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_GPIO_Init+0x32c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d037      	beq.n	800251a <HAL_GPIO_Init+0x23e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a57      	ldr	r2, [pc, #348]	; (800260c <HAL_GPIO_Init+0x330>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d031      	beq.n	8002516 <HAL_GPIO_Init+0x23a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a56      	ldr	r2, [pc, #344]	; (8002610 <HAL_GPIO_Init+0x334>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d02b      	beq.n	8002512 <HAL_GPIO_Init+0x236>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a55      	ldr	r2, [pc, #340]	; (8002614 <HAL_GPIO_Init+0x338>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d025      	beq.n	800250e <HAL_GPIO_Init+0x232>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a54      	ldr	r2, [pc, #336]	; (8002618 <HAL_GPIO_Init+0x33c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01f      	beq.n	800250a <HAL_GPIO_Init+0x22e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a53      	ldr	r2, [pc, #332]	; (800261c <HAL_GPIO_Init+0x340>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x22a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_GPIO_Init+0x344>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x226>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <HAL_GPIO_Init+0x348>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x222>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_GPIO_Init+0x34c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x21e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_GPIO_Init+0x350>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x21a>
 80024f2:	2309      	movs	r3, #9
 80024f4:	e012      	b.n	800251c <HAL_GPIO_Init+0x240>
 80024f6:	230a      	movs	r3, #10
 80024f8:	e010      	b.n	800251c <HAL_GPIO_Init+0x240>
 80024fa:	2308      	movs	r3, #8
 80024fc:	e00e      	b.n	800251c <HAL_GPIO_Init+0x240>
 80024fe:	2307      	movs	r3, #7
 8002500:	e00c      	b.n	800251c <HAL_GPIO_Init+0x240>
 8002502:	2306      	movs	r3, #6
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x240>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x240>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x240>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x240>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x240>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x240>
 800251a:	2300      	movs	r3, #0
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800252c:	4935      	ldr	r1, [pc, #212]	; (8002604 <HAL_GPIO_Init+0x328>)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_GPIO_Init+0x354>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_GPIO_Init+0x354>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_GPIO_Init+0x354>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_GPIO_Init+0x354>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258e:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_GPIO_Init+0x354>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b2:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <HAL_GPIO_Init+0x354>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_GPIO_Init+0x354>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <HAL_GPIO_Init+0x354>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	f67f ae86 	bls.w	80022fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40013800 	.word	0x40013800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00
 8002618:	40021000 	.word	0x40021000
 800261c:	40021400 	.word	0x40021400
 8002620:	40021800 	.word	0x40021800
 8002624:	40021c00 	.word	0x40021c00
 8002628:	40022000 	.word	0x40022000
 800262c:	40022400 	.word	0x40022400
 8002630:	40013c00 	.word	0x40013c00

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	041a      	lsls	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fe78 	bl	800137c <HAL_GPIO_EXTI_Callback>
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b08f      	sub	sp, #60	; 0x3c
 800269c:	af0a      	add	r7, sp, #40	; 0x28
 800269e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e116      	b.n	80028d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fb41 	bl	8001d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 f8b5 	bl	8007858 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	687e      	ldr	r6, [r7, #4]
 80026f6:	466d      	mov	r5, sp
 80026f8:	f106 0410 	add.w	r4, r6, #16
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002708:	e885 0003 	stmia.w	r5, {r0, r1}
 800270c:	1d33      	adds	r3, r6, #4
 800270e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f005 f849 	bl	80077a8 <USB_CoreInit>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d7      	b.n	80028d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f005 f8a3 	bl	800787a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e04a      	b.n	80027d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	333d      	adds	r3, #61	; 0x3d
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	333c      	adds	r3, #60	; 0x3c
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b298      	uxth	r0, r3
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3344      	adds	r3, #68	; 0x44
 8002776:	4602      	mov	r2, r0
 8002778:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3340      	adds	r3, #64	; 0x40
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334c      	adds	r3, #76	; 0x4c
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3354      	adds	r3, #84	; 0x54
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3af      	bcc.n	800273a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e044      	b.n	800286a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	3301      	adds	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3b5      	bcc.n	80027e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	687e      	ldr	r6, [r7, #4]
 800287c:	466d      	mov	r5, sp
 800287e:	f106 0410 	add.w	r4, r6, #16
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800288e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002892:	1d33      	adds	r3, r6, #4
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f005 f83c 	bl	8007914 <USB_DevInit>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e014      	b.n	80028d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f80a 	bl	80028e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 f9fa 	bl	8007cca <USB_DevDisconnect>

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_PCDEx_ActivateLPM+0x44>)
 8002910:	4313      	orrs	r3, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	10000003 	.word	0x10000003

08002928 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000

08002948 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002976:	f7ff fadd 	bl	8001f34 <HAL_GetTick>
 800297a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800297c:	e009      	b.n	8002992 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800297e:	f7ff fad9 	bl	8001f34 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298c:	d901      	bls.n	8002992 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e022      	b.n	80029d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d1ee      	bne.n	800297e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ac:	f7ff fac2 	bl	8001f34 <HAL_GetTick>
 80029b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029b2:	e009      	b.n	80029c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029b4:	f7ff fabe 	bl	8001f34 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c2:	d901      	bls.n	80029c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e007      	b.n	80029d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029d4:	d1ee      	bne.n	80029b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e29b      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8087 	beq.w	8002b1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d00c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a18:	4b93      	ldr	r3, [pc, #588]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d112      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62>
 8002a24:	4b90      	ldr	r3, [pc, #576]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d10b      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a32:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x130>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d168      	bne.n	8002b18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e275      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x7a>
 8002a54:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a83      	ldr	r2, [pc, #524]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e02e      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x9c>
 8002a6a:	4b7f      	ldr	r3, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7e      	ldr	r2, [pc, #504]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b7c      	ldr	r3, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7b      	ldr	r2, [pc, #492]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xc0>
 8002a8e:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a75      	ldr	r2, [pc, #468]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a72      	ldr	r2, [pc, #456]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd8>
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6e      	ldr	r2, [pc, #440]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6b      	ldr	r2, [pc, #428]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fa34 	bl	8001f34 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fa30 	bl	8001f34 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e229      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe8>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff fa20 	bl	8001f34 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff fa1c 	bl	8001f34 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e215      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x110>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d069      	beq.n	8002bfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b26:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x190>
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x17a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e1e9      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	493d      	ldr	r1, [pc, #244]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e040      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a38      	ldr	r2, [pc, #224]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f9d2 	bl	8001f34 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7ff f9ce 	bl	8001f34 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1c7      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4929      	ldr	r1, [pc, #164]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
 8002bc6:	e018      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f9ae 	bl	8001f34 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7ff f9aa 	bl	8001f34 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1a3      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d038      	beq.n	8002c78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d019      	beq.n	8002c42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f98b 	bl	8001f34 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c22:	f7ff f987 	bl	8001f34 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e180      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x23a>
 8002c40:	e01a      	b.n	8002c78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_RCC_OscConfig+0x280>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7ff f971 	bl	8001f34 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c56:	f7ff f96d 	bl	8001f34 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d903      	bls.n	8002c6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e166      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
 8002c68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ee      	bne.n	8002c56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a4 	beq.w	8002dce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b89      	ldr	r3, [pc, #548]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a88      	ldr	r2, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b86      	ldr	r3, [pc, #536]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cae:	4b83      	ldr	r3, [pc, #524]	; (8002ebc <HAL_RCC_OscConfig+0x4d4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cba:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x4d4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7f      	ldr	r2, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x4d4>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f935 	bl	8001f34 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7ff f931 	bl	8001f34 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	; 0x64
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e12a      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce0:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <HAL_RCC_OscConfig+0x4d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x31a>
 8002cf4:	4b70      	ldr	r3, [pc, #448]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e02d      	b.n	8002d5e <HAL_RCC_OscConfig+0x376>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x33c>
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	e01c      	b.n	8002d5e <HAL_RCC_OscConfig+0x376>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x35e>
 8002d2c:	4b62      	ldr	r3, [pc, #392]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x376>
 8002d46:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7ff f8e5 	bl	8001f34 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7ff f8e1 	bl	8001f34 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0d8      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCC_OscConfig+0x386>
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7ff f8cf 	bl	8001f34 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7ff f8cb 	bl	8001f34 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0c2      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a3c      	ldr	r2, [pc, #240]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80ae 	beq.w	8002f34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d06d      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d14b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a31      	ldr	r2, [pc, #196]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7ff f89c 	bl	8001f34 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7ff f898 	bl	8001f34 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e091      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	3b01      	subs	r3, #1
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	071b      	lsls	r3, r3, #28
 8002e4a:	491b      	ldr	r1, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff f86a 	bl	8001f34 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7ff f866 	bl	8001f34 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e05f      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x47c>
 8002e82:	e057      	b.n	8002f34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff f850 	bl	8001f34 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7ff f84c 	bl	8001f34 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e045      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4b0>
 8002eb6:	e03d      	b.n	8002f34 <HAL_RCC_OscConfig+0x54c>
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCC_OscConfig+0x558>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d030      	beq.n	8002f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d129      	bne.n	8002f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d122      	bne.n	8002f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d119      	bne.n	8002f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10f      	bne.n	8002f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0d0      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	4965      	ldr	r1, [pc, #404]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d040      	beq.n	8003068 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e073      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3d      	ldr	r3, [pc, #244]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06b      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4936      	ldr	r1, [pc, #216]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe ff7c 	bl	8001f34 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7fe ff78 	bl	8001f34 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e053      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	4922      	ldr	r1, [pc, #136]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1cc>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1d0>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1d4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fed8 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	0800abe0 	.word	0x0800abe0
 8003114:	2000003c 	.word	0x2000003c
 8003118:	20000040 	.word	0x20000040

0800311c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b094      	sub	sp, #80	; 0x50
 8003122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	647b      	str	r3, [r7, #68]	; 0x44
 8003128:	2300      	movs	r3, #0
 800312a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800312c:	2300      	movs	r3, #0
 800312e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003134:	4b79      	ldr	r3, [pc, #484]	; (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d00d      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x40>
 8003140:	2b08      	cmp	r3, #8
 8003142:	f200 80e1 	bhi.w	8003308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x34>
 800314a:	2b04      	cmp	r3, #4
 800314c:	d003      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x3a>
 800314e:	e0db      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b73      	ldr	r3, [pc, #460]	; (8003320 <HAL_RCC_GetSysClockFreq+0x204>)
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003154:	e0db      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003156:	4b73      	ldr	r3, [pc, #460]	; (8003324 <HAL_RCC_GetSysClockFreq+0x208>)
 8003158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315a:	e0d8      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315c:	4b6f      	ldr	r3, [pc, #444]	; (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	2200      	movs	r2, #0
 800317a:	63bb      	str	r3, [r7, #56]	; 0x38
 800317c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
 8003186:	2300      	movs	r3, #0
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
 800318a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800318e:	4622      	mov	r2, r4
 8003190:	462b      	mov	r3, r5
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a0:	0150      	lsls	r0, r2, #5
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4621      	mov	r1, r4
 80031a8:	1a51      	subs	r1, r2, r1
 80031aa:	6139      	str	r1, [r7, #16]
 80031ac:	4629      	mov	r1, r5
 80031ae:	eb63 0301 	sbc.w	r3, r3, r1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c0:	4659      	mov	r1, fp
 80031c2:	018b      	lsls	r3, r1, #6
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ca:	4651      	mov	r1, sl
 80031cc:	018a      	lsls	r2, r1, #6
 80031ce:	4651      	mov	r1, sl
 80031d0:	ebb2 0801 	subs.w	r8, r2, r1
 80031d4:	4659      	mov	r1, fp
 80031d6:	eb63 0901 	sbc.w	r9, r3, r1
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ee:	4690      	mov	r8, r2
 80031f0:	4699      	mov	r9, r3
 80031f2:	4623      	mov	r3, r4
 80031f4:	eb18 0303 	adds.w	r3, r8, r3
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	462b      	mov	r3, r5
 80031fc:	eb49 0303 	adc.w	r3, r9, r3
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800320e:	4629      	mov	r1, r5
 8003210:	024b      	lsls	r3, r1, #9
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003218:	4621      	mov	r1, r4
 800321a:	024a      	lsls	r2, r1, #9
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
 8003226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800322c:	f7fd f860 	bl	80002f0 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003238:	e058      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323a:	4b38      	ldr	r3, [pc, #224]	; (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	2200      	movs	r2, #0
 8003242:	4618      	mov	r0, r3
 8003244:	4611      	mov	r1, r2
 8003246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	f04f 0000 	mov.w	r0, #0
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	0159      	lsls	r1, r3, #5
 8003262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003266:	0150      	lsls	r0, r2, #5
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4641      	mov	r1, r8
 800326e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb63 0b01 	sbc.w	fp, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800328c:	ebb2 040a 	subs.w	r4, r2, sl
 8003290:	eb63 050b 	sbc.w	r5, r3, fp
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4643      	mov	r3, r8
 80032aa:	18e3      	adds	r3, r4, r3
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	464b      	mov	r3, r9
 80032b0:	eb45 0303 	adc.w	r3, r5, r3
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c2:	4629      	mov	r1, r5
 80032c4:	028b      	lsls	r3, r1, #10
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032cc:	4621      	mov	r1, r4
 80032ce:	028a      	lsls	r2, r1, #10
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d6:	2200      	movs	r2, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	61fa      	str	r2, [r7, #28]
 80032dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e0:	f7fd f806 	bl	80002f0 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4613      	mov	r3, r2
 80032ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	3301      	adds	r3, #1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003306:	e002      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_GetSysClockFreq+0x204>)
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003310:	4618      	mov	r0, r3
 8003312:	3750      	adds	r7, #80	; 0x50
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	00f42400 	.word	0x00f42400
 8003324:	007a1200 	.word	0x007a1200

08003328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCC_GetHCLKFreq+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	2000003c 	.word	0x2000003c

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003344:	f7ff fff0 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	0800abf0 	.word	0x0800abf0

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800336c:	f7ff ffdc 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0b5b      	lsrs	r3, r3, #13
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	0800abf0 	.word	0x0800abf0

08003390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033b8:	4b69      	ldr	r3, [pc, #420]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033c2:	6093      	str	r3, [r2, #8]
 80033c4:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	4964      	ldr	r1, [pc, #400]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d017      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ea:	4b5d      	ldr	r3, [pc, #372]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	4959      	ldr	r1, [pc, #356]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003408:	d101      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d017      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003426:	4b4e      	ldr	r3, [pc, #312]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	494a      	ldr	r1, [pc, #296]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003444:	d101      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 808b 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	4a39      	ldr	r2, [pc, #228]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	6413      	str	r3, [r2, #64]	; 0x40
 8003480:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a34      	ldr	r2, [pc, #208]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003498:	f7fe fd4c 	bl	8001f34 <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a0:	f7fe fd48 	bl	8001f34 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e38f      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d035      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d02e      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034dc:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034fe:	4a18      	ldr	r2, [pc, #96]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d114      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fd10 	bl	8001f34 <HAL_GetTick>
 8003514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	e00a      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fd0c 	bl	8001f34 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e351      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0ee      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003546:	d111      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003556:	400b      	ands	r3, r1
 8003558:	4901      	ldr	r1, [pc, #4]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
 800355e:	e00b      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000
 8003568:	0ffffcff 	.word	0x0ffffcff
 800356c:	4bac      	ldr	r3, [pc, #688]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4aab      	ldr	r2, [pc, #684]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003576:	6093      	str	r3, [r2, #8]
 8003578:	4ba9      	ldr	r3, [pc, #676]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	49a6      	ldr	r1, [pc, #664]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	4313      	orrs	r3, r2
 8003588:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d010      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003596:	4ba2      	ldr	r3, [pc, #648]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359c:	4aa0      	ldr	r2, [pc, #640]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035a6:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	499b      	ldr	r1, [pc, #620]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c4:	4b96      	ldr	r3, [pc, #600]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d2:	4993      	ldr	r1, [pc, #588]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e6:	4b8e      	ldr	r3, [pc, #568]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f4:	498a      	ldr	r1, [pc, #552]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003608:	4b85      	ldr	r3, [pc, #532]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003616:	4982      	ldr	r1, [pc, #520]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800362a:	4b7d      	ldr	r3, [pc, #500]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4979      	ldr	r1, [pc, #484]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364c:	4b74      	ldr	r3, [pc, #464]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	4971      	ldr	r1, [pc, #452]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800366e:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f023 020c 	bic.w	r2, r3, #12
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	4968      	ldr	r1, [pc, #416]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003690:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	4960      	ldr	r1, [pc, #384]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c0:	4957      	ldr	r1, [pc, #348]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	494f      	ldr	r1, [pc, #316]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036f6:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	4946      	ldr	r1, [pc, #280]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003718:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	493e      	ldr	r1, [pc, #248]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800373a:	4b39      	ldr	r3, [pc, #228]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	4935      	ldr	r1, [pc, #212]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376a:	492d      	ldr	r1, [pc, #180]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d011      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800378c:	4924      	ldr	r1, [pc, #144]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379c:	d101      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037cc:	4914      	ldr	r1, [pc, #80]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f0:	490b      	ldr	r1, [pc, #44]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00f      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003814:	4902      	ldr	r1, [pc, #8]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003830:	4b8a      	ldr	r3, [pc, #552]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003836:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	4986      	ldr	r1, [pc, #536]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003854:	4b81      	ldr	r3, [pc, #516]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800385a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003864:	497d      	ldr	r1, [pc, #500]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d006      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80d6 	beq.w	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003880:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a75      	ldr	r2, [pc, #468]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800388a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fe fb52 	bl	8001f34 <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003894:	f7fe fb4e 	bl	8001f34 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e195      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d021      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038da:	0e1b      	lsrs	r3, r3, #24
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	019a      	lsls	r2, r3, #6
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	071b      	lsls	r3, r3, #28
 80038fa:	4958      	ldr	r1, [pc, #352]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02e      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392c:	d129      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800392e:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	0f1b      	lsrs	r3, r3, #28
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	019a      	lsls	r2, r3, #6
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	493e      	ldr	r1, [pc, #248]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003970:	f023 021f 	bic.w	r2, r3, #31
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	3b01      	subs	r3, #1
 800397a:	4938      	ldr	r1, [pc, #224]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01d      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800398e:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800399c:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a2:	0f1b      	lsrs	r3, r3, #28
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	4926      	ldr	r1, [pc, #152]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	019a      	lsls	r2, r3, #6
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	071b      	lsls	r3, r3, #28
 80039f2:	491a      	ldr	r1, [pc, #104]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a06:	f7fe fa95 	bl	8001f34 <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a0e:	f7fe fa91 	bl	8001f34 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0d8      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 80ce 	bne.w	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fe fa78 	bl	8001f34 <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a46:	e00b      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a48:	f7fe fa74 	bl	8001f34 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d904      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0bb      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a60:	4b5e      	ldr	r3, [pc, #376]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d0ec      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02e      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d12a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a96:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	0f1b      	lsrs	r3, r3, #28
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	019a      	lsls	r2, r3, #6
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	4944      	ldr	r1, [pc, #272]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ad2:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	493d      	ldr	r1, [pc, #244]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d022      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b00:	d11d      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	0e1b      	lsrs	r3, r3, #24
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	0f1b      	lsrs	r3, r3, #28
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	4929      	ldr	r1, [pc, #164]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d028      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	0e1b      	lsrs	r3, r3, #24
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b58:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	019a      	lsls	r2, r3, #6
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	431a      	orrs	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	4917      	ldr	r1, [pc, #92]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4911      	ldr	r1, [pc, #68]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fe f9c4 	bl	8001f34 <HAL_GetTick>
 8003bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb0:	f7fe f9c0 	bl	8001f34 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e007      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bce:	d1ef      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e09d      	b.n	8003d2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d009      	beq.n	8003c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
 8003c0a:	e005      	b.n	8003c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fcf2 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c58:	d902      	bls.n	8003c60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c6e:	d007      	beq.n	8003c80 <HAL_SPI_Init+0xa0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	ea42 0103 	orr.w	r1, r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	f003 0204 	and.w	r2, r3, #4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cfc:	ea42 0103 	orr.w	r1, r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b088      	sub	sp, #32
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_SPI_Transmit+0x22>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e158      	b.n	800400a <HAL_SPI_Transmit+0x2d4>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d60:	f7fe f8e8 	bl	8001f34 <HAL_GetTick>
 8003d64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7a:	e13d      	b.n	8003ff8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Transmit+0x52>
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d8c:	e134      	b.n	8003ff8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2203      	movs	r2, #3
 8003d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	d10f      	bne.n	8003dfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d007      	beq.n	8003e18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e20:	d94b      	bls.n	8003eba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Transmit+0xfa>
 8003e2a:	8afb      	ldrh	r3, [r7, #22]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d13e      	bne.n	8003eae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	881a      	ldrh	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	1c9a      	adds	r2, r3, #2
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e54:	e02b      	b.n	8003eae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d112      	bne.n	8003e8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e88:	e011      	b.n	8003eae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fe f853 	bl	8001f34 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Transmit+0x16c>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Transmit+0x172>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eac:	e0a4      	b.n	8003ff8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ce      	bne.n	8003e56 <HAL_SPI_Transmit+0x120>
 8003eb8:	e07c      	b.n	8003fb4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Transmit+0x192>
 8003ec2:	8afb      	ldrh	r3, [r7, #22]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d170      	bne.n	8003faa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d912      	bls.n	8003ef8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	881a      	ldrh	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	1c9a      	adds	r2, r3, #2
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b02      	subs	r3, #2
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef6:	e058      	b.n	8003faa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f1e:	e044      	b.n	8003faa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d12b      	bne.n	8003f86 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d912      	bls.n	8003f5e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	1c9a      	adds	r2, r3, #2
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b02      	subs	r3, #2
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f5c:	e025      	b.n	8003faa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f84:	e011      	b.n	8003faa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f86:	f7fd ffd5 	bl	8001f34 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d803      	bhi.n	8003f9e <HAL_SPI_Transmit+0x268>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d102      	bne.n	8003fa4 <HAL_SPI_Transmit+0x26e>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fa8:	e026      	b.n	8003ff8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1b5      	bne.n	8003f20 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fe27 	bl	8004c0c <SPI_EndRxTxTransaction>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e000      	b.n	8003ff8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ff6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004008:	7ffb      	ldrb	r3, [r7, #31]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af02      	add	r7, sp, #8
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d112      	bne.n	8004056 <HAL_SPI_Receive+0x44>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10e      	bne.n	8004056 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2204      	movs	r2, #4
 800403c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f910 	bl	8004272 <HAL_SPI_TransmitReceive>
 8004052:	4603      	mov	r3, r0
 8004054:	e109      	b.n	800426a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_SPI_Receive+0x52>
 8004060:	2302      	movs	r3, #2
 8004062:	e102      	b.n	800426a <HAL_SPI_Receive+0x258>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406c:	f7fd ff62 	bl	8001f34 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800407e:	2302      	movs	r3, #2
 8004080:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004082:	e0e9      	b.n	8004258 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Receive+0x7e>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004094:	e0e0      	b.n	8004258 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2204      	movs	r2, #4
 800409a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e0:	d908      	bls.n	80040f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	e007      	b.n	8004104 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410c:	d10f      	bne.n	800412e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800412c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d007      	beq.n	800414c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004154:	d867      	bhi.n	8004226 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004156:	e030      	b.n	80041ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d117      	bne.n	8004196 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f103 020c 	add.w	r2, r3, #12
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	7812      	ldrb	r2, [r2, #0]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004194:	e011      	b.n	80041ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004196:	f7fd fecd 	bl	8001f34 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d803      	bhi.n	80041ae <HAL_SPI_Receive+0x19c>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Receive+0x1a2>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041b8:	e04e      	b.n	8004258 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1c8      	bne.n	8004158 <HAL_SPI_Receive+0x146>
 80041c6:	e034      	b.n	8004232 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d115      	bne.n	8004202 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	b292      	uxth	r2, r2
 80041e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004200:	e011      	b.n	8004226 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004202:	f7fd fe97 	bl	8001f34 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d803      	bhi.n	800421a <HAL_SPI_Receive+0x208>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d102      	bne.n	8004220 <HAL_SPI_Receive+0x20e>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004224:	e018      	b.n	8004258 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ca      	bne.n	80041c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fc6c 	bl	8004b14 <SPI_EndRxTransaction>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
 8004254:	e000      	b.n	8004258 <HAL_SPI_Receive+0x246>
  }

error :
 8004256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b08a      	sub	sp, #40	; 0x28
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004280:	2301      	movs	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x26>
 8004294:	2302      	movs	r3, #2
 8004296:	e1fb      	b.n	8004690 <HAL_SPI_TransmitReceive+0x41e>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a0:	f7fd fe48 	bl	8001f34 <HAL_GetTick>
 80042a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042b4:	887b      	ldrh	r3, [r7, #2]
 80042b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042bc:	7efb      	ldrb	r3, [r7, #27]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d00e      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x6e>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c8:	d106      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x66>
 80042d2:	7efb      	ldrb	r3, [r7, #27]
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d003      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042de:	e1cd      	b.n	800467c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_SPI_TransmitReceive+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_TransmitReceive+0x80>
 80042ec:	887b      	ldrh	r3, [r7, #2]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042f8:	e1c0      	b.n	800467c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b04      	cmp	r3, #4
 8004304:	d003      	beq.n	800430e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2205      	movs	r2, #5
 800430a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	887a      	ldrh	r2, [r7, #2]
 800431e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	887a      	ldrh	r2, [r7, #2]
 8004326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	887a      	ldrh	r2, [r7, #2]
 800433a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004350:	d802      	bhi.n	8004358 <HAL_SPI_TransmitReceive+0xe6>
 8004352:	8a3b      	ldrh	r3, [r7, #16]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d908      	bls.n	800436a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	e007      	b.n	800437a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d007      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a0:	d97c      	bls.n	800449c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x13e>
 80043aa:	8a7b      	ldrh	r3, [r7, #18]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d169      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	1c9a      	adds	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d4:	e056      	b.n	8004484 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d11b      	bne.n	800441c <HAL_SPI_TransmitReceive+0x1aa>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_SPI_TransmitReceive+0x1aa>
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d113      	bne.n	800441c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d11c      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x1f2>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	b292      	uxth	r2, r2
 8004442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004460:	2301      	movs	r3, #1
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004464:	f7fd fd66 	bl	8001f34 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004470:	429a      	cmp	r2, r3
 8004472:	d807      	bhi.n	8004484 <HAL_SPI_TransmitReceive+0x212>
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d003      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004482:	e0fb      	b.n	800467c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1a3      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x164>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d19d      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x164>
 800449a:	e0df      	b.n	800465c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x23a>
 80044a4:	8a7b      	ldrh	r3, [r7, #18]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f040 80cb 	bne.w	8004642 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d912      	bls.n	80044dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b02      	subs	r3, #2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044da:	e0b2      	b.n	8004642 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004502:	e09e      	b.n	8004642 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d134      	bne.n	800457c <HAL_SPI_TransmitReceive+0x30a>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02f      	beq.n	800457c <HAL_SPI_TransmitReceive+0x30a>
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	2b01      	cmp	r3, #1
 8004520:	d12c      	bne.n	800457c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d912      	bls.n	8004552 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b02      	subs	r3, #2
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004550:	e012      	b.n	8004578 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d148      	bne.n	800461c <HAL_SPI_TransmitReceive+0x3aa>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d042      	beq.n	800461c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d923      	bls.n	80045ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	b292      	uxth	r2, r2
 80045ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	1c9a      	adds	r2, r3, #2
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b02      	subs	r3, #2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d81f      	bhi.n	8004618 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	e016      	b.n	8004618 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f103 020c 	add.w	r2, r3, #12
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004618:	2301      	movs	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800461c:	f7fd fc8a 	bl	8001f34 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004628:	429a      	cmp	r2, r3
 800462a:	d803      	bhi.n	8004634 <HAL_SPI_TransmitReceive+0x3c2>
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d102      	bne.n	800463a <HAL_SPI_TransmitReceive+0x3c8>
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004640:	e01c      	b.n	800467c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f af5b 	bne.w	8004504 <HAL_SPI_TransmitReceive+0x292>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	f47f af54 	bne.w	8004504 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fad3 	bl	8004c0c <SPI_EndRxTxTransaction>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d006      	beq.n	800467a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	661a      	str	r2, [r3, #96]	; 0x60
 8004678:	e000      	b.n	800467c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800467a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800468c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004690:	4618      	mov	r0, r3
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
    return;
 80046da:	e0d7      	b.n	800488c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_SPI_IRQHandler+0x66>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	09db      	lsrs	r3, r3, #7
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
    return;
 80046fc:	e0c6      	b.n	800488c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10c      	bne.n	8004724 <HAL_SPI_IRQHandler+0x8c>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80b4 	beq.w	800488c <HAL_SPI_IRQHandler+0x1f4>
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80ad 	beq.w	800488c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d023      	beq.n	8004786 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d011      	beq.n	800476e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474e:	f043 0204 	orr.w	r2, r3, #4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	e00b      	b.n	8004786 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
        return;
 8004784:	e082      	b.n	800488c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d014      	beq.n	80047bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	f043 0208 	orr.w	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04f      	beq.n	800488a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_SPI_IRQHandler+0x17e>
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d034      	beq.n	8004880 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0203 	bic.w	r2, r2, #3
 8004824:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	2b00      	cmp	r3, #0
 800482c:	d011      	beq.n	8004852 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_SPI_IRQHandler+0x1fc>)
 8004834:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fd2b 	bl	8002296 <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <HAL_SPI_IRQHandler+0x1fc>)
 8004860:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fd15 	bl	8002296 <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800487e:	e003      	b.n	8004888 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f809 	bl	8004898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004886:	e000      	b.n	800488a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004888:	bf00      	nop
    return;
 800488a:	bf00      	nop
  }
}
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	080048ad 	.word	0x080048ad

08004898 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff ffe5 	bl	8004898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048e8:	f7fd fb24 	bl	8001f34 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048f8:	f7fd fb1c 	bl	8001f34 <HAL_GetTick>
 80048fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048fe:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	015b      	lsls	r3, r3, #5
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	e054      	b.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d050      	beq.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004918:	f7fd fb0c 	bl	8001f34 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	d902      	bls.n	800492e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d13d      	bne.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800493c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d111      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d004      	beq.n	800495c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d107      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004974:	d10f      	bne.n	8004996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e017      	b.n	80049da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d19b      	bne.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000003c 	.word	0x2000003c

080049e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049fa:	f7fd fa9b 	bl	8001f34 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a0a:	f7fd fa93 	bl	8001f34 <HAL_GetTick>
 8004a0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	0d1b      	lsrs	r3, r3, #20
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a30:	e060      	b.n	8004af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a38:	d107      	bne.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d050      	beq.n	8004af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a52:	f7fd fa6f 	bl	8001f34 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d902      	bls.n	8004a68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13d      	bne.n	8004ae4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a80:	d111      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d004      	beq.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d107      	bne.n	8004aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aae:	d10f      	bne.n	8004ad0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ace:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d196      	bne.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000003c 	.word	0x2000003c

08004b14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b28:	d111      	bne.n	8004b4e <SPI_EndRxTransaction+0x3a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	d004      	beq.n	8004b3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3c:	d107      	bne.n	8004b4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d112      	bne.n	8004b7e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff feb8 	bl	80048d8 <SPI_WaitFlagStateUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d021      	beq.n	8004bb2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e03d      	b.n	8004bfa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <SPI_EndRxTransaction+0xf0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <SPI_EndRxTransaction+0xf4>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	0d5b      	lsrs	r3, r3, #21
 8004b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d0f2      	beq.n	8004b94 <SPI_EndRxTransaction+0x80>
 8004bae:	e000      	b.n	8004bb2 <SPI_EndRxTransaction+0x9e>
        break;
 8004bb0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bba:	d11d      	bne.n	8004bf8 <SPI_EndRxTransaction+0xe4>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc4:	d004      	beq.n	8004bd0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	d113      	bne.n	8004bf8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff ff03 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bec:	f043 0220 	orr.w	r2, r3, #32
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e000      	b.n	8004bfa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	2000003c 	.word	0x2000003c
 8004c08:	165e9f81 	.word	0x165e9f81

08004c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff fedf 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e046      	b.n	8004cce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <SPI_EndRxTxTransaction+0xcc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <SPI_EndRxTxTransaction+0xd0>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	0d5b      	lsrs	r3, r3, #21
 8004c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5e:	d112      	bne.n	8004c86 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff fe34 	bl	80048d8 <SPI_WaitFlagStateUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e023      	b.n	8004cce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d0f2      	beq.n	8004c86 <SPI_EndRxTxTransaction+0x7a>
 8004ca0:	e000      	b.n	8004ca4 <SPI_EndRxTxTransaction+0x98>
        break;
 8004ca2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fe99 	bl	80049e8 <SPI_WaitFifoStateUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e000      	b.n	8004cce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2000003c 	.word	0x2000003c
 8004cdc:	165e9f81 	.word	0x165e9f81

08004ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e049      	b.n	8004d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fee8 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 fd30 	bl	8005784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e054      	b.n	8004e52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a26      	ldr	r2, [pc, #152]	; (8004e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d022      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd2:	d01d      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d018      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a21      	ldr	r2, [pc, #132]	; (8004e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_TIM_Base_Start_IT+0xe0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x80>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d115      	bne.n	8004e3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_TIM_Base_Start_IT+0xec>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	d015      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0xbe>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d011      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3a:	e008      	b.n	8004e4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e000      	b.n	8004e50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40010400 	.word	0x40010400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40001800 	.word	0x40001800
 8004e7c:	00010007 	.word	0x00010007

08004e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e049      	b.n	8004f26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f841 	bl	8004f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f000 fc60 	bl	8005784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_TIM_PWM_Start+0x24>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e03c      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x9e>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d109      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x3e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e02f      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x9e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d109      	bne.n	8004f9c <HAL_TIM_PWM_Start+0x58>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e022      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x9e>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b0c      	cmp	r3, #12
 8004fa0:	d109      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x72>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	bf14      	ite	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	2300      	moveq	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	e015      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x9e>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d109      	bne.n	8004fd0 <HAL_TIM_PWM_Start+0x8c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	e008      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x9e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e092      	b.n	8005110 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0xb6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff8:	e023      	b.n	8005042 <HAL_TIM_PWM_Start+0xfe>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xc6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	e01b      	b.n	8005042 <HAL_TIM_PWM_Start+0xfe>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0xd6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	e013      	b.n	8005042 <HAL_TIM_PWM_Start+0xfe>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0xe6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005028:	e00b      	b.n	8005042 <HAL_TIM_PWM_Start+0xfe>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b10      	cmp	r3, #16
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0xf6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	e003      	b.n	8005042 <HAL_TIM_PWM_Start+0xfe>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2201      	movs	r2, #1
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 ff32 	bl	8005eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	; (8005118 <HAL_TIM_PWM_Start+0x1d4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIM_PWM_Start+0x120>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2f      	ldr	r2, [pc, #188]	; (800511c <HAL_TIM_PWM_Start+0x1d8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <HAL_TIM_PWM_Start+0x124>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_TIM_PWM_Start+0x126>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_TIM_PWM_Start+0x1d4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d022      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d01d      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a22      	ldr	r2, [pc, #136]	; (8005120 <HAL_TIM_PWM_Start+0x1dc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d018      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a20      	ldr	r2, [pc, #128]	; (8005124 <HAL_TIM_PWM_Start+0x1e0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_TIM_PWM_Start+0x1e4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_TIM_PWM_Start+0x1d8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1b      	ldr	r2, [pc, #108]	; (800512c <HAL_TIM_PWM_Start+0x1e8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIM_PWM_Start+0x18a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_TIM_PWM_Start+0x1ec>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d115      	bne.n	80050fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <HAL_TIM_PWM_Start+0x1f0>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d015      	beq.n	800510c <HAL_TIM_PWM_Start+0x1c8>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d011      	beq.n	800510c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	e008      	b.n	800510c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40014000 	.word	0x40014000
 8005130:	40001800 	.word	0x40001800
 8005134:	00010007 	.word	0x00010007

08005138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0202 	mvn.w	r2, #2
 8005164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fae4 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fad6 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fae7 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0204 	mvn.w	r2, #4
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 faba 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 faac 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fabd 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0208 	mvn.w	r2, #8
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa90 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fa82 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa93 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b10      	cmp	r3, #16
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0210 	mvn.w	r2, #16
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2208      	movs	r2, #8
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa66 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa58 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fa69 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10e      	bne.n	80052bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0201 	mvn.w	r2, #1
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc f822 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b80      	cmp	r3, #128	; 0x80
 80052c8:	d10e      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fea4 	bl	8006030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f6:	d10e      	bne.n	8005316 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d107      	bne.n	8005316 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800530e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fe97 	bl	8006044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d10e      	bne.n	8005342 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b40      	cmp	r3, #64	; 0x40
 8005330:	d107      	bne.n	8005342 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800533a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa17 	bl	8005770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b20      	cmp	r3, #32
 800534e:	d10e      	bne.n	800536e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b20      	cmp	r3, #32
 800535c:	d107      	bne.n	800536e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0220 	mvn.w	r2, #32
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fe57 	bl	800601c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005392:	2302      	movs	r3, #2
 8005394:	e0ff      	b.n	8005596 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b14      	cmp	r3, #20
 80053a2:	f200 80f0 	bhi.w	8005586 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	08005401 	.word	0x08005401
 80053b0:	08005587 	.word	0x08005587
 80053b4:	08005587 	.word	0x08005587
 80053b8:	08005587 	.word	0x08005587
 80053bc:	08005441 	.word	0x08005441
 80053c0:	08005587 	.word	0x08005587
 80053c4:	08005587 	.word	0x08005587
 80053c8:	08005587 	.word	0x08005587
 80053cc:	08005483 	.word	0x08005483
 80053d0:	08005587 	.word	0x08005587
 80053d4:	08005587 	.word	0x08005587
 80053d8:	08005587 	.word	0x08005587
 80053dc:	080054c3 	.word	0x080054c3
 80053e0:	08005587 	.word	0x08005587
 80053e4:	08005587 	.word	0x08005587
 80053e8:	08005587 	.word	0x08005587
 80053ec:	08005505 	.word	0x08005505
 80053f0:	08005587 	.word	0x08005587
 80053f4:	08005587 	.word	0x08005587
 80053f8:	08005587 	.word	0x08005587
 80053fc:	08005545 	.word	0x08005545
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fa5c 	bl	80058c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0204 	bic.w	r2, r2, #4
 800542a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	619a      	str	r2, [r3, #24]
      break;
 800543e:	e0a5      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 faae 	bl	80059a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6999      	ldr	r1, [r3, #24]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	619a      	str	r2, [r3, #24]
      break;
 8005480:	e084      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fb05 	bl	8005a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0208 	orr.w	r2, r2, #8
 800549c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0204 	bic.w	r2, r2, #4
 80054ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69d9      	ldr	r1, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	61da      	str	r2, [r3, #28]
      break;
 80054c0:	e064      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fb5b 	bl	8005b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	021a      	lsls	r2, r3, #8
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	61da      	str	r2, [r3, #28]
      break;
 8005502:	e043      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb92 	bl	8005c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0204 	bic.w	r2, r2, #4
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005542:	e023      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fbc4 	bl	8005cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005584:	e002      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]
      break;
 800558a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop

080055a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIM_ConfigClockSource+0x1c>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0b4      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x186>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	4b56      	ldr	r3, [pc, #344]	; (8005730 <HAL_TIM_ConfigClockSource+0x190>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f4:	d03e      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0xd4>
 80055f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fa:	f200 8087 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x16c>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	f000 8086 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x172>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d87f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d01a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xa6>
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d87b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d050      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x11a>
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d877      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800561c:	2b50      	cmp	r3, #80	; 0x50
 800561e:	d03c      	beq.n	800569a <HAL_TIM_ConfigClockSource+0xfa>
 8005620:	2b50      	cmp	r3, #80	; 0x50
 8005622:	d873      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d058      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x13a>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d86f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d064      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d86b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d060      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005638:	2b20      	cmp	r3, #32
 800563a:	d867      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	2b10      	cmp	r3, #16
 8005642:	d05a      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x15a>
 8005644:	e062      	b.n	800570c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6899      	ldr	r1, [r3, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f000 fc0d 	bl	8005e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	609a      	str	r2, [r3, #8]
      break;
 8005672:	e04f      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f000 fbf6 	bl	8005e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005696:	609a      	str	r2, [r3, #8]
      break;
 8005698:	e03c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fb6a 	bl	8005d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2150      	movs	r1, #80	; 0x50
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fbc3 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 80056b8:	e02c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fb89 	bl	8005dde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2160      	movs	r1, #96	; 0x60
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fbb3 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 80056d8:	e01c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fb4a 	bl	8005d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2140      	movs	r1, #64	; 0x40
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fba3 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 80056f8:	e00c      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f000 fb9a 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 800570a:	e003      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	e000      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	fffeff88 	.word	0xfffeff88

08005734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a40      	ldr	r2, [pc, #256]	; (8005898 <TIM_Base_SetConfig+0x114>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <TIM_Base_SetConfig+0x40>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a2:	d00f      	beq.n	80057c4 <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a3d      	ldr	r2, [pc, #244]	; (800589c <TIM_Base_SetConfig+0x118>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a3c      	ldr	r2, [pc, #240]	; (80058a0 <TIM_Base_SetConfig+0x11c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a3b      	ldr	r2, [pc, #236]	; (80058a4 <TIM_Base_SetConfig+0x120>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3a      	ldr	r2, [pc, #232]	; (80058a8 <TIM_Base_SetConfig+0x124>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2f      	ldr	r2, [pc, #188]	; (8005898 <TIM_Base_SetConfig+0x114>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d02b      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e4:	d027      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a2c      	ldr	r2, [pc, #176]	; (800589c <TIM_Base_SetConfig+0x118>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d023      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2b      	ldr	r2, [pc, #172]	; (80058a0 <TIM_Base_SetConfig+0x11c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01f      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2a      	ldr	r2, [pc, #168]	; (80058a4 <TIM_Base_SetConfig+0x120>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01b      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a29      	ldr	r2, [pc, #164]	; (80058a8 <TIM_Base_SetConfig+0x124>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d017      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a28      	ldr	r2, [pc, #160]	; (80058ac <TIM_Base_SetConfig+0x128>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <TIM_Base_SetConfig+0x12c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00f      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a26      	ldr	r2, [pc, #152]	; (80058b4 <TIM_Base_SetConfig+0x130>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a25      	ldr	r2, [pc, #148]	; (80058b8 <TIM_Base_SetConfig+0x134>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a24      	ldr	r2, [pc, #144]	; (80058bc <TIM_Base_SetConfig+0x138>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a23      	ldr	r2, [pc, #140]	; (80058c0 <TIM_Base_SetConfig+0x13c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <TIM_Base_SetConfig+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_Base_SetConfig+0xf8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <TIM_Base_SetConfig+0x124>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d103      	bne.n	8005884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	615a      	str	r2, [r3, #20]
}
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800
 80058b8:	40001800 	.word	0x40001800
 80058bc:	40001c00 	.word	0x40001c00
 80058c0:	40002000 	.word	0x40002000

080058c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4b2b      	ldr	r3, [pc, #172]	; (800599c <TIM_OC1_SetConfig+0xd8>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0302 	bic.w	r3, r3, #2
 800590c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <TIM_OC1_SetConfig+0xdc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC1_SetConfig+0x64>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <TIM_OC1_SetConfig+0xe0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10c      	bne.n	8005942 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0308 	bic.w	r3, r3, #8
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <TIM_OC1_SetConfig+0xdc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC1_SetConfig+0x8e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <TIM_OC1_SetConfig+0xe0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d111      	bne.n	8005976 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	fffeff8f 	.word	0xfffeff8f
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40010400 	.word	0x40010400

080059a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0210 	bic.w	r2, r3, #16
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <TIM_OC2_SetConfig+0xe4>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0320 	bic.w	r3, r3, #32
 80059f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a23      	ldr	r2, [pc, #140]	; (8005a90 <TIM_OC2_SetConfig+0xe8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC2_SetConfig+0x68>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <TIM_OC2_SetConfig+0xec>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10d      	bne.n	8005a2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <TIM_OC2_SetConfig+0xe8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_OC2_SetConfig+0x94>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <TIM_OC2_SetConfig+0xec>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d113      	bne.n	8005a64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	feff8fff 	.word	0xfeff8fff
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40010400 	.word	0x40010400

08005a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4b2d      	ldr	r3, [pc, #180]	; (8005b78 <TIM_OC3_SetConfig+0xe0>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <TIM_OC3_SetConfig+0xe4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC3_SetConfig+0x66>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <TIM_OC3_SetConfig+0xe8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <TIM_OC3_SetConfig+0xe4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC3_SetConfig+0x92>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <TIM_OC3_SetConfig+0xe8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d113      	bne.n	8005b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	fffeff8f 	.word	0xfffeff8f
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40010400 	.word	0x40010400

08005b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <TIM_OC4_SetConfig+0xa4>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	031b      	lsls	r3, r3, #12
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <TIM_OC4_SetConfig+0xa8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC4_SetConfig+0x68>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <TIM_OC4_SetConfig+0xac>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d109      	bne.n	8005c00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	019b      	lsls	r3, r3, #6
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	feff8fff 	.word	0xfeff8fff
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <TIM_OC5_SetConfig+0x98>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <TIM_OC5_SetConfig+0x9c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC5_SetConfig+0x5e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <TIM_OC5_SetConfig+0xa0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d109      	bne.n	8005ca6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	fffeff8f 	.word	0xfffeff8f
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <TIM_OC6_SetConfig+0x9c>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	051b      	lsls	r3, r3, #20
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <TIM_OC6_SetConfig+0xa0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC6_SetConfig+0x60>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <TIM_OC6_SetConfig+0xa4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	feff8fff 	.word	0xfeff8fff
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0201 	bic.w	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 030a 	bic.w	r3, r3, #10
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b087      	sub	sp, #28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0210 	bic.w	r2, r3, #16
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	031b      	lsls	r3, r3, #12
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f043 0307 	orr.w	r3, r3, #7
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	021a      	lsls	r2, r3, #8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e06d      	b.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a30      	ldr	r2, [pc, #192]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a20      	ldr	r2, [pc, #128]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a16      	ldr	r2, [pc, #88]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40010000 	.word	0x40010000
 8006004:	40010400 	.word	0x40010400
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40001800 	.word	0x40001800

0800601c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e040      	b.n	80060ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fdd0 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fbe0 	bl	800685c <UART_SetConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e022      	b.n	80060ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fe38 	bl	8006d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 febf 	bl	8006e68 <UART_CheckIdleState>
 80060ea:	4603      	mov	r3, r0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b08b      	sub	sp, #44	; 0x2c
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006106:	2b20      	cmp	r3, #32
 8006108:	d147      	bne.n	800619a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_UART_Transmit_IT+0x22>
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e040      	b.n	800619c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2221      	movs	r2, #33	; 0x21
 8006142:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d107      	bne.n	800615e <HAL_UART_Transmit_IT+0x6a>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <HAL_UART_Transmit_IT+0xb4>)
 800615a:	66da      	str	r2, [r3, #108]	; 0x6c
 800615c:	e002      	b.n	8006164 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a12      	ldr	r2, [pc, #72]	; (80061ac <HAL_UART_Transmit_IT+0xb8>)
 8006162:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	613b      	str	r3, [r7, #16]
   return(result);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	623b      	str	r3, [r7, #32]
 8006184:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	69f9      	ldr	r1, [r7, #28]
 8006188:	6a3a      	ldr	r2, [r7, #32]
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e000      	b.n	800619c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800619a:	2302      	movs	r3, #2
  }
}
 800619c:	4618      	mov	r0, r3
 800619e:	372c      	adds	r7, #44	; 0x2c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	080073c7 	.word	0x080073c7
 80061ac:	08007311 	.word	0x08007311

080061b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d132      	bne.n	800622e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Receive_IT+0x24>
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e02b      	b.n	8006230 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d018      	beq.n	800621e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	613b      	str	r3, [r7, #16]
   return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	61bb      	str	r3, [r7, #24]
   return(result);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	461a      	mov	r2, r3
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 ff33 	bl	8007090 <UART_Start_Receive_IT>
 800622a:	4603      	mov	r3, r0
 800622c:	e000      	b.n	8006230 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
  }
}
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	; 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b0ba      	sub	sp, #232	; 0xe8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800625e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006262:	f640 030f 	movw	r3, #2063	; 0x80f
 8006266:	4013      	ands	r3, r2
 8006268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800626c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d115      	bne.n	80062a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00f      	beq.n	80062a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 82ac 	beq.w	80067ee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
      }
      return;
 800629e:	e2a6      	b.n	80067ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8117 	beq.w	80064d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062ba:	4b85      	ldr	r3, [pc, #532]	; (80064d0 <HAL_UART_IRQHandler+0x298>)
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 810a 	beq.w	80064d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d011      	beq.n	80062f4 <HAL_UART_IRQHandler+0xbc>
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ea:	f043 0201 	orr.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <HAL_UART_IRQHandler+0xec>
 8006300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2202      	movs	r2, #2
 8006312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800631a:	f043 0204 	orr.w	r2, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d011      	beq.n	8006354 <HAL_UART_IRQHandler+0x11c>
 8006330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2204      	movs	r2, #4
 8006342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800634a:	f043 0202 	orr.w	r2, r3, #2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d017      	beq.n	8006390 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2208      	movs	r2, #8
 800637e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006386:	f043 0208 	orr.w	r2, r3, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006398:	2b00      	cmp	r3, #0
 800639a:	d012      	beq.n	80063c2 <HAL_UART_IRQHandler+0x18a>
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00c      	beq.n	80063c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8212 	beq.w	80067f2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d005      	beq.n	800641a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800640e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006416:	2b00      	cmp	r3, #0
 8006418:	d04f      	beq.n	80064ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fefe 	bl	800721c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d141      	bne.n	80064b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800645a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800645e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1d9      	bne.n	800642e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <HAL_UART_IRQHandler+0x29c>)
 8006488:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648e:	4618      	mov	r0, r3
 8006490:	f7fb ff01 	bl	8002296 <HAL_DMA_Abort_IT>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	e00f      	b.n	80064ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9b6 	bl	800681c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	e00b      	b.n	80064ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9b2 	bl	800681c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	e007      	b.n	80064ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9ae 	bl	800681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80064c8:	e193      	b.n	80067f2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ca:	bf00      	nop
    return;
 80064cc:	e191      	b.n	80067f2 <HAL_UART_IRQHandler+0x5ba>
 80064ce:	bf00      	nop
 80064d0:	04000120 	.word	0x04000120
 80064d4:	080072e5 	.word	0x080072e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	2b01      	cmp	r3, #1
 80064de:	f040 814c 	bne.w	800677a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8145 	beq.w	800677a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 813e 	beq.w	800677a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2210      	movs	r2, #16
 8006504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	f040 80b6 	bne.w	8006682 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006522:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8165 	beq.w	80067f6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006536:	429a      	cmp	r2, r3
 8006538:	f080 815d 	bcs.w	80067f6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006550:	f000 8086 	beq.w	8006660 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800657e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006582:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800658a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1da      	bne.n	8006554 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e1      	bne.n	800659e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800660c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e3      	bne.n	80065da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800662e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006630:	f023 0310 	bic.w	r3, r3, #16
 8006634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006642:	65bb      	str	r3, [r7, #88]	; 0x58
 8006644:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e4      	bne.n	8006620 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	4618      	mov	r0, r3
 800665c:	f7fb fdab 	bl	80021b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006672:	b29b      	uxth	r3, r3
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f8d8 	bl	8006830 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006680:	e0b9      	b.n	80067f6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800668e:	b29b      	uxth	r3, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80ab 	beq.w	80067fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80066a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80a6 	beq.w	80067fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d0:	647b      	str	r3, [r7, #68]	; 0x44
 80066d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e4      	bne.n	80066ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	623b      	str	r3, [r7, #32]
   return(result);
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006708:	633a      	str	r2, [r7, #48]	; 0x30
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800670e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e3      	bne.n	80066e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	60fb      	str	r3, [r7, #12]
   return(result);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	69b9      	ldr	r1, [r7, #24]
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	617b      	str	r3, [r7, #20]
   return(result);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e4      	bne.n	8006730 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800676c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f85c 	bl	8006830 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006778:	e03f      	b.n	80067fa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <HAL_UART_IRQHandler+0x56c>
 8006786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800679a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f853 	bl	8006848 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067a2:	e02d      	b.n	8006800 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00e      	beq.n	80067ce <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01c      	beq.n	80067fe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
    }
    return;
 80067cc:	e017      	b.n	80067fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d012      	beq.n	8006800 <HAL_UART_IRQHandler+0x5c8>
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fe4d 	bl	8007486 <UART_EndTransmit_IT>
    return;
 80067ec:	e008      	b.n	8006800 <HAL_UART_IRQHandler+0x5c8>
      return;
 80067ee:	bf00      	nop
 80067f0:	e006      	b.n	8006800 <HAL_UART_IRQHandler+0x5c8>
    return;
 80067f2:	bf00      	nop
 80067f4:	e004      	b.n	8006800 <HAL_UART_IRQHandler+0x5c8>
      return;
 80067f6:	bf00      	nop
 80067f8:	e002      	b.n	8006800 <HAL_UART_IRQHandler+0x5c8>
      return;
 80067fa:	bf00      	nop
 80067fc:	e000      	b.n	8006800 <HAL_UART_IRQHandler+0x5c8>
    return;
 80067fe:	bf00      	nop
  }

}
 8006800:	37e8      	adds	r7, #232	; 0xe8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop

08006808 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4ba6      	ldr	r3, [pc, #664]	; (8006b20 <UART_SetConfig+0x2c4>)
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	430b      	orrs	r3, r1
 8006892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a94      	ldr	r2, [pc, #592]	; (8006b24 <UART_SetConfig+0x2c8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d120      	bne.n	800691a <UART_SetConfig+0xbe>
 80068d8:	4b93      	ldr	r3, [pc, #588]	; (8006b28 <UART_SetConfig+0x2cc>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d816      	bhi.n	8006914 <UART_SetConfig+0xb8>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x90>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006909 	.word	0x08006909
 80068f4:	08006903 	.word	0x08006903
 80068f8:	0800690f 	.word	0x0800690f
 80068fc:	2301      	movs	r3, #1
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e150      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006902:	2302      	movs	r3, #2
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e14d      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006908:	2304      	movs	r3, #4
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e14a      	b.n	8006ba4 <UART_SetConfig+0x348>
 800690e:	2308      	movs	r3, #8
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e147      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006914:	2310      	movs	r3, #16
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e144      	b.n	8006ba4 <UART_SetConfig+0x348>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a83      	ldr	r2, [pc, #524]	; (8006b2c <UART_SetConfig+0x2d0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d132      	bne.n	800698a <UART_SetConfig+0x12e>
 8006924:	4b80      	ldr	r3, [pc, #512]	; (8006b28 <UART_SetConfig+0x2cc>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	2b0c      	cmp	r3, #12
 8006930:	d828      	bhi.n	8006984 <UART_SetConfig+0x128>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0xdc>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800696d 	.word	0x0800696d
 800693c:	08006985 	.word	0x08006985
 8006940:	08006985 	.word	0x08006985
 8006944:	08006985 	.word	0x08006985
 8006948:	08006979 	.word	0x08006979
 800694c:	08006985 	.word	0x08006985
 8006950:	08006985 	.word	0x08006985
 8006954:	08006985 	.word	0x08006985
 8006958:	08006973 	.word	0x08006973
 800695c:	08006985 	.word	0x08006985
 8006960:	08006985 	.word	0x08006985
 8006964:	08006985 	.word	0x08006985
 8006968:	0800697f 	.word	0x0800697f
 800696c:	2300      	movs	r3, #0
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e118      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006972:	2302      	movs	r3, #2
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e115      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006978:	2304      	movs	r3, #4
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e112      	b.n	8006ba4 <UART_SetConfig+0x348>
 800697e:	2308      	movs	r3, #8
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e10f      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006984:	2310      	movs	r3, #16
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e10c      	b.n	8006ba4 <UART_SetConfig+0x348>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <UART_SetConfig+0x2d4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d120      	bne.n	80069d6 <UART_SetConfig+0x17a>
 8006994:	4b64      	ldr	r3, [pc, #400]	; (8006b28 <UART_SetConfig+0x2cc>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d013      	beq.n	80069ca <UART_SetConfig+0x16e>
 80069a2:	2b30      	cmp	r3, #48	; 0x30
 80069a4:	d814      	bhi.n	80069d0 <UART_SetConfig+0x174>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d009      	beq.n	80069be <UART_SetConfig+0x162>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d810      	bhi.n	80069d0 <UART_SetConfig+0x174>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <UART_SetConfig+0x15c>
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d006      	beq.n	80069c4 <UART_SetConfig+0x168>
 80069b6:	e00b      	b.n	80069d0 <UART_SetConfig+0x174>
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0f2      	b.n	8006ba4 <UART_SetConfig+0x348>
 80069be:	2302      	movs	r3, #2
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e0ef      	b.n	8006ba4 <UART_SetConfig+0x348>
 80069c4:	2304      	movs	r3, #4
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e0ec      	b.n	8006ba4 <UART_SetConfig+0x348>
 80069ca:	2308      	movs	r3, #8
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e0e9      	b.n	8006ba4 <UART_SetConfig+0x348>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e0e6      	b.n	8006ba4 <UART_SetConfig+0x348>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a56      	ldr	r2, [pc, #344]	; (8006b34 <UART_SetConfig+0x2d8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d120      	bne.n	8006a22 <UART_SetConfig+0x1c6>
 80069e0:	4b51      	ldr	r3, [pc, #324]	; (8006b28 <UART_SetConfig+0x2cc>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ea:	2bc0      	cmp	r3, #192	; 0xc0
 80069ec:	d013      	beq.n	8006a16 <UART_SetConfig+0x1ba>
 80069ee:	2bc0      	cmp	r3, #192	; 0xc0
 80069f0:	d814      	bhi.n	8006a1c <UART_SetConfig+0x1c0>
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d009      	beq.n	8006a0a <UART_SetConfig+0x1ae>
 80069f6:	2b80      	cmp	r3, #128	; 0x80
 80069f8:	d810      	bhi.n	8006a1c <UART_SetConfig+0x1c0>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <UART_SetConfig+0x1a8>
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d006      	beq.n	8006a10 <UART_SetConfig+0x1b4>
 8006a02:	e00b      	b.n	8006a1c <UART_SetConfig+0x1c0>
 8006a04:	2300      	movs	r3, #0
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0cc      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0c9      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a10:	2304      	movs	r3, #4
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e0c6      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a16:	2308      	movs	r3, #8
 8006a18:	77fb      	strb	r3, [r7, #31]
 8006a1a:	e0c3      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	e0c0      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a44      	ldr	r2, [pc, #272]	; (8006b38 <UART_SetConfig+0x2dc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d125      	bne.n	8006a78 <UART_SetConfig+0x21c>
 8006a2c:	4b3e      	ldr	r3, [pc, #248]	; (8006b28 <UART_SetConfig+0x2cc>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3a:	d017      	beq.n	8006a6c <UART_SetConfig+0x210>
 8006a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a40:	d817      	bhi.n	8006a72 <UART_SetConfig+0x216>
 8006a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a46:	d00b      	beq.n	8006a60 <UART_SetConfig+0x204>
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d811      	bhi.n	8006a72 <UART_SetConfig+0x216>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <UART_SetConfig+0x1fe>
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d006      	beq.n	8006a66 <UART_SetConfig+0x20a>
 8006a58:	e00b      	b.n	8006a72 <UART_SetConfig+0x216>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e0a1      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a60:	2302      	movs	r3, #2
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e09e      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a66:	2304      	movs	r3, #4
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e09b      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e098      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a72:	2310      	movs	r3, #16
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e095      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <UART_SetConfig+0x2e0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d125      	bne.n	8006ace <UART_SetConfig+0x272>
 8006a82:	4b29      	ldr	r3, [pc, #164]	; (8006b28 <UART_SetConfig+0x2cc>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a90:	d017      	beq.n	8006ac2 <UART_SetConfig+0x266>
 8006a92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a96:	d817      	bhi.n	8006ac8 <UART_SetConfig+0x26c>
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9c:	d00b      	beq.n	8006ab6 <UART_SetConfig+0x25a>
 8006a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa2:	d811      	bhi.n	8006ac8 <UART_SetConfig+0x26c>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <UART_SetConfig+0x254>
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aac:	d006      	beq.n	8006abc <UART_SetConfig+0x260>
 8006aae:	e00b      	b.n	8006ac8 <UART_SetConfig+0x26c>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e076      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e073      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006abc:	2304      	movs	r3, #4
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e070      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e06d      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e06a      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <UART_SetConfig+0x2e4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d138      	bne.n	8006b4a <UART_SetConfig+0x2ee>
 8006ad8:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <UART_SetConfig+0x2cc>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ae2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae6:	d017      	beq.n	8006b18 <UART_SetConfig+0x2bc>
 8006ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aec:	d82a      	bhi.n	8006b44 <UART_SetConfig+0x2e8>
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af2:	d00b      	beq.n	8006b0c <UART_SetConfig+0x2b0>
 8006af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af8:	d824      	bhi.n	8006b44 <UART_SetConfig+0x2e8>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <UART_SetConfig+0x2aa>
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d006      	beq.n	8006b12 <UART_SetConfig+0x2b6>
 8006b04:	e01e      	b.n	8006b44 <UART_SetConfig+0x2e8>
 8006b06:	2300      	movs	r3, #0
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e04b      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e048      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b12:	2304      	movs	r3, #4
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e045      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e042      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b1e:	bf00      	nop
 8006b20:	efff69f3 	.word	0xefff69f3
 8006b24:	40011000 	.word	0x40011000
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40004400 	.word	0x40004400
 8006b30:	40004800 	.word	0x40004800
 8006b34:	40004c00 	.word	0x40004c00
 8006b38:	40005000 	.word	0x40005000
 8006b3c:	40011400 	.word	0x40011400
 8006b40:	40007800 	.word	0x40007800
 8006b44:	2310      	movs	r3, #16
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e02c      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a72      	ldr	r2, [pc, #456]	; (8006d18 <UART_SetConfig+0x4bc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d125      	bne.n	8006ba0 <UART_SetConfig+0x344>
 8006b54:	4b71      	ldr	r3, [pc, #452]	; (8006d1c <UART_SetConfig+0x4c0>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b62:	d017      	beq.n	8006b94 <UART_SetConfig+0x338>
 8006b64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b68:	d817      	bhi.n	8006b9a <UART_SetConfig+0x33e>
 8006b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6e:	d00b      	beq.n	8006b88 <UART_SetConfig+0x32c>
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b74:	d811      	bhi.n	8006b9a <UART_SetConfig+0x33e>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <UART_SetConfig+0x326>
 8006b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b7e:	d006      	beq.n	8006b8e <UART_SetConfig+0x332>
 8006b80:	e00b      	b.n	8006b9a <UART_SetConfig+0x33e>
 8006b82:	2300      	movs	r3, #0
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e00d      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e00a      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b8e:	2304      	movs	r3, #4
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e007      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b94:	2308      	movs	r3, #8
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e004      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006b9a:	2310      	movs	r3, #16
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e001      	b.n	8006ba4 <UART_SetConfig+0x348>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bac:	d15b      	bne.n	8006c66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006bae:	7ffb      	ldrb	r3, [r7, #31]
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d828      	bhi.n	8006c06 <UART_SetConfig+0x3aa>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x360>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	08006c07 	.word	0x08006c07
 8006bcc:	08006bf7 	.word	0x08006bf7
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
 8006bdc:	08006bff 	.word	0x08006bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fc fbae 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8006be4:	61b8      	str	r0, [r7, #24]
        break;
 8006be6:	e013      	b.n	8006c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fc fbbe 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8006bec:	61b8      	str	r0, [r7, #24]
        break;
 8006bee:	e00f      	b.n	8006c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf0:	4b4b      	ldr	r3, [pc, #300]	; (8006d20 <UART_SetConfig+0x4c4>)
 8006bf2:	61bb      	str	r3, [r7, #24]
        break;
 8006bf4:	e00c      	b.n	8006c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf6:	f7fc fa91 	bl	800311c <HAL_RCC_GetSysClockFreq>
 8006bfa:	61b8      	str	r0, [r7, #24]
        break;
 8006bfc:	e008      	b.n	8006c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c02:	61bb      	str	r3, [r7, #24]
        break;
 8006c04:	e004      	b.n	8006c10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d074      	beq.n	8006d00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	005a      	lsls	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	441a      	add	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b0f      	cmp	r3, #15
 8006c30:	d916      	bls.n	8006c60 <UART_SetConfig+0x404>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d212      	bcs.n	8006c60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f023 030f 	bic.w	r3, r3, #15
 8006c42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	89fb      	ldrh	r3, [r7, #14]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	89fa      	ldrh	r2, [r7, #14]
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	e04f      	b.n	8006d00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	77bb      	strb	r3, [r7, #30]
 8006c64:	e04c      	b.n	8006d00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c66:	7ffb      	ldrb	r3, [r7, #31]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d828      	bhi.n	8006cbe <UART_SetConfig+0x462>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <UART_SetConfig+0x418>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006ca1 	.word	0x08006ca1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	08006cbf 	.word	0x08006cbf
 8006c84:	08006caf 	.word	0x08006caf
 8006c88:	08006cbf 	.word	0x08006cbf
 8006c8c:	08006cbf 	.word	0x08006cbf
 8006c90:	08006cbf 	.word	0x08006cbf
 8006c94:	08006cb7 	.word	0x08006cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c98:	f7fc fb52 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8006c9c:	61b8      	str	r0, [r7, #24]
        break;
 8006c9e:	e013      	b.n	8006cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ca0:	f7fc fb62 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8006ca4:	61b8      	str	r0, [r7, #24]
        break;
 8006ca6:	e00f      	b.n	8006cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <UART_SetConfig+0x4c4>)
 8006caa:	61bb      	str	r3, [r7, #24]
        break;
 8006cac:	e00c      	b.n	8006cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cae:	f7fc fa35 	bl	800311c <HAL_RCC_GetSysClockFreq>
 8006cb2:	61b8      	str	r0, [r7, #24]
        break;
 8006cb4:	e008      	b.n	8006cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cba:	61bb      	str	r3, [r7, #24]
        break;
 8006cbc:	e004      	b.n	8006cc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8006cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d018      	beq.n	8006d00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b0f      	cmp	r3, #15
 8006ce6:	d909      	bls.n	8006cfc <UART_SetConfig+0x4a0>
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cee:	d205      	bcs.n	8006cfc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	e001      	b.n	8006d00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40007c00 	.word	0x40007c00
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	00f42400 	.word	0x00f42400

08006d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01a      	beq.n	8006e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e22:	d10a      	bne.n	8006e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e78:	f7fb f85c 	bl	8001f34 <HAL_GetTick>
 8006e7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d10e      	bne.n	8006eaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f831 	bl	8006f02 <UART_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e027      	b.n	8006efa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d10e      	bne.n	8006ed6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f81b 	bl	8006f02 <UART_WaitOnFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e011      	b.n	8006efa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b09c      	sub	sp, #112	; 0x70
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	e0a7      	b.n	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	f000 80a3 	beq.w	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fb f809 	bl	8001f34 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d13f      	bne.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f48:	667b      	str	r3, [r7, #100]	; 0x64
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e6      	bne.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f86:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e5      	bne.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e068      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d050      	beq.n	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd0:	d148      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	66bb      	str	r3, [r7, #104]	; 0x68
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800702e:	623a      	str	r2, [r7, #32]
 8007030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e010      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4013      	ands	r3, r2
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	429a      	cmp	r2, r3
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	429a      	cmp	r2, r3
 8007080:	f43f af48 	beq.w	8006f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3770      	adds	r7, #112	; 0x70
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007090:	b480      	push	{r7}
 8007092:	b097      	sub	sp, #92	; 0x5c
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	88fa      	ldrh	r2, [r7, #6]
 80070a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	88fa      	ldrh	r2, [r7, #6]
 80070b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d10e      	bne.n	80070e2 <UART_Start_Receive_IT+0x52>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <UART_Start_Receive_IT+0x48>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070d6:	e02d      	b.n	8007134 <UART_Start_Receive_IT+0xa4>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	22ff      	movs	r2, #255	; 0xff
 80070dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070e0:	e028      	b.n	8007134 <UART_Start_Receive_IT+0xa4>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10d      	bne.n	8007106 <UART_Start_Receive_IT+0x76>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <UART_Start_Receive_IT+0x6c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	22ff      	movs	r2, #255	; 0xff
 80070f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070fa:	e01b      	b.n	8007134 <UART_Start_Receive_IT+0xa4>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	227f      	movs	r2, #127	; 0x7f
 8007100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007104:	e016      	b.n	8007134 <UART_Start_Receive_IT+0xa4>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710e:	d10d      	bne.n	800712c <UART_Start_Receive_IT+0x9c>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <UART_Start_Receive_IT+0x92>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	227f      	movs	r2, #127	; 0x7f
 800711c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007120:	e008      	b.n	8007134 <UART_Start_Receive_IT+0xa4>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	223f      	movs	r2, #63	; 0x3f
 8007126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800712a:	e003      	b.n	8007134 <UART_Start_Receive_IT+0xa4>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2222      	movs	r2, #34	; 0x22
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	657b      	str	r3, [r7, #84]	; 0x54
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007164:	64ba      	str	r2, [r7, #72]	; 0x48
 8007166:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800716a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e5      	bne.n	8007144 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007180:	d107      	bne.n	8007192 <UART_Start_Receive_IT+0x102>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4a21      	ldr	r2, [pc, #132]	; (8007214 <UART_Start_Receive_IT+0x184>)
 800718e:	669a      	str	r2, [r3, #104]	; 0x68
 8007190:	e002      	b.n	8007198 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a20      	ldr	r2, [pc, #128]	; (8007218 <UART_Start_Receive_IT+0x188>)
 8007196:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071be:	637b      	str	r3, [r7, #52]	; 0x34
 80071c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e6      	bne.n	80071a0 <UART_Start_Receive_IT+0x110>
 80071d2:	e018      	b.n	8007206 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	613b      	str	r3, [r7, #16]
   return(result);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f043 0320 	orr.w	r3, r3, #32
 80071e8:	653b      	str	r3, [r7, #80]	; 0x50
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f2:	623b      	str	r3, [r7, #32]
 80071f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	6a3a      	ldr	r2, [r7, #32]
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e6      	bne.n	80071d4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	375c      	adds	r7, #92	; 0x5c
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	08007641 	.word	0x08007641
 8007218:	080074db 	.word	0x080074db

0800721c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b095      	sub	sp, #84	; 0x54
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007242:	643b      	str	r3, [r7, #64]	; 0x40
 8007244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e6      	bne.n	8007224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3308      	adds	r3, #8
 800725c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	61fb      	str	r3, [r7, #28]
   return(result);
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	64bb      	str	r3, [r7, #72]	; 0x48
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800727c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	2b01      	cmp	r3, #1
 8007290:	d118      	bne.n	80072c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	60bb      	str	r3, [r7, #8]
   return(result);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f023 0310 	bic.w	r3, r3, #16
 80072a6:	647b      	str	r3, [r7, #68]	; 0x44
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6979      	ldr	r1, [r7, #20]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	613b      	str	r3, [r7, #16]
   return(result);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e6      	bne.n	8007292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072d8:	bf00      	nop
 80072da:	3754      	adds	r7, #84	; 0x54
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff fa8a 	bl	800681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b08f      	sub	sp, #60	; 0x3c
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800731c:	2b21      	cmp	r3, #33	; 0x21
 800731e:	d14c      	bne.n	80073ba <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d132      	bne.n	8007392 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	61fb      	str	r3, [r7, #28]
   return(result);
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800734c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e6      	bne.n	800732c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	60bb      	str	r3, [r7, #8]
   return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007372:	633b      	str	r3, [r7, #48]	; 0x30
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6979      	ldr	r1, [r7, #20]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	613b      	str	r3, [r7, #16]
   return(result);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007390:	e013      	b.n	80073ba <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073ba:	bf00      	nop
 80073bc:	373c      	adds	r7, #60	; 0x3c
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b091      	sub	sp, #68	; 0x44
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d2:	2b21      	cmp	r3, #33	; 0x21
 80073d4:	d151      	bne.n	800747a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d132      	bne.n	8007448 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	623b      	str	r3, [r7, #32]
   return(result);
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	633b      	str	r3, [r7, #48]	; 0x30
 8007402:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	60fb      	str	r3, [r7, #12]
   return(result);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	69b9      	ldr	r1, [r7, #24]
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	617b      	str	r3, [r7, #20]
   return(result);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e6      	bne.n	8007414 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007446:	e018      	b.n	800747a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800744e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800745c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007462:	1c9a      	adds	r2, r3, #2
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800747a:	bf00      	nop
 800747c:	3744      	adds	r7, #68	; 0x44
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b088      	sub	sp, #32
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	60bb      	str	r3, [r7, #8]
   return(result);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6979      	ldr	r1, [r7, #20]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f99b 	bl	8006808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d2:	bf00      	nop
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b096      	sub	sp, #88	; 0x58
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	2b22      	cmp	r3, #34	; 0x22
 80074f4:	f040 8098 	bne.w	8007628 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007502:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007506:	b2d9      	uxtb	r1, r3
 8007508:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	400a      	ands	r2, r1
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d17b      	bne.n	8007638 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007554:	653b      	str	r3, [r7, #80]	; 0x50
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755e:	647b      	str	r3, [r7, #68]	; 0x44
 8007560:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e6      	bne.n	8007540 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	623b      	str	r3, [r7, #32]
   return(result);
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007592:	633a      	str	r2, [r7, #48]	; 0x30
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e5      	bne.n	8007572 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d12e      	bne.n	8007620 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	69b9      	ldr	r1, [r7, #24]
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	617b      	str	r3, [r7, #20]
   return(result);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b10      	cmp	r3, #16
 8007606:	d103      	bne.n	8007610 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2210      	movs	r2, #16
 800760e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff f909 	bl	8006830 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800761e:	e00b      	b.n	8007638 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7f9 fecb 	bl	80013bc <HAL_UART_RxCpltCallback>
}
 8007626:	e007      	b.n	8007638 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0208 	orr.w	r2, r2, #8
 8007636:	619a      	str	r2, [r3, #24]
}
 8007638:	bf00      	nop
 800763a:	3758      	adds	r7, #88	; 0x58
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b096      	sub	sp, #88	; 0x58
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800764e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007658:	2b22      	cmp	r3, #34	; 0x22
 800765a:	f040 8098 	bne.w	800778e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800766e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007672:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007676:	4013      	ands	r3, r2
 8007678:	b29a      	uxth	r2, r3
 800767a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	1c9a      	adds	r2, r3, #2
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d17b      	bne.n	800779e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c4:	643b      	str	r3, [r7, #64]	; 0x40
 80076c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e6      	bne.n	80076a6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e5      	bne.n	80076d8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007724:	2b01      	cmp	r3, #1
 8007726:	d12e      	bne.n	8007786 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60bb      	str	r3, [r7, #8]
   return(result);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	647b      	str	r3, [r7, #68]	; 0x44
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6979      	ldr	r1, [r7, #20]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	613b      	str	r3, [r7, #16]
   return(result);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b10      	cmp	r3, #16
 800776c:	d103      	bne.n	8007776 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff f856 	bl	8006830 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007784:	e00b      	b.n	800779e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7f9 fe18 	bl	80013bc <HAL_UART_RxCpltCallback>
}
 800778c:	e007      	b.n	800779e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0208 	orr.w	r2, r2, #8
 800779c:	619a      	str	r2, [r3, #24]
}
 800779e:	bf00      	nop
 80077a0:	3758      	adds	r7, #88	; 0x58
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077a8:	b084      	sub	sp, #16
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	f107 001c 	add.w	r0, r7, #28
 80077b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d120      	bne.n	8007802 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	4b20      	ldr	r3, [pc, #128]	; (8007854 <USB_CoreInit+0xac>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d105      	bne.n	80077f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa96 	bl	8007d28 <USB_CoreReset>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
 8007800:	e010      	b.n	8007824 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa8a 	bl	8007d28 <USB_CoreReset>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2b01      	cmp	r3, #1
 8007828:	d10b      	bne.n	8007842 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f043 0206 	orr.w	r2, r3, #6
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f043 0220 	orr.w	r2, r3, #32
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800784e:	b004      	add	sp, #16
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	ffbdffbf 	.word	0xffbdffbf

08007858 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f023 0201 	bic.w	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d115      	bne.n	80078c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f7fa fb4f 	bl	8001f4c <HAL_Delay>
      ms++;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa29 	bl	8007d0c <USB_GetMode>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d01e      	beq.n	80078fe <USB_SetCurrentMode+0x84>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b31      	cmp	r3, #49	; 0x31
 80078c4:	d9f0      	bls.n	80078a8 <USB_SetCurrentMode+0x2e>
 80078c6:	e01a      	b.n	80078fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d115      	bne.n	80078fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078da:	2001      	movs	r0, #1
 80078dc:	f7fa fb36 	bl	8001f4c <HAL_Delay>
      ms++;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3301      	adds	r3, #1
 80078e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa10 	bl	8007d0c <USB_GetMode>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <USB_SetCurrentMode+0x84>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b31      	cmp	r3, #49	; 0x31
 80078f6:	d9f0      	bls.n	80078da <USB_SetCurrentMode+0x60>
 80078f8:	e001      	b.n	80078fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e005      	b.n	800790a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b32      	cmp	r3, #50	; 0x32
 8007902:	d101      	bne.n	8007908 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e000      	b.n	800790a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007914:	b084      	sub	sp, #16
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e009      	b.n	8007948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3340      	adds	r3, #64	; 0x40
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3301      	adds	r3, #1
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b0e      	cmp	r3, #14
 800794c:	d9f2      	bls.n	8007934 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800794e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11c      	bne.n	800798e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007962:	f043 0302 	orr.w	r3, r3, #2
 8007966:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e005      	b.n	800799a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079a0:	461a      	mov	r2, r3
 80079a2:	2300      	movs	r3, #0
 80079a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ac:	4619      	mov	r1, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b4:	461a      	mov	r2, r3
 80079b6:	680b      	ldr	r3, [r1, #0]
 80079b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10c      	bne.n	80079da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d104      	bne.n	80079d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079c6:	2100      	movs	r1, #0
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f965 	bl	8007c98 <USB_SetDevSpeed>
 80079ce:	e008      	b.n	80079e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079d0:	2101      	movs	r1, #1
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f960 	bl	8007c98 <USB_SetDevSpeed>
 80079d8:	e003      	b.n	80079e2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079da:	2103      	movs	r1, #3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f95b 	bl	8007c98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079e2:	2110      	movs	r1, #16
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f8f3 	bl	8007bd0 <USB_FlushTxFifo>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f91f 	bl	8007c38 <USB_FlushRxFifo>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	461a      	mov	r2, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	e043      	b.n	8007ab6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a44:	d118      	bne.n	8007a78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	e013      	b.n	8007a8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e008      	b.n	8007a8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	461a      	mov	r2, r3
 8007a86:	2300      	movs	r3, #0
 8007a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a96:	461a      	mov	r2, r3
 8007a98:	2300      	movs	r3, #0
 8007a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d3b7      	bcc.n	8007a2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	e043      	b.n	8007b4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ada:	d118      	bne.n	8007b0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	461a      	mov	r2, r3
 8007af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	e013      	b.n	8007b20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	461a      	mov	r2, r3
 8007b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	e008      	b.n	8007b20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d3b7      	bcc.n	8007ac4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f043 0210 	orr.w	r2, r3, #16
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699a      	ldr	r2, [r3, #24]
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <USB_DevInit+0x2b4>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f043 0208 	orr.w	r2, r3, #8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d105      	bne.n	8007bb8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699a      	ldr	r2, [r3, #24]
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <USB_DevInit+0x2b8>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bc4:	b004      	add	sp, #16
 8007bc6:	4770      	bx	lr
 8007bc8:	803c3800 	.word	0x803c3800
 8007bcc:	40000004 	.word	0x40000004

08007bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <USB_FlushTxFifo+0x64>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d901      	bls.n	8007bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e01b      	b.n	8007c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	daf2      	bge.n	8007bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	019b      	lsls	r3, r3, #6
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <USB_FlushTxFifo+0x64>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d901      	bls.n	8007c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e006      	b.n	8007c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d0f0      	beq.n	8007c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	00030d40 	.word	0x00030d40

08007c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4a11      	ldr	r2, [pc, #68]	; (8007c94 <USB_FlushRxFifo+0x5c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d901      	bls.n	8007c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e018      	b.n	8007c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	daf2      	bge.n	8007c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2210      	movs	r2, #16
 8007c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4a08      	ldr	r2, [pc, #32]	; (8007c94 <USB_FlushRxFifo+0x5c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d901      	bls.n	8007c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e006      	b.n	8007c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d0f0      	beq.n	8007c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	00030d40 	.word	0x00030d40

08007c98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ce4:	f023 0303 	bic.w	r3, r3, #3
 8007ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
 8007cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	f003 0301 	and.w	r3, r3, #1
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <USB_CoreReset+0x64>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d901      	bls.n	8007d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e01b      	b.n	8007d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	daf2      	bge.n	8007d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f043 0201 	orr.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <USB_CoreReset+0x64>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d901      	bls.n	8007d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e006      	b.n	8007d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d0f0      	beq.n	8007d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	00030d40 	.word	0x00030d40

08007d90 <atoi>:
 8007d90:	220a      	movs	r2, #10
 8007d92:	2100      	movs	r1, #0
 8007d94:	f000 bd24 	b.w	80087e0 <strtol>

08007d98 <__errno>:
 8007d98:	4b01      	ldr	r3, [pc, #4]	; (8007da0 <__errno+0x8>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000048 	.word	0x20000048

08007da4 <__libc_init_array>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	4d0d      	ldr	r5, [pc, #52]	; (8007ddc <__libc_init_array+0x38>)
 8007da8:	4c0d      	ldr	r4, [pc, #52]	; (8007de0 <__libc_init_array+0x3c>)
 8007daa:	1b64      	subs	r4, r4, r5
 8007dac:	10a4      	asrs	r4, r4, #2
 8007dae:	2600      	movs	r6, #0
 8007db0:	42a6      	cmp	r6, r4
 8007db2:	d109      	bne.n	8007dc8 <__libc_init_array+0x24>
 8007db4:	4d0b      	ldr	r5, [pc, #44]	; (8007de4 <__libc_init_array+0x40>)
 8007db6:	4c0c      	ldr	r4, [pc, #48]	; (8007de8 <__libc_init_array+0x44>)
 8007db8:	f002 fee8 	bl	800ab8c <_init>
 8007dbc:	1b64      	subs	r4, r4, r5
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	42a6      	cmp	r6, r4
 8007dc4:	d105      	bne.n	8007dd2 <__libc_init_array+0x2e>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dcc:	4798      	blx	r3
 8007dce:	3601      	adds	r6, #1
 8007dd0:	e7ee      	b.n	8007db0 <__libc_init_array+0xc>
 8007dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd6:	4798      	blx	r3
 8007dd8:	3601      	adds	r6, #1
 8007dda:	e7f2      	b.n	8007dc2 <__libc_init_array+0x1e>
 8007ddc:	0800afdc 	.word	0x0800afdc
 8007de0:	0800afdc 	.word	0x0800afdc
 8007de4:	0800afdc 	.word	0x0800afdc
 8007de8:	0800afe0 	.word	0x0800afe0

08007dec <memcpy>:
 8007dec:	440a      	add	r2, r1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007df4:	d100      	bne.n	8007df8 <memcpy+0xc>
 8007df6:	4770      	bx	lr
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e02:	4291      	cmp	r1, r2
 8007e04:	d1f9      	bne.n	8007dfa <memcpy+0xe>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <memset>:
 8007e08:	4402      	add	r2, r0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d100      	bne.n	8007e12 <memset+0xa>
 8007e10:	4770      	bx	lr
 8007e12:	f803 1b01 	strb.w	r1, [r3], #1
 8007e16:	e7f9      	b.n	8007e0c <memset+0x4>

08007e18 <__cvt>:
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	ed2d 8b02 	vpush	{d8}
 8007e1e:	eeb0 8b40 	vmov.f64	d8, d0
 8007e22:	b085      	sub	sp, #20
 8007e24:	4617      	mov	r7, r2
 8007e26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e2a:	ee18 2a90 	vmov	r2, s17
 8007e2e:	f025 0520 	bic.w	r5, r5, #32
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	bfb6      	itet	lt
 8007e36:	222d      	movlt	r2, #45	; 0x2d
 8007e38:	2200      	movge	r2, #0
 8007e3a:	eeb1 8b40 	vneglt.f64	d8, d0
 8007e3e:	2d46      	cmp	r5, #70	; 0x46
 8007e40:	460c      	mov	r4, r1
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	d004      	beq.n	8007e50 <__cvt+0x38>
 8007e46:	2d45      	cmp	r5, #69	; 0x45
 8007e48:	d100      	bne.n	8007e4c <__cvt+0x34>
 8007e4a:	3401      	adds	r4, #1
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	e000      	b.n	8007e52 <__cvt+0x3a>
 8007e50:	2103      	movs	r1, #3
 8007e52:	ab03      	add	r3, sp, #12
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	ab02      	add	r3, sp, #8
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4633      	mov	r3, r6
 8007e5e:	eeb0 0b48 	vmov.f64	d0, d8
 8007e62:	f000 fd55 	bl	8008910 <_dtoa_r>
 8007e66:	2d47      	cmp	r5, #71	; 0x47
 8007e68:	d101      	bne.n	8007e6e <__cvt+0x56>
 8007e6a:	07fb      	lsls	r3, r7, #31
 8007e6c:	d51a      	bpl.n	8007ea4 <__cvt+0x8c>
 8007e6e:	2d46      	cmp	r5, #70	; 0x46
 8007e70:	eb00 0204 	add.w	r2, r0, r4
 8007e74:	d10c      	bne.n	8007e90 <__cvt+0x78>
 8007e76:	7803      	ldrb	r3, [r0, #0]
 8007e78:	2b30      	cmp	r3, #48	; 0x30
 8007e7a:	d107      	bne.n	8007e8c <__cvt+0x74>
 8007e7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e84:	bf1c      	itt	ne
 8007e86:	f1c4 0401 	rsbne	r4, r4, #1
 8007e8a:	6034      	strne	r4, [r6, #0]
 8007e8c:	6833      	ldr	r3, [r6, #0]
 8007e8e:	441a      	add	r2, r3
 8007e90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e98:	bf08      	it	eq
 8007e9a:	9203      	streq	r2, [sp, #12]
 8007e9c:	2130      	movs	r1, #48	; 0x30
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d307      	bcc.n	8007eb4 <__cvt+0x9c>
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ea8:	1a1b      	subs	r3, r3, r0
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	b005      	add	sp, #20
 8007eae:	ecbd 8b02 	vpop	{d8}
 8007eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb4:	1c5c      	adds	r4, r3, #1
 8007eb6:	9403      	str	r4, [sp, #12]
 8007eb8:	7019      	strb	r1, [r3, #0]
 8007eba:	e7f0      	b.n	8007e9e <__cvt+0x86>

08007ebc <__exponent>:
 8007ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	bfb8      	it	lt
 8007ec4:	4249      	neglt	r1, r1
 8007ec6:	f803 2b02 	strb.w	r2, [r3], #2
 8007eca:	bfb4      	ite	lt
 8007ecc:	222d      	movlt	r2, #45	; 0x2d
 8007ece:	222b      	movge	r2, #43	; 0x2b
 8007ed0:	2909      	cmp	r1, #9
 8007ed2:	7042      	strb	r2, [r0, #1]
 8007ed4:	dd2a      	ble.n	8007f2c <__exponent+0x70>
 8007ed6:	f10d 0407 	add.w	r4, sp, #7
 8007eda:	46a4      	mov	ip, r4
 8007edc:	270a      	movs	r7, #10
 8007ede:	46a6      	mov	lr, r4
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ee6:	fb07 1516 	mls	r5, r7, r6, r1
 8007eea:	3530      	adds	r5, #48	; 0x30
 8007eec:	2a63      	cmp	r2, #99	; 0x63
 8007eee:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ef2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	dcf1      	bgt.n	8007ede <__exponent+0x22>
 8007efa:	3130      	adds	r1, #48	; 0x30
 8007efc:	f1ae 0502 	sub.w	r5, lr, #2
 8007f00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f04:	1c44      	adds	r4, r0, #1
 8007f06:	4629      	mov	r1, r5
 8007f08:	4561      	cmp	r1, ip
 8007f0a:	d30a      	bcc.n	8007f22 <__exponent+0x66>
 8007f0c:	f10d 0209 	add.w	r2, sp, #9
 8007f10:	eba2 020e 	sub.w	r2, r2, lr
 8007f14:	4565      	cmp	r5, ip
 8007f16:	bf88      	it	hi
 8007f18:	2200      	movhi	r2, #0
 8007f1a:	4413      	add	r3, r2
 8007f1c:	1a18      	subs	r0, r3, r0
 8007f1e:	b003      	add	sp, #12
 8007f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f2a:	e7ed      	b.n	8007f08 <__exponent+0x4c>
 8007f2c:	2330      	movs	r3, #48	; 0x30
 8007f2e:	3130      	adds	r1, #48	; 0x30
 8007f30:	7083      	strb	r3, [r0, #2]
 8007f32:	70c1      	strb	r1, [r0, #3]
 8007f34:	1d03      	adds	r3, r0, #4
 8007f36:	e7f1      	b.n	8007f1c <__exponent+0x60>

08007f38 <_printf_float>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	b08b      	sub	sp, #44	; 0x2c
 8007f3e:	460c      	mov	r4, r1
 8007f40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007f44:	4616      	mov	r6, r2
 8007f46:	461f      	mov	r7, r3
 8007f48:	4605      	mov	r5, r0
 8007f4a:	f001 fa4f 	bl	80093ec <_localeconv_r>
 8007f4e:	f8d0 b000 	ldr.w	fp, [r0]
 8007f52:	4658      	mov	r0, fp
 8007f54:	f7f8 f974 	bl	8000240 <strlen>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9308      	str	r3, [sp, #32]
 8007f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	3307      	adds	r3, #7
 8007f68:	f023 0307 	bic.w	r3, r3, #7
 8007f6c:	f103 0108 	add.w	r1, r3, #8
 8007f70:	f8c8 1000 	str.w	r1, [r8]
 8007f74:	4682      	mov	sl, r0
 8007f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007f7e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80081e0 <_printf_float+0x2a8>
 8007f82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007f86:	eeb0 6bc0 	vabs.f64	d6, d0
 8007f8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f92:	dd24      	ble.n	8007fde <_printf_float+0xa6>
 8007f94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	d502      	bpl.n	8007fa4 <_printf_float+0x6c>
 8007f9e:	232d      	movs	r3, #45	; 0x2d
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	4b90      	ldr	r3, [pc, #576]	; (80081e8 <_printf_float+0x2b0>)
 8007fa6:	4891      	ldr	r0, [pc, #580]	; (80081ec <_printf_float+0x2b4>)
 8007fa8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007fac:	bf94      	ite	ls
 8007fae:	4698      	movls	r8, r3
 8007fb0:	4680      	movhi	r8, r0
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	6123      	str	r3, [r4, #16]
 8007fb6:	f022 0204 	bic.w	r2, r2, #4
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	9700      	str	r7, [sp, #0]
 8007fc2:	4633      	mov	r3, r6
 8007fc4:	aa09      	add	r2, sp, #36	; 0x24
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 f9d3 	bl	8008374 <_printf_common>
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f040 808a 	bne.w	80080e8 <_printf_float+0x1b0>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	b00b      	add	sp, #44	; 0x2c
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	eeb4 0b40 	vcmp.f64	d0, d0
 8007fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe6:	d709      	bvc.n	8007ffc <_printf_float+0xc4>
 8007fe8:	ee10 3a90 	vmov	r3, s1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfbc      	itt	lt
 8007ff0:	232d      	movlt	r3, #45	; 0x2d
 8007ff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ff6:	487e      	ldr	r0, [pc, #504]	; (80081f0 <_printf_float+0x2b8>)
 8007ff8:	4b7e      	ldr	r3, [pc, #504]	; (80081f4 <_printf_float+0x2bc>)
 8007ffa:	e7d5      	b.n	8007fa8 <_printf_float+0x70>
 8007ffc:	6863      	ldr	r3, [r4, #4]
 8007ffe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008002:	9104      	str	r1, [sp, #16]
 8008004:	1c59      	adds	r1, r3, #1
 8008006:	d13c      	bne.n	8008082 <_printf_float+0x14a>
 8008008:	2306      	movs	r3, #6
 800800a:	6063      	str	r3, [r4, #4]
 800800c:	2300      	movs	r3, #0
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	ab08      	add	r3, sp, #32
 8008012:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800801a:	ab07      	add	r3, sp, #28
 800801c:	6861      	ldr	r1, [r4, #4]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	6022      	str	r2, [r4, #0]
 8008022:	f10d 031b 	add.w	r3, sp, #27
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff fef6 	bl	8007e18 <__cvt>
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	9907      	ldr	r1, [sp, #28]
 8008030:	2b47      	cmp	r3, #71	; 0x47
 8008032:	4680      	mov	r8, r0
 8008034:	d108      	bne.n	8008048 <_printf_float+0x110>
 8008036:	1cc8      	adds	r0, r1, #3
 8008038:	db02      	blt.n	8008040 <_printf_float+0x108>
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	4299      	cmp	r1, r3
 800803e:	dd41      	ble.n	80080c4 <_printf_float+0x18c>
 8008040:	f1a9 0902 	sub.w	r9, r9, #2
 8008044:	fa5f f989 	uxtb.w	r9, r9
 8008048:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800804c:	d820      	bhi.n	8008090 <_printf_float+0x158>
 800804e:	3901      	subs	r1, #1
 8008050:	464a      	mov	r2, r9
 8008052:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008056:	9107      	str	r1, [sp, #28]
 8008058:	f7ff ff30 	bl	8007ebc <__exponent>
 800805c:	9a08      	ldr	r2, [sp, #32]
 800805e:	9004      	str	r0, [sp, #16]
 8008060:	1813      	adds	r3, r2, r0
 8008062:	2a01      	cmp	r2, #1
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	dc02      	bgt.n	800806e <_printf_float+0x136>
 8008068:	6822      	ldr	r2, [r4, #0]
 800806a:	07d2      	lsls	r2, r2, #31
 800806c:	d501      	bpl.n	8008072 <_printf_float+0x13a>
 800806e:	3301      	adds	r3, #1
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0a2      	beq.n	8007fc0 <_printf_float+0x88>
 800807a:	232d      	movs	r3, #45	; 0x2d
 800807c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008080:	e79e      	b.n	8007fc0 <_printf_float+0x88>
 8008082:	9904      	ldr	r1, [sp, #16]
 8008084:	2947      	cmp	r1, #71	; 0x47
 8008086:	d1c1      	bne.n	800800c <_printf_float+0xd4>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1bf      	bne.n	800800c <_printf_float+0xd4>
 800808c:	2301      	movs	r3, #1
 800808e:	e7bc      	b.n	800800a <_printf_float+0xd2>
 8008090:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008094:	d118      	bne.n	80080c8 <_printf_float+0x190>
 8008096:	2900      	cmp	r1, #0
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	dd0b      	ble.n	80080b4 <_printf_float+0x17c>
 800809c:	6121      	str	r1, [r4, #16]
 800809e:	b913      	cbnz	r3, 80080a6 <_printf_float+0x16e>
 80080a0:	6822      	ldr	r2, [r4, #0]
 80080a2:	07d0      	lsls	r0, r2, #31
 80080a4:	d502      	bpl.n	80080ac <_printf_float+0x174>
 80080a6:	3301      	adds	r3, #1
 80080a8:	440b      	add	r3, r1
 80080aa:	6123      	str	r3, [r4, #16]
 80080ac:	2300      	movs	r3, #0
 80080ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	e7de      	b.n	8008072 <_printf_float+0x13a>
 80080b4:	b913      	cbnz	r3, 80080bc <_printf_float+0x184>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	07d2      	lsls	r2, r2, #31
 80080ba:	d501      	bpl.n	80080c0 <_printf_float+0x188>
 80080bc:	3302      	adds	r3, #2
 80080be:	e7f4      	b.n	80080aa <_printf_float+0x172>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e7f2      	b.n	80080aa <_printf_float+0x172>
 80080c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80080c8:	9b08      	ldr	r3, [sp, #32]
 80080ca:	4299      	cmp	r1, r3
 80080cc:	db05      	blt.n	80080da <_printf_float+0x1a2>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	6121      	str	r1, [r4, #16]
 80080d2:	07d8      	lsls	r0, r3, #31
 80080d4:	d5ea      	bpl.n	80080ac <_printf_float+0x174>
 80080d6:	1c4b      	adds	r3, r1, #1
 80080d8:	e7e7      	b.n	80080aa <_printf_float+0x172>
 80080da:	2900      	cmp	r1, #0
 80080dc:	bfd4      	ite	le
 80080de:	f1c1 0202 	rsble	r2, r1, #2
 80080e2:	2201      	movgt	r2, #1
 80080e4:	4413      	add	r3, r2
 80080e6:	e7e0      	b.n	80080aa <_printf_float+0x172>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	055a      	lsls	r2, r3, #21
 80080ec:	d407      	bmi.n	80080fe <_printf_float+0x1c6>
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	4642      	mov	r2, r8
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	d12a      	bne.n	8008152 <_printf_float+0x21a>
 80080fc:	e76a      	b.n	8007fd4 <_printf_float+0x9c>
 80080fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008102:	f240 80e2 	bls.w	80082ca <_printf_float+0x392>
 8008106:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800810a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800810e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008112:	d133      	bne.n	800817c <_printf_float+0x244>
 8008114:	4a38      	ldr	r2, [pc, #224]	; (80081f8 <_printf_float+0x2c0>)
 8008116:	2301      	movs	r3, #1
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	f43f af58 	beq.w	8007fd4 <_printf_float+0x9c>
 8008124:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008128:	429a      	cmp	r2, r3
 800812a:	db02      	blt.n	8008132 <_printf_float+0x1fa>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	07d8      	lsls	r0, r3, #31
 8008130:	d50f      	bpl.n	8008152 <_printf_float+0x21a>
 8008132:	4653      	mov	r3, sl
 8008134:	465a      	mov	r2, fp
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f af49 	beq.w	8007fd4 <_printf_float+0x9c>
 8008142:	f04f 0800 	mov.w	r8, #0
 8008146:	f104 091a 	add.w	r9, r4, #26
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	3b01      	subs	r3, #1
 800814e:	4543      	cmp	r3, r8
 8008150:	dc09      	bgt.n	8008166 <_printf_float+0x22e>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	079b      	lsls	r3, r3, #30
 8008156:	f100 8108 	bmi.w	800836a <_printf_float+0x432>
 800815a:	68e0      	ldr	r0, [r4, #12]
 800815c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815e:	4298      	cmp	r0, r3
 8008160:	bfb8      	it	lt
 8008162:	4618      	movlt	r0, r3
 8008164:	e738      	b.n	8007fd8 <_printf_float+0xa0>
 8008166:	2301      	movs	r3, #1
 8008168:	464a      	mov	r2, r9
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	f43f af2f 	beq.w	8007fd4 <_printf_float+0x9c>
 8008176:	f108 0801 	add.w	r8, r8, #1
 800817a:	e7e6      	b.n	800814a <_printf_float+0x212>
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dc3c      	bgt.n	80081fc <_printf_float+0x2c4>
 8008182:	4a1d      	ldr	r2, [pc, #116]	; (80081f8 <_printf_float+0x2c0>)
 8008184:	2301      	movs	r3, #1
 8008186:	4631      	mov	r1, r6
 8008188:	4628      	mov	r0, r5
 800818a:	47b8      	blx	r7
 800818c:	3001      	adds	r0, #1
 800818e:	f43f af21 	beq.w	8007fd4 <_printf_float+0x9c>
 8008192:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008196:	4313      	orrs	r3, r2
 8008198:	d102      	bne.n	80081a0 <_printf_float+0x268>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d5d8      	bpl.n	8008152 <_printf_float+0x21a>
 80081a0:	4653      	mov	r3, sl
 80081a2:	465a      	mov	r2, fp
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af12 	beq.w	8007fd4 <_printf_float+0x9c>
 80081b0:	f04f 0900 	mov.w	r9, #0
 80081b4:	f104 0a1a 	add.w	sl, r4, #26
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	425b      	negs	r3, r3
 80081bc:	454b      	cmp	r3, r9
 80081be:	dc01      	bgt.n	80081c4 <_printf_float+0x28c>
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	e795      	b.n	80080f0 <_printf_float+0x1b8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	4652      	mov	r2, sl
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f af00 	beq.w	8007fd4 <_printf_float+0x9c>
 80081d4:	f109 0901 	add.w	r9, r9, #1
 80081d8:	e7ee      	b.n	80081b8 <_printf_float+0x280>
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w
 80081e0:	ffffffff 	.word	0xffffffff
 80081e4:	7fefffff 	.word	0x7fefffff
 80081e8:	0800abfc 	.word	0x0800abfc
 80081ec:	0800ac00 	.word	0x0800ac00
 80081f0:	0800ac08 	.word	0x0800ac08
 80081f4:	0800ac04 	.word	0x0800ac04
 80081f8:	0800ac0c 	.word	0x0800ac0c
 80081fc:	9a08      	ldr	r2, [sp, #32]
 80081fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008200:	429a      	cmp	r2, r3
 8008202:	bfa8      	it	ge
 8008204:	461a      	movge	r2, r3
 8008206:	2a00      	cmp	r2, #0
 8008208:	4691      	mov	r9, r2
 800820a:	dc38      	bgt.n	800827e <_printf_float+0x346>
 800820c:	2300      	movs	r3, #0
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008214:	f104 021a 	add.w	r2, r4, #26
 8008218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800821a:	9905      	ldr	r1, [sp, #20]
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	eba3 0309 	sub.w	r3, r3, r9
 8008222:	428b      	cmp	r3, r1
 8008224:	dc33      	bgt.n	800828e <_printf_float+0x356>
 8008226:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800822a:	429a      	cmp	r2, r3
 800822c:	db3c      	blt.n	80082a8 <_printf_float+0x370>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	07da      	lsls	r2, r3, #31
 8008232:	d439      	bmi.n	80082a8 <_printf_float+0x370>
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	9a04      	ldr	r2, [sp, #16]
 8008238:	9907      	ldr	r1, [sp, #28]
 800823a:	1a9a      	subs	r2, r3, r2
 800823c:	eba3 0901 	sub.w	r9, r3, r1
 8008240:	4591      	cmp	r9, r2
 8008242:	bfa8      	it	ge
 8008244:	4691      	movge	r9, r2
 8008246:	f1b9 0f00 	cmp.w	r9, #0
 800824a:	dc35      	bgt.n	80082b8 <_printf_float+0x380>
 800824c:	f04f 0800 	mov.w	r8, #0
 8008250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008254:	f104 0a1a 	add.w	sl, r4, #26
 8008258:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	eba3 0309 	sub.w	r3, r3, r9
 8008262:	4543      	cmp	r3, r8
 8008264:	f77f af75 	ble.w	8008152 <_printf_float+0x21a>
 8008268:	2301      	movs	r3, #1
 800826a:	4652      	mov	r2, sl
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	47b8      	blx	r7
 8008272:	3001      	adds	r0, #1
 8008274:	f43f aeae 	beq.w	8007fd4 <_printf_float+0x9c>
 8008278:	f108 0801 	add.w	r8, r8, #1
 800827c:	e7ec      	b.n	8008258 <_printf_float+0x320>
 800827e:	4613      	mov	r3, r2
 8008280:	4631      	mov	r1, r6
 8008282:	4642      	mov	r2, r8
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	d1bf      	bne.n	800820c <_printf_float+0x2d4>
 800828c:	e6a2      	b.n	8007fd4 <_printf_float+0x9c>
 800828e:	2301      	movs	r3, #1
 8008290:	4631      	mov	r1, r6
 8008292:	4628      	mov	r0, r5
 8008294:	9204      	str	r2, [sp, #16]
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	f43f ae9b 	beq.w	8007fd4 <_printf_float+0x9c>
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	9a04      	ldr	r2, [sp, #16]
 80082a2:	3301      	adds	r3, #1
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	e7b7      	b.n	8008218 <_printf_float+0x2e0>
 80082a8:	4653      	mov	r3, sl
 80082aa:	465a      	mov	r2, fp
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	d1be      	bne.n	8008234 <_printf_float+0x2fc>
 80082b6:	e68d      	b.n	8007fd4 <_printf_float+0x9c>
 80082b8:	9a04      	ldr	r2, [sp, #16]
 80082ba:	464b      	mov	r3, r9
 80082bc:	4442      	add	r2, r8
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	d1c1      	bne.n	800824c <_printf_float+0x314>
 80082c8:	e684      	b.n	8007fd4 <_printf_float+0x9c>
 80082ca:	9a08      	ldr	r2, [sp, #32]
 80082cc:	2a01      	cmp	r2, #1
 80082ce:	dc01      	bgt.n	80082d4 <_printf_float+0x39c>
 80082d0:	07db      	lsls	r3, r3, #31
 80082d2:	d537      	bpl.n	8008344 <_printf_float+0x40c>
 80082d4:	2301      	movs	r3, #1
 80082d6:	4642      	mov	r2, r8
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f ae78 	beq.w	8007fd4 <_printf_float+0x9c>
 80082e4:	4653      	mov	r3, sl
 80082e6:	465a      	mov	r2, fp
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f ae70 	beq.w	8007fd4 <_printf_float+0x9c>
 80082f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80082f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008300:	d01b      	beq.n	800833a <_printf_float+0x402>
 8008302:	9b08      	ldr	r3, [sp, #32]
 8008304:	f108 0201 	add.w	r2, r8, #1
 8008308:	3b01      	subs	r3, #1
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	d10e      	bne.n	8008332 <_printf_float+0x3fa>
 8008314:	e65e      	b.n	8007fd4 <_printf_float+0x9c>
 8008316:	2301      	movs	r3, #1
 8008318:	464a      	mov	r2, r9
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f ae57 	beq.w	8007fd4 <_printf_float+0x9c>
 8008326:	f108 0801 	add.w	r8, r8, #1
 800832a:	9b08      	ldr	r3, [sp, #32]
 800832c:	3b01      	subs	r3, #1
 800832e:	4543      	cmp	r3, r8
 8008330:	dcf1      	bgt.n	8008316 <_printf_float+0x3de>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008338:	e6db      	b.n	80080f2 <_printf_float+0x1ba>
 800833a:	f04f 0800 	mov.w	r8, #0
 800833e:	f104 091a 	add.w	r9, r4, #26
 8008342:	e7f2      	b.n	800832a <_printf_float+0x3f2>
 8008344:	2301      	movs	r3, #1
 8008346:	4642      	mov	r2, r8
 8008348:	e7df      	b.n	800830a <_printf_float+0x3d2>
 800834a:	2301      	movs	r3, #1
 800834c:	464a      	mov	r2, r9
 800834e:	4631      	mov	r1, r6
 8008350:	4628      	mov	r0, r5
 8008352:	47b8      	blx	r7
 8008354:	3001      	adds	r0, #1
 8008356:	f43f ae3d 	beq.w	8007fd4 <_printf_float+0x9c>
 800835a:	f108 0801 	add.w	r8, r8, #1
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008362:	1a5b      	subs	r3, r3, r1
 8008364:	4543      	cmp	r3, r8
 8008366:	dcf0      	bgt.n	800834a <_printf_float+0x412>
 8008368:	e6f7      	b.n	800815a <_printf_float+0x222>
 800836a:	f04f 0800 	mov.w	r8, #0
 800836e:	f104 0919 	add.w	r9, r4, #25
 8008372:	e7f4      	b.n	800835e <_printf_float+0x426>

08008374 <_printf_common>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	4616      	mov	r6, r2
 800837a:	4699      	mov	r9, r3
 800837c:	688a      	ldr	r2, [r1, #8]
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008384:	4293      	cmp	r3, r2
 8008386:	bfb8      	it	lt
 8008388:	4613      	movlt	r3, r2
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008390:	4607      	mov	r7, r0
 8008392:	460c      	mov	r4, r1
 8008394:	b10a      	cbz	r2, 800839a <_printf_common+0x26>
 8008396:	3301      	adds	r3, #1
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0699      	lsls	r1, r3, #26
 800839e:	bf42      	ittt	mi
 80083a0:	6833      	ldrmi	r3, [r6, #0]
 80083a2:	3302      	addmi	r3, #2
 80083a4:	6033      	strmi	r3, [r6, #0]
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	f015 0506 	ands.w	r5, r5, #6
 80083ac:	d106      	bne.n	80083bc <_printf_common+0x48>
 80083ae:	f104 0a19 	add.w	sl, r4, #25
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	6832      	ldr	r2, [r6, #0]
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	dc26      	bgt.n	800840a <_printf_common+0x96>
 80083bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c0:	1e13      	subs	r3, r2, #0
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	bf18      	it	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	0692      	lsls	r2, r2, #26
 80083ca:	d42b      	bmi.n	8008424 <_printf_common+0xb0>
 80083cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d0:	4649      	mov	r1, r9
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c0      	blx	r8
 80083d6:	3001      	adds	r0, #1
 80083d8:	d01e      	beq.n	8008418 <_printf_common+0xa4>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	68e5      	ldr	r5, [r4, #12]
 80083de:	6832      	ldr	r2, [r6, #0]
 80083e0:	f003 0306 	and.w	r3, r3, #6
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	bf08      	it	eq
 80083e8:	1aad      	subeq	r5, r5, r2
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	bf0c      	ite	eq
 80083f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f4:	2500      	movne	r5, #0
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bfc4      	itt	gt
 80083fa:	1a9b      	subgt	r3, r3, r2
 80083fc:	18ed      	addgt	r5, r5, r3
 80083fe:	2600      	movs	r6, #0
 8008400:	341a      	adds	r4, #26
 8008402:	42b5      	cmp	r5, r6
 8008404:	d11a      	bne.n	800843c <_printf_common+0xc8>
 8008406:	2000      	movs	r0, #0
 8008408:	e008      	b.n	800841c <_printf_common+0xa8>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4649      	mov	r1, r9
 8008410:	4638      	mov	r0, r7
 8008412:	47c0      	blx	r8
 8008414:	3001      	adds	r0, #1
 8008416:	d103      	bne.n	8008420 <_printf_common+0xac>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	3501      	adds	r5, #1
 8008422:	e7c6      	b.n	80083b2 <_printf_common+0x3e>
 8008424:	18e1      	adds	r1, r4, r3
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	2030      	movs	r0, #48	; 0x30
 800842a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800842e:	4422      	add	r2, r4
 8008430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008438:	3302      	adds	r3, #2
 800843a:	e7c7      	b.n	80083cc <_printf_common+0x58>
 800843c:	2301      	movs	r3, #1
 800843e:	4622      	mov	r2, r4
 8008440:	4649      	mov	r1, r9
 8008442:	4638      	mov	r0, r7
 8008444:	47c0      	blx	r8
 8008446:	3001      	adds	r0, #1
 8008448:	d0e6      	beq.n	8008418 <_printf_common+0xa4>
 800844a:	3601      	adds	r6, #1
 800844c:	e7d9      	b.n	8008402 <_printf_common+0x8e>
	...

08008450 <_printf_i>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	7e0f      	ldrb	r7, [r1, #24]
 8008456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008458:	2f78      	cmp	r7, #120	; 0x78
 800845a:	4691      	mov	r9, r2
 800845c:	4680      	mov	r8, r0
 800845e:	460c      	mov	r4, r1
 8008460:	469a      	mov	sl, r3
 8008462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008466:	d807      	bhi.n	8008478 <_printf_i+0x28>
 8008468:	2f62      	cmp	r7, #98	; 0x62
 800846a:	d80a      	bhi.n	8008482 <_printf_i+0x32>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f000 80d8 	beq.w	8008622 <_printf_i+0x1d2>
 8008472:	2f58      	cmp	r7, #88	; 0x58
 8008474:	f000 80a3 	beq.w	80085be <_printf_i+0x16e>
 8008478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800847c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008480:	e03a      	b.n	80084f8 <_printf_i+0xa8>
 8008482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008486:	2b15      	cmp	r3, #21
 8008488:	d8f6      	bhi.n	8008478 <_printf_i+0x28>
 800848a:	a101      	add	r1, pc, #4	; (adr r1, 8008490 <_printf_i+0x40>)
 800848c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084fd 	.word	0x080084fd
 8008498:	08008479 	.word	0x08008479
 800849c:	08008479 	.word	0x08008479
 80084a0:	08008479 	.word	0x08008479
 80084a4:	08008479 	.word	0x08008479
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008479 	.word	0x08008479
 80084b0:	08008479 	.word	0x08008479
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	08008609 	.word	0x08008609
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	080085eb 	.word	0x080085eb
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	0800862b 	.word	0x0800862b
 80084d4:	08008479 	.word	0x08008479
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085f3 	.word	0x080085f3
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	602a      	str	r2, [r5, #0]
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0a3      	b.n	8008644 <_printf_i+0x1f4>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	0606      	lsls	r6, r0, #24
 8008502:	f101 0304 	add.w	r3, r1, #4
 8008506:	d50a      	bpl.n	800851e <_printf_i+0xce>
 8008508:	680e      	ldr	r6, [r1, #0]
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	2e00      	cmp	r6, #0
 800850e:	da03      	bge.n	8008518 <_printf_i+0xc8>
 8008510:	232d      	movs	r3, #45	; 0x2d
 8008512:	4276      	negs	r6, r6
 8008514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008518:	485e      	ldr	r0, [pc, #376]	; (8008694 <_printf_i+0x244>)
 800851a:	230a      	movs	r3, #10
 800851c:	e019      	b.n	8008552 <_printf_i+0x102>
 800851e:	680e      	ldr	r6, [r1, #0]
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008526:	bf18      	it	ne
 8008528:	b236      	sxthne	r6, r6
 800852a:	e7ef      	b.n	800850c <_printf_i+0xbc>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	6029      	str	r1, [r5, #0]
 8008534:	0601      	lsls	r1, r0, #24
 8008536:	d501      	bpl.n	800853c <_printf_i+0xec>
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0xf2>
 800853c:	0646      	lsls	r6, r0, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0xe8>
 8008540:	881e      	ldrh	r6, [r3, #0]
 8008542:	4854      	ldr	r0, [pc, #336]	; (8008694 <_printf_i+0x244>)
 8008544:	2f6f      	cmp	r7, #111	; 0x6f
 8008546:	bf0c      	ite	eq
 8008548:	2308      	moveq	r3, #8
 800854a:	230a      	movne	r3, #10
 800854c:	2100      	movs	r1, #0
 800854e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008552:	6865      	ldr	r5, [r4, #4]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	2d00      	cmp	r5, #0
 8008558:	bfa2      	ittt	ge
 800855a:	6821      	ldrge	r1, [r4, #0]
 800855c:	f021 0104 	bicge.w	r1, r1, #4
 8008560:	6021      	strge	r1, [r4, #0]
 8008562:	b90e      	cbnz	r6, 8008568 <_printf_i+0x118>
 8008564:	2d00      	cmp	r5, #0
 8008566:	d04d      	beq.n	8008604 <_printf_i+0x1b4>
 8008568:	4615      	mov	r5, r2
 800856a:	fbb6 f1f3 	udiv	r1, r6, r3
 800856e:	fb03 6711 	mls	r7, r3, r1, r6
 8008572:	5dc7      	ldrb	r7, [r0, r7]
 8008574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008578:	4637      	mov	r7, r6
 800857a:	42bb      	cmp	r3, r7
 800857c:	460e      	mov	r6, r1
 800857e:	d9f4      	bls.n	800856a <_printf_i+0x11a>
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10b      	bne.n	800859c <_printf_i+0x14c>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07de      	lsls	r6, r3, #31
 8008588:	d508      	bpl.n	800859c <_printf_i+0x14c>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6861      	ldr	r1, [r4, #4]
 800858e:	4299      	cmp	r1, r3
 8008590:	bfde      	ittt	le
 8008592:	2330      	movle	r3, #48	; 0x30
 8008594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800859c:	1b52      	subs	r2, r2, r5
 800859e:	6122      	str	r2, [r4, #16]
 80085a0:	f8cd a000 	str.w	sl, [sp]
 80085a4:	464b      	mov	r3, r9
 80085a6:	aa03      	add	r2, sp, #12
 80085a8:	4621      	mov	r1, r4
 80085aa:	4640      	mov	r0, r8
 80085ac:	f7ff fee2 	bl	8008374 <_printf_common>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d14c      	bne.n	800864e <_printf_i+0x1fe>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	b004      	add	sp, #16
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085be:	4835      	ldr	r0, [pc, #212]	; (8008694 <_printf_i+0x244>)
 80085c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085cc:	6029      	str	r1, [r5, #0]
 80085ce:	061d      	lsls	r5, r3, #24
 80085d0:	d514      	bpl.n	80085fc <_printf_i+0x1ac>
 80085d2:	07df      	lsls	r7, r3, #31
 80085d4:	bf44      	itt	mi
 80085d6:	f043 0320 	orrmi.w	r3, r3, #32
 80085da:	6023      	strmi	r3, [r4, #0]
 80085dc:	b91e      	cbnz	r6, 80085e6 <_printf_i+0x196>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	f023 0320 	bic.w	r3, r3, #32
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	2310      	movs	r3, #16
 80085e8:	e7b0      	b.n	800854c <_printf_i+0xfc>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f043 0320 	orr.w	r3, r3, #32
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	2378      	movs	r3, #120	; 0x78
 80085f4:	4828      	ldr	r0, [pc, #160]	; (8008698 <_printf_i+0x248>)
 80085f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085fa:	e7e3      	b.n	80085c4 <_printf_i+0x174>
 80085fc:	0659      	lsls	r1, r3, #25
 80085fe:	bf48      	it	mi
 8008600:	b2b6      	uxthmi	r6, r6
 8008602:	e7e6      	b.n	80085d2 <_printf_i+0x182>
 8008604:	4615      	mov	r5, r2
 8008606:	e7bb      	b.n	8008580 <_printf_i+0x130>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	6826      	ldr	r6, [r4, #0]
 800860c:	6961      	ldr	r1, [r4, #20]
 800860e:	1d18      	adds	r0, r3, #4
 8008610:	6028      	str	r0, [r5, #0]
 8008612:	0635      	lsls	r5, r6, #24
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	d501      	bpl.n	800861c <_printf_i+0x1cc>
 8008618:	6019      	str	r1, [r3, #0]
 800861a:	e002      	b.n	8008622 <_printf_i+0x1d2>
 800861c:	0670      	lsls	r0, r6, #25
 800861e:	d5fb      	bpl.n	8008618 <_printf_i+0x1c8>
 8008620:	8019      	strh	r1, [r3, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	4615      	mov	r5, r2
 8008628:	e7ba      	b.n	80085a0 <_printf_i+0x150>
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	602a      	str	r2, [r5, #0]
 8008630:	681d      	ldr	r5, [r3, #0]
 8008632:	6862      	ldr	r2, [r4, #4]
 8008634:	2100      	movs	r1, #0
 8008636:	4628      	mov	r0, r5
 8008638:	f7f7 fe0a 	bl	8000250 <memchr>
 800863c:	b108      	cbz	r0, 8008642 <_printf_i+0x1f2>
 800863e:	1b40      	subs	r0, r0, r5
 8008640:	6060      	str	r0, [r4, #4]
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	2300      	movs	r3, #0
 8008648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864c:	e7a8      	b.n	80085a0 <_printf_i+0x150>
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	462a      	mov	r2, r5
 8008652:	4649      	mov	r1, r9
 8008654:	4640      	mov	r0, r8
 8008656:	47d0      	blx	sl
 8008658:	3001      	adds	r0, #1
 800865a:	d0ab      	beq.n	80085b4 <_printf_i+0x164>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	079b      	lsls	r3, r3, #30
 8008660:	d413      	bmi.n	800868a <_printf_i+0x23a>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	4298      	cmp	r0, r3
 8008668:	bfb8      	it	lt
 800866a:	4618      	movlt	r0, r3
 800866c:	e7a4      	b.n	80085b8 <_printf_i+0x168>
 800866e:	2301      	movs	r3, #1
 8008670:	4632      	mov	r2, r6
 8008672:	4649      	mov	r1, r9
 8008674:	4640      	mov	r0, r8
 8008676:	47d0      	blx	sl
 8008678:	3001      	adds	r0, #1
 800867a:	d09b      	beq.n	80085b4 <_printf_i+0x164>
 800867c:	3501      	adds	r5, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	9903      	ldr	r1, [sp, #12]
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	42ab      	cmp	r3, r5
 8008686:	dcf2      	bgt.n	800866e <_printf_i+0x21e>
 8008688:	e7eb      	b.n	8008662 <_printf_i+0x212>
 800868a:	2500      	movs	r5, #0
 800868c:	f104 0619 	add.w	r6, r4, #25
 8008690:	e7f5      	b.n	800867e <_printf_i+0x22e>
 8008692:	bf00      	nop
 8008694:	0800ac0e 	.word	0x0800ac0e
 8008698:	0800ac1f 	.word	0x0800ac1f

0800869c <siprintf>:
 800869c:	b40e      	push	{r1, r2, r3}
 800869e:	b500      	push	{lr}
 80086a0:	b09c      	sub	sp, #112	; 0x70
 80086a2:	ab1d      	add	r3, sp, #116	; 0x74
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	9006      	str	r0, [sp, #24]
 80086a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086ac:	4809      	ldr	r0, [pc, #36]	; (80086d4 <siprintf+0x38>)
 80086ae:	9107      	str	r1, [sp, #28]
 80086b0:	9104      	str	r1, [sp, #16]
 80086b2:	4909      	ldr	r1, [pc, #36]	; (80086d8 <siprintf+0x3c>)
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	9105      	str	r1, [sp, #20]
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	a902      	add	r1, sp, #8
 80086c0:	f001 fb76 	bl	8009db0 <_svfiprintf_r>
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	b01c      	add	sp, #112	; 0x70
 80086cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d0:	b003      	add	sp, #12
 80086d2:	4770      	bx	lr
 80086d4:	20000048 	.word	0x20000048
 80086d8:	ffff0208 	.word	0xffff0208

080086dc <_strtol_l.constprop.0>:
 80086dc:	2b01      	cmp	r3, #1
 80086de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e2:	d001      	beq.n	80086e8 <_strtol_l.constprop.0+0xc>
 80086e4:	2b24      	cmp	r3, #36	; 0x24
 80086e6:	d906      	bls.n	80086f6 <_strtol_l.constprop.0+0x1a>
 80086e8:	f7ff fb56 	bl	8007d98 <__errno>
 80086ec:	2316      	movs	r3, #22
 80086ee:	6003      	str	r3, [r0, #0]
 80086f0:	2000      	movs	r0, #0
 80086f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087dc <_strtol_l.constprop.0+0x100>
 80086fa:	460d      	mov	r5, r1
 80086fc:	462e      	mov	r6, r5
 80086fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008702:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008706:	f017 0708 	ands.w	r7, r7, #8
 800870a:	d1f7      	bne.n	80086fc <_strtol_l.constprop.0+0x20>
 800870c:	2c2d      	cmp	r4, #45	; 0x2d
 800870e:	d132      	bne.n	8008776 <_strtol_l.constprop.0+0x9a>
 8008710:	782c      	ldrb	r4, [r5, #0]
 8008712:	2701      	movs	r7, #1
 8008714:	1cb5      	adds	r5, r6, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d05b      	beq.n	80087d2 <_strtol_l.constprop.0+0xf6>
 800871a:	2b10      	cmp	r3, #16
 800871c:	d109      	bne.n	8008732 <_strtol_l.constprop.0+0x56>
 800871e:	2c30      	cmp	r4, #48	; 0x30
 8008720:	d107      	bne.n	8008732 <_strtol_l.constprop.0+0x56>
 8008722:	782c      	ldrb	r4, [r5, #0]
 8008724:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008728:	2c58      	cmp	r4, #88	; 0x58
 800872a:	d14d      	bne.n	80087c8 <_strtol_l.constprop.0+0xec>
 800872c:	786c      	ldrb	r4, [r5, #1]
 800872e:	2310      	movs	r3, #16
 8008730:	3502      	adds	r5, #2
 8008732:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008736:	f108 38ff 	add.w	r8, r8, #4294967295
 800873a:	f04f 0c00 	mov.w	ip, #0
 800873e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008742:	4666      	mov	r6, ip
 8008744:	fb03 8a19 	mls	sl, r3, r9, r8
 8008748:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800874c:	f1be 0f09 	cmp.w	lr, #9
 8008750:	d816      	bhi.n	8008780 <_strtol_l.constprop.0+0xa4>
 8008752:	4674      	mov	r4, lr
 8008754:	42a3      	cmp	r3, r4
 8008756:	dd24      	ble.n	80087a2 <_strtol_l.constprop.0+0xc6>
 8008758:	f1bc 0f00 	cmp.w	ip, #0
 800875c:	db1e      	blt.n	800879c <_strtol_l.constprop.0+0xc0>
 800875e:	45b1      	cmp	r9, r6
 8008760:	d31c      	bcc.n	800879c <_strtol_l.constprop.0+0xc0>
 8008762:	d101      	bne.n	8008768 <_strtol_l.constprop.0+0x8c>
 8008764:	45a2      	cmp	sl, r4
 8008766:	db19      	blt.n	800879c <_strtol_l.constprop.0+0xc0>
 8008768:	fb06 4603 	mla	r6, r6, r3, r4
 800876c:	f04f 0c01 	mov.w	ip, #1
 8008770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008774:	e7e8      	b.n	8008748 <_strtol_l.constprop.0+0x6c>
 8008776:	2c2b      	cmp	r4, #43	; 0x2b
 8008778:	bf04      	itt	eq
 800877a:	782c      	ldrbeq	r4, [r5, #0]
 800877c:	1cb5      	addeq	r5, r6, #2
 800877e:	e7ca      	b.n	8008716 <_strtol_l.constprop.0+0x3a>
 8008780:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008784:	f1be 0f19 	cmp.w	lr, #25
 8008788:	d801      	bhi.n	800878e <_strtol_l.constprop.0+0xb2>
 800878a:	3c37      	subs	r4, #55	; 0x37
 800878c:	e7e2      	b.n	8008754 <_strtol_l.constprop.0+0x78>
 800878e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008792:	f1be 0f19 	cmp.w	lr, #25
 8008796:	d804      	bhi.n	80087a2 <_strtol_l.constprop.0+0xc6>
 8008798:	3c57      	subs	r4, #87	; 0x57
 800879a:	e7db      	b.n	8008754 <_strtol_l.constprop.0+0x78>
 800879c:	f04f 3cff 	mov.w	ip, #4294967295
 80087a0:	e7e6      	b.n	8008770 <_strtol_l.constprop.0+0x94>
 80087a2:	f1bc 0f00 	cmp.w	ip, #0
 80087a6:	da05      	bge.n	80087b4 <_strtol_l.constprop.0+0xd8>
 80087a8:	2322      	movs	r3, #34	; 0x22
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	4646      	mov	r6, r8
 80087ae:	b942      	cbnz	r2, 80087c2 <_strtol_l.constprop.0+0xe6>
 80087b0:	4630      	mov	r0, r6
 80087b2:	e79e      	b.n	80086f2 <_strtol_l.constprop.0+0x16>
 80087b4:	b107      	cbz	r7, 80087b8 <_strtol_l.constprop.0+0xdc>
 80087b6:	4276      	negs	r6, r6
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d0f9      	beq.n	80087b0 <_strtol_l.constprop.0+0xd4>
 80087bc:	f1bc 0f00 	cmp.w	ip, #0
 80087c0:	d000      	beq.n	80087c4 <_strtol_l.constprop.0+0xe8>
 80087c2:	1e69      	subs	r1, r5, #1
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	e7f3      	b.n	80087b0 <_strtol_l.constprop.0+0xd4>
 80087c8:	2430      	movs	r4, #48	; 0x30
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1b1      	bne.n	8008732 <_strtol_l.constprop.0+0x56>
 80087ce:	2308      	movs	r3, #8
 80087d0:	e7af      	b.n	8008732 <_strtol_l.constprop.0+0x56>
 80087d2:	2c30      	cmp	r4, #48	; 0x30
 80087d4:	d0a5      	beq.n	8008722 <_strtol_l.constprop.0+0x46>
 80087d6:	230a      	movs	r3, #10
 80087d8:	e7ab      	b.n	8008732 <_strtol_l.constprop.0+0x56>
 80087da:	bf00      	nop
 80087dc:	0800ac31 	.word	0x0800ac31

080087e0 <strtol>:
 80087e0:	4613      	mov	r3, r2
 80087e2:	460a      	mov	r2, r1
 80087e4:	4601      	mov	r1, r0
 80087e6:	4802      	ldr	r0, [pc, #8]	; (80087f0 <strtol+0x10>)
 80087e8:	6800      	ldr	r0, [r0, #0]
 80087ea:	f7ff bf77 	b.w	80086dc <_strtol_l.constprop.0>
 80087ee:	bf00      	nop
 80087f0:	20000048 	.word	0x20000048

080087f4 <quorem>:
 80087f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	6903      	ldr	r3, [r0, #16]
 80087fa:	690c      	ldr	r4, [r1, #16]
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	4607      	mov	r7, r0
 8008800:	f2c0 8081 	blt.w	8008906 <quorem+0x112>
 8008804:	3c01      	subs	r4, #1
 8008806:	f101 0814 	add.w	r8, r1, #20
 800880a:	f100 0514 	add.w	r5, r0, #20
 800880e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800881c:	3301      	adds	r3, #1
 800881e:	429a      	cmp	r2, r3
 8008820:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008828:	fbb2 f6f3 	udiv	r6, r2, r3
 800882c:	d331      	bcc.n	8008892 <quorem+0x9e>
 800882e:	f04f 0e00 	mov.w	lr, #0
 8008832:	4640      	mov	r0, r8
 8008834:	46ac      	mov	ip, r5
 8008836:	46f2      	mov	sl, lr
 8008838:	f850 2b04 	ldr.w	r2, [r0], #4
 800883c:	b293      	uxth	r3, r2
 800883e:	fb06 e303 	mla	r3, r6, r3, lr
 8008842:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008846:	b29b      	uxth	r3, r3
 8008848:	ebaa 0303 	sub.w	r3, sl, r3
 800884c:	f8dc a000 	ldr.w	sl, [ip]
 8008850:	0c12      	lsrs	r2, r2, #16
 8008852:	fa13 f38a 	uxtah	r3, r3, sl
 8008856:	fb06 e202 	mla	r2, r6, r2, lr
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	9b00      	ldr	r3, [sp, #0]
 800885e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008862:	b292      	uxth	r2, r2
 8008864:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800886c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008870:	4581      	cmp	r9, r0
 8008872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008876:	f84c 3b04 	str.w	r3, [ip], #4
 800887a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800887e:	d2db      	bcs.n	8008838 <quorem+0x44>
 8008880:	f855 300b 	ldr.w	r3, [r5, fp]
 8008884:	b92b      	cbnz	r3, 8008892 <quorem+0x9e>
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	3b04      	subs	r3, #4
 800888a:	429d      	cmp	r5, r3
 800888c:	461a      	mov	r2, r3
 800888e:	d32e      	bcc.n	80088ee <quorem+0xfa>
 8008890:	613c      	str	r4, [r7, #16]
 8008892:	4638      	mov	r0, r7
 8008894:	f001 f838 	bl	8009908 <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	db24      	blt.n	80088e6 <quorem+0xf2>
 800889c:	3601      	adds	r6, #1
 800889e:	4628      	mov	r0, r5
 80088a0:	f04f 0c00 	mov.w	ip, #0
 80088a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80088a8:	f8d0 e000 	ldr.w	lr, [r0]
 80088ac:	b293      	uxth	r3, r2
 80088ae:	ebac 0303 	sub.w	r3, ip, r3
 80088b2:	0c12      	lsrs	r2, r2, #16
 80088b4:	fa13 f38e 	uxtah	r3, r3, lr
 80088b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088c6:	45c1      	cmp	r9, r8
 80088c8:	f840 3b04 	str.w	r3, [r0], #4
 80088cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088d0:	d2e8      	bcs.n	80088a4 <quorem+0xb0>
 80088d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088da:	b922      	cbnz	r2, 80088e6 <quorem+0xf2>
 80088dc:	3b04      	subs	r3, #4
 80088de:	429d      	cmp	r5, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	d30a      	bcc.n	80088fa <quorem+0x106>
 80088e4:	613c      	str	r4, [r7, #16]
 80088e6:	4630      	mov	r0, r6
 80088e8:	b003      	add	sp, #12
 80088ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	d1cc      	bne.n	8008890 <quorem+0x9c>
 80088f6:	3c01      	subs	r4, #1
 80088f8:	e7c7      	b.n	800888a <quorem+0x96>
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	3b04      	subs	r3, #4
 80088fe:	2a00      	cmp	r2, #0
 8008900:	d1f0      	bne.n	80088e4 <quorem+0xf0>
 8008902:	3c01      	subs	r4, #1
 8008904:	e7eb      	b.n	80088de <quorem+0xea>
 8008906:	2000      	movs	r0, #0
 8008908:	e7ee      	b.n	80088e8 <quorem+0xf4>
 800890a:	0000      	movs	r0, r0
 800890c:	0000      	movs	r0, r0
	...

08008910 <_dtoa_r>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	ed2d 8b02 	vpush	{d8}
 8008918:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800891a:	b091      	sub	sp, #68	; 0x44
 800891c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008920:	ec59 8b10 	vmov	r8, r9, d0
 8008924:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008926:	9106      	str	r1, [sp, #24]
 8008928:	4606      	mov	r6, r0
 800892a:	9208      	str	r2, [sp, #32]
 800892c:	930c      	str	r3, [sp, #48]	; 0x30
 800892e:	b975      	cbnz	r5, 800894e <_dtoa_r+0x3e>
 8008930:	2010      	movs	r0, #16
 8008932:	f000 fd5f 	bl	80093f4 <malloc>
 8008936:	4602      	mov	r2, r0
 8008938:	6270      	str	r0, [r6, #36]	; 0x24
 800893a:	b920      	cbnz	r0, 8008946 <_dtoa_r+0x36>
 800893c:	4baa      	ldr	r3, [pc, #680]	; (8008be8 <_dtoa_r+0x2d8>)
 800893e:	21ea      	movs	r1, #234	; 0xea
 8008940:	48aa      	ldr	r0, [pc, #680]	; (8008bec <_dtoa_r+0x2dc>)
 8008942:	f001 fb45 	bl	8009fd0 <__assert_func>
 8008946:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800894a:	6005      	str	r5, [r0, #0]
 800894c:	60c5      	str	r5, [r0, #12]
 800894e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008950:	6819      	ldr	r1, [r3, #0]
 8008952:	b151      	cbz	r1, 800896a <_dtoa_r+0x5a>
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	604a      	str	r2, [r1, #4]
 8008958:	2301      	movs	r3, #1
 800895a:	4093      	lsls	r3, r2
 800895c:	608b      	str	r3, [r1, #8]
 800895e:	4630      	mov	r0, r6
 8008960:	f000 fd90 	bl	8009484 <_Bfree>
 8008964:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f1b9 0300 	subs.w	r3, r9, #0
 800896e:	bfbb      	ittet	lt
 8008970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008974:	9303      	strlt	r3, [sp, #12]
 8008976:	2300      	movge	r3, #0
 8008978:	2201      	movlt	r2, #1
 800897a:	bfac      	ite	ge
 800897c:	6023      	strge	r3, [r4, #0]
 800897e:	6022      	strlt	r2, [r4, #0]
 8008980:	4b9b      	ldr	r3, [pc, #620]	; (8008bf0 <_dtoa_r+0x2e0>)
 8008982:	9c03      	ldr	r4, [sp, #12]
 8008984:	43a3      	bics	r3, r4
 8008986:	d11c      	bne.n	80089c2 <_dtoa_r+0xb2>
 8008988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800898a:	f242 730f 	movw	r3, #9999	; 0x270f
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008994:	ea53 0308 	orrs.w	r3, r3, r8
 8008998:	f000 84fd 	beq.w	8009396 <_dtoa_r+0xa86>
 800899c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800899e:	b963      	cbnz	r3, 80089ba <_dtoa_r+0xaa>
 80089a0:	4b94      	ldr	r3, [pc, #592]	; (8008bf4 <_dtoa_r+0x2e4>)
 80089a2:	e01f      	b.n	80089e4 <_dtoa_r+0xd4>
 80089a4:	4b94      	ldr	r3, [pc, #592]	; (8008bf8 <_dtoa_r+0x2e8>)
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	3308      	adds	r3, #8
 80089aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	9801      	ldr	r0, [sp, #4]
 80089b0:	b011      	add	sp, #68	; 0x44
 80089b2:	ecbd 8b02 	vpop	{d8}
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	4b8e      	ldr	r3, [pc, #568]	; (8008bf4 <_dtoa_r+0x2e4>)
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	3303      	adds	r3, #3
 80089c0:	e7f3      	b.n	80089aa <_dtoa_r+0x9a>
 80089c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80089c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80089ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ce:	d10b      	bne.n	80089e8 <_dtoa_r+0xd8>
 80089d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089d2:	2301      	movs	r3, #1
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 84d9 	beq.w	8009390 <_dtoa_r+0xa80>
 80089de:	4887      	ldr	r0, [pc, #540]	; (8008bfc <_dtoa_r+0x2ec>)
 80089e0:	6018      	str	r0, [r3, #0]
 80089e2:	1e43      	subs	r3, r0, #1
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	e7e2      	b.n	80089ae <_dtoa_r+0x9e>
 80089e8:	a90f      	add	r1, sp, #60	; 0x3c
 80089ea:	aa0e      	add	r2, sp, #56	; 0x38
 80089ec:	4630      	mov	r0, r6
 80089ee:	eeb0 0b48 	vmov.f64	d0, d8
 80089f2:	f001 f82f 	bl	8009a54 <__d2b>
 80089f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80089fa:	4605      	mov	r5, r0
 80089fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80089fe:	2900      	cmp	r1, #0
 8008a00:	d046      	beq.n	8008a90 <_dtoa_r+0x180>
 8008a02:	ee18 4a90 	vmov	r4, s17
 8008a06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a0a:	ec53 2b18 	vmov	r2, r3, d8
 8008a0e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008a12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a1a:	2400      	movs	r4, #0
 8008a1c:	ec43 2b16 	vmov	d6, r2, r3
 8008a20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008a24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008bd0 <_dtoa_r+0x2c0>
 8008a28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008a2c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008bd8 <_dtoa_r+0x2c8>
 8008a30:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008a34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008be0 <_dtoa_r+0x2d0>
 8008a38:	ee07 1a90 	vmov	s15, r1
 8008a3c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008a40:	eeb0 7b46 	vmov.f64	d7, d6
 8008a44:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008a48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008a4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	ee16 ba90 	vmov	fp, s13
 8008a58:	940a      	str	r4, [sp, #40]	; 0x28
 8008a5a:	d508      	bpl.n	8008a6e <_dtoa_r+0x15e>
 8008a5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008a60:	eeb4 6b47 	vcmp.f64	d6, d7
 8008a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a68:	bf18      	it	ne
 8008a6a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008a6e:	f1bb 0f16 	cmp.w	fp, #22
 8008a72:	d82f      	bhi.n	8008ad4 <_dtoa_r+0x1c4>
 8008a74:	4b62      	ldr	r3, [pc, #392]	; (8008c00 <_dtoa_r+0x2f0>)
 8008a76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a7a:	ed93 7b00 	vldr	d7, [r3]
 8008a7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a86:	d501      	bpl.n	8008a8c <_dtoa_r+0x17c>
 8008a88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e022      	b.n	8008ad6 <_dtoa_r+0x1c6>
 8008a90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a92:	4401      	add	r1, r0
 8008a94:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	bfc1      	itttt	gt
 8008a9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008aa0:	fa04 f303 	lslgt.w	r3, r4, r3
 8008aa4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008aa8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008aac:	bfd6      	itet	le
 8008aae:	f1c3 0320 	rsble	r3, r3, #32
 8008ab2:	ea43 0808 	orrgt.w	r8, r3, r8
 8008ab6:	fa08 f803 	lslle.w	r8, r8, r3
 8008aba:	ee07 8a90 	vmov	s15, r8
 8008abe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008ac2:	3901      	subs	r1, #1
 8008ac4:	ee17 4a90 	vmov	r4, s15
 8008ac8:	ec53 2b17 	vmov	r2, r3, d7
 8008acc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008ad0:	2401      	movs	r4, #1
 8008ad2:	e7a3      	b.n	8008a1c <_dtoa_r+0x10c>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ad8:	1a43      	subs	r3, r0, r1
 8008ada:	1e5a      	subs	r2, r3, #1
 8008adc:	bf45      	ittet	mi
 8008ade:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ae2:	9304      	strmi	r3, [sp, #16]
 8008ae4:	2300      	movpl	r3, #0
 8008ae6:	2300      	movmi	r3, #0
 8008ae8:	9205      	str	r2, [sp, #20]
 8008aea:	bf54      	ite	pl
 8008aec:	9304      	strpl	r3, [sp, #16]
 8008aee:	9305      	strmi	r3, [sp, #20]
 8008af0:	f1bb 0f00 	cmp.w	fp, #0
 8008af4:	db18      	blt.n	8008b28 <_dtoa_r+0x218>
 8008af6:	9b05      	ldr	r3, [sp, #20]
 8008af8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008afc:	445b      	add	r3, fp
 8008afe:	9305      	str	r3, [sp, #20]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9a06      	ldr	r2, [sp, #24]
 8008b04:	2a09      	cmp	r2, #9
 8008b06:	d849      	bhi.n	8008b9c <_dtoa_r+0x28c>
 8008b08:	2a05      	cmp	r2, #5
 8008b0a:	bfc4      	itt	gt
 8008b0c:	3a04      	subgt	r2, #4
 8008b0e:	9206      	strgt	r2, [sp, #24]
 8008b10:	9a06      	ldr	r2, [sp, #24]
 8008b12:	f1a2 0202 	sub.w	r2, r2, #2
 8008b16:	bfcc      	ite	gt
 8008b18:	2400      	movgt	r4, #0
 8008b1a:	2401      	movle	r4, #1
 8008b1c:	2a03      	cmp	r2, #3
 8008b1e:	d848      	bhi.n	8008bb2 <_dtoa_r+0x2a2>
 8008b20:	e8df f002 	tbb	[pc, r2]
 8008b24:	3a2c2e0b 	.word	0x3a2c2e0b
 8008b28:	9b04      	ldr	r3, [sp, #16]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	eba3 030b 	sub.w	r3, r3, fp
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	9209      	str	r2, [sp, #36]	; 0x24
 8008b34:	f1cb 0300 	rsb	r3, fp, #0
 8008b38:	e7e3      	b.n	8008b02 <_dtoa_r+0x1f2>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	9207      	str	r2, [sp, #28]
 8008b3e:	9a08      	ldr	r2, [sp, #32]
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	dc39      	bgt.n	8008bb8 <_dtoa_r+0x2a8>
 8008b44:	f04f 0a01 	mov.w	sl, #1
 8008b48:	46d1      	mov	r9, sl
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	f8cd a020 	str.w	sl, [sp, #32]
 8008b50:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008b52:	2100      	movs	r1, #0
 8008b54:	6079      	str	r1, [r7, #4]
 8008b56:	2004      	movs	r0, #4
 8008b58:	f100 0c14 	add.w	ip, r0, #20
 8008b5c:	4594      	cmp	ip, r2
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	d92f      	bls.n	8008bc2 <_dtoa_r+0x2b2>
 8008b62:	4630      	mov	r0, r6
 8008b64:	930d      	str	r3, [sp, #52]	; 0x34
 8008b66:	f000 fc4d 	bl	8009404 <_Balloc>
 8008b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6c:	9001      	str	r0, [sp, #4]
 8008b6e:	4602      	mov	r2, r0
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d149      	bne.n	8008c08 <_dtoa_r+0x2f8>
 8008b74:	4b23      	ldr	r3, [pc, #140]	; (8008c04 <_dtoa_r+0x2f4>)
 8008b76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b7a:	e6e1      	b.n	8008940 <_dtoa_r+0x30>
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	e7dd      	b.n	8008b3c <_dtoa_r+0x22c>
 8008b80:	2200      	movs	r2, #0
 8008b82:	9207      	str	r2, [sp, #28]
 8008b84:	9a08      	ldr	r2, [sp, #32]
 8008b86:	eb0b 0a02 	add.w	sl, fp, r2
 8008b8a:	f10a 0901 	add.w	r9, sl, #1
 8008b8e:	464a      	mov	r2, r9
 8008b90:	2a01      	cmp	r2, #1
 8008b92:	bfb8      	it	lt
 8008b94:	2201      	movlt	r2, #1
 8008b96:	e7db      	b.n	8008b50 <_dtoa_r+0x240>
 8008b98:	2201      	movs	r2, #1
 8008b9a:	e7f2      	b.n	8008b82 <_dtoa_r+0x272>
 8008b9c:	2401      	movs	r4, #1
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ba8:	2100      	movs	r1, #0
 8008baa:	46d1      	mov	r9, sl
 8008bac:	2212      	movs	r2, #18
 8008bae:	9108      	str	r1, [sp, #32]
 8008bb0:	e7ce      	b.n	8008b50 <_dtoa_r+0x240>
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	9207      	str	r2, [sp, #28]
 8008bb6:	e7f5      	b.n	8008ba4 <_dtoa_r+0x294>
 8008bb8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bbc:	46d1      	mov	r9, sl
 8008bbe:	4652      	mov	r2, sl
 8008bc0:	e7c6      	b.n	8008b50 <_dtoa_r+0x240>
 8008bc2:	3101      	adds	r1, #1
 8008bc4:	6079      	str	r1, [r7, #4]
 8008bc6:	0040      	lsls	r0, r0, #1
 8008bc8:	e7c6      	b.n	8008b58 <_dtoa_r+0x248>
 8008bca:	bf00      	nop
 8008bcc:	f3af 8000 	nop.w
 8008bd0:	636f4361 	.word	0x636f4361
 8008bd4:	3fd287a7 	.word	0x3fd287a7
 8008bd8:	8b60c8b3 	.word	0x8b60c8b3
 8008bdc:	3fc68a28 	.word	0x3fc68a28
 8008be0:	509f79fb 	.word	0x509f79fb
 8008be4:	3fd34413 	.word	0x3fd34413
 8008be8:	0800ad3e 	.word	0x0800ad3e
 8008bec:	0800ad55 	.word	0x0800ad55
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	0800ad3a 	.word	0x0800ad3a
 8008bf8:	0800ad31 	.word	0x0800ad31
 8008bfc:	0800ac0d 	.word	0x0800ac0d
 8008c00:	0800ae48 	.word	0x0800ae48
 8008c04:	0800adb0 	.word	0x0800adb0
 8008c08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008c0a:	9901      	ldr	r1, [sp, #4]
 8008c0c:	6011      	str	r1, [r2, #0]
 8008c0e:	f1b9 0f0e 	cmp.w	r9, #14
 8008c12:	d86c      	bhi.n	8008cee <_dtoa_r+0x3de>
 8008c14:	2c00      	cmp	r4, #0
 8008c16:	d06a      	beq.n	8008cee <_dtoa_r+0x3de>
 8008c18:	f1bb 0f00 	cmp.w	fp, #0
 8008c1c:	f340 80a0 	ble.w	8008d60 <_dtoa_r+0x450>
 8008c20:	49c1      	ldr	r1, [pc, #772]	; (8008f28 <_dtoa_r+0x618>)
 8008c22:	f00b 020f 	and.w	r2, fp, #15
 8008c26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008c2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c2e:	ed92 7b00 	vldr	d7, [r2]
 8008c32:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008c36:	f000 8087 	beq.w	8008d48 <_dtoa_r+0x438>
 8008c3a:	4abc      	ldr	r2, [pc, #752]	; (8008f2c <_dtoa_r+0x61c>)
 8008c3c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008c40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008c44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008c48:	f001 010f 	and.w	r1, r1, #15
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	48b7      	ldr	r0, [pc, #732]	; (8008f2c <_dtoa_r+0x61c>)
 8008c50:	2900      	cmp	r1, #0
 8008c52:	d17b      	bne.n	8008d4c <_dtoa_r+0x43c>
 8008c54:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008c58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008c5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c62:	2900      	cmp	r1, #0
 8008c64:	f000 80a2 	beq.w	8008dac <_dtoa_r+0x49c>
 8008c68:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008c6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c78:	f140 8098 	bpl.w	8008dac <_dtoa_r+0x49c>
 8008c7c:	f1b9 0f00 	cmp.w	r9, #0
 8008c80:	f000 8094 	beq.w	8008dac <_dtoa_r+0x49c>
 8008c84:	f1ba 0f00 	cmp.w	sl, #0
 8008c88:	dd2f      	ble.n	8008cea <_dtoa_r+0x3da>
 8008c8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c96:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c9a:	3201      	adds	r2, #1
 8008c9c:	4650      	mov	r0, sl
 8008c9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008ca2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008ca6:	ee07 2a90 	vmov	s15, r2
 8008caa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008cae:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008cb2:	ee15 4a90 	vmov	r4, s11
 8008cb6:	ec52 1b15 	vmov	r1, r2, d5
 8008cba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d177      	bne.n	8008db2 <_dtoa_r+0x4a2>
 8008cc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008cc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008cca:	ec42 1b17 	vmov	d7, r1, r2
 8008cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd6:	f300 8263 	bgt.w	80091a0 <_dtoa_r+0x890>
 8008cda:	eeb1 7b47 	vneg.f64	d7, d7
 8008cde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce6:	f100 8258 	bmi.w	800919a <_dtoa_r+0x88a>
 8008cea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	f2c0 811d 	blt.w	8008f30 <_dtoa_r+0x620>
 8008cf6:	f1bb 0f0e 	cmp.w	fp, #14
 8008cfa:	f300 8119 	bgt.w	8008f30 <_dtoa_r+0x620>
 8008cfe:	4b8a      	ldr	r3, [pc, #552]	; (8008f28 <_dtoa_r+0x618>)
 8008d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d04:	ed93 6b00 	vldr	d6, [r3]
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f280 80b7 	bge.w	8008e7e <_dtoa_r+0x56e>
 8008d10:	f1b9 0f00 	cmp.w	r9, #0
 8008d14:	f300 80b3 	bgt.w	8008e7e <_dtoa_r+0x56e>
 8008d18:	f040 823f 	bne.w	800919a <_dtoa_r+0x88a>
 8008d1c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008d20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008d24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	464c      	mov	r4, r9
 8008d32:	464f      	mov	r7, r9
 8008d34:	f280 8215 	bge.w	8009162 <_dtoa_r+0x852>
 8008d38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d3c:	2331      	movs	r3, #49	; 0x31
 8008d3e:	f808 3b01 	strb.w	r3, [r8], #1
 8008d42:	f10b 0b01 	add.w	fp, fp, #1
 8008d46:	e211      	b.n	800916c <_dtoa_r+0x85c>
 8008d48:	2202      	movs	r2, #2
 8008d4a:	e780      	b.n	8008c4e <_dtoa_r+0x33e>
 8008d4c:	07cc      	lsls	r4, r1, #31
 8008d4e:	d504      	bpl.n	8008d5a <_dtoa_r+0x44a>
 8008d50:	ed90 6b00 	vldr	d6, [r0]
 8008d54:	3201      	adds	r2, #1
 8008d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d5a:	1049      	asrs	r1, r1, #1
 8008d5c:	3008      	adds	r0, #8
 8008d5e:	e777      	b.n	8008c50 <_dtoa_r+0x340>
 8008d60:	d022      	beq.n	8008da8 <_dtoa_r+0x498>
 8008d62:	f1cb 0100 	rsb	r1, fp, #0
 8008d66:	4a70      	ldr	r2, [pc, #448]	; (8008f28 <_dtoa_r+0x618>)
 8008d68:	f001 000f 	and.w	r0, r1, #15
 8008d6c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008d70:	ed92 7b00 	vldr	d7, [r2]
 8008d74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008d78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d7c:	486b      	ldr	r0, [pc, #428]	; (8008f2c <_dtoa_r+0x61c>)
 8008d7e:	1109      	asrs	r1, r1, #4
 8008d80:	2400      	movs	r4, #0
 8008d82:	2202      	movs	r2, #2
 8008d84:	b929      	cbnz	r1, 8008d92 <_dtoa_r+0x482>
 8008d86:	2c00      	cmp	r4, #0
 8008d88:	f43f af6a 	beq.w	8008c60 <_dtoa_r+0x350>
 8008d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d90:	e766      	b.n	8008c60 <_dtoa_r+0x350>
 8008d92:	07cf      	lsls	r7, r1, #31
 8008d94:	d505      	bpl.n	8008da2 <_dtoa_r+0x492>
 8008d96:	ed90 6b00 	vldr	d6, [r0]
 8008d9a:	3201      	adds	r2, #1
 8008d9c:	2401      	movs	r4, #1
 8008d9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008da2:	1049      	asrs	r1, r1, #1
 8008da4:	3008      	adds	r0, #8
 8008da6:	e7ed      	b.n	8008d84 <_dtoa_r+0x474>
 8008da8:	2202      	movs	r2, #2
 8008daa:	e759      	b.n	8008c60 <_dtoa_r+0x350>
 8008dac:	465f      	mov	r7, fp
 8008dae:	4648      	mov	r0, r9
 8008db0:	e775      	b.n	8008c9e <_dtoa_r+0x38e>
 8008db2:	ec42 1b17 	vmov	d7, r1, r2
 8008db6:	4a5c      	ldr	r2, [pc, #368]	; (8008f28 <_dtoa_r+0x618>)
 8008db8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008dbc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008dc0:	9a01      	ldr	r2, [sp, #4]
 8008dc2:	1814      	adds	r4, r2, r0
 8008dc4:	9a07      	ldr	r2, [sp, #28]
 8008dc6:	b352      	cbz	r2, 8008e1e <_dtoa_r+0x50e>
 8008dc8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008dcc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008dd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008dd4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008dd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008ddc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008de0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008de4:	ee14 2a90 	vmov	r2, s9
 8008de8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008dec:	3230      	adds	r2, #48	; 0x30
 8008dee:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008df2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfa:	f808 2b01 	strb.w	r2, [r8], #1
 8008dfe:	d439      	bmi.n	8008e74 <_dtoa_r+0x564>
 8008e00:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008e04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0c:	d472      	bmi.n	8008ef4 <_dtoa_r+0x5e4>
 8008e0e:	45a0      	cmp	r8, r4
 8008e10:	f43f af6b 	beq.w	8008cea <_dtoa_r+0x3da>
 8008e14:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008e18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008e1c:	e7e0      	b.n	8008de0 <_dtoa_r+0x4d0>
 8008e1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e26:	4621      	mov	r1, r4
 8008e28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008e2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008e30:	ee14 2a90 	vmov	r2, s9
 8008e34:	3230      	adds	r2, #48	; 0x30
 8008e36:	f808 2b01 	strb.w	r2, [r8], #1
 8008e3a:	45a0      	cmp	r8, r4
 8008e3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008e40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e44:	d118      	bne.n	8008e78 <_dtoa_r+0x568>
 8008e46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008e4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	dc4d      	bgt.n	8008ef4 <_dtoa_r+0x5e4>
 8008e58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e64:	f57f af41 	bpl.w	8008cea <_dtoa_r+0x3da>
 8008e68:	4688      	mov	r8, r1
 8008e6a:	3901      	subs	r1, #1
 8008e6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008e70:	2b30      	cmp	r3, #48	; 0x30
 8008e72:	d0f9      	beq.n	8008e68 <_dtoa_r+0x558>
 8008e74:	46bb      	mov	fp, r7
 8008e76:	e02a      	b.n	8008ece <_dtoa_r+0x5be>
 8008e78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008e7c:	e7d6      	b.n	8008e2c <_dtoa_r+0x51c>
 8008e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008e86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008e8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008e92:	ee15 3a10 	vmov	r3, s10
 8008e96:	3330      	adds	r3, #48	; 0x30
 8008e98:	f808 3b01 	strb.w	r3, [r8], #1
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	eba8 0303 	sub.w	r3, r8, r3
 8008ea2:	4599      	cmp	r9, r3
 8008ea4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008ea8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008eac:	d133      	bne.n	8008f16 <_dtoa_r+0x606>
 8008eae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008eb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eba:	dc1a      	bgt.n	8008ef2 <_dtoa_r+0x5e2>
 8008ebc:	eeb4 7b46 	vcmp.f64	d7, d6
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	d103      	bne.n	8008ece <_dtoa_r+0x5be>
 8008ec6:	ee15 3a10 	vmov	r3, s10
 8008eca:	07d9      	lsls	r1, r3, #31
 8008ecc:	d411      	bmi.n	8008ef2 <_dtoa_r+0x5e2>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 fad7 	bl	8009484 <_Bfree>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eda:	f888 3000 	strb.w	r3, [r8]
 8008ede:	f10b 0301 	add.w	r3, fp, #1
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f43f ad61 	beq.w	80089ae <_dtoa_r+0x9e>
 8008eec:	f8c3 8000 	str.w	r8, [r3]
 8008ef0:	e55d      	b.n	80089ae <_dtoa_r+0x9e>
 8008ef2:	465f      	mov	r7, fp
 8008ef4:	4643      	mov	r3, r8
 8008ef6:	4698      	mov	r8, r3
 8008ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efc:	2a39      	cmp	r2, #57	; 0x39
 8008efe:	d106      	bne.n	8008f0e <_dtoa_r+0x5fe>
 8008f00:	9a01      	ldr	r2, [sp, #4]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d1f7      	bne.n	8008ef6 <_dtoa_r+0x5e6>
 8008f06:	9901      	ldr	r1, [sp, #4]
 8008f08:	2230      	movs	r2, #48	; 0x30
 8008f0a:	3701      	adds	r7, #1
 8008f0c:	700a      	strb	r2, [r1, #0]
 8008f0e:	781a      	ldrb	r2, [r3, #0]
 8008f10:	3201      	adds	r2, #1
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	e7ae      	b.n	8008e74 <_dtoa_r+0x564>
 8008f16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008f1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f22:	d1b2      	bne.n	8008e8a <_dtoa_r+0x57a>
 8008f24:	e7d3      	b.n	8008ece <_dtoa_r+0x5be>
 8008f26:	bf00      	nop
 8008f28:	0800ae48 	.word	0x0800ae48
 8008f2c:	0800ae20 	.word	0x0800ae20
 8008f30:	9907      	ldr	r1, [sp, #28]
 8008f32:	2900      	cmp	r1, #0
 8008f34:	f000 80d0 	beq.w	80090d8 <_dtoa_r+0x7c8>
 8008f38:	9906      	ldr	r1, [sp, #24]
 8008f3a:	2901      	cmp	r1, #1
 8008f3c:	f300 80b4 	bgt.w	80090a8 <_dtoa_r+0x798>
 8008f40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f42:	2900      	cmp	r1, #0
 8008f44:	f000 80ac 	beq.w	80090a0 <_dtoa_r+0x790>
 8008f48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008f50:	461c      	mov	r4, r3
 8008f52:	930a      	str	r3, [sp, #40]	; 0x28
 8008f54:	9b04      	ldr	r3, [sp, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	9b05      	ldr	r3, [sp, #20]
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	4413      	add	r3, r2
 8008f60:	4630      	mov	r0, r6
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	f000 fb46 	bl	80095f4 <__i2b>
 8008f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6a:	4607      	mov	r7, r0
 8008f6c:	f1b8 0f00 	cmp.w	r8, #0
 8008f70:	dd0d      	ble.n	8008f8e <_dtoa_r+0x67e>
 8008f72:	9a05      	ldr	r2, [sp, #20]
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	dd0a      	ble.n	8008f8e <_dtoa_r+0x67e>
 8008f78:	4542      	cmp	r2, r8
 8008f7a:	9904      	ldr	r1, [sp, #16]
 8008f7c:	bfa8      	it	ge
 8008f7e:	4642      	movge	r2, r8
 8008f80:	1a89      	subs	r1, r1, r2
 8008f82:	9104      	str	r1, [sp, #16]
 8008f84:	9905      	ldr	r1, [sp, #20]
 8008f86:	eba8 0802 	sub.w	r8, r8, r2
 8008f8a:	1a8a      	subs	r2, r1, r2
 8008f8c:	9205      	str	r2, [sp, #20]
 8008f8e:	b303      	cbz	r3, 8008fd2 <_dtoa_r+0x6c2>
 8008f90:	9a07      	ldr	r2, [sp, #28]
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	f000 80a5 	beq.w	80090e2 <_dtoa_r+0x7d2>
 8008f98:	2c00      	cmp	r4, #0
 8008f9a:	dd13      	ble.n	8008fc4 <_dtoa_r+0x6b4>
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fa4:	f000 fbe6 	bl	8009774 <__pow5mult>
 8008fa8:	462a      	mov	r2, r5
 8008faa:	4601      	mov	r1, r0
 8008fac:	4607      	mov	r7, r0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 fb36 	bl	8009620 <__multiply>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	900a      	str	r0, [sp, #40]	; 0x28
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 fa63 	bl	8009484 <_Bfree>
 8008fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc2:	4615      	mov	r5, r2
 8008fc4:	1b1a      	subs	r2, r3, r4
 8008fc6:	d004      	beq.n	8008fd2 <_dtoa_r+0x6c2>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 fbd2 	bl	8009774 <__pow5mult>
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f000 fb0d 	bl	80095f4 <__i2b>
 8008fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f340 8081 	ble.w	80090e6 <_dtoa_r+0x7d6>
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 fbc3 	bl	8009774 <__pow5mult>
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	dd7a      	ble.n	80090ec <_dtoa_r+0x7dc>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8008ffa:	6922      	ldr	r2, [r4, #16]
 8008ffc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009000:	6910      	ldr	r0, [r2, #16]
 8009002:	f000 faa7 	bl	8009554 <__hi0bits>
 8009006:	f1c0 0020 	rsb	r0, r0, #32
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	4418      	add	r0, r3
 800900e:	f010 001f 	ands.w	r0, r0, #31
 8009012:	f000 808c 	beq.w	800912e <_dtoa_r+0x81e>
 8009016:	f1c0 0220 	rsb	r2, r0, #32
 800901a:	2a04      	cmp	r2, #4
 800901c:	f340 8085 	ble.w	800912a <_dtoa_r+0x81a>
 8009020:	f1c0 001c 	rsb	r0, r0, #28
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4403      	add	r3, r0
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9b05      	ldr	r3, [sp, #20]
 800902c:	4403      	add	r3, r0
 800902e:	4480      	add	r8, r0
 8009030:	9305      	str	r3, [sp, #20]
 8009032:	9b04      	ldr	r3, [sp, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd05      	ble.n	8009044 <_dtoa_r+0x734>
 8009038:	4629      	mov	r1, r5
 800903a:	461a      	mov	r2, r3
 800903c:	4630      	mov	r0, r6
 800903e:	f000 fbf3 	bl	8009828 <__lshift>
 8009042:	4605      	mov	r5, r0
 8009044:	9b05      	ldr	r3, [sp, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dd05      	ble.n	8009056 <_dtoa_r+0x746>
 800904a:	4621      	mov	r1, r4
 800904c:	461a      	mov	r2, r3
 800904e:	4630      	mov	r0, r6
 8009050:	f000 fbea 	bl	8009828 <__lshift>
 8009054:	4604      	mov	r4, r0
 8009056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d06a      	beq.n	8009132 <_dtoa_r+0x822>
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 fc52 	bl	8009908 <__mcmp>
 8009064:	2800      	cmp	r0, #0
 8009066:	da64      	bge.n	8009132 <_dtoa_r+0x822>
 8009068:	2300      	movs	r3, #0
 800906a:	4629      	mov	r1, r5
 800906c:	220a      	movs	r2, #10
 800906e:	4630      	mov	r0, r6
 8009070:	f000 fa2a 	bl	80094c8 <__multadd>
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	f10b 3bff 	add.w	fp, fp, #4294967295
 800907a:	4605      	mov	r5, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 8191 	beq.w	80093a4 <_dtoa_r+0xa94>
 8009082:	4639      	mov	r1, r7
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4630      	mov	r0, r6
 800908a:	f000 fa1d 	bl	80094c8 <__multadd>
 800908e:	f1ba 0f00 	cmp.w	sl, #0
 8009092:	4607      	mov	r7, r0
 8009094:	f300 808d 	bgt.w	80091b2 <_dtoa_r+0x8a2>
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	2b02      	cmp	r3, #2
 800909c:	dc50      	bgt.n	8009140 <_dtoa_r+0x830>
 800909e:	e088      	b.n	80091b2 <_dtoa_r+0x8a2>
 80090a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090a6:	e751      	b.n	8008f4c <_dtoa_r+0x63c>
 80090a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	bfbf      	itttt	lt
 80090b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80090b2:	1ae3      	sublt	r3, r4, r3
 80090b4:	18d2      	addlt	r2, r2, r3
 80090b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80090b8:	bfb6      	itet	lt
 80090ba:	4623      	movlt	r3, r4
 80090bc:	1b1c      	subge	r4, r3, r4
 80090be:	2400      	movlt	r4, #0
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	bfb5      	itete	lt
 80090c6:	9a04      	ldrlt	r2, [sp, #16]
 80090c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80090cc:	eba2 0809 	sublt.w	r8, r2, r9
 80090d0:	464a      	movge	r2, r9
 80090d2:	bfb8      	it	lt
 80090d4:	2200      	movlt	r2, #0
 80090d6:	e73c      	b.n	8008f52 <_dtoa_r+0x642>
 80090d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80090dc:	9f07      	ldr	r7, [sp, #28]
 80090de:	461c      	mov	r4, r3
 80090e0:	e744      	b.n	8008f6c <_dtoa_r+0x65c>
 80090e2:	461a      	mov	r2, r3
 80090e4:	e770      	b.n	8008fc8 <_dtoa_r+0x6b8>
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	dc18      	bgt.n	800911e <_dtoa_r+0x80e>
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	b9b3      	cbnz	r3, 800911e <_dtoa_r+0x80e>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80090f6:	b9a2      	cbnz	r2, 8009122 <_dtoa_r+0x812>
 80090f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090fc:	0d12      	lsrs	r2, r2, #20
 80090fe:	0512      	lsls	r2, r2, #20
 8009100:	b18a      	cbz	r2, 8009126 <_dtoa_r+0x816>
 8009102:	9b04      	ldr	r3, [sp, #16]
 8009104:	3301      	adds	r3, #1
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	9b05      	ldr	r3, [sp, #20]
 800910a:	3301      	adds	r3, #1
 800910c:	9305      	str	r3, [sp, #20]
 800910e:	2301      	movs	r3, #1
 8009110:	930a      	str	r3, [sp, #40]	; 0x28
 8009112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f af70 	bne.w	8008ffa <_dtoa_r+0x6ea>
 800911a:	2001      	movs	r0, #1
 800911c:	e775      	b.n	800900a <_dtoa_r+0x6fa>
 800911e:	2300      	movs	r3, #0
 8009120:	e7f6      	b.n	8009110 <_dtoa_r+0x800>
 8009122:	9b02      	ldr	r3, [sp, #8]
 8009124:	e7f4      	b.n	8009110 <_dtoa_r+0x800>
 8009126:	920a      	str	r2, [sp, #40]	; 0x28
 8009128:	e7f3      	b.n	8009112 <_dtoa_r+0x802>
 800912a:	d082      	beq.n	8009032 <_dtoa_r+0x722>
 800912c:	4610      	mov	r0, r2
 800912e:	301c      	adds	r0, #28
 8009130:	e778      	b.n	8009024 <_dtoa_r+0x714>
 8009132:	f1b9 0f00 	cmp.w	r9, #0
 8009136:	dc37      	bgt.n	80091a8 <_dtoa_r+0x898>
 8009138:	9b06      	ldr	r3, [sp, #24]
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd34      	ble.n	80091a8 <_dtoa_r+0x898>
 800913e:	46ca      	mov	sl, r9
 8009140:	f1ba 0f00 	cmp.w	sl, #0
 8009144:	d10d      	bne.n	8009162 <_dtoa_r+0x852>
 8009146:	4621      	mov	r1, r4
 8009148:	4653      	mov	r3, sl
 800914a:	2205      	movs	r2, #5
 800914c:	4630      	mov	r0, r6
 800914e:	f000 f9bb 	bl	80094c8 <__multadd>
 8009152:	4601      	mov	r1, r0
 8009154:	4604      	mov	r4, r0
 8009156:	4628      	mov	r0, r5
 8009158:	f000 fbd6 	bl	8009908 <__mcmp>
 800915c:	2800      	cmp	r0, #0
 800915e:	f73f adeb 	bgt.w	8008d38 <_dtoa_r+0x428>
 8009162:	9b08      	ldr	r3, [sp, #32]
 8009164:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009168:	ea6f 0b03 	mvn.w	fp, r3
 800916c:	f04f 0900 	mov.w	r9, #0
 8009170:	4621      	mov	r1, r4
 8009172:	4630      	mov	r0, r6
 8009174:	f000 f986 	bl	8009484 <_Bfree>
 8009178:	2f00      	cmp	r7, #0
 800917a:	f43f aea8 	beq.w	8008ece <_dtoa_r+0x5be>
 800917e:	f1b9 0f00 	cmp.w	r9, #0
 8009182:	d005      	beq.n	8009190 <_dtoa_r+0x880>
 8009184:	45b9      	cmp	r9, r7
 8009186:	d003      	beq.n	8009190 <_dtoa_r+0x880>
 8009188:	4649      	mov	r1, r9
 800918a:	4630      	mov	r0, r6
 800918c:	f000 f97a 	bl	8009484 <_Bfree>
 8009190:	4639      	mov	r1, r7
 8009192:	4630      	mov	r0, r6
 8009194:	f000 f976 	bl	8009484 <_Bfree>
 8009198:	e699      	b.n	8008ece <_dtoa_r+0x5be>
 800919a:	2400      	movs	r4, #0
 800919c:	4627      	mov	r7, r4
 800919e:	e7e0      	b.n	8009162 <_dtoa_r+0x852>
 80091a0:	46bb      	mov	fp, r7
 80091a2:	4604      	mov	r4, r0
 80091a4:	4607      	mov	r7, r0
 80091a6:	e5c7      	b.n	8008d38 <_dtoa_r+0x428>
 80091a8:	9b07      	ldr	r3, [sp, #28]
 80091aa:	46ca      	mov	sl, r9
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8100 	beq.w	80093b2 <_dtoa_r+0xaa2>
 80091b2:	f1b8 0f00 	cmp.w	r8, #0
 80091b6:	dd05      	ble.n	80091c4 <_dtoa_r+0x8b4>
 80091b8:	4639      	mov	r1, r7
 80091ba:	4642      	mov	r2, r8
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 fb33 	bl	8009828 <__lshift>
 80091c2:	4607      	mov	r7, r0
 80091c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d05d      	beq.n	8009286 <_dtoa_r+0x976>
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 f919 	bl	8009404 <_Balloc>
 80091d2:	4680      	mov	r8, r0
 80091d4:	b928      	cbnz	r0, 80091e2 <_dtoa_r+0x8d2>
 80091d6:	4b82      	ldr	r3, [pc, #520]	; (80093e0 <_dtoa_r+0xad0>)
 80091d8:	4602      	mov	r2, r0
 80091da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091de:	f7ff bbaf 	b.w	8008940 <_dtoa_r+0x30>
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	3202      	adds	r2, #2
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	f107 010c 	add.w	r1, r7, #12
 80091ec:	300c      	adds	r0, #12
 80091ee:	f7fe fdfd 	bl	8007dec <memcpy>
 80091f2:	2201      	movs	r2, #1
 80091f4:	4641      	mov	r1, r8
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 fb16 	bl	8009828 <__lshift>
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	3301      	adds	r3, #1
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	4453      	add	r3, sl
 8009206:	9308      	str	r3, [sp, #32]
 8009208:	9b02      	ldr	r3, [sp, #8]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	46b9      	mov	r9, r7
 8009210:	9307      	str	r3, [sp, #28]
 8009212:	4607      	mov	r7, r0
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	4621      	mov	r1, r4
 8009218:	3b01      	subs	r3, #1
 800921a:	4628      	mov	r0, r5
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	f7ff fae9 	bl	80087f4 <quorem>
 8009222:	4603      	mov	r3, r0
 8009224:	3330      	adds	r3, #48	; 0x30
 8009226:	9005      	str	r0, [sp, #20]
 8009228:	4649      	mov	r1, r9
 800922a:	4628      	mov	r0, r5
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	f000 fb6b 	bl	8009908 <__mcmp>
 8009232:	463a      	mov	r2, r7
 8009234:	4682      	mov	sl, r0
 8009236:	4621      	mov	r1, r4
 8009238:	4630      	mov	r0, r6
 800923a:	f000 fb81 	bl	8009940 <__mdiff>
 800923e:	68c2      	ldr	r2, [r0, #12]
 8009240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009242:	4680      	mov	r8, r0
 8009244:	bb0a      	cbnz	r2, 800928a <_dtoa_r+0x97a>
 8009246:	4601      	mov	r1, r0
 8009248:	4628      	mov	r0, r5
 800924a:	f000 fb5d 	bl	8009908 <__mcmp>
 800924e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009250:	4602      	mov	r2, r0
 8009252:	4641      	mov	r1, r8
 8009254:	4630      	mov	r0, r6
 8009256:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800925a:	f000 f913 	bl	8009484 <_Bfree>
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009262:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009266:	ea43 0102 	orr.w	r1, r3, r2
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	430b      	orrs	r3, r1
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	d10d      	bne.n	800928e <_dtoa_r+0x97e>
 8009272:	2b39      	cmp	r3, #57	; 0x39
 8009274:	d029      	beq.n	80092ca <_dtoa_r+0x9ba>
 8009276:	f1ba 0f00 	cmp.w	sl, #0
 800927a:	dd01      	ble.n	8009280 <_dtoa_r+0x970>
 800927c:	9b05      	ldr	r3, [sp, #20]
 800927e:	3331      	adds	r3, #49	; 0x31
 8009280:	9a02      	ldr	r2, [sp, #8]
 8009282:	7013      	strb	r3, [r2, #0]
 8009284:	e774      	b.n	8009170 <_dtoa_r+0x860>
 8009286:	4638      	mov	r0, r7
 8009288:	e7b8      	b.n	80091fc <_dtoa_r+0x8ec>
 800928a:	2201      	movs	r2, #1
 800928c:	e7e1      	b.n	8009252 <_dtoa_r+0x942>
 800928e:	f1ba 0f00 	cmp.w	sl, #0
 8009292:	db06      	blt.n	80092a2 <_dtoa_r+0x992>
 8009294:	9906      	ldr	r1, [sp, #24]
 8009296:	ea41 0a0a 	orr.w	sl, r1, sl
 800929a:	9907      	ldr	r1, [sp, #28]
 800929c:	ea5a 0101 	orrs.w	r1, sl, r1
 80092a0:	d120      	bne.n	80092e4 <_dtoa_r+0x9d4>
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	ddec      	ble.n	8009280 <_dtoa_r+0x970>
 80092a6:	4629      	mov	r1, r5
 80092a8:	2201      	movs	r2, #1
 80092aa:	4630      	mov	r0, r6
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	f000 fabb 	bl	8009828 <__lshift>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4605      	mov	r5, r0
 80092b6:	f000 fb27 	bl	8009908 <__mcmp>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	dc02      	bgt.n	80092c6 <_dtoa_r+0x9b6>
 80092c0:	d1de      	bne.n	8009280 <_dtoa_r+0x970>
 80092c2:	07da      	lsls	r2, r3, #31
 80092c4:	d5dc      	bpl.n	8009280 <_dtoa_r+0x970>
 80092c6:	2b39      	cmp	r3, #57	; 0x39
 80092c8:	d1d8      	bne.n	800927c <_dtoa_r+0x96c>
 80092ca:	9a02      	ldr	r2, [sp, #8]
 80092cc:	2339      	movs	r3, #57	; 0x39
 80092ce:	7013      	strb	r3, [r2, #0]
 80092d0:	4643      	mov	r3, r8
 80092d2:	4698      	mov	r8, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80092da:	2a39      	cmp	r2, #57	; 0x39
 80092dc:	d051      	beq.n	8009382 <_dtoa_r+0xa72>
 80092de:	3201      	adds	r2, #1
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e745      	b.n	8009170 <_dtoa_r+0x860>
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	dd03      	ble.n	80092f0 <_dtoa_r+0x9e0>
 80092e8:	2b39      	cmp	r3, #57	; 0x39
 80092ea:	d0ee      	beq.n	80092ca <_dtoa_r+0x9ba>
 80092ec:	3301      	adds	r3, #1
 80092ee:	e7c7      	b.n	8009280 <_dtoa_r+0x970>
 80092f0:	9a04      	ldr	r2, [sp, #16]
 80092f2:	9908      	ldr	r1, [sp, #32]
 80092f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092f8:	428a      	cmp	r2, r1
 80092fa:	d02b      	beq.n	8009354 <_dtoa_r+0xa44>
 80092fc:	4629      	mov	r1, r5
 80092fe:	2300      	movs	r3, #0
 8009300:	220a      	movs	r2, #10
 8009302:	4630      	mov	r0, r6
 8009304:	f000 f8e0 	bl	80094c8 <__multadd>
 8009308:	45b9      	cmp	r9, r7
 800930a:	4605      	mov	r5, r0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	f04f 020a 	mov.w	r2, #10
 8009314:	4649      	mov	r1, r9
 8009316:	4630      	mov	r0, r6
 8009318:	d107      	bne.n	800932a <_dtoa_r+0xa1a>
 800931a:	f000 f8d5 	bl	80094c8 <__multadd>
 800931e:	4681      	mov	r9, r0
 8009320:	4607      	mov	r7, r0
 8009322:	9b04      	ldr	r3, [sp, #16]
 8009324:	3301      	adds	r3, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	e774      	b.n	8009214 <_dtoa_r+0x904>
 800932a:	f000 f8cd 	bl	80094c8 <__multadd>
 800932e:	4639      	mov	r1, r7
 8009330:	4681      	mov	r9, r0
 8009332:	2300      	movs	r3, #0
 8009334:	220a      	movs	r2, #10
 8009336:	4630      	mov	r0, r6
 8009338:	f000 f8c6 	bl	80094c8 <__multadd>
 800933c:	4607      	mov	r7, r0
 800933e:	e7f0      	b.n	8009322 <_dtoa_r+0xa12>
 8009340:	f1ba 0f00 	cmp.w	sl, #0
 8009344:	9a01      	ldr	r2, [sp, #4]
 8009346:	bfcc      	ite	gt
 8009348:	46d0      	movgt	r8, sl
 800934a:	f04f 0801 	movle.w	r8, #1
 800934e:	4490      	add	r8, r2
 8009350:	f04f 0900 	mov.w	r9, #0
 8009354:	4629      	mov	r1, r5
 8009356:	2201      	movs	r2, #1
 8009358:	4630      	mov	r0, r6
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	f000 fa64 	bl	8009828 <__lshift>
 8009360:	4621      	mov	r1, r4
 8009362:	4605      	mov	r5, r0
 8009364:	f000 fad0 	bl	8009908 <__mcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	dcb1      	bgt.n	80092d0 <_dtoa_r+0x9c0>
 800936c:	d102      	bne.n	8009374 <_dtoa_r+0xa64>
 800936e:	9b02      	ldr	r3, [sp, #8]
 8009370:	07db      	lsls	r3, r3, #31
 8009372:	d4ad      	bmi.n	80092d0 <_dtoa_r+0x9c0>
 8009374:	4643      	mov	r3, r8
 8009376:	4698      	mov	r8, r3
 8009378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800937c:	2a30      	cmp	r2, #48	; 0x30
 800937e:	d0fa      	beq.n	8009376 <_dtoa_r+0xa66>
 8009380:	e6f6      	b.n	8009170 <_dtoa_r+0x860>
 8009382:	9a01      	ldr	r2, [sp, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	d1a4      	bne.n	80092d2 <_dtoa_r+0x9c2>
 8009388:	f10b 0b01 	add.w	fp, fp, #1
 800938c:	2331      	movs	r3, #49	; 0x31
 800938e:	e778      	b.n	8009282 <_dtoa_r+0x972>
 8009390:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <_dtoa_r+0xad4>)
 8009392:	f7ff bb27 	b.w	80089e4 <_dtoa_r+0xd4>
 8009396:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009398:	2b00      	cmp	r3, #0
 800939a:	f47f ab03 	bne.w	80089a4 <_dtoa_r+0x94>
 800939e:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <_dtoa_r+0xad8>)
 80093a0:	f7ff bb20 	b.w	80089e4 <_dtoa_r+0xd4>
 80093a4:	f1ba 0f00 	cmp.w	sl, #0
 80093a8:	dc03      	bgt.n	80093b2 <_dtoa_r+0xaa2>
 80093aa:	9b06      	ldr	r3, [sp, #24]
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	f73f aec7 	bgt.w	8009140 <_dtoa_r+0x830>
 80093b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff fa1b 	bl	80087f4 <quorem>
 80093be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093c2:	f808 3b01 	strb.w	r3, [r8], #1
 80093c6:	9a01      	ldr	r2, [sp, #4]
 80093c8:	eba8 0202 	sub.w	r2, r8, r2
 80093cc:	4592      	cmp	sl, r2
 80093ce:	ddb7      	ble.n	8009340 <_dtoa_r+0xa30>
 80093d0:	4629      	mov	r1, r5
 80093d2:	2300      	movs	r3, #0
 80093d4:	220a      	movs	r2, #10
 80093d6:	4630      	mov	r0, r6
 80093d8:	f000 f876 	bl	80094c8 <__multadd>
 80093dc:	4605      	mov	r5, r0
 80093de:	e7ea      	b.n	80093b6 <_dtoa_r+0xaa6>
 80093e0:	0800adb0 	.word	0x0800adb0
 80093e4:	0800ac0c 	.word	0x0800ac0c
 80093e8:	0800ad31 	.word	0x0800ad31

080093ec <_localeconv_r>:
 80093ec:	4800      	ldr	r0, [pc, #0]	; (80093f0 <_localeconv_r+0x4>)
 80093ee:	4770      	bx	lr
 80093f0:	2000019c 	.word	0x2000019c

080093f4 <malloc>:
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <malloc+0xc>)
 80093f6:	4601      	mov	r1, r0
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	f000 bc09 	b.w	8009c10 <_malloc_r>
 80093fe:	bf00      	nop
 8009400:	20000048 	.word	0x20000048

08009404 <_Balloc>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	b976      	cbnz	r6, 800942c <_Balloc+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f7ff fff0 	bl	80093f4 <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6260      	str	r0, [r4, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Balloc+0x20>
 800941a:	4b18      	ldr	r3, [pc, #96]	; (800947c <_Balloc+0x78>)
 800941c:	4818      	ldr	r0, [pc, #96]	; (8009480 <_Balloc+0x7c>)
 800941e:	2166      	movs	r1, #102	; 0x66
 8009420:	f000 fdd6 	bl	8009fd0 <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800942e:	68f3      	ldr	r3, [r6, #12]
 8009430:	b183      	cbz	r3, 8009454 <_Balloc+0x50>
 8009432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800943a:	b9b8      	cbnz	r0, 800946c <_Balloc+0x68>
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f605 	lsl.w	r6, r1, r5
 8009442:	1d72      	adds	r2, r6, #5
 8009444:	0092      	lsls	r2, r2, #2
 8009446:	4620      	mov	r0, r4
 8009448:	f000 fb60 	bl	8009b0c <_calloc_r>
 800944c:	b160      	cbz	r0, 8009468 <_Balloc+0x64>
 800944e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009452:	e00e      	b.n	8009472 <_Balloc+0x6e>
 8009454:	2221      	movs	r2, #33	; 0x21
 8009456:	2104      	movs	r1, #4
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fb57 	bl	8009b0c <_calloc_r>
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	60f0      	str	r0, [r6, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <_Balloc+0x2e>
 8009468:	2000      	movs	r0, #0
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	6802      	ldr	r2, [r0, #0]
 800946e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009472:	2300      	movs	r3, #0
 8009474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009478:	e7f7      	b.n	800946a <_Balloc+0x66>
 800947a:	bf00      	nop
 800947c:	0800ad3e 	.word	0x0800ad3e
 8009480:	0800adc1 	.word	0x0800adc1

08009484 <_Bfree>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b976      	cbnz	r6, 80094ac <_Bfree+0x28>
 800948e:	2010      	movs	r0, #16
 8009490:	f7ff ffb0 	bl	80093f4 <malloc>
 8009494:	4602      	mov	r2, r0
 8009496:	6268      	str	r0, [r5, #36]	; 0x24
 8009498:	b920      	cbnz	r0, 80094a4 <_Bfree+0x20>
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <_Bfree+0x3c>)
 800949c:	4809      	ldr	r0, [pc, #36]	; (80094c4 <_Bfree+0x40>)
 800949e:	218a      	movs	r1, #138	; 0x8a
 80094a0:	f000 fd96 	bl	8009fd0 <__assert_func>
 80094a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a8:	6006      	str	r6, [r0, #0]
 80094aa:	60c6      	str	r6, [r0, #12]
 80094ac:	b13c      	cbz	r4, 80094be <_Bfree+0x3a>
 80094ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b0:	6862      	ldr	r2, [r4, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b8:	6021      	str	r1, [r4, #0]
 80094ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	0800ad3e 	.word	0x0800ad3e
 80094c4:	0800adc1 	.word	0x0800adc1

080094c8 <__multadd>:
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	690d      	ldr	r5, [r1, #16]
 80094ce:	4607      	mov	r7, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	461e      	mov	r6, r3
 80094d4:	f101 0c14 	add.w	ip, r1, #20
 80094d8:	2000      	movs	r0, #0
 80094da:	f8dc 3000 	ldr.w	r3, [ip]
 80094de:	b299      	uxth	r1, r3
 80094e0:	fb02 6101 	mla	r1, r2, r1, r6
 80094e4:	0c1e      	lsrs	r6, r3, #16
 80094e6:	0c0b      	lsrs	r3, r1, #16
 80094e8:	fb02 3306 	mla	r3, r2, r6, r3
 80094ec:	b289      	uxth	r1, r1
 80094ee:	3001      	adds	r0, #1
 80094f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094f4:	4285      	cmp	r5, r0
 80094f6:	f84c 1b04 	str.w	r1, [ip], #4
 80094fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094fe:	dcec      	bgt.n	80094da <__multadd+0x12>
 8009500:	b30e      	cbz	r6, 8009546 <__multadd+0x7e>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	42ab      	cmp	r3, r5
 8009506:	dc19      	bgt.n	800953c <__multadd+0x74>
 8009508:	6861      	ldr	r1, [r4, #4]
 800950a:	4638      	mov	r0, r7
 800950c:	3101      	adds	r1, #1
 800950e:	f7ff ff79 	bl	8009404 <_Balloc>
 8009512:	4680      	mov	r8, r0
 8009514:	b928      	cbnz	r0, 8009522 <__multadd+0x5a>
 8009516:	4602      	mov	r2, r0
 8009518:	4b0c      	ldr	r3, [pc, #48]	; (800954c <__multadd+0x84>)
 800951a:	480d      	ldr	r0, [pc, #52]	; (8009550 <__multadd+0x88>)
 800951c:	21b5      	movs	r1, #181	; 0xb5
 800951e:	f000 fd57 	bl	8009fd0 <__assert_func>
 8009522:	6922      	ldr	r2, [r4, #16]
 8009524:	3202      	adds	r2, #2
 8009526:	f104 010c 	add.w	r1, r4, #12
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	300c      	adds	r0, #12
 800952e:	f7fe fc5d 	bl	8007dec <memcpy>
 8009532:	4621      	mov	r1, r4
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff ffa5 	bl	8009484 <_Bfree>
 800953a:	4644      	mov	r4, r8
 800953c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009540:	3501      	adds	r5, #1
 8009542:	615e      	str	r6, [r3, #20]
 8009544:	6125      	str	r5, [r4, #16]
 8009546:	4620      	mov	r0, r4
 8009548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954c:	0800adb0 	.word	0x0800adb0
 8009550:	0800adc1 	.word	0x0800adc1

08009554 <__hi0bits>:
 8009554:	0c03      	lsrs	r3, r0, #16
 8009556:	041b      	lsls	r3, r3, #16
 8009558:	b9d3      	cbnz	r3, 8009590 <__hi0bits+0x3c>
 800955a:	0400      	lsls	r0, r0, #16
 800955c:	2310      	movs	r3, #16
 800955e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009562:	bf04      	itt	eq
 8009564:	0200      	lsleq	r0, r0, #8
 8009566:	3308      	addeq	r3, #8
 8009568:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800956c:	bf04      	itt	eq
 800956e:	0100      	lsleq	r0, r0, #4
 8009570:	3304      	addeq	r3, #4
 8009572:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009576:	bf04      	itt	eq
 8009578:	0080      	lsleq	r0, r0, #2
 800957a:	3302      	addeq	r3, #2
 800957c:	2800      	cmp	r0, #0
 800957e:	db05      	blt.n	800958c <__hi0bits+0x38>
 8009580:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009584:	f103 0301 	add.w	r3, r3, #1
 8009588:	bf08      	it	eq
 800958a:	2320      	moveq	r3, #32
 800958c:	4618      	mov	r0, r3
 800958e:	4770      	bx	lr
 8009590:	2300      	movs	r3, #0
 8009592:	e7e4      	b.n	800955e <__hi0bits+0xa>

08009594 <__lo0bits>:
 8009594:	6803      	ldr	r3, [r0, #0]
 8009596:	f013 0207 	ands.w	r2, r3, #7
 800959a:	4601      	mov	r1, r0
 800959c:	d00b      	beq.n	80095b6 <__lo0bits+0x22>
 800959e:	07da      	lsls	r2, r3, #31
 80095a0:	d423      	bmi.n	80095ea <__lo0bits+0x56>
 80095a2:	0798      	lsls	r0, r3, #30
 80095a4:	bf49      	itett	mi
 80095a6:	085b      	lsrmi	r3, r3, #1
 80095a8:	089b      	lsrpl	r3, r3, #2
 80095aa:	2001      	movmi	r0, #1
 80095ac:	600b      	strmi	r3, [r1, #0]
 80095ae:	bf5c      	itt	pl
 80095b0:	600b      	strpl	r3, [r1, #0]
 80095b2:	2002      	movpl	r0, #2
 80095b4:	4770      	bx	lr
 80095b6:	b298      	uxth	r0, r3
 80095b8:	b9a8      	cbnz	r0, 80095e6 <__lo0bits+0x52>
 80095ba:	0c1b      	lsrs	r3, r3, #16
 80095bc:	2010      	movs	r0, #16
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	b90a      	cbnz	r2, 80095c6 <__lo0bits+0x32>
 80095c2:	3008      	adds	r0, #8
 80095c4:	0a1b      	lsrs	r3, r3, #8
 80095c6:	071a      	lsls	r2, r3, #28
 80095c8:	bf04      	itt	eq
 80095ca:	091b      	lsreq	r3, r3, #4
 80095cc:	3004      	addeq	r0, #4
 80095ce:	079a      	lsls	r2, r3, #30
 80095d0:	bf04      	itt	eq
 80095d2:	089b      	lsreq	r3, r3, #2
 80095d4:	3002      	addeq	r0, #2
 80095d6:	07da      	lsls	r2, r3, #31
 80095d8:	d403      	bmi.n	80095e2 <__lo0bits+0x4e>
 80095da:	085b      	lsrs	r3, r3, #1
 80095dc:	f100 0001 	add.w	r0, r0, #1
 80095e0:	d005      	beq.n	80095ee <__lo0bits+0x5a>
 80095e2:	600b      	str	r3, [r1, #0]
 80095e4:	4770      	bx	lr
 80095e6:	4610      	mov	r0, r2
 80095e8:	e7e9      	b.n	80095be <__lo0bits+0x2a>
 80095ea:	2000      	movs	r0, #0
 80095ec:	4770      	bx	lr
 80095ee:	2020      	movs	r0, #32
 80095f0:	4770      	bx	lr
	...

080095f4 <__i2b>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	2101      	movs	r1, #1
 80095fa:	f7ff ff03 	bl	8009404 <_Balloc>
 80095fe:	4602      	mov	r2, r0
 8009600:	b928      	cbnz	r0, 800960e <__i2b+0x1a>
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <__i2b+0x24>)
 8009604:	4805      	ldr	r0, [pc, #20]	; (800961c <__i2b+0x28>)
 8009606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800960a:	f000 fce1 	bl	8009fd0 <__assert_func>
 800960e:	2301      	movs	r3, #1
 8009610:	6144      	str	r4, [r0, #20]
 8009612:	6103      	str	r3, [r0, #16]
 8009614:	bd10      	pop	{r4, pc}
 8009616:	bf00      	nop
 8009618:	0800adb0 	.word	0x0800adb0
 800961c:	0800adc1 	.word	0x0800adc1

08009620 <__multiply>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	4691      	mov	r9, r2
 8009626:	690a      	ldr	r2, [r1, #16]
 8009628:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800962c:	429a      	cmp	r2, r3
 800962e:	bfb8      	it	lt
 8009630:	460b      	movlt	r3, r1
 8009632:	460c      	mov	r4, r1
 8009634:	bfbc      	itt	lt
 8009636:	464c      	movlt	r4, r9
 8009638:	4699      	movlt	r9, r3
 800963a:	6927      	ldr	r7, [r4, #16]
 800963c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009640:	68a3      	ldr	r3, [r4, #8]
 8009642:	6861      	ldr	r1, [r4, #4]
 8009644:	eb07 060a 	add.w	r6, r7, sl
 8009648:	42b3      	cmp	r3, r6
 800964a:	b085      	sub	sp, #20
 800964c:	bfb8      	it	lt
 800964e:	3101      	addlt	r1, #1
 8009650:	f7ff fed8 	bl	8009404 <_Balloc>
 8009654:	b930      	cbnz	r0, 8009664 <__multiply+0x44>
 8009656:	4602      	mov	r2, r0
 8009658:	4b44      	ldr	r3, [pc, #272]	; (800976c <__multiply+0x14c>)
 800965a:	4845      	ldr	r0, [pc, #276]	; (8009770 <__multiply+0x150>)
 800965c:	f240 115d 	movw	r1, #349	; 0x15d
 8009660:	f000 fcb6 	bl	8009fd0 <__assert_func>
 8009664:	f100 0514 	add.w	r5, r0, #20
 8009668:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800966c:	462b      	mov	r3, r5
 800966e:	2200      	movs	r2, #0
 8009670:	4543      	cmp	r3, r8
 8009672:	d321      	bcc.n	80096b8 <__multiply+0x98>
 8009674:	f104 0314 	add.w	r3, r4, #20
 8009678:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800967c:	f109 0314 	add.w	r3, r9, #20
 8009680:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009684:	9202      	str	r2, [sp, #8]
 8009686:	1b3a      	subs	r2, r7, r4
 8009688:	3a15      	subs	r2, #21
 800968a:	f022 0203 	bic.w	r2, r2, #3
 800968e:	3204      	adds	r2, #4
 8009690:	f104 0115 	add.w	r1, r4, #21
 8009694:	428f      	cmp	r7, r1
 8009696:	bf38      	it	cc
 8009698:	2204      	movcc	r2, #4
 800969a:	9201      	str	r2, [sp, #4]
 800969c:	9a02      	ldr	r2, [sp, #8]
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d80c      	bhi.n	80096be <__multiply+0x9e>
 80096a4:	2e00      	cmp	r6, #0
 80096a6:	dd03      	ble.n	80096b0 <__multiply+0x90>
 80096a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d05a      	beq.n	8009766 <__multiply+0x146>
 80096b0:	6106      	str	r6, [r0, #16]
 80096b2:	b005      	add	sp, #20
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b8:	f843 2b04 	str.w	r2, [r3], #4
 80096bc:	e7d8      	b.n	8009670 <__multiply+0x50>
 80096be:	f8b3 a000 	ldrh.w	sl, [r3]
 80096c2:	f1ba 0f00 	cmp.w	sl, #0
 80096c6:	d024      	beq.n	8009712 <__multiply+0xf2>
 80096c8:	f104 0e14 	add.w	lr, r4, #20
 80096cc:	46a9      	mov	r9, r5
 80096ce:	f04f 0c00 	mov.w	ip, #0
 80096d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096d6:	f8d9 1000 	ldr.w	r1, [r9]
 80096da:	fa1f fb82 	uxth.w	fp, r2
 80096de:	b289      	uxth	r1, r1
 80096e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80096e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096e8:	f8d9 2000 	ldr.w	r2, [r9]
 80096ec:	4461      	add	r1, ip
 80096ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80096f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096fa:	b289      	uxth	r1, r1
 80096fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009700:	4577      	cmp	r7, lr
 8009702:	f849 1b04 	str.w	r1, [r9], #4
 8009706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800970a:	d8e2      	bhi.n	80096d2 <__multiply+0xb2>
 800970c:	9a01      	ldr	r2, [sp, #4]
 800970e:	f845 c002 	str.w	ip, [r5, r2]
 8009712:	9a03      	ldr	r2, [sp, #12]
 8009714:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009718:	3304      	adds	r3, #4
 800971a:	f1b9 0f00 	cmp.w	r9, #0
 800971e:	d020      	beq.n	8009762 <__multiply+0x142>
 8009720:	6829      	ldr	r1, [r5, #0]
 8009722:	f104 0c14 	add.w	ip, r4, #20
 8009726:	46ae      	mov	lr, r5
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	f8bc b000 	ldrh.w	fp, [ip]
 8009730:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009734:	fb09 220b 	mla	r2, r9, fp, r2
 8009738:	4492      	add	sl, r2
 800973a:	b289      	uxth	r1, r1
 800973c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009740:	f84e 1b04 	str.w	r1, [lr], #4
 8009744:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009748:	f8be 1000 	ldrh.w	r1, [lr]
 800974c:	0c12      	lsrs	r2, r2, #16
 800974e:	fb09 1102 	mla	r1, r9, r2, r1
 8009752:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009756:	4567      	cmp	r7, ip
 8009758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800975c:	d8e6      	bhi.n	800972c <__multiply+0x10c>
 800975e:	9a01      	ldr	r2, [sp, #4]
 8009760:	50a9      	str	r1, [r5, r2]
 8009762:	3504      	adds	r5, #4
 8009764:	e79a      	b.n	800969c <__multiply+0x7c>
 8009766:	3e01      	subs	r6, #1
 8009768:	e79c      	b.n	80096a4 <__multiply+0x84>
 800976a:	bf00      	nop
 800976c:	0800adb0 	.word	0x0800adb0
 8009770:	0800adc1 	.word	0x0800adc1

08009774 <__pow5mult>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4615      	mov	r5, r2
 800977a:	f012 0203 	ands.w	r2, r2, #3
 800977e:	4606      	mov	r6, r0
 8009780:	460f      	mov	r7, r1
 8009782:	d007      	beq.n	8009794 <__pow5mult+0x20>
 8009784:	4c25      	ldr	r4, [pc, #148]	; (800981c <__pow5mult+0xa8>)
 8009786:	3a01      	subs	r2, #1
 8009788:	2300      	movs	r3, #0
 800978a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800978e:	f7ff fe9b 	bl	80094c8 <__multadd>
 8009792:	4607      	mov	r7, r0
 8009794:	10ad      	asrs	r5, r5, #2
 8009796:	d03d      	beq.n	8009814 <__pow5mult+0xa0>
 8009798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979a:	b97c      	cbnz	r4, 80097bc <__pow5mult+0x48>
 800979c:	2010      	movs	r0, #16
 800979e:	f7ff fe29 	bl	80093f4 <malloc>
 80097a2:	4602      	mov	r2, r0
 80097a4:	6270      	str	r0, [r6, #36]	; 0x24
 80097a6:	b928      	cbnz	r0, 80097b4 <__pow5mult+0x40>
 80097a8:	4b1d      	ldr	r3, [pc, #116]	; (8009820 <__pow5mult+0xac>)
 80097aa:	481e      	ldr	r0, [pc, #120]	; (8009824 <__pow5mult+0xb0>)
 80097ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b0:	f000 fc0e 	bl	8009fd0 <__assert_func>
 80097b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097b8:	6004      	str	r4, [r0, #0]
 80097ba:	60c4      	str	r4, [r0, #12]
 80097bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c4:	b94c      	cbnz	r4, 80097da <__pow5mult+0x66>
 80097c6:	f240 2171 	movw	r1, #625	; 0x271
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ff12 	bl	80095f4 <__i2b>
 80097d0:	2300      	movs	r3, #0
 80097d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097d6:	4604      	mov	r4, r0
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 0900 	mov.w	r9, #0
 80097de:	07eb      	lsls	r3, r5, #31
 80097e0:	d50a      	bpl.n	80097f8 <__pow5mult+0x84>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4622      	mov	r2, r4
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ff1a 	bl	8009620 <__multiply>
 80097ec:	4639      	mov	r1, r7
 80097ee:	4680      	mov	r8, r0
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fe47 	bl	8009484 <_Bfree>
 80097f6:	4647      	mov	r7, r8
 80097f8:	106d      	asrs	r5, r5, #1
 80097fa:	d00b      	beq.n	8009814 <__pow5mult+0xa0>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	b938      	cbnz	r0, 8009810 <__pow5mult+0x9c>
 8009800:	4622      	mov	r2, r4
 8009802:	4621      	mov	r1, r4
 8009804:	4630      	mov	r0, r6
 8009806:	f7ff ff0b 	bl	8009620 <__multiply>
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	f8c0 9000 	str.w	r9, [r0]
 8009810:	4604      	mov	r4, r0
 8009812:	e7e4      	b.n	80097de <__pow5mult+0x6a>
 8009814:	4638      	mov	r0, r7
 8009816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981a:	bf00      	nop
 800981c:	0800af10 	.word	0x0800af10
 8009820:	0800ad3e 	.word	0x0800ad3e
 8009824:	0800adc1 	.word	0x0800adc1

08009828 <__lshift>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	460c      	mov	r4, r1
 800982e:	6849      	ldr	r1, [r1, #4]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	4607      	mov	r7, r0
 800983a:	4691      	mov	r9, r2
 800983c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009840:	f108 0601 	add.w	r6, r8, #1
 8009844:	42b3      	cmp	r3, r6
 8009846:	db0b      	blt.n	8009860 <__lshift+0x38>
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff fddb 	bl	8009404 <_Balloc>
 800984e:	4605      	mov	r5, r0
 8009850:	b948      	cbnz	r0, 8009866 <__lshift+0x3e>
 8009852:	4602      	mov	r2, r0
 8009854:	4b2a      	ldr	r3, [pc, #168]	; (8009900 <__lshift+0xd8>)
 8009856:	482b      	ldr	r0, [pc, #172]	; (8009904 <__lshift+0xdc>)
 8009858:	f240 11d9 	movw	r1, #473	; 0x1d9
 800985c:	f000 fbb8 	bl	8009fd0 <__assert_func>
 8009860:	3101      	adds	r1, #1
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	e7ee      	b.n	8009844 <__lshift+0x1c>
 8009866:	2300      	movs	r3, #0
 8009868:	f100 0114 	add.w	r1, r0, #20
 800986c:	f100 0210 	add.w	r2, r0, #16
 8009870:	4618      	mov	r0, r3
 8009872:	4553      	cmp	r3, sl
 8009874:	db37      	blt.n	80098e6 <__lshift+0xbe>
 8009876:	6920      	ldr	r0, [r4, #16]
 8009878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800987c:	f104 0314 	add.w	r3, r4, #20
 8009880:	f019 091f 	ands.w	r9, r9, #31
 8009884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009888:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800988c:	d02f      	beq.n	80098ee <__lshift+0xc6>
 800988e:	f1c9 0e20 	rsb	lr, r9, #32
 8009892:	468a      	mov	sl, r1
 8009894:	f04f 0c00 	mov.w	ip, #0
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	fa02 f209 	lsl.w	r2, r2, r9
 800989e:	ea42 020c 	orr.w	r2, r2, ip
 80098a2:	f84a 2b04 	str.w	r2, [sl], #4
 80098a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098aa:	4298      	cmp	r0, r3
 80098ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098b0:	d8f2      	bhi.n	8009898 <__lshift+0x70>
 80098b2:	1b03      	subs	r3, r0, r4
 80098b4:	3b15      	subs	r3, #21
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	3304      	adds	r3, #4
 80098bc:	f104 0215 	add.w	r2, r4, #21
 80098c0:	4290      	cmp	r0, r2
 80098c2:	bf38      	it	cc
 80098c4:	2304      	movcc	r3, #4
 80098c6:	f841 c003 	str.w	ip, [r1, r3]
 80098ca:	f1bc 0f00 	cmp.w	ip, #0
 80098ce:	d001      	beq.n	80098d4 <__lshift+0xac>
 80098d0:	f108 0602 	add.w	r6, r8, #2
 80098d4:	3e01      	subs	r6, #1
 80098d6:	4638      	mov	r0, r7
 80098d8:	612e      	str	r6, [r5, #16]
 80098da:	4621      	mov	r1, r4
 80098dc:	f7ff fdd2 	bl	8009484 <_Bfree>
 80098e0:	4628      	mov	r0, r5
 80098e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ea:	3301      	adds	r3, #1
 80098ec:	e7c1      	b.n	8009872 <__lshift+0x4a>
 80098ee:	3904      	subs	r1, #4
 80098f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f8:	4298      	cmp	r0, r3
 80098fa:	d8f9      	bhi.n	80098f0 <__lshift+0xc8>
 80098fc:	e7ea      	b.n	80098d4 <__lshift+0xac>
 80098fe:	bf00      	nop
 8009900:	0800adb0 	.word	0x0800adb0
 8009904:	0800adc1 	.word	0x0800adc1

08009908 <__mcmp>:
 8009908:	b530      	push	{r4, r5, lr}
 800990a:	6902      	ldr	r2, [r0, #16]
 800990c:	690c      	ldr	r4, [r1, #16]
 800990e:	1b12      	subs	r2, r2, r4
 8009910:	d10e      	bne.n	8009930 <__mcmp+0x28>
 8009912:	f100 0314 	add.w	r3, r0, #20
 8009916:	3114      	adds	r1, #20
 8009918:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800991c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009920:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009924:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009928:	42a5      	cmp	r5, r4
 800992a:	d003      	beq.n	8009934 <__mcmp+0x2c>
 800992c:	d305      	bcc.n	800993a <__mcmp+0x32>
 800992e:	2201      	movs	r2, #1
 8009930:	4610      	mov	r0, r2
 8009932:	bd30      	pop	{r4, r5, pc}
 8009934:	4283      	cmp	r3, r0
 8009936:	d3f3      	bcc.n	8009920 <__mcmp+0x18>
 8009938:	e7fa      	b.n	8009930 <__mcmp+0x28>
 800993a:	f04f 32ff 	mov.w	r2, #4294967295
 800993e:	e7f7      	b.n	8009930 <__mcmp+0x28>

08009940 <__mdiff>:
 8009940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	4606      	mov	r6, r0
 8009948:	4611      	mov	r1, r2
 800994a:	4620      	mov	r0, r4
 800994c:	4690      	mov	r8, r2
 800994e:	f7ff ffdb 	bl	8009908 <__mcmp>
 8009952:	1e05      	subs	r5, r0, #0
 8009954:	d110      	bne.n	8009978 <__mdiff+0x38>
 8009956:	4629      	mov	r1, r5
 8009958:	4630      	mov	r0, r6
 800995a:	f7ff fd53 	bl	8009404 <_Balloc>
 800995e:	b930      	cbnz	r0, 800996e <__mdiff+0x2e>
 8009960:	4b3a      	ldr	r3, [pc, #232]	; (8009a4c <__mdiff+0x10c>)
 8009962:	4602      	mov	r2, r0
 8009964:	f240 2132 	movw	r1, #562	; 0x232
 8009968:	4839      	ldr	r0, [pc, #228]	; (8009a50 <__mdiff+0x110>)
 800996a:	f000 fb31 	bl	8009fd0 <__assert_func>
 800996e:	2301      	movs	r3, #1
 8009970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	bfa4      	itt	ge
 800997a:	4643      	movge	r3, r8
 800997c:	46a0      	movge	r8, r4
 800997e:	4630      	mov	r0, r6
 8009980:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009984:	bfa6      	itte	ge
 8009986:	461c      	movge	r4, r3
 8009988:	2500      	movge	r5, #0
 800998a:	2501      	movlt	r5, #1
 800998c:	f7ff fd3a 	bl	8009404 <_Balloc>
 8009990:	b920      	cbnz	r0, 800999c <__mdiff+0x5c>
 8009992:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <__mdiff+0x10c>)
 8009994:	4602      	mov	r2, r0
 8009996:	f44f 7110 	mov.w	r1, #576	; 0x240
 800999a:	e7e5      	b.n	8009968 <__mdiff+0x28>
 800999c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099a0:	6926      	ldr	r6, [r4, #16]
 80099a2:	60c5      	str	r5, [r0, #12]
 80099a4:	f104 0914 	add.w	r9, r4, #20
 80099a8:	f108 0514 	add.w	r5, r8, #20
 80099ac:	f100 0e14 	add.w	lr, r0, #20
 80099b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099b8:	f108 0210 	add.w	r2, r8, #16
 80099bc:	46f2      	mov	sl, lr
 80099be:	2100      	movs	r1, #0
 80099c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80099c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099c8:	fa1f f883 	uxth.w	r8, r3
 80099cc:	fa11 f18b 	uxtah	r1, r1, fp
 80099d0:	0c1b      	lsrs	r3, r3, #16
 80099d2:	eba1 0808 	sub.w	r8, r1, r8
 80099d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099de:	fa1f f888 	uxth.w	r8, r8
 80099e2:	1419      	asrs	r1, r3, #16
 80099e4:	454e      	cmp	r6, r9
 80099e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099ea:	f84a 3b04 	str.w	r3, [sl], #4
 80099ee:	d8e7      	bhi.n	80099c0 <__mdiff+0x80>
 80099f0:	1b33      	subs	r3, r6, r4
 80099f2:	3b15      	subs	r3, #21
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	3304      	adds	r3, #4
 80099fa:	3415      	adds	r4, #21
 80099fc:	42a6      	cmp	r6, r4
 80099fe:	bf38      	it	cc
 8009a00:	2304      	movcc	r3, #4
 8009a02:	441d      	add	r5, r3
 8009a04:	4473      	add	r3, lr
 8009a06:	469e      	mov	lr, r3
 8009a08:	462e      	mov	r6, r5
 8009a0a:	4566      	cmp	r6, ip
 8009a0c:	d30e      	bcc.n	8009a2c <__mdiff+0xec>
 8009a0e:	f10c 0203 	add.w	r2, ip, #3
 8009a12:	1b52      	subs	r2, r2, r5
 8009a14:	f022 0203 	bic.w	r2, r2, #3
 8009a18:	3d03      	subs	r5, #3
 8009a1a:	45ac      	cmp	ip, r5
 8009a1c:	bf38      	it	cc
 8009a1e:	2200      	movcc	r2, #0
 8009a20:	441a      	add	r2, r3
 8009a22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a26:	b17b      	cbz	r3, 8009a48 <__mdiff+0x108>
 8009a28:	6107      	str	r7, [r0, #16]
 8009a2a:	e7a3      	b.n	8009974 <__mdiff+0x34>
 8009a2c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a30:	fa11 f288 	uxtah	r2, r1, r8
 8009a34:	1414      	asrs	r4, r2, #16
 8009a36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a3a:	b292      	uxth	r2, r2
 8009a3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a40:	f84e 2b04 	str.w	r2, [lr], #4
 8009a44:	1421      	asrs	r1, r4, #16
 8009a46:	e7e0      	b.n	8009a0a <__mdiff+0xca>
 8009a48:	3f01      	subs	r7, #1
 8009a4a:	e7ea      	b.n	8009a22 <__mdiff+0xe2>
 8009a4c:	0800adb0 	.word	0x0800adb0
 8009a50:	0800adc1 	.word	0x0800adc1

08009a54 <__d2b>:
 8009a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4689      	mov	r9, r1
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	ec57 6b10 	vmov	r6, r7, d0
 8009a60:	4690      	mov	r8, r2
 8009a62:	f7ff fccf 	bl	8009404 <_Balloc>
 8009a66:	4604      	mov	r4, r0
 8009a68:	b930      	cbnz	r0, 8009a78 <__d2b+0x24>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <__d2b+0xb0>)
 8009a6e:	4826      	ldr	r0, [pc, #152]	; (8009b08 <__d2b+0xb4>)
 8009a70:	f240 310a 	movw	r1, #778	; 0x30a
 8009a74:	f000 faac 	bl	8009fd0 <__assert_func>
 8009a78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a80:	bb35      	cbnz	r5, 8009ad0 <__d2b+0x7c>
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	d028      	beq.n	8009ada <__d2b+0x86>
 8009a88:	4668      	mov	r0, sp
 8009a8a:	9600      	str	r6, [sp, #0]
 8009a8c:	f7ff fd82 	bl	8009594 <__lo0bits>
 8009a90:	9900      	ldr	r1, [sp, #0]
 8009a92:	b300      	cbz	r0, 8009ad6 <__d2b+0x82>
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	f1c0 0320 	rsb	r3, r0, #32
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	40c2      	lsrs	r2, r0
 8009aa2:	6163      	str	r3, [r4, #20]
 8009aa4:	9201      	str	r2, [sp, #4]
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	61a3      	str	r3, [r4, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bf14      	ite	ne
 8009aae:	2202      	movne	r2, #2
 8009ab0:	2201      	moveq	r2, #1
 8009ab2:	6122      	str	r2, [r4, #16]
 8009ab4:	b1d5      	cbz	r5, 8009aec <__d2b+0x98>
 8009ab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aba:	4405      	add	r5, r0
 8009abc:	f8c9 5000 	str.w	r5, [r9]
 8009ac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ac4:	f8c8 0000 	str.w	r0, [r8]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad4:	e7d5      	b.n	8009a82 <__d2b+0x2e>
 8009ad6:	6161      	str	r1, [r4, #20]
 8009ad8:	e7e5      	b.n	8009aa6 <__d2b+0x52>
 8009ada:	a801      	add	r0, sp, #4
 8009adc:	f7ff fd5a 	bl	8009594 <__lo0bits>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	6163      	str	r3, [r4, #20]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	3020      	adds	r0, #32
 8009aea:	e7e3      	b.n	8009ab4 <__d2b+0x60>
 8009aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009af4:	f8c9 0000 	str.w	r0, [r9]
 8009af8:	6918      	ldr	r0, [r3, #16]
 8009afa:	f7ff fd2b 	bl	8009554 <__hi0bits>
 8009afe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b02:	e7df      	b.n	8009ac4 <__d2b+0x70>
 8009b04:	0800adb0 	.word	0x0800adb0
 8009b08:	0800adc1 	.word	0x0800adc1

08009b0c <_calloc_r>:
 8009b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b0e:	fba1 2402 	umull	r2, r4, r1, r2
 8009b12:	b94c      	cbnz	r4, 8009b28 <_calloc_r+0x1c>
 8009b14:	4611      	mov	r1, r2
 8009b16:	9201      	str	r2, [sp, #4]
 8009b18:	f000 f87a 	bl	8009c10 <_malloc_r>
 8009b1c:	9a01      	ldr	r2, [sp, #4]
 8009b1e:	4605      	mov	r5, r0
 8009b20:	b930      	cbnz	r0, 8009b30 <_calloc_r+0x24>
 8009b22:	4628      	mov	r0, r5
 8009b24:	b003      	add	sp, #12
 8009b26:	bd30      	pop	{r4, r5, pc}
 8009b28:	220c      	movs	r2, #12
 8009b2a:	6002      	str	r2, [r0, #0]
 8009b2c:	2500      	movs	r5, #0
 8009b2e:	e7f8      	b.n	8009b22 <_calloc_r+0x16>
 8009b30:	4621      	mov	r1, r4
 8009b32:	f7fe f969 	bl	8007e08 <memset>
 8009b36:	e7f4      	b.n	8009b22 <_calloc_r+0x16>

08009b38 <_free_r>:
 8009b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b3a:	2900      	cmp	r1, #0
 8009b3c:	d044      	beq.n	8009bc8 <_free_r+0x90>
 8009b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b42:	9001      	str	r0, [sp, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f1a1 0404 	sub.w	r4, r1, #4
 8009b4a:	bfb8      	it	lt
 8009b4c:	18e4      	addlt	r4, r4, r3
 8009b4e:	f000 fa9b 	bl	800a088 <__malloc_lock>
 8009b52:	4a1e      	ldr	r2, [pc, #120]	; (8009bcc <_free_r+0x94>)
 8009b54:	9801      	ldr	r0, [sp, #4]
 8009b56:	6813      	ldr	r3, [r2, #0]
 8009b58:	b933      	cbnz	r3, 8009b68 <_free_r+0x30>
 8009b5a:	6063      	str	r3, [r4, #4]
 8009b5c:	6014      	str	r4, [r2, #0]
 8009b5e:	b003      	add	sp, #12
 8009b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b64:	f000 ba96 	b.w	800a094 <__malloc_unlock>
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	d908      	bls.n	8009b7e <_free_r+0x46>
 8009b6c:	6825      	ldr	r5, [r4, #0]
 8009b6e:	1961      	adds	r1, r4, r5
 8009b70:	428b      	cmp	r3, r1
 8009b72:	bf01      	itttt	eq
 8009b74:	6819      	ldreq	r1, [r3, #0]
 8009b76:	685b      	ldreq	r3, [r3, #4]
 8009b78:	1949      	addeq	r1, r1, r5
 8009b7a:	6021      	streq	r1, [r4, #0]
 8009b7c:	e7ed      	b.n	8009b5a <_free_r+0x22>
 8009b7e:	461a      	mov	r2, r3
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	b10b      	cbz	r3, 8009b88 <_free_r+0x50>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d9fa      	bls.n	8009b7e <_free_r+0x46>
 8009b88:	6811      	ldr	r1, [r2, #0]
 8009b8a:	1855      	adds	r5, r2, r1
 8009b8c:	42a5      	cmp	r5, r4
 8009b8e:	d10b      	bne.n	8009ba8 <_free_r+0x70>
 8009b90:	6824      	ldr	r4, [r4, #0]
 8009b92:	4421      	add	r1, r4
 8009b94:	1854      	adds	r4, r2, r1
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	6011      	str	r1, [r2, #0]
 8009b9a:	d1e0      	bne.n	8009b5e <_free_r+0x26>
 8009b9c:	681c      	ldr	r4, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	6053      	str	r3, [r2, #4]
 8009ba2:	4421      	add	r1, r4
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	e7da      	b.n	8009b5e <_free_r+0x26>
 8009ba8:	d902      	bls.n	8009bb0 <_free_r+0x78>
 8009baa:	230c      	movs	r3, #12
 8009bac:	6003      	str	r3, [r0, #0]
 8009bae:	e7d6      	b.n	8009b5e <_free_r+0x26>
 8009bb0:	6825      	ldr	r5, [r4, #0]
 8009bb2:	1961      	adds	r1, r4, r5
 8009bb4:	428b      	cmp	r3, r1
 8009bb6:	bf04      	itt	eq
 8009bb8:	6819      	ldreq	r1, [r3, #0]
 8009bba:	685b      	ldreq	r3, [r3, #4]
 8009bbc:	6063      	str	r3, [r4, #4]
 8009bbe:	bf04      	itt	eq
 8009bc0:	1949      	addeq	r1, r1, r5
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	6054      	str	r4, [r2, #4]
 8009bc6:	e7ca      	b.n	8009b5e <_free_r+0x26>
 8009bc8:	b003      	add	sp, #12
 8009bca:	bd30      	pop	{r4, r5, pc}
 8009bcc:	200008e4 	.word	0x200008e4

08009bd0 <sbrk_aligned>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	4e0e      	ldr	r6, [pc, #56]	; (8009c0c <sbrk_aligned+0x3c>)
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	6831      	ldr	r1, [r6, #0]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	b911      	cbnz	r1, 8009be2 <sbrk_aligned+0x12>
 8009bdc:	f000 f9e8 	bl	8009fb0 <_sbrk_r>
 8009be0:	6030      	str	r0, [r6, #0]
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f9e3 	bl	8009fb0 <_sbrk_r>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d00a      	beq.n	8009c04 <sbrk_aligned+0x34>
 8009bee:	1cc4      	adds	r4, r0, #3
 8009bf0:	f024 0403 	bic.w	r4, r4, #3
 8009bf4:	42a0      	cmp	r0, r4
 8009bf6:	d007      	beq.n	8009c08 <sbrk_aligned+0x38>
 8009bf8:	1a21      	subs	r1, r4, r0
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f000 f9d8 	bl	8009fb0 <_sbrk_r>
 8009c00:	3001      	adds	r0, #1
 8009c02:	d101      	bne.n	8009c08 <sbrk_aligned+0x38>
 8009c04:	f04f 34ff 	mov.w	r4, #4294967295
 8009c08:	4620      	mov	r0, r4
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	200008e8 	.word	0x200008e8

08009c10 <_malloc_r>:
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	1ccd      	adds	r5, r1, #3
 8009c16:	f025 0503 	bic.w	r5, r5, #3
 8009c1a:	3508      	adds	r5, #8
 8009c1c:	2d0c      	cmp	r5, #12
 8009c1e:	bf38      	it	cc
 8009c20:	250c      	movcc	r5, #12
 8009c22:	2d00      	cmp	r5, #0
 8009c24:	4607      	mov	r7, r0
 8009c26:	db01      	blt.n	8009c2c <_malloc_r+0x1c>
 8009c28:	42a9      	cmp	r1, r5
 8009c2a:	d905      	bls.n	8009c38 <_malloc_r+0x28>
 8009c2c:	230c      	movs	r3, #12
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	2600      	movs	r6, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	4e2e      	ldr	r6, [pc, #184]	; (8009cf4 <_malloc_r+0xe4>)
 8009c3a:	f000 fa25 	bl	800a088 <__malloc_lock>
 8009c3e:	6833      	ldr	r3, [r6, #0]
 8009c40:	461c      	mov	r4, r3
 8009c42:	bb34      	cbnz	r4, 8009c92 <_malloc_r+0x82>
 8009c44:	4629      	mov	r1, r5
 8009c46:	4638      	mov	r0, r7
 8009c48:	f7ff ffc2 	bl	8009bd0 <sbrk_aligned>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	4604      	mov	r4, r0
 8009c50:	d14d      	bne.n	8009cee <_malloc_r+0xde>
 8009c52:	6834      	ldr	r4, [r6, #0]
 8009c54:	4626      	mov	r6, r4
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	d140      	bne.n	8009cdc <_malloc_r+0xcc>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4638      	mov	r0, r7
 8009c60:	eb04 0803 	add.w	r8, r4, r3
 8009c64:	f000 f9a4 	bl	8009fb0 <_sbrk_r>
 8009c68:	4580      	cmp	r8, r0
 8009c6a:	d13a      	bne.n	8009ce2 <_malloc_r+0xd2>
 8009c6c:	6821      	ldr	r1, [r4, #0]
 8009c6e:	3503      	adds	r5, #3
 8009c70:	1a6d      	subs	r5, r5, r1
 8009c72:	f025 0503 	bic.w	r5, r5, #3
 8009c76:	3508      	adds	r5, #8
 8009c78:	2d0c      	cmp	r5, #12
 8009c7a:	bf38      	it	cc
 8009c7c:	250c      	movcc	r5, #12
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ffa5 	bl	8009bd0 <sbrk_aligned>
 8009c86:	3001      	adds	r0, #1
 8009c88:	d02b      	beq.n	8009ce2 <_malloc_r+0xd2>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	442b      	add	r3, r5
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	e00e      	b.n	8009cb0 <_malloc_r+0xa0>
 8009c92:	6822      	ldr	r2, [r4, #0]
 8009c94:	1b52      	subs	r2, r2, r5
 8009c96:	d41e      	bmi.n	8009cd6 <_malloc_r+0xc6>
 8009c98:	2a0b      	cmp	r2, #11
 8009c9a:	d916      	bls.n	8009cca <_malloc_r+0xba>
 8009c9c:	1961      	adds	r1, r4, r5
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	6025      	str	r5, [r4, #0]
 8009ca2:	bf18      	it	ne
 8009ca4:	6059      	strne	r1, [r3, #4]
 8009ca6:	6863      	ldr	r3, [r4, #4]
 8009ca8:	bf08      	it	eq
 8009caa:	6031      	streq	r1, [r6, #0]
 8009cac:	5162      	str	r2, [r4, r5]
 8009cae:	604b      	str	r3, [r1, #4]
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f104 060b 	add.w	r6, r4, #11
 8009cb6:	f000 f9ed 	bl	800a094 <__malloc_unlock>
 8009cba:	f026 0607 	bic.w	r6, r6, #7
 8009cbe:	1d23      	adds	r3, r4, #4
 8009cc0:	1af2      	subs	r2, r6, r3
 8009cc2:	d0b6      	beq.n	8009c32 <_malloc_r+0x22>
 8009cc4:	1b9b      	subs	r3, r3, r6
 8009cc6:	50a3      	str	r3, [r4, r2]
 8009cc8:	e7b3      	b.n	8009c32 <_malloc_r+0x22>
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	bf0c      	ite	eq
 8009cd0:	6032      	streq	r2, [r6, #0]
 8009cd2:	605a      	strne	r2, [r3, #4]
 8009cd4:	e7ec      	b.n	8009cb0 <_malloc_r+0xa0>
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	6864      	ldr	r4, [r4, #4]
 8009cda:	e7b2      	b.n	8009c42 <_malloc_r+0x32>
 8009cdc:	4634      	mov	r4, r6
 8009cde:	6876      	ldr	r6, [r6, #4]
 8009ce0:	e7b9      	b.n	8009c56 <_malloc_r+0x46>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	603b      	str	r3, [r7, #0]
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f000 f9d4 	bl	800a094 <__malloc_unlock>
 8009cec:	e7a1      	b.n	8009c32 <_malloc_r+0x22>
 8009cee:	6025      	str	r5, [r4, #0]
 8009cf0:	e7de      	b.n	8009cb0 <_malloc_r+0xa0>
 8009cf2:	bf00      	nop
 8009cf4:	200008e4 	.word	0x200008e4

08009cf8 <__ssputs_r>:
 8009cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	688e      	ldr	r6, [r1, #8]
 8009cfe:	429e      	cmp	r6, r3
 8009d00:	4682      	mov	sl, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	4690      	mov	r8, r2
 8009d06:	461f      	mov	r7, r3
 8009d08:	d838      	bhi.n	8009d7c <__ssputs_r+0x84>
 8009d0a:	898a      	ldrh	r2, [r1, #12]
 8009d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d10:	d032      	beq.n	8009d78 <__ssputs_r+0x80>
 8009d12:	6825      	ldr	r5, [r4, #0]
 8009d14:	6909      	ldr	r1, [r1, #16]
 8009d16:	eba5 0901 	sub.w	r9, r5, r1
 8009d1a:	6965      	ldr	r5, [r4, #20]
 8009d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d24:	3301      	adds	r3, #1
 8009d26:	444b      	add	r3, r9
 8009d28:	106d      	asrs	r5, r5, #1
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	bf38      	it	cc
 8009d2e:	461d      	movcc	r5, r3
 8009d30:	0553      	lsls	r3, r2, #21
 8009d32:	d531      	bpl.n	8009d98 <__ssputs_r+0xa0>
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7ff ff6b 	bl	8009c10 <_malloc_r>
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	b950      	cbnz	r0, 8009d54 <__ssputs_r+0x5c>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	f8ca 3000 	str.w	r3, [sl]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	464a      	mov	r2, r9
 8009d58:	f7fe f848 	bl	8007dec <memcpy>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	6126      	str	r6, [r4, #16]
 8009d6a:	6165      	str	r5, [r4, #20]
 8009d6c:	444e      	add	r6, r9
 8009d6e:	eba5 0509 	sub.w	r5, r5, r9
 8009d72:	6026      	str	r6, [r4, #0]
 8009d74:	60a5      	str	r5, [r4, #8]
 8009d76:	463e      	mov	r6, r7
 8009d78:	42be      	cmp	r6, r7
 8009d7a:	d900      	bls.n	8009d7e <__ssputs_r+0x86>
 8009d7c:	463e      	mov	r6, r7
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	4632      	mov	r2, r6
 8009d82:	4641      	mov	r1, r8
 8009d84:	f000 f966 	bl	800a054 <memmove>
 8009d88:	68a3      	ldr	r3, [r4, #8]
 8009d8a:	1b9b      	subs	r3, r3, r6
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	4433      	add	r3, r6
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e7db      	b.n	8009d50 <__ssputs_r+0x58>
 8009d98:	462a      	mov	r2, r5
 8009d9a:	f000 f981 	bl	800a0a0 <_realloc_r>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d1e1      	bne.n	8009d68 <__ssputs_r+0x70>
 8009da4:	6921      	ldr	r1, [r4, #16]
 8009da6:	4650      	mov	r0, sl
 8009da8:	f7ff fec6 	bl	8009b38 <_free_r>
 8009dac:	e7c7      	b.n	8009d3e <__ssputs_r+0x46>
	...

08009db0 <_svfiprintf_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	4698      	mov	r8, r3
 8009db6:	898b      	ldrh	r3, [r1, #12]
 8009db8:	061b      	lsls	r3, r3, #24
 8009dba:	b09d      	sub	sp, #116	; 0x74
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	d50e      	bpl.n	8009de2 <_svfiprintf_r+0x32>
 8009dc4:	690b      	ldr	r3, [r1, #16]
 8009dc6:	b963      	cbnz	r3, 8009de2 <_svfiprintf_r+0x32>
 8009dc8:	2140      	movs	r1, #64	; 0x40
 8009dca:	f7ff ff21 	bl	8009c10 <_malloc_r>
 8009dce:	6028      	str	r0, [r5, #0]
 8009dd0:	6128      	str	r0, [r5, #16]
 8009dd2:	b920      	cbnz	r0, 8009dde <_svfiprintf_r+0x2e>
 8009dd4:	230c      	movs	r3, #12
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	e0d1      	b.n	8009f82 <_svfiprintf_r+0x1d2>
 8009dde:	2340      	movs	r3, #64	; 0x40
 8009de0:	616b      	str	r3, [r5, #20]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9309      	str	r3, [sp, #36]	; 0x24
 8009de6:	2320      	movs	r3, #32
 8009de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df0:	2330      	movs	r3, #48	; 0x30
 8009df2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f9c <_svfiprintf_r+0x1ec>
 8009df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dfa:	f04f 0901 	mov.w	r9, #1
 8009dfe:	4623      	mov	r3, r4
 8009e00:	469a      	mov	sl, r3
 8009e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e06:	b10a      	cbz	r2, 8009e0c <_svfiprintf_r+0x5c>
 8009e08:	2a25      	cmp	r2, #37	; 0x25
 8009e0a:	d1f9      	bne.n	8009e00 <_svfiprintf_r+0x50>
 8009e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e10:	d00b      	beq.n	8009e2a <_svfiprintf_r+0x7a>
 8009e12:	465b      	mov	r3, fp
 8009e14:	4622      	mov	r2, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff ff6d 	bl	8009cf8 <__ssputs_r>
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f000 80aa 	beq.w	8009f78 <_svfiprintf_r+0x1c8>
 8009e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e26:	445a      	add	r2, fp
 8009e28:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 80a2 	beq.w	8009f78 <_svfiprintf_r+0x1c8>
 8009e34:	2300      	movs	r3, #0
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3e:	f10a 0a01 	add.w	sl, sl, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	9307      	str	r3, [sp, #28]
 8009e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e4c:	4654      	mov	r4, sl
 8009e4e:	2205      	movs	r2, #5
 8009e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e54:	4851      	ldr	r0, [pc, #324]	; (8009f9c <_svfiprintf_r+0x1ec>)
 8009e56:	f7f6 f9fb 	bl	8000250 <memchr>
 8009e5a:	9a04      	ldr	r2, [sp, #16]
 8009e5c:	b9d8      	cbnz	r0, 8009e96 <_svfiprintf_r+0xe6>
 8009e5e:	06d0      	lsls	r0, r2, #27
 8009e60:	bf44      	itt	mi
 8009e62:	2320      	movmi	r3, #32
 8009e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e68:	0711      	lsls	r1, r2, #28
 8009e6a:	bf44      	itt	mi
 8009e6c:	232b      	movmi	r3, #43	; 0x2b
 8009e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e72:	f89a 3000 	ldrb.w	r3, [sl]
 8009e76:	2b2a      	cmp	r3, #42	; 0x2a
 8009e78:	d015      	beq.n	8009ea6 <_svfiprintf_r+0xf6>
 8009e7a:	9a07      	ldr	r2, [sp, #28]
 8009e7c:	4654      	mov	r4, sl
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f04f 0c0a 	mov.w	ip, #10
 8009e84:	4621      	mov	r1, r4
 8009e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8a:	3b30      	subs	r3, #48	; 0x30
 8009e8c:	2b09      	cmp	r3, #9
 8009e8e:	d94e      	bls.n	8009f2e <_svfiprintf_r+0x17e>
 8009e90:	b1b0      	cbz	r0, 8009ec0 <_svfiprintf_r+0x110>
 8009e92:	9207      	str	r2, [sp, #28]
 8009e94:	e014      	b.n	8009ec0 <_svfiprintf_r+0x110>
 8009e96:	eba0 0308 	sub.w	r3, r0, r8
 8009e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	46a2      	mov	sl, r4
 8009ea4:	e7d2      	b.n	8009e4c <_svfiprintf_r+0x9c>
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	1d19      	adds	r1, r3, #4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	9103      	str	r1, [sp, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfbb      	ittet	lt
 8009eb2:	425b      	neglt	r3, r3
 8009eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009eb8:	9307      	strge	r3, [sp, #28]
 8009eba:	9307      	strlt	r3, [sp, #28]
 8009ebc:	bfb8      	it	lt
 8009ebe:	9204      	strlt	r2, [sp, #16]
 8009ec0:	7823      	ldrb	r3, [r4, #0]
 8009ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec4:	d10c      	bne.n	8009ee0 <_svfiprintf_r+0x130>
 8009ec6:	7863      	ldrb	r3, [r4, #1]
 8009ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eca:	d135      	bne.n	8009f38 <_svfiprintf_r+0x188>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	9203      	str	r2, [sp, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bfb8      	it	lt
 8009ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009edc:	3402      	adds	r4, #2
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fac <_svfiprintf_r+0x1fc>
 8009ee4:	7821      	ldrb	r1, [r4, #0]
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	4650      	mov	r0, sl
 8009eea:	f7f6 f9b1 	bl	8000250 <memchr>
 8009eee:	b140      	cbz	r0, 8009f02 <_svfiprintf_r+0x152>
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	eba0 000a 	sub.w	r0, r0, sl
 8009ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	4303      	orrs	r3, r0
 8009efe:	3401      	adds	r4, #1
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f06:	4826      	ldr	r0, [pc, #152]	; (8009fa0 <_svfiprintf_r+0x1f0>)
 8009f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f0c:	2206      	movs	r2, #6
 8009f0e:	f7f6 f99f 	bl	8000250 <memchr>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d038      	beq.n	8009f88 <_svfiprintf_r+0x1d8>
 8009f16:	4b23      	ldr	r3, [pc, #140]	; (8009fa4 <_svfiprintf_r+0x1f4>)
 8009f18:	bb1b      	cbnz	r3, 8009f62 <_svfiprintf_r+0x1b2>
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	3307      	adds	r3, #7
 8009f1e:	f023 0307 	bic.w	r3, r3, #7
 8009f22:	3308      	adds	r3, #8
 8009f24:	9303      	str	r3, [sp, #12]
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	4433      	add	r3, r6
 8009f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2c:	e767      	b.n	8009dfe <_svfiprintf_r+0x4e>
 8009f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f32:	460c      	mov	r4, r1
 8009f34:	2001      	movs	r0, #1
 8009f36:	e7a5      	b.n	8009e84 <_svfiprintf_r+0xd4>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	3401      	adds	r4, #1
 8009f3c:	9305      	str	r3, [sp, #20]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f04f 0c0a 	mov.w	ip, #10
 8009f44:	4620      	mov	r0, r4
 8009f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4a:	3a30      	subs	r2, #48	; 0x30
 8009f4c:	2a09      	cmp	r2, #9
 8009f4e:	d903      	bls.n	8009f58 <_svfiprintf_r+0x1a8>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0c5      	beq.n	8009ee0 <_svfiprintf_r+0x130>
 8009f54:	9105      	str	r1, [sp, #20]
 8009f56:	e7c3      	b.n	8009ee0 <_svfiprintf_r+0x130>
 8009f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7f0      	b.n	8009f44 <_svfiprintf_r+0x194>
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	462a      	mov	r2, r5
 8009f68:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <_svfiprintf_r+0x1f8>)
 8009f6a:	a904      	add	r1, sp, #16
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7fd ffe3 	bl	8007f38 <_printf_float>
 8009f72:	1c42      	adds	r2, r0, #1
 8009f74:	4606      	mov	r6, r0
 8009f76:	d1d6      	bne.n	8009f26 <_svfiprintf_r+0x176>
 8009f78:	89ab      	ldrh	r3, [r5, #12]
 8009f7a:	065b      	lsls	r3, r3, #25
 8009f7c:	f53f af2c 	bmi.w	8009dd8 <_svfiprintf_r+0x28>
 8009f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f82:	b01d      	add	sp, #116	; 0x74
 8009f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <_svfiprintf_r+0x1f8>)
 8009f90:	a904      	add	r1, sp, #16
 8009f92:	4638      	mov	r0, r7
 8009f94:	f7fe fa5c 	bl	8008450 <_printf_i>
 8009f98:	e7eb      	b.n	8009f72 <_svfiprintf_r+0x1c2>
 8009f9a:	bf00      	nop
 8009f9c:	0800af1c 	.word	0x0800af1c
 8009fa0:	0800af26 	.word	0x0800af26
 8009fa4:	08007f39 	.word	0x08007f39
 8009fa8:	08009cf9 	.word	0x08009cf9
 8009fac:	0800af22 	.word	0x0800af22

08009fb0 <_sbrk_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d06      	ldr	r5, [pc, #24]	; (8009fcc <_sbrk_r+0x1c>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f7f7 fc7e 	bl	80018bc <_sbrk>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_sbrk_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_sbrk_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	200008ec 	.word	0x200008ec

08009fd0 <__assert_func>:
 8009fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fd2:	4614      	mov	r4, r2
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <__assert_func+0x2c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4605      	mov	r5, r0
 8009fdc:	68d8      	ldr	r0, [r3, #12]
 8009fde:	b14c      	cbz	r4, 8009ff4 <__assert_func+0x24>
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <__assert_func+0x30>)
 8009fe2:	9100      	str	r1, [sp, #0]
 8009fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fe8:	4906      	ldr	r1, [pc, #24]	; (800a004 <__assert_func+0x34>)
 8009fea:	462b      	mov	r3, r5
 8009fec:	f000 f80e 	bl	800a00c <fiprintf>
 8009ff0:	f000 faac 	bl	800a54c <abort>
 8009ff4:	4b04      	ldr	r3, [pc, #16]	; (800a008 <__assert_func+0x38>)
 8009ff6:	461c      	mov	r4, r3
 8009ff8:	e7f3      	b.n	8009fe2 <__assert_func+0x12>
 8009ffa:	bf00      	nop
 8009ffc:	20000048 	.word	0x20000048
 800a000:	0800af2d 	.word	0x0800af2d
 800a004:	0800af3a 	.word	0x0800af3a
 800a008:	0800af68 	.word	0x0800af68

0800a00c <fiprintf>:
 800a00c:	b40e      	push	{r1, r2, r3}
 800a00e:	b503      	push	{r0, r1, lr}
 800a010:	4601      	mov	r1, r0
 800a012:	ab03      	add	r3, sp, #12
 800a014:	4805      	ldr	r0, [pc, #20]	; (800a02c <fiprintf+0x20>)
 800a016:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01a:	6800      	ldr	r0, [r0, #0]
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	f000 f897 	bl	800a150 <_vfiprintf_r>
 800a022:	b002      	add	sp, #8
 800a024:	f85d eb04 	ldr.w	lr, [sp], #4
 800a028:	b003      	add	sp, #12
 800a02a:	4770      	bx	lr
 800a02c:	20000048 	.word	0x20000048

0800a030 <__ascii_mbtowc>:
 800a030:	b082      	sub	sp, #8
 800a032:	b901      	cbnz	r1, 800a036 <__ascii_mbtowc+0x6>
 800a034:	a901      	add	r1, sp, #4
 800a036:	b142      	cbz	r2, 800a04a <__ascii_mbtowc+0x1a>
 800a038:	b14b      	cbz	r3, 800a04e <__ascii_mbtowc+0x1e>
 800a03a:	7813      	ldrb	r3, [r2, #0]
 800a03c:	600b      	str	r3, [r1, #0]
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	1e10      	subs	r0, r2, #0
 800a042:	bf18      	it	ne
 800a044:	2001      	movne	r0, #1
 800a046:	b002      	add	sp, #8
 800a048:	4770      	bx	lr
 800a04a:	4610      	mov	r0, r2
 800a04c:	e7fb      	b.n	800a046 <__ascii_mbtowc+0x16>
 800a04e:	f06f 0001 	mvn.w	r0, #1
 800a052:	e7f8      	b.n	800a046 <__ascii_mbtowc+0x16>

0800a054 <memmove>:
 800a054:	4288      	cmp	r0, r1
 800a056:	b510      	push	{r4, lr}
 800a058:	eb01 0402 	add.w	r4, r1, r2
 800a05c:	d902      	bls.n	800a064 <memmove+0x10>
 800a05e:	4284      	cmp	r4, r0
 800a060:	4623      	mov	r3, r4
 800a062:	d807      	bhi.n	800a074 <memmove+0x20>
 800a064:	1e43      	subs	r3, r0, #1
 800a066:	42a1      	cmp	r1, r4
 800a068:	d008      	beq.n	800a07c <memmove+0x28>
 800a06a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a06e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a072:	e7f8      	b.n	800a066 <memmove+0x12>
 800a074:	4402      	add	r2, r0
 800a076:	4601      	mov	r1, r0
 800a078:	428a      	cmp	r2, r1
 800a07a:	d100      	bne.n	800a07e <memmove+0x2a>
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a086:	e7f7      	b.n	800a078 <memmove+0x24>

0800a088 <__malloc_lock>:
 800a088:	4801      	ldr	r0, [pc, #4]	; (800a090 <__malloc_lock+0x8>)
 800a08a:	f000 bc1f 	b.w	800a8cc <__retarget_lock_acquire_recursive>
 800a08e:	bf00      	nop
 800a090:	200008f0 	.word	0x200008f0

0800a094 <__malloc_unlock>:
 800a094:	4801      	ldr	r0, [pc, #4]	; (800a09c <__malloc_unlock+0x8>)
 800a096:	f000 bc1a 	b.w	800a8ce <__retarget_lock_release_recursive>
 800a09a:	bf00      	nop
 800a09c:	200008f0 	.word	0x200008f0

0800a0a0 <_realloc_r>:
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	b921      	cbnz	r1, 800a0b6 <_realloc_r+0x16>
 800a0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	f7ff bdad 	b.w	8009c10 <_malloc_r>
 800a0b6:	b92a      	cbnz	r2, 800a0c4 <_realloc_r+0x24>
 800a0b8:	f7ff fd3e 	bl	8009b38 <_free_r>
 800a0bc:	4625      	mov	r5, r4
 800a0be:	4628      	mov	r0, r5
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	f000 fc6a 	bl	800a99c <_malloc_usable_size_r>
 800a0c8:	4284      	cmp	r4, r0
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	d802      	bhi.n	800a0d4 <_realloc_r+0x34>
 800a0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0d2:	d812      	bhi.n	800a0fa <_realloc_r+0x5a>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff fd9a 	bl	8009c10 <_malloc_r>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d0ed      	beq.n	800a0be <_realloc_r+0x1e>
 800a0e2:	42bc      	cmp	r4, r7
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	bf28      	it	cs
 800a0ea:	463a      	movcs	r2, r7
 800a0ec:	f7fd fe7e 	bl	8007dec <memcpy>
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7ff fd20 	bl	8009b38 <_free_r>
 800a0f8:	e7e1      	b.n	800a0be <_realloc_r+0x1e>
 800a0fa:	4635      	mov	r5, r6
 800a0fc:	e7df      	b.n	800a0be <_realloc_r+0x1e>

0800a0fe <__sfputc_r>:
 800a0fe:	6893      	ldr	r3, [r2, #8]
 800a100:	3b01      	subs	r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	b410      	push	{r4}
 800a106:	6093      	str	r3, [r2, #8]
 800a108:	da08      	bge.n	800a11c <__sfputc_r+0x1e>
 800a10a:	6994      	ldr	r4, [r2, #24]
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	db01      	blt.n	800a114 <__sfputc_r+0x16>
 800a110:	290a      	cmp	r1, #10
 800a112:	d103      	bne.n	800a11c <__sfputc_r+0x1e>
 800a114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a118:	f000 b94a 	b.w	800a3b0 <__swbuf_r>
 800a11c:	6813      	ldr	r3, [r2, #0]
 800a11e:	1c58      	adds	r0, r3, #1
 800a120:	6010      	str	r0, [r2, #0]
 800a122:	7019      	strb	r1, [r3, #0]
 800a124:	4608      	mov	r0, r1
 800a126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <__sfputs_r>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	4614      	mov	r4, r2
 800a134:	18d5      	adds	r5, r2, r3
 800a136:	42ac      	cmp	r4, r5
 800a138:	d101      	bne.n	800a13e <__sfputs_r+0x12>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e007      	b.n	800a14e <__sfputs_r+0x22>
 800a13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a142:	463a      	mov	r2, r7
 800a144:	4630      	mov	r0, r6
 800a146:	f7ff ffda 	bl	800a0fe <__sfputc_r>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d1f3      	bne.n	800a136 <__sfputs_r+0xa>
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a150 <_vfiprintf_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	460d      	mov	r5, r1
 800a156:	b09d      	sub	sp, #116	; 0x74
 800a158:	4614      	mov	r4, r2
 800a15a:	4698      	mov	r8, r3
 800a15c:	4606      	mov	r6, r0
 800a15e:	b118      	cbz	r0, 800a168 <_vfiprintf_r+0x18>
 800a160:	6983      	ldr	r3, [r0, #24]
 800a162:	b90b      	cbnz	r3, 800a168 <_vfiprintf_r+0x18>
 800a164:	f000 fb14 	bl	800a790 <__sinit>
 800a168:	4b89      	ldr	r3, [pc, #548]	; (800a390 <_vfiprintf_r+0x240>)
 800a16a:	429d      	cmp	r5, r3
 800a16c:	d11b      	bne.n	800a1a6 <_vfiprintf_r+0x56>
 800a16e:	6875      	ldr	r5, [r6, #4]
 800a170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a172:	07d9      	lsls	r1, r3, #31
 800a174:	d405      	bmi.n	800a182 <_vfiprintf_r+0x32>
 800a176:	89ab      	ldrh	r3, [r5, #12]
 800a178:	059a      	lsls	r2, r3, #22
 800a17a:	d402      	bmi.n	800a182 <_vfiprintf_r+0x32>
 800a17c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a17e:	f000 fba5 	bl	800a8cc <__retarget_lock_acquire_recursive>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	071b      	lsls	r3, r3, #28
 800a186:	d501      	bpl.n	800a18c <_vfiprintf_r+0x3c>
 800a188:	692b      	ldr	r3, [r5, #16]
 800a18a:	b9eb      	cbnz	r3, 800a1c8 <_vfiprintf_r+0x78>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f96e 	bl	800a470 <__swsetup_r>
 800a194:	b1c0      	cbz	r0, 800a1c8 <_vfiprintf_r+0x78>
 800a196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a198:	07dc      	lsls	r4, r3, #31
 800a19a:	d50e      	bpl.n	800a1ba <_vfiprintf_r+0x6a>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	b01d      	add	sp, #116	; 0x74
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a6:	4b7b      	ldr	r3, [pc, #492]	; (800a394 <_vfiprintf_r+0x244>)
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	d101      	bne.n	800a1b0 <_vfiprintf_r+0x60>
 800a1ac:	68b5      	ldr	r5, [r6, #8]
 800a1ae:	e7df      	b.n	800a170 <_vfiprintf_r+0x20>
 800a1b0:	4b79      	ldr	r3, [pc, #484]	; (800a398 <_vfiprintf_r+0x248>)
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	bf08      	it	eq
 800a1b6:	68f5      	ldreq	r5, [r6, #12]
 800a1b8:	e7da      	b.n	800a170 <_vfiprintf_r+0x20>
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	0598      	lsls	r0, r3, #22
 800a1be:	d4ed      	bmi.n	800a19c <_vfiprintf_r+0x4c>
 800a1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c2:	f000 fb84 	bl	800a8ce <__retarget_lock_release_recursive>
 800a1c6:	e7e9      	b.n	800a19c <_vfiprintf_r+0x4c>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1d6:	2330      	movs	r3, #48	; 0x30
 800a1d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a39c <_vfiprintf_r+0x24c>
 800a1dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e0:	f04f 0901 	mov.w	r9, #1
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	469a      	mov	sl, r3
 800a1e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ec:	b10a      	cbz	r2, 800a1f2 <_vfiprintf_r+0xa2>
 800a1ee:	2a25      	cmp	r2, #37	; 0x25
 800a1f0:	d1f9      	bne.n	800a1e6 <_vfiprintf_r+0x96>
 800a1f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1f6:	d00b      	beq.n	800a210 <_vfiprintf_r+0xc0>
 800a1f8:	465b      	mov	r3, fp
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7ff ff94 	bl	800a12c <__sfputs_r>
 800a204:	3001      	adds	r0, #1
 800a206:	f000 80aa 	beq.w	800a35e <_vfiprintf_r+0x20e>
 800a20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a20c:	445a      	add	r2, fp
 800a20e:	9209      	str	r2, [sp, #36]	; 0x24
 800a210:	f89a 3000 	ldrb.w	r3, [sl]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 80a2 	beq.w	800a35e <_vfiprintf_r+0x20e>
 800a21a:	2300      	movs	r3, #0
 800a21c:	f04f 32ff 	mov.w	r2, #4294967295
 800a220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a224:	f10a 0a01 	add.w	sl, sl, #1
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	9307      	str	r3, [sp, #28]
 800a22c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a230:	931a      	str	r3, [sp, #104]	; 0x68
 800a232:	4654      	mov	r4, sl
 800a234:	2205      	movs	r2, #5
 800a236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23a:	4858      	ldr	r0, [pc, #352]	; (800a39c <_vfiprintf_r+0x24c>)
 800a23c:	f7f6 f808 	bl	8000250 <memchr>
 800a240:	9a04      	ldr	r2, [sp, #16]
 800a242:	b9d8      	cbnz	r0, 800a27c <_vfiprintf_r+0x12c>
 800a244:	06d1      	lsls	r1, r2, #27
 800a246:	bf44      	itt	mi
 800a248:	2320      	movmi	r3, #32
 800a24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a24e:	0713      	lsls	r3, r2, #28
 800a250:	bf44      	itt	mi
 800a252:	232b      	movmi	r3, #43	; 0x2b
 800a254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a258:	f89a 3000 	ldrb.w	r3, [sl]
 800a25c:	2b2a      	cmp	r3, #42	; 0x2a
 800a25e:	d015      	beq.n	800a28c <_vfiprintf_r+0x13c>
 800a260:	9a07      	ldr	r2, [sp, #28]
 800a262:	4654      	mov	r4, sl
 800a264:	2000      	movs	r0, #0
 800a266:	f04f 0c0a 	mov.w	ip, #10
 800a26a:	4621      	mov	r1, r4
 800a26c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a270:	3b30      	subs	r3, #48	; 0x30
 800a272:	2b09      	cmp	r3, #9
 800a274:	d94e      	bls.n	800a314 <_vfiprintf_r+0x1c4>
 800a276:	b1b0      	cbz	r0, 800a2a6 <_vfiprintf_r+0x156>
 800a278:	9207      	str	r2, [sp, #28]
 800a27a:	e014      	b.n	800a2a6 <_vfiprintf_r+0x156>
 800a27c:	eba0 0308 	sub.w	r3, r0, r8
 800a280:	fa09 f303 	lsl.w	r3, r9, r3
 800a284:	4313      	orrs	r3, r2
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	46a2      	mov	sl, r4
 800a28a:	e7d2      	b.n	800a232 <_vfiprintf_r+0xe2>
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	1d19      	adds	r1, r3, #4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	9103      	str	r1, [sp, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfbb      	ittet	lt
 800a298:	425b      	neglt	r3, r3
 800a29a:	f042 0202 	orrlt.w	r2, r2, #2
 800a29e:	9307      	strge	r3, [sp, #28]
 800a2a0:	9307      	strlt	r3, [sp, #28]
 800a2a2:	bfb8      	it	lt
 800a2a4:	9204      	strlt	r2, [sp, #16]
 800a2a6:	7823      	ldrb	r3, [r4, #0]
 800a2a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a2aa:	d10c      	bne.n	800a2c6 <_vfiprintf_r+0x176>
 800a2ac:	7863      	ldrb	r3, [r4, #1]
 800a2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b0:	d135      	bne.n	800a31e <_vfiprintf_r+0x1ce>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	1d1a      	adds	r2, r3, #4
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	9203      	str	r2, [sp, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bfb8      	it	lt
 800a2be:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2c2:	3402      	adds	r4, #2
 800a2c4:	9305      	str	r3, [sp, #20]
 800a2c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3ac <_vfiprintf_r+0x25c>
 800a2ca:	7821      	ldrb	r1, [r4, #0]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	f7f5 ffbe 	bl	8000250 <memchr>
 800a2d4:	b140      	cbz	r0, 800a2e8 <_vfiprintf_r+0x198>
 800a2d6:	2340      	movs	r3, #64	; 0x40
 800a2d8:	eba0 000a 	sub.w	r0, r0, sl
 800a2dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	4303      	orrs	r3, r0
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ec:	482c      	ldr	r0, [pc, #176]	; (800a3a0 <_vfiprintf_r+0x250>)
 800a2ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2f2:	2206      	movs	r2, #6
 800a2f4:	f7f5 ffac 	bl	8000250 <memchr>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d03f      	beq.n	800a37c <_vfiprintf_r+0x22c>
 800a2fc:	4b29      	ldr	r3, [pc, #164]	; (800a3a4 <_vfiprintf_r+0x254>)
 800a2fe:	bb1b      	cbnz	r3, 800a348 <_vfiprintf_r+0x1f8>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	3307      	adds	r3, #7
 800a304:	f023 0307 	bic.w	r3, r3, #7
 800a308:	3308      	adds	r3, #8
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30e:	443b      	add	r3, r7
 800a310:	9309      	str	r3, [sp, #36]	; 0x24
 800a312:	e767      	b.n	800a1e4 <_vfiprintf_r+0x94>
 800a314:	fb0c 3202 	mla	r2, ip, r2, r3
 800a318:	460c      	mov	r4, r1
 800a31a:	2001      	movs	r0, #1
 800a31c:	e7a5      	b.n	800a26a <_vfiprintf_r+0x11a>
 800a31e:	2300      	movs	r3, #0
 800a320:	3401      	adds	r4, #1
 800a322:	9305      	str	r3, [sp, #20]
 800a324:	4619      	mov	r1, r3
 800a326:	f04f 0c0a 	mov.w	ip, #10
 800a32a:	4620      	mov	r0, r4
 800a32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a330:	3a30      	subs	r2, #48	; 0x30
 800a332:	2a09      	cmp	r2, #9
 800a334:	d903      	bls.n	800a33e <_vfiprintf_r+0x1ee>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0c5      	beq.n	800a2c6 <_vfiprintf_r+0x176>
 800a33a:	9105      	str	r1, [sp, #20]
 800a33c:	e7c3      	b.n	800a2c6 <_vfiprintf_r+0x176>
 800a33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a342:	4604      	mov	r4, r0
 800a344:	2301      	movs	r3, #1
 800a346:	e7f0      	b.n	800a32a <_vfiprintf_r+0x1da>
 800a348:	ab03      	add	r3, sp, #12
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	462a      	mov	r2, r5
 800a34e:	4b16      	ldr	r3, [pc, #88]	; (800a3a8 <_vfiprintf_r+0x258>)
 800a350:	a904      	add	r1, sp, #16
 800a352:	4630      	mov	r0, r6
 800a354:	f7fd fdf0 	bl	8007f38 <_printf_float>
 800a358:	4607      	mov	r7, r0
 800a35a:	1c78      	adds	r0, r7, #1
 800a35c:	d1d6      	bne.n	800a30c <_vfiprintf_r+0x1bc>
 800a35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a360:	07d9      	lsls	r1, r3, #31
 800a362:	d405      	bmi.n	800a370 <_vfiprintf_r+0x220>
 800a364:	89ab      	ldrh	r3, [r5, #12]
 800a366:	059a      	lsls	r2, r3, #22
 800a368:	d402      	bmi.n	800a370 <_vfiprintf_r+0x220>
 800a36a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a36c:	f000 faaf 	bl	800a8ce <__retarget_lock_release_recursive>
 800a370:	89ab      	ldrh	r3, [r5, #12]
 800a372:	065b      	lsls	r3, r3, #25
 800a374:	f53f af12 	bmi.w	800a19c <_vfiprintf_r+0x4c>
 800a378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37a:	e711      	b.n	800a1a0 <_vfiprintf_r+0x50>
 800a37c:	ab03      	add	r3, sp, #12
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	462a      	mov	r2, r5
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <_vfiprintf_r+0x258>)
 800a384:	a904      	add	r1, sp, #16
 800a386:	4630      	mov	r0, r6
 800a388:	f7fe f862 	bl	8008450 <_printf_i>
 800a38c:	e7e4      	b.n	800a358 <_vfiprintf_r+0x208>
 800a38e:	bf00      	nop
 800a390:	0800af94 	.word	0x0800af94
 800a394:	0800afb4 	.word	0x0800afb4
 800a398:	0800af74 	.word	0x0800af74
 800a39c:	0800af1c 	.word	0x0800af1c
 800a3a0:	0800af26 	.word	0x0800af26
 800a3a4:	08007f39 	.word	0x08007f39
 800a3a8:	0800a12d 	.word	0x0800a12d
 800a3ac:	0800af22 	.word	0x0800af22

0800a3b0 <__swbuf_r>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	460e      	mov	r6, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b118      	cbz	r0, 800a3c2 <__swbuf_r+0x12>
 800a3ba:	6983      	ldr	r3, [r0, #24]
 800a3bc:	b90b      	cbnz	r3, 800a3c2 <__swbuf_r+0x12>
 800a3be:	f000 f9e7 	bl	800a790 <__sinit>
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <__swbuf_r+0x98>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	d12b      	bne.n	800a420 <__swbuf_r+0x70>
 800a3c8:	686c      	ldr	r4, [r5, #4]
 800a3ca:	69a3      	ldr	r3, [r4, #24]
 800a3cc:	60a3      	str	r3, [r4, #8]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	071a      	lsls	r2, r3, #28
 800a3d2:	d52f      	bpl.n	800a434 <__swbuf_r+0x84>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	b36b      	cbz	r3, 800a434 <__swbuf_r+0x84>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	1ac0      	subs	r0, r0, r3
 800a3de:	6963      	ldr	r3, [r4, #20]
 800a3e0:	b2f6      	uxtb	r6, r6
 800a3e2:	4283      	cmp	r3, r0
 800a3e4:	4637      	mov	r7, r6
 800a3e6:	dc04      	bgt.n	800a3f2 <__swbuf_r+0x42>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f000 f93c 	bl	800a668 <_fflush_r>
 800a3f0:	bb30      	cbnz	r0, 800a440 <__swbuf_r+0x90>
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	60a3      	str	r3, [r4, #8]
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	6022      	str	r2, [r4, #0]
 800a3fe:	701e      	strb	r6, [r3, #0]
 800a400:	6963      	ldr	r3, [r4, #20]
 800a402:	3001      	adds	r0, #1
 800a404:	4283      	cmp	r3, r0
 800a406:	d004      	beq.n	800a412 <__swbuf_r+0x62>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d506      	bpl.n	800a41c <__swbuf_r+0x6c>
 800a40e:	2e0a      	cmp	r6, #10
 800a410:	d104      	bne.n	800a41c <__swbuf_r+0x6c>
 800a412:	4621      	mov	r1, r4
 800a414:	4628      	mov	r0, r5
 800a416:	f000 f927 	bl	800a668 <_fflush_r>
 800a41a:	b988      	cbnz	r0, 800a440 <__swbuf_r+0x90>
 800a41c:	4638      	mov	r0, r7
 800a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <__swbuf_r+0x9c>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d101      	bne.n	800a42a <__swbuf_r+0x7a>
 800a426:	68ac      	ldr	r4, [r5, #8]
 800a428:	e7cf      	b.n	800a3ca <__swbuf_r+0x1a>
 800a42a:	4b09      	ldr	r3, [pc, #36]	; (800a450 <__swbuf_r+0xa0>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	bf08      	it	eq
 800a430:	68ec      	ldreq	r4, [r5, #12]
 800a432:	e7ca      	b.n	800a3ca <__swbuf_r+0x1a>
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 f81a 	bl	800a470 <__swsetup_r>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d0cb      	beq.n	800a3d8 <__swbuf_r+0x28>
 800a440:	f04f 37ff 	mov.w	r7, #4294967295
 800a444:	e7ea      	b.n	800a41c <__swbuf_r+0x6c>
 800a446:	bf00      	nop
 800a448:	0800af94 	.word	0x0800af94
 800a44c:	0800afb4 	.word	0x0800afb4
 800a450:	0800af74 	.word	0x0800af74

0800a454 <__ascii_wctomb>:
 800a454:	b149      	cbz	r1, 800a46a <__ascii_wctomb+0x16>
 800a456:	2aff      	cmp	r2, #255	; 0xff
 800a458:	bf85      	ittet	hi
 800a45a:	238a      	movhi	r3, #138	; 0x8a
 800a45c:	6003      	strhi	r3, [r0, #0]
 800a45e:	700a      	strbls	r2, [r1, #0]
 800a460:	f04f 30ff 	movhi.w	r0, #4294967295
 800a464:	bf98      	it	ls
 800a466:	2001      	movls	r0, #1
 800a468:	4770      	bx	lr
 800a46a:	4608      	mov	r0, r1
 800a46c:	4770      	bx	lr
	...

0800a470 <__swsetup_r>:
 800a470:	4b32      	ldr	r3, [pc, #200]	; (800a53c <__swsetup_r+0xcc>)
 800a472:	b570      	push	{r4, r5, r6, lr}
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	4606      	mov	r6, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	b125      	cbz	r5, 800a486 <__swsetup_r+0x16>
 800a47c:	69ab      	ldr	r3, [r5, #24]
 800a47e:	b913      	cbnz	r3, 800a486 <__swsetup_r+0x16>
 800a480:	4628      	mov	r0, r5
 800a482:	f000 f985 	bl	800a790 <__sinit>
 800a486:	4b2e      	ldr	r3, [pc, #184]	; (800a540 <__swsetup_r+0xd0>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	d10f      	bne.n	800a4ac <__swsetup_r+0x3c>
 800a48c:	686c      	ldr	r4, [r5, #4]
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a494:	0719      	lsls	r1, r3, #28
 800a496:	d42c      	bmi.n	800a4f2 <__swsetup_r+0x82>
 800a498:	06dd      	lsls	r5, r3, #27
 800a49a:	d411      	bmi.n	800a4c0 <__swsetup_r+0x50>
 800a49c:	2309      	movs	r3, #9
 800a49e:	6033      	str	r3, [r6, #0]
 800a4a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4a4:	81a3      	strh	r3, [r4, #12]
 800a4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4aa:	e03e      	b.n	800a52a <__swsetup_r+0xba>
 800a4ac:	4b25      	ldr	r3, [pc, #148]	; (800a544 <__swsetup_r+0xd4>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	d101      	bne.n	800a4b6 <__swsetup_r+0x46>
 800a4b2:	68ac      	ldr	r4, [r5, #8]
 800a4b4:	e7eb      	b.n	800a48e <__swsetup_r+0x1e>
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <__swsetup_r+0xd8>)
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	bf08      	it	eq
 800a4bc:	68ec      	ldreq	r4, [r5, #12]
 800a4be:	e7e6      	b.n	800a48e <__swsetup_r+0x1e>
 800a4c0:	0758      	lsls	r0, r3, #29
 800a4c2:	d512      	bpl.n	800a4ea <__swsetup_r+0x7a>
 800a4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c6:	b141      	cbz	r1, 800a4da <__swsetup_r+0x6a>
 800a4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4cc:	4299      	cmp	r1, r3
 800a4ce:	d002      	beq.n	800a4d6 <__swsetup_r+0x66>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fb31 	bl	8009b38 <_free_r>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f043 0308 	orr.w	r3, r3, #8
 800a4f0:	81a3      	strh	r3, [r4, #12]
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	b94b      	cbnz	r3, 800a50a <__swsetup_r+0x9a>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a500:	d003      	beq.n	800a50a <__swsetup_r+0x9a>
 800a502:	4621      	mov	r1, r4
 800a504:	4630      	mov	r0, r6
 800a506:	f000 fa09 	bl	800a91c <__smakebuf_r>
 800a50a:	89a0      	ldrh	r0, [r4, #12]
 800a50c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a510:	f010 0301 	ands.w	r3, r0, #1
 800a514:	d00a      	beq.n	800a52c <__swsetup_r+0xbc>
 800a516:	2300      	movs	r3, #0
 800a518:	60a3      	str	r3, [r4, #8]
 800a51a:	6963      	ldr	r3, [r4, #20]
 800a51c:	425b      	negs	r3, r3
 800a51e:	61a3      	str	r3, [r4, #24]
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	b943      	cbnz	r3, 800a536 <__swsetup_r+0xc6>
 800a524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a528:	d1ba      	bne.n	800a4a0 <__swsetup_r+0x30>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	0781      	lsls	r1, r0, #30
 800a52e:	bf58      	it	pl
 800a530:	6963      	ldrpl	r3, [r4, #20]
 800a532:	60a3      	str	r3, [r4, #8]
 800a534:	e7f4      	b.n	800a520 <__swsetup_r+0xb0>
 800a536:	2000      	movs	r0, #0
 800a538:	e7f7      	b.n	800a52a <__swsetup_r+0xba>
 800a53a:	bf00      	nop
 800a53c:	20000048 	.word	0x20000048
 800a540:	0800af94 	.word	0x0800af94
 800a544:	0800afb4 	.word	0x0800afb4
 800a548:	0800af74 	.word	0x0800af74

0800a54c <abort>:
 800a54c:	b508      	push	{r3, lr}
 800a54e:	2006      	movs	r0, #6
 800a550:	f000 fa54 	bl	800a9fc <raise>
 800a554:	2001      	movs	r0, #1
 800a556:	f7f7 f939 	bl	80017cc <_exit>
	...

0800a55c <__sflush_r>:
 800a55c:	898a      	ldrh	r2, [r1, #12]
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	4605      	mov	r5, r0
 800a564:	0710      	lsls	r0, r2, #28
 800a566:	460c      	mov	r4, r1
 800a568:	d458      	bmi.n	800a61c <__sflush_r+0xc0>
 800a56a:	684b      	ldr	r3, [r1, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dc05      	bgt.n	800a57c <__sflush_r+0x20>
 800a570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a572:	2b00      	cmp	r3, #0
 800a574:	dc02      	bgt.n	800a57c <__sflush_r+0x20>
 800a576:	2000      	movs	r0, #0
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a57e:	2e00      	cmp	r6, #0
 800a580:	d0f9      	beq.n	800a576 <__sflush_r+0x1a>
 800a582:	2300      	movs	r3, #0
 800a584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a588:	682f      	ldr	r7, [r5, #0]
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	d032      	beq.n	800a5f4 <__sflush_r+0x98>
 800a58e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	075a      	lsls	r2, r3, #29
 800a594:	d505      	bpl.n	800a5a2 <__sflush_r+0x46>
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	1ac0      	subs	r0, r0, r3
 800a59a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a59c:	b10b      	cbz	r3, 800a5a2 <__sflush_r+0x46>
 800a59e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5a0:	1ac0      	subs	r0, r0, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a8:	6a21      	ldr	r1, [r4, #32]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	47b0      	blx	r6
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	d106      	bne.n	800a5c2 <__sflush_r+0x66>
 800a5b4:	6829      	ldr	r1, [r5, #0]
 800a5b6:	291d      	cmp	r1, #29
 800a5b8:	d82c      	bhi.n	800a614 <__sflush_r+0xb8>
 800a5ba:	4a2a      	ldr	r2, [pc, #168]	; (800a664 <__sflush_r+0x108>)
 800a5bc:	40ca      	lsrs	r2, r1
 800a5be:	07d6      	lsls	r6, r2, #31
 800a5c0:	d528      	bpl.n	800a614 <__sflush_r+0xb8>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	6062      	str	r2, [r4, #4]
 800a5c6:	04d9      	lsls	r1, r3, #19
 800a5c8:	6922      	ldr	r2, [r4, #16]
 800a5ca:	6022      	str	r2, [r4, #0]
 800a5cc:	d504      	bpl.n	800a5d8 <__sflush_r+0x7c>
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	d101      	bne.n	800a5d6 <__sflush_r+0x7a>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	b903      	cbnz	r3, 800a5d8 <__sflush_r+0x7c>
 800a5d6:	6560      	str	r0, [r4, #84]	; 0x54
 800a5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5da:	602f      	str	r7, [r5, #0]
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	d0ca      	beq.n	800a576 <__sflush_r+0x1a>
 800a5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	d002      	beq.n	800a5ee <__sflush_r+0x92>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff faa5 	bl	8009b38 <_free_r>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f2:	e7c1      	b.n	800a578 <__sflush_r+0x1c>
 800a5f4:	6a21      	ldr	r1, [r4, #32]
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b0      	blx	r6
 800a5fc:	1c41      	adds	r1, r0, #1
 800a5fe:	d1c7      	bne.n	800a590 <__sflush_r+0x34>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0c4      	beq.n	800a590 <__sflush_r+0x34>
 800a606:	2b1d      	cmp	r3, #29
 800a608:	d001      	beq.n	800a60e <__sflush_r+0xb2>
 800a60a:	2b16      	cmp	r3, #22
 800a60c:	d101      	bne.n	800a612 <__sflush_r+0xb6>
 800a60e:	602f      	str	r7, [r5, #0]
 800a610:	e7b1      	b.n	800a576 <__sflush_r+0x1a>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	e7ad      	b.n	800a578 <__sflush_r+0x1c>
 800a61c:	690f      	ldr	r7, [r1, #16]
 800a61e:	2f00      	cmp	r7, #0
 800a620:	d0a9      	beq.n	800a576 <__sflush_r+0x1a>
 800a622:	0793      	lsls	r3, r2, #30
 800a624:	680e      	ldr	r6, [r1, #0]
 800a626:	bf08      	it	eq
 800a628:	694b      	ldreq	r3, [r1, #20]
 800a62a:	600f      	str	r7, [r1, #0]
 800a62c:	bf18      	it	ne
 800a62e:	2300      	movne	r3, #0
 800a630:	eba6 0807 	sub.w	r8, r6, r7
 800a634:	608b      	str	r3, [r1, #8]
 800a636:	f1b8 0f00 	cmp.w	r8, #0
 800a63a:	dd9c      	ble.n	800a576 <__sflush_r+0x1a>
 800a63c:	6a21      	ldr	r1, [r4, #32]
 800a63e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a640:	4643      	mov	r3, r8
 800a642:	463a      	mov	r2, r7
 800a644:	4628      	mov	r0, r5
 800a646:	47b0      	blx	r6
 800a648:	2800      	cmp	r0, #0
 800a64a:	dc06      	bgt.n	800a65a <__sflush_r+0xfe>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	e78e      	b.n	800a578 <__sflush_r+0x1c>
 800a65a:	4407      	add	r7, r0
 800a65c:	eba8 0800 	sub.w	r8, r8, r0
 800a660:	e7e9      	b.n	800a636 <__sflush_r+0xda>
 800a662:	bf00      	nop
 800a664:	20400001 	.word	0x20400001

0800a668 <_fflush_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	690b      	ldr	r3, [r1, #16]
 800a66c:	4605      	mov	r5, r0
 800a66e:	460c      	mov	r4, r1
 800a670:	b913      	cbnz	r3, 800a678 <_fflush_r+0x10>
 800a672:	2500      	movs	r5, #0
 800a674:	4628      	mov	r0, r5
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	b118      	cbz	r0, 800a682 <_fflush_r+0x1a>
 800a67a:	6983      	ldr	r3, [r0, #24]
 800a67c:	b90b      	cbnz	r3, 800a682 <_fflush_r+0x1a>
 800a67e:	f000 f887 	bl	800a790 <__sinit>
 800a682:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <_fflush_r+0x6c>)
 800a684:	429c      	cmp	r4, r3
 800a686:	d11b      	bne.n	800a6c0 <_fflush_r+0x58>
 800a688:	686c      	ldr	r4, [r5, #4]
 800a68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0ef      	beq.n	800a672 <_fflush_r+0xa>
 800a692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a694:	07d0      	lsls	r0, r2, #31
 800a696:	d404      	bmi.n	800a6a2 <_fflush_r+0x3a>
 800a698:	0599      	lsls	r1, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_fflush_r+0x3a>
 800a69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a69e:	f000 f915 	bl	800a8cc <__retarget_lock_acquire_recursive>
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f7ff ff59 	bl	800a55c <__sflush_r>
 800a6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ac:	07da      	lsls	r2, r3, #31
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	d4e0      	bmi.n	800a674 <_fflush_r+0xc>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	059b      	lsls	r3, r3, #22
 800a6b6:	d4dd      	bmi.n	800a674 <_fflush_r+0xc>
 800a6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ba:	f000 f908 	bl	800a8ce <__retarget_lock_release_recursive>
 800a6be:	e7d9      	b.n	800a674 <_fflush_r+0xc>
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <_fflush_r+0x70>)
 800a6c2:	429c      	cmp	r4, r3
 800a6c4:	d101      	bne.n	800a6ca <_fflush_r+0x62>
 800a6c6:	68ac      	ldr	r4, [r5, #8]
 800a6c8:	e7df      	b.n	800a68a <_fflush_r+0x22>
 800a6ca:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <_fflush_r+0x74>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	bf08      	it	eq
 800a6d0:	68ec      	ldreq	r4, [r5, #12]
 800a6d2:	e7da      	b.n	800a68a <_fflush_r+0x22>
 800a6d4:	0800af94 	.word	0x0800af94
 800a6d8:	0800afb4 	.word	0x0800afb4
 800a6dc:	0800af74 	.word	0x0800af74

0800a6e0 <std>:
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ee:	6083      	str	r3, [r0, #8]
 800a6f0:	8181      	strh	r1, [r0, #12]
 800a6f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a6f4:	81c2      	strh	r2, [r0, #14]
 800a6f6:	6183      	str	r3, [r0, #24]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	305c      	adds	r0, #92	; 0x5c
 800a6fe:	f7fd fb83 	bl	8007e08 <memset>
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <std+0x38>)
 800a704:	6263      	str	r3, [r4, #36]	; 0x24
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <std+0x3c>)
 800a708:	62a3      	str	r3, [r4, #40]	; 0x28
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <std+0x40>)
 800a70c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <std+0x44>)
 800a710:	6224      	str	r4, [r4, #32]
 800a712:	6323      	str	r3, [r4, #48]	; 0x30
 800a714:	bd10      	pop	{r4, pc}
 800a716:	bf00      	nop
 800a718:	0800aa35 	.word	0x0800aa35
 800a71c:	0800aa57 	.word	0x0800aa57
 800a720:	0800aa8f 	.word	0x0800aa8f
 800a724:	0800aab3 	.word	0x0800aab3

0800a728 <_cleanup_r>:
 800a728:	4901      	ldr	r1, [pc, #4]	; (800a730 <_cleanup_r+0x8>)
 800a72a:	f000 b8af 	b.w	800a88c <_fwalk_reent>
 800a72e:	bf00      	nop
 800a730:	0800a669 	.word	0x0800a669

0800a734 <__sfmoreglue>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	2268      	movs	r2, #104	; 0x68
 800a738:	1e4d      	subs	r5, r1, #1
 800a73a:	4355      	muls	r5, r2
 800a73c:	460e      	mov	r6, r1
 800a73e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a742:	f7ff fa65 	bl	8009c10 <_malloc_r>
 800a746:	4604      	mov	r4, r0
 800a748:	b140      	cbz	r0, 800a75c <__sfmoreglue+0x28>
 800a74a:	2100      	movs	r1, #0
 800a74c:	e9c0 1600 	strd	r1, r6, [r0]
 800a750:	300c      	adds	r0, #12
 800a752:	60a0      	str	r0, [r4, #8]
 800a754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a758:	f7fd fb56 	bl	8007e08 <memset>
 800a75c:	4620      	mov	r0, r4
 800a75e:	bd70      	pop	{r4, r5, r6, pc}

0800a760 <__sfp_lock_acquire>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__sfp_lock_acquire+0x8>)
 800a762:	f000 b8b3 	b.w	800a8cc <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	200008f1 	.word	0x200008f1

0800a76c <__sfp_lock_release>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__sfp_lock_release+0x8>)
 800a76e:	f000 b8ae 	b.w	800a8ce <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	200008f1 	.word	0x200008f1

0800a778 <__sinit_lock_acquire>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__sinit_lock_acquire+0x8>)
 800a77a:	f000 b8a7 	b.w	800a8cc <__retarget_lock_acquire_recursive>
 800a77e:	bf00      	nop
 800a780:	200008f2 	.word	0x200008f2

0800a784 <__sinit_lock_release>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__sinit_lock_release+0x8>)
 800a786:	f000 b8a2 	b.w	800a8ce <__retarget_lock_release_recursive>
 800a78a:	bf00      	nop
 800a78c:	200008f2 	.word	0x200008f2

0800a790 <__sinit>:
 800a790:	b510      	push	{r4, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	f7ff fff0 	bl	800a778 <__sinit_lock_acquire>
 800a798:	69a3      	ldr	r3, [r4, #24]
 800a79a:	b11b      	cbz	r3, 800a7a4 <__sinit+0x14>
 800a79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a0:	f7ff bff0 	b.w	800a784 <__sinit_lock_release>
 800a7a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a7aa:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <__sinit+0x68>)
 800a7ac:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <__sinit+0x6c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	bf04      	itt	eq
 800a7b6:	2301      	moveq	r3, #1
 800a7b8:	61a3      	streq	r3, [r4, #24]
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 f820 	bl	800a800 <__sfp>
 800a7c0:	6060      	str	r0, [r4, #4]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f81c 	bl	800a800 <__sfp>
 800a7c8:	60a0      	str	r0, [r4, #8]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f818 	bl	800a800 <__sfp>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	60e0      	str	r0, [r4, #12]
 800a7d4:	2104      	movs	r1, #4
 800a7d6:	6860      	ldr	r0, [r4, #4]
 800a7d8:	f7ff ff82 	bl	800a6e0 <std>
 800a7dc:	68a0      	ldr	r0, [r4, #8]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	2109      	movs	r1, #9
 800a7e2:	f7ff ff7d 	bl	800a6e0 <std>
 800a7e6:	68e0      	ldr	r0, [r4, #12]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	2112      	movs	r1, #18
 800a7ec:	f7ff ff78 	bl	800a6e0 <std>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	61a3      	str	r3, [r4, #24]
 800a7f4:	e7d2      	b.n	800a79c <__sinit+0xc>
 800a7f6:	bf00      	nop
 800a7f8:	0800abf8 	.word	0x0800abf8
 800a7fc:	0800a729 	.word	0x0800a729

0800a800 <__sfp>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	4607      	mov	r7, r0
 800a804:	f7ff ffac 	bl	800a760 <__sfp_lock_acquire>
 800a808:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <__sfp+0x84>)
 800a80a:	681e      	ldr	r6, [r3, #0]
 800a80c:	69b3      	ldr	r3, [r6, #24]
 800a80e:	b913      	cbnz	r3, 800a816 <__sfp+0x16>
 800a810:	4630      	mov	r0, r6
 800a812:	f7ff ffbd 	bl	800a790 <__sinit>
 800a816:	3648      	adds	r6, #72	; 0x48
 800a818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	d503      	bpl.n	800a828 <__sfp+0x28>
 800a820:	6833      	ldr	r3, [r6, #0]
 800a822:	b30b      	cbz	r3, 800a868 <__sfp+0x68>
 800a824:	6836      	ldr	r6, [r6, #0]
 800a826:	e7f7      	b.n	800a818 <__sfp+0x18>
 800a828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a82c:	b9d5      	cbnz	r5, 800a864 <__sfp+0x64>
 800a82e:	4b16      	ldr	r3, [pc, #88]	; (800a888 <__sfp+0x88>)
 800a830:	60e3      	str	r3, [r4, #12]
 800a832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a836:	6665      	str	r5, [r4, #100]	; 0x64
 800a838:	f000 f847 	bl	800a8ca <__retarget_lock_init_recursive>
 800a83c:	f7ff ff96 	bl	800a76c <__sfp_lock_release>
 800a840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a848:	6025      	str	r5, [r4, #0]
 800a84a:	61a5      	str	r5, [r4, #24]
 800a84c:	2208      	movs	r2, #8
 800a84e:	4629      	mov	r1, r5
 800a850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a854:	f7fd fad8 	bl	8007e08 <memset>
 800a858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a85c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a860:	4620      	mov	r0, r4
 800a862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a864:	3468      	adds	r4, #104	; 0x68
 800a866:	e7d9      	b.n	800a81c <__sfp+0x1c>
 800a868:	2104      	movs	r1, #4
 800a86a:	4638      	mov	r0, r7
 800a86c:	f7ff ff62 	bl	800a734 <__sfmoreglue>
 800a870:	4604      	mov	r4, r0
 800a872:	6030      	str	r0, [r6, #0]
 800a874:	2800      	cmp	r0, #0
 800a876:	d1d5      	bne.n	800a824 <__sfp+0x24>
 800a878:	f7ff ff78 	bl	800a76c <__sfp_lock_release>
 800a87c:	230c      	movs	r3, #12
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	e7ee      	b.n	800a860 <__sfp+0x60>
 800a882:	bf00      	nop
 800a884:	0800abf8 	.word	0x0800abf8
 800a888:	ffff0001 	.word	0xffff0001

0800a88c <_fwalk_reent>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4606      	mov	r6, r0
 800a892:	4688      	mov	r8, r1
 800a894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a898:	2700      	movs	r7, #0
 800a89a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a89e:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a2:	d505      	bpl.n	800a8b0 <_fwalk_reent+0x24>
 800a8a4:	6824      	ldr	r4, [r4, #0]
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	d1f7      	bne.n	800a89a <_fwalk_reent+0xe>
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b0:	89ab      	ldrh	r3, [r5, #12]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d907      	bls.n	800a8c6 <_fwalk_reent+0x3a>
 800a8b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	d003      	beq.n	800a8c6 <_fwalk_reent+0x3a>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	47c0      	blx	r8
 800a8c4:	4307      	orrs	r7, r0
 800a8c6:	3568      	adds	r5, #104	; 0x68
 800a8c8:	e7e9      	b.n	800a89e <_fwalk_reent+0x12>

0800a8ca <__retarget_lock_init_recursive>:
 800a8ca:	4770      	bx	lr

0800a8cc <__retarget_lock_acquire_recursive>:
 800a8cc:	4770      	bx	lr

0800a8ce <__retarget_lock_release_recursive>:
 800a8ce:	4770      	bx	lr

0800a8d0 <__swhatbuf_r>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	460e      	mov	r6, r1
 800a8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	b096      	sub	sp, #88	; 0x58
 800a8dc:	4614      	mov	r4, r2
 800a8de:	461d      	mov	r5, r3
 800a8e0:	da08      	bge.n	800a8f4 <__swhatbuf_r+0x24>
 800a8e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	061a      	lsls	r2, r3, #24
 800a8ec:	d410      	bmi.n	800a910 <__swhatbuf_r+0x40>
 800a8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8f2:	e00e      	b.n	800a912 <__swhatbuf_r+0x42>
 800a8f4:	466a      	mov	r2, sp
 800a8f6:	f000 f903 	bl	800ab00 <_fstat_r>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	dbf1      	blt.n	800a8e2 <__swhatbuf_r+0x12>
 800a8fe:	9a01      	ldr	r2, [sp, #4]
 800a900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a908:	425a      	negs	r2, r3
 800a90a:	415a      	adcs	r2, r3
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	e7ee      	b.n	800a8ee <__swhatbuf_r+0x1e>
 800a910:	2340      	movs	r3, #64	; 0x40
 800a912:	2000      	movs	r0, #0
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	b016      	add	sp, #88	; 0x58
 800a918:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a91c <__smakebuf_r>:
 800a91c:	898b      	ldrh	r3, [r1, #12]
 800a91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a920:	079d      	lsls	r5, r3, #30
 800a922:	4606      	mov	r6, r0
 800a924:	460c      	mov	r4, r1
 800a926:	d507      	bpl.n	800a938 <__smakebuf_r+0x1c>
 800a928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	2301      	movs	r3, #1
 800a932:	6163      	str	r3, [r4, #20]
 800a934:	b002      	add	sp, #8
 800a936:	bd70      	pop	{r4, r5, r6, pc}
 800a938:	ab01      	add	r3, sp, #4
 800a93a:	466a      	mov	r2, sp
 800a93c:	f7ff ffc8 	bl	800a8d0 <__swhatbuf_r>
 800a940:	9900      	ldr	r1, [sp, #0]
 800a942:	4605      	mov	r5, r0
 800a944:	4630      	mov	r0, r6
 800a946:	f7ff f963 	bl	8009c10 <_malloc_r>
 800a94a:	b948      	cbnz	r0, 800a960 <__smakebuf_r+0x44>
 800a94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a950:	059a      	lsls	r2, r3, #22
 800a952:	d4ef      	bmi.n	800a934 <__smakebuf_r+0x18>
 800a954:	f023 0303 	bic.w	r3, r3, #3
 800a958:	f043 0302 	orr.w	r3, r3, #2
 800a95c:	81a3      	strh	r3, [r4, #12]
 800a95e:	e7e3      	b.n	800a928 <__smakebuf_r+0xc>
 800a960:	4b0d      	ldr	r3, [pc, #52]	; (800a998 <__smakebuf_r+0x7c>)
 800a962:	62b3      	str	r3, [r6, #40]	; 0x28
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	6020      	str	r0, [r4, #0]
 800a968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	9b00      	ldr	r3, [sp, #0]
 800a970:	6163      	str	r3, [r4, #20]
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	6120      	str	r0, [r4, #16]
 800a976:	b15b      	cbz	r3, 800a990 <__smakebuf_r+0x74>
 800a978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 f8d1 	bl	800ab24 <_isatty_r>
 800a982:	b128      	cbz	r0, 800a990 <__smakebuf_r+0x74>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	89a0      	ldrh	r0, [r4, #12]
 800a992:	4305      	orrs	r5, r0
 800a994:	81a5      	strh	r5, [r4, #12]
 800a996:	e7cd      	b.n	800a934 <__smakebuf_r+0x18>
 800a998:	0800a729 	.word	0x0800a729

0800a99c <_malloc_usable_size_r>:
 800a99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9a0:	1f18      	subs	r0, r3, #4
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bfbc      	itt	lt
 800a9a6:	580b      	ldrlt	r3, [r1, r0]
 800a9a8:	18c0      	addlt	r0, r0, r3
 800a9aa:	4770      	bx	lr

0800a9ac <_raise_r>:
 800a9ac:	291f      	cmp	r1, #31
 800a9ae:	b538      	push	{r3, r4, r5, lr}
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	d904      	bls.n	800a9c0 <_raise_r+0x14>
 800a9b6:	2316      	movs	r3, #22
 800a9b8:	6003      	str	r3, [r0, #0]
 800a9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9c2:	b112      	cbz	r2, 800a9ca <_raise_r+0x1e>
 800a9c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c8:	b94b      	cbnz	r3, 800a9de <_raise_r+0x32>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 f830 	bl	800aa30 <_getpid_r>
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	4601      	mov	r1, r0
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9da:	f000 b817 	b.w	800aa0c <_kill_r>
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d00a      	beq.n	800a9f8 <_raise_r+0x4c>
 800a9e2:	1c59      	adds	r1, r3, #1
 800a9e4:	d103      	bne.n	800a9ee <_raise_r+0x42>
 800a9e6:	2316      	movs	r3, #22
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	e7e7      	b.n	800a9be <_raise_r+0x12>
 800a9ee:	2400      	movs	r4, #0
 800a9f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	4798      	blx	r3
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	e7e0      	b.n	800a9be <_raise_r+0x12>

0800a9fc <raise>:
 800a9fc:	4b02      	ldr	r3, [pc, #8]	; (800aa08 <raise+0xc>)
 800a9fe:	4601      	mov	r1, r0
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	f7ff bfd3 	b.w	800a9ac <_raise_r>
 800aa06:	bf00      	nop
 800aa08:	20000048 	.word	0x20000048

0800aa0c <_kill_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d07      	ldr	r5, [pc, #28]	; (800aa2c <_kill_r+0x20>)
 800aa10:	2300      	movs	r3, #0
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	4611      	mov	r1, r2
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	f7f6 fec7 	bl	80017ac <_kill>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	d102      	bne.n	800aa28 <_kill_r+0x1c>
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	b103      	cbz	r3, 800aa28 <_kill_r+0x1c>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd38      	pop	{r3, r4, r5, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200008ec 	.word	0x200008ec

0800aa30 <_getpid_r>:
 800aa30:	f7f6 beb4 	b.w	800179c <_getpid>

0800aa34 <__sread>:
 800aa34:	b510      	push	{r4, lr}
 800aa36:	460c      	mov	r4, r1
 800aa38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa3c:	f000 f894 	bl	800ab68 <_read_r>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	bfab      	itete	ge
 800aa44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa46:	89a3      	ldrhlt	r3, [r4, #12]
 800aa48:	181b      	addge	r3, r3, r0
 800aa4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa4e:	bfac      	ite	ge
 800aa50:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa52:	81a3      	strhlt	r3, [r4, #12]
 800aa54:	bd10      	pop	{r4, pc}

0800aa56 <__swrite>:
 800aa56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5a:	461f      	mov	r7, r3
 800aa5c:	898b      	ldrh	r3, [r1, #12]
 800aa5e:	05db      	lsls	r3, r3, #23
 800aa60:	4605      	mov	r5, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	4616      	mov	r6, r2
 800aa66:	d505      	bpl.n	800aa74 <__swrite+0x1e>
 800aa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f000 f868 	bl	800ab44 <_lseek_r>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	4632      	mov	r2, r6
 800aa82:	463b      	mov	r3, r7
 800aa84:	4628      	mov	r0, r5
 800aa86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8a:	f000 b817 	b.w	800aabc <_write_r>

0800aa8e <__sseek>:
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	460c      	mov	r4, r1
 800aa92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa96:	f000 f855 	bl	800ab44 <_lseek_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	bf15      	itete	ne
 800aaa0:	6560      	strne	r0, [r4, #84]	; 0x54
 800aaa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aaa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaaa:	81a3      	strheq	r3, [r4, #12]
 800aaac:	bf18      	it	ne
 800aaae:	81a3      	strhne	r3, [r4, #12]
 800aab0:	bd10      	pop	{r4, pc}

0800aab2 <__sclose>:
 800aab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab6:	f000 b813 	b.w	800aae0 <_close_r>
	...

0800aabc <_write_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	4d07      	ldr	r5, [pc, #28]	; (800aadc <_write_r+0x20>)
 800aac0:	4604      	mov	r4, r0
 800aac2:	4608      	mov	r0, r1
 800aac4:	4611      	mov	r1, r2
 800aac6:	2200      	movs	r2, #0
 800aac8:	602a      	str	r2, [r5, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	f7f6 fea5 	bl	800181a <_write>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_write_r+0x1e>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_write_r+0x1e>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	200008ec 	.word	0x200008ec

0800aae0 <_close_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d06      	ldr	r5, [pc, #24]	; (800aafc <_close_r+0x1c>)
 800aae4:	2300      	movs	r3, #0
 800aae6:	4604      	mov	r4, r0
 800aae8:	4608      	mov	r0, r1
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	f7f6 feb1 	bl	8001852 <_close>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d102      	bne.n	800aafa <_close_r+0x1a>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b103      	cbz	r3, 800aafa <_close_r+0x1a>
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	200008ec 	.word	0x200008ec

0800ab00 <_fstat_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	; (800ab20 <_fstat_r+0x20>)
 800ab04:	2300      	movs	r3, #0
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	f7f6 feac 	bl	800186a <_fstat>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d102      	bne.n	800ab1c <_fstat_r+0x1c>
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	b103      	cbz	r3, 800ab1c <_fstat_r+0x1c>
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	bf00      	nop
 800ab20:	200008ec 	.word	0x200008ec

0800ab24 <_isatty_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d06      	ldr	r5, [pc, #24]	; (800ab40 <_isatty_r+0x1c>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	602b      	str	r3, [r5, #0]
 800ab30:	f7f6 feab 	bl	800188a <_isatty>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_isatty_r+0x1a>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_isatty_r+0x1a>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	200008ec 	.word	0x200008ec

0800ab44 <_lseek_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d07      	ldr	r5, [pc, #28]	; (800ab64 <_lseek_r+0x20>)
 800ab48:	4604      	mov	r4, r0
 800ab4a:	4608      	mov	r0, r1
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	2200      	movs	r2, #0
 800ab50:	602a      	str	r2, [r5, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	f7f6 fea4 	bl	80018a0 <_lseek>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_lseek_r+0x1e>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_lseek_r+0x1e>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	200008ec 	.word	0x200008ec

0800ab68 <_read_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4d07      	ldr	r5, [pc, #28]	; (800ab88 <_read_r+0x20>)
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	4608      	mov	r0, r1
 800ab70:	4611      	mov	r1, r2
 800ab72:	2200      	movs	r2, #0
 800ab74:	602a      	str	r2, [r5, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	f7f6 fe32 	bl	80017e0 <_read>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_read_r+0x1e>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_read_r+0x1e>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	200008ec 	.word	0x200008ec

0800ab8c <_init>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr

0800ab98 <_fini>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr
