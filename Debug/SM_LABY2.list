
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080086c0  080086c0  000186c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c00  08008c00  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c08  08008c08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c08  08008c08  00018c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200001e4  08008df4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  08008df4  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a77  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fe  00000000  00000000  00038c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002acde  00000000  00000000  0003e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001901d  00000000  00000000  0006942e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101a44  00000000  00000000  0008244b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183e8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  00183ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	080086a4 	.word	0x080086a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	080086a4 	.word	0x080086a4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_DAC_Init+0x4c>)
 800097c:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <MX_DAC_Init+0x50>)
 800097e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_DAC_Init+0x4c>)
 8000982:	f001 f804 	bl	800198e <HAL_DAC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800098c:	f000 faf4 	bl	8000f78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000990:	2304      	movs	r3, #4
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_DAC_Init+0x4c>)
 80009a0:	f001 f869 	bl	8001a76 <HAL_DAC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009aa:	f000 fae5 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000200 	.word	0x20000200
 80009bc:	40007400 	.word	0x40007400

080009c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <HAL_DAC_MspInit+0xd4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d154      	bne.n	8000a8c <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_DAC_MspInit+0xd8>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <HAL_DAC_MspInit+0xd8>)
 80009e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <HAL_DAC_MspInit+0xd8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <HAL_DAC_MspInit+0xd8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a26      	ldr	r2, [pc, #152]	; (8000a98 <HAL_DAC_MspInit+0xd8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <HAL_DAC_MspInit+0xd8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a12:	2310      	movs	r3, #16
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a16:	2303      	movs	r3, #3
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	481d      	ldr	r0, [pc, #116]	; (8000a9c <HAL_DAC_MspInit+0xdc>)
 8000a26:	f001 fbf1 	bl	800220c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <HAL_DAC_MspInit+0xe4>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a32:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000a36:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a3a:	2240      	movs	r2, #64	; 0x40
 8000a3c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a52:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a72:	f001 f84f 	bl	8001b14 <HAL_DMA_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000a7c:	f000 fa7c 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_DAC_MspInit+0xe0>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40007400 	.word	0x40007400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	20000214 	.word	0x20000214
 8000aa4:	40026088 	.word	0x40026088

08000aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_DMA_Init+0x38>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <MX_DMA_Init+0x38>)
 8000ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_DMA_Init+0x38>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2010      	movs	r0, #16
 8000acc:	f000 ff29 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ad0:	2010      	movs	r0, #16
 8000ad2:	f000 ff42 	bl	800195a <HAL_NVIC_EnableIRQ>

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a7a      	ldr	r2, [pc, #488]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b00:	f043 0310 	orr.w	r3, r3, #16
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b78      	ldr	r3, [pc, #480]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b75      	ldr	r3, [pc, #468]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a74      	ldr	r2, [pc, #464]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4b6f      	ldr	r3, [pc, #444]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a6e      	ldr	r2, [pc, #440]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b69      	ldr	r3, [pc, #420]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a68      	ldr	r2, [pc, #416]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a62      	ldr	r2, [pc, #392]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b60      	ldr	r3, [pc, #384]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b5d      	ldr	r3, [pc, #372]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a5c      	ldr	r2, [pc, #368]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a56      	ldr	r2, [pc, #344]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <MX_GPIO_Init+0x204>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4851      	ldr	r0, [pc, #324]	; (8000cec <MX_GPIO_Init+0x208>)
 8000ba8:	f001 fcdc 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <MX_GPIO_Init+0x20c>)
 8000bb4:	f001 fcd6 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	484d      	ldr	r0, [pc, #308]	; (8000cf4 <MX_GPIO_Init+0x210>)
 8000bbe:	f001 fcd1 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4844      	ldr	r0, [pc, #272]	; (8000cec <MX_GPIO_Init+0x208>)
 8000bda:	f001 fb17 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x214>)
 8000bf6:	f001 fb09 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bfa:	2332      	movs	r3, #50	; 0x32
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x214>)
 8000c16:	f001 faf9 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c1a:	2386      	movs	r3, #134	; 0x86
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4831      	ldr	r0, [pc, #196]	; (8000cfc <MX_GPIO_Init+0x218>)
 8000c36:	f001 fae9 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c3a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4827      	ldr	r0, [pc, #156]	; (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c54:	f001 fada 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6a:	230b      	movs	r3, #11
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c76:	f001 fac9 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0x210>)
 8000c92:	f001 fabb 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <MX_GPIO_Init+0x210>)
 8000caa:	f001 faaf 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <MX_GPIO_Init+0x210>)
 8000ccc:	f001 fa9e 	bl	800220c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f000 fe24 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cda:	2028      	movs	r0, #40	; 0x28
 8000cdc:	f000 fe3d 	bl	800195a <HAL_NVIC_EnableIRQ>

}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40021800 	.word	0x40021800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <DAC_SetVoltage>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void DAC_SetVoltage(int voltage_mv)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	scalar = (float)voltage_mv / (float)Max_Voltage;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <DAC_SetVoltage+0x60>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <DAC_SetVoltage+0x64>)
 8000d24:	edc3 7a00 	vstr	s15, [r3]
	Reg = scalar * Max_Reg;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <DAC_SetVoltage+0x64>)
 8000d2a:	ed93 7a00 	vldr	s14, [r3]
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <DAC_SetVoltage+0x68>)
 8000d30:	edd3 7a00 	vldr	s15, [r3]
 8000d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <DAC_SetVoltage+0x6c>)
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
	Reg = (uint32_t)Reg;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <DAC_SetVoltage+0x6c>)
 8000d40:	edd3 7a00 	vldr	s15, [r3]
 8000d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <DAC_SetVoltage+0x6c>)
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
	//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Reg);
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000278 	.word	0x20000278
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	20000274 	.word	0x20000274

08000d70 <HAL_TIM_PeriodElapsedCallback>:

// timers callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d143      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		SIN_signal = Amp*sinf(2*M_PI*f*time) + DC_comp;
 8000d80:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8000d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d88:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000d8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d92:	edd3 7a00 	vldr	s15, [r3]
 8000d96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da2:	eeb0 0a67 	vmov.f32	s0, s15
 8000da6:	f007 fbcb 	bl	8008540 <sinf>
 8000daa:	eef0 7a40 	vmov.f32	s15, s0
 8000dae:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000e20 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8000db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000e20 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8000dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000dc0:	edc3 7a00 	vstr	s15, [r3]
		if(time >= T)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e28 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8000dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	db04      	blt.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			time = 0.0f;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e009      	b.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x86>
		}
		else
		{
			time += st;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e2c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]
		}
		DAC_SetVoltage((int)SIN_signal);
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e00:	ee17 0a90 	vmov	r0, s15
 8000e04:	f7ff ff7c 	bl	8000d00 <DAC_SetVoltage>
	}
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	54442d18 	.word	0x54442d18
 8000e14:	401921fb 	.word	0x401921fb
 8000e18:	20000288 	.word	0x20000288
 8000e1c:	20000280 	.word	0x20000280
 8000e20:	447a0000 	.word	0x447a0000
 8000e24:	2000027c 	.word	0x2000027c
 8000e28:	3dcccccd 	.word	0x3dcccccd
 8000e2c:	3a83126f 	.word	0x3a83126f

08000e30 <HAL_GPIO_EXTI_Callback>:

// GPIO callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]

}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fc0d 	bl	800166a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f820 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f7ff fe46 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e58:	f000 fa9e 	bl	8001398 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000e5c:	f7ff fe24 	bl	8000aa8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e60:	f000 fb32 	bl	80014c8 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000e64:	f7ff fd82 	bl	800096c <MX_DAC_Init>
  MX_TIM4_Init();
 8000e68:	f000 f9d8 	bl	800121c <MX_TIM4_Init>
  MX_TIM6_Init();
 8000e6c:	f000 fa24 	bl	80012b8 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e70:	2100      	movs	r1, #0
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <main+0x40>)
 8000e74:	f000 fdad 	bl	80019d2 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <main+0x44>)
 8000e7a:	f002 ff11 	bl	8003ca0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <main+0x48>)
 8000e80:	f002 fe9e 	bl	8003bc0 <HAL_TIM_Base_Start>


  while (1)
 8000e84:	e7fe      	b.n	8000e84 <main+0x3c>
 8000e86:	bf00      	nop
 8000e88:	20000200 	.word	0x20000200
 8000e8c:	20000288 	.word	0x20000288
 8000e90:	200002d4 	.word	0x200002d4

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2234      	movs	r2, #52	; 0x34
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fea8 	bl	8005bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eb8:	f001 fcce 	bl	8002858 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <SystemClock_Config+0xdc>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a2b      	ldr	r2, [pc, #172]	; (8000f70 <SystemClock_Config+0xdc>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <SystemClock_Config+0xdc>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <SystemClock_Config+0xe0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000edc:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <SystemClock_Config+0xe0>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <SystemClock_Config+0xe0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f08:	2360      	movs	r3, #96	; 0x60
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f10:	2304      	movs	r3, #4
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fcfb 	bl	8002918 <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f28:	f000 f826 	bl	8000f78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f2c:	f001 fca4 	bl	8002878 <HAL_PWREx_EnableOverDrive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f36:	f000 f81f 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	2103      	movs	r1, #3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 ff8c 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f62:	f000 f809 	bl	8000f78 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	; 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 fb64 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Stream5_IRQHandler+0x10>)
 8001026:	f000 feb5 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000214 	.word	0x20000214

08001034 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM4_IRQHandler+0x10>)
 800103a:	f002 fea9 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000288 	.word	0x20000288

08001048 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USART3_IRQHandler+0x10>)
 800104e:	f003 fae5 	bl	800461c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000320 	.word	0x20000320

0800105c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001060:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001064:	f001 fa98 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	return 1;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_kill>:

int _kill(int pid, int sig)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001086:	f004 fd8d 	bl	8005ba4 <__errno>
 800108a:	4603      	mov	r3, r0
 800108c:	2216      	movs	r2, #22
 800108e:	601a      	str	r2, [r3, #0]
	return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_exit>:

void _exit (int status)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffe7 	bl	800107c <_kill>
	while (1) {}		/* Make sure we hang here */
 80010ae:	e7fe      	b.n	80010ae <_exit+0x12>

080010b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e00a      	b.n	80010d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010c2:	f3af 8000 	nop.w
 80010c6:	4601      	mov	r1, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf0      	blt.n	80010c2 <_read+0x12>
	}

return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e009      	b.n	8001110 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf1      	blt.n	80010fc <_write+0x12>
	}
	return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_close>:

int _close(int file)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
	return -1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114a:	605a      	str	r2, [r3, #4]
	return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_isatty>:

int _isatty(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return 1;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f004 fcf2 	bl	8005ba4 <__errno>
 80011c0:	4603      	mov	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20080000 	.word	0x20080000
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20000284 	.word	0x20000284
 80011f4:	200008c8 	.word	0x200008c8

080011f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_TIM4_Init+0x94>)
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <MX_TIM4_Init+0x98>)
 800123e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_TIM4_Init+0x94>)
 8001242:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001246:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_TIM4_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_TIM4_Init+0x94>)
 8001250:	2263      	movs	r2, #99	; 0x63
 8001252:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_TIM4_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_TIM4_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_TIM4_Init+0x94>)
 8001262:	f002 fc55 	bl	8003b10 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800126c:	f7ff fe84 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_TIM4_Init+0x94>)
 800127e:	f002 fea7 	bl	8003fd0 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001288:	f7ff fe76 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_TIM4_Init+0x94>)
 800129a:	f003 f8c5 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f7ff fe68 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000288 	.word	0x20000288
 80012b4:	40000800 	.word	0x40000800

080012b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_TIM6_Init+0x64>)
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <MX_TIM6_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_TIM6_Init+0x64>)
 80012d0:	f240 32bf 	movw	r2, #959	; 0x3bf
 80012d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_TIM6_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_TIM6_Init+0x64>)
 80012de:	2263      	movs	r2, #99	; 0x63
 80012e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_TIM6_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM6_Init+0x64>)
 80012ea:	f002 fc11 	bl	8003b10 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012f4:	f7ff fe40 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012f8:	2320      	movs	r3, #32
 80012fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM6_Init+0x64>)
 8001306:	f003 f88f 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001310:	f7ff fe32 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200002d4 	.word	0x200002d4
 8001320:	40001000 	.word	0x40001000

08001324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_TIM_Base_MspInit+0x68>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d114      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_TIM_Base_MspInit+0x6c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_TIM_Base_MspInit+0x6c>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_TIM_Base_MspInit+0x6c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201e      	movs	r0, #30
 8001354:	f000 fae5 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001358:	201e      	movs	r0, #30
 800135a:	f000 fafe 	bl	800195a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800135e:	e010      	b.n	8001382 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_TIM_Base_MspInit+0x70>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10b      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_TIM_Base_MspInit+0x6c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_TIM_Base_MspInit+0x6c>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_TIM_Base_MspInit+0x6c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40000800 	.word	0x40000800
 8001390:	40023800 	.word	0x40023800
 8001394:	40001000 	.word	0x40001000

08001398 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <MX_USART3_UART_Init+0x5c>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART3_UART_Init+0x58>)
 80013dc:	f003 f8d0 	bl	8004580 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013e6:	f7ff fdc7 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000320 	.word	0x20000320
 80013f4:	40004800 	.word	0x40004800

080013f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0ae      	sub	sp, #184	; 0xb8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2290      	movs	r2, #144	; 0x90
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fbed 	bl	8005bf8 <memset>
  if(uartHandle->Instance==USART3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_UART_MspInit+0xc4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d144      	bne.n	80014b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800142e:	2300      	movs	r3, #0
 8001430:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4618      	mov	r0, r3
 8001438:	f001 ff42 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001442:	f7ff fd99 	bl	8000f78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_UART_MspInit+0xc8>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_UART_MspInit+0xc8>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_UART_MspInit+0xc8>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_UART_MspInit+0xc8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_UART_MspInit+0xc8>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_UART_MspInit+0xc8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001490:	2307      	movs	r3, #7
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800149a:	4619      	mov	r1, r3
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_UART_MspInit+0xcc>)
 800149e:	f000 feb5 	bl	800220c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2027      	movs	r0, #39	; 0x27
 80014a8:	f000 fa3b 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014ac:	2027      	movs	r0, #39	; 0x27
 80014ae:	f000 fa54 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	37b8      	adds	r7, #184	; 0xb8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004800 	.word	0x40004800
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d6:	2206      	movs	r2, #6
 80014d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014dc:	2202      	movs	r2, #2
 80014de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001500:	2201      	movs	r2, #1
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150c:	f001 f85c 	bl	80025c8 <HAL_PCD_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001516:	f7ff fd2f 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200003a8 	.word	0x200003a8

08001524 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0ae      	sub	sp, #184	; 0xb8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2290      	movs	r2, #144	; 0x90
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fb57 	bl	8005bf8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001552:	d159      	bne.n	8001608 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001558:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4618      	mov	r0, r3
 8001566:	f001 feab 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001570:	f7ff fd02 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_PCD_MspInit+0xec>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <HAL_PCD_MspInit+0xec>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6313      	str	r3, [r2, #48]	; 0x30
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_PCD_MspInit+0xec>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800158c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015a6:	230a      	movs	r3, #10
 80015a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <HAL_PCD_MspInit+0xf0>)
 80015b4:	f000 fe2a 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <HAL_PCD_MspInit+0xf0>)
 80015d4:	f000 fe1a 	bl	800220c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_PCD_MspInit+0xec>)
 80015da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_PCD_MspInit+0xec>)
 80015de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e2:	6353      	str	r3, [r2, #52]	; 0x34
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_PCD_MspInit+0xec>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_PCD_MspInit+0xec>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_PCD_MspInit+0xec>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6453      	str	r3, [r2, #68]	; 0x44
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_PCD_MspInit+0xec>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001608:	bf00      	nop
 800160a:	37b8      	adds	r7, #184	; 0xb8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001642:	f7ff fdd9 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f004 fab3 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fbfd 	bl	8000e48 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800165c:	08008c10 	.word	0x08008c10
  ldr r2, =_sbss
 8001660:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001664:	200008c4 	.word	0x200008c4

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>

0800166a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166e:	2003      	movs	r0, #3
 8001670:	f000 f94c 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001674:	2000      	movs	r0, #0
 8001676:	f000 f805 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167a:	f7ff fc83 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f967 	bl	8001976 <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f92f 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000010 	.word	0x20000010
 80016e0:	2000000c 	.word	0x2000000c

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000010 	.word	0x20000010
 8001708:	200008b0 	.word	0x200008b0

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200008b0 	.word	0x200008b0

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000010 	.word	0x20000010

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <__NVIC_SetPriorityGrouping+0x40>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	4313      	orrs	r3, r2
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x40>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00
 80017b0:	05fa0000 	.word	0x05fa0000

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	; (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff29 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff3e 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff31 	bl	80017d0 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e014      	b.n	80019ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	791b      	ldrb	r3, [r3, #4]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff f805 	bl	80009c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	795b      	ldrb	r3, [r3, #5]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_DAC_Start+0x16>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e040      	b.n	8001a6a <HAL_DAC_Start+0x98>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2201      	movs	r2, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001a1c:	2b3c      	cmp	r3, #60	; 0x3c
 8001a1e:	d11d      	bne.n	8001a5c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	e014      	b.n	8001a5c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	213c      	movs	r1, #60	; 0x3c
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0202 	orr.w	r2, r2, #2
 8001a5a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b087      	sub	sp, #28
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	795b      	ldrb	r3, [r3, #5]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_DAC_ConfigChannel+0x18>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e03c      	b.n	8001b08 <HAL_DAC_ConfigChannel+0x92>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2202      	movs	r2, #2
 8001a98:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	22c0      	movs	r2, #192	; 0xc0
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fdf4 	bl	800170c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e099      	b.n	8001c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b50:	e00f      	b.n	8001b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b52:	f7ff fddb 	bl	800170c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d908      	bls.n	8001b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e078      	b.n	8001c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e8      	bne.n	8001b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_DMA_Init+0x158>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d107      	bne.n	8001bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f023 0307 	bic.w	r3, r3, #7
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d117      	bne.n	8001c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fa7b 	bl	8002114 <DMA_CheckFifoParam>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c32:	2301      	movs	r3, #1
 8001c34:	e016      	b.n	8001c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fa32 	bl	80020a8 <DMA_CalcBaseAndBitshift>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	223f      	movs	r2, #63	; 0x3f
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	e010803f 	.word	0xe010803f

08001c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c7e:	f7ff fd45 	bl	800170c <HAL_GetTick>
 8001c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e052      	b.n	8001d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_DMA_Abort+0x62>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	e013      	b.n	8001d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf4:	f7ff fd0a 	bl	800170c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d90c      	bls.n	8001d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e015      	b.n	8001d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e4      	bne.n	8001cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	223f      	movs	r2, #63	; 0x3f
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00c      	b.n	8001d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001da0:	4b8e      	ldr	r3, [pc, #568]	; (8001fdc <HAL_DMA_IRQHandler+0x248>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a8e      	ldr	r2, [pc, #568]	; (8001fe0 <HAL_DMA_IRQHandler+0x24c>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	2208      	movs	r2, #8
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2201      	movs	r2, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d012      	beq.n	8001e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2201      	movs	r2, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2204      	movs	r2, #4
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	f043 0204 	orr.w	r2, r3, #4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2210      	movs	r2, #16
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d043      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03c      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2210      	movs	r2, #16
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d024      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	e01f      	b.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e016      	b.n	8001f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0208 	bic.w	r2, r2, #8
 8001ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2220      	movs	r2, #32
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 808f 	beq.w	8002034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8087 	beq.w	8002034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d136      	bne.n	8001fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0216 	bic.w	r2, r2, #22
 8001f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <HAL_DMA_IRQHandler+0x1da>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0208 	bic.w	r2, r2, #8
 8001f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	223f      	movs	r2, #63	; 0x3f
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d07e      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
        }
        return;
 8001faa:	e079      	b.n	80020a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d031      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e02c      	b.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e01e      	b.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0210 	bic.w	r2, r2, #16
 8002012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d032      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d022      	beq.n	800208e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2205      	movs	r2, #5
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	3301      	adds	r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d307      	bcc.n	800207c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f2      	bne.n	8002060 <HAL_DMA_IRQHandler+0x2cc>
 800207a:	e000      	b.n	800207e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800207c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e000      	b.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a0:	bf00      	nop
    }
  }
}
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	3b10      	subs	r3, #16
 80020b8:	4a13      	ldr	r2, [pc, #76]	; (8002108 <DMA_CalcBaseAndBitshift+0x60>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <DMA_CalcBaseAndBitshift+0x64>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d908      	bls.n	80020e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <DMA_CalcBaseAndBitshift+0x68>)
 80020de:	4013      	ands	r3, r2
 80020e0:	1d1a      	adds	r2, r3, #4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	659a      	str	r2, [r3, #88]	; 0x58
 80020e6:	e006      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <DMA_CalcBaseAndBitshift+0x68>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	080086d8 	.word	0x080086d8
 8002110:	fffffc00 	.word	0xfffffc00

08002114 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11f      	bne.n	800216e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d856      	bhi.n	80021e2 <DMA_CheckFifoParam+0xce>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <DMA_CheckFifoParam+0x28>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800215f 	.word	0x0800215f
 8002144:	0800214d 	.word	0x0800214d
 8002148:	080021e3 	.word	0x080021e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d046      	beq.n	80021e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215c:	e043      	b.n	80021e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002166:	d140      	bne.n	80021ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216c:	e03d      	b.n	80021ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002176:	d121      	bne.n	80021bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d837      	bhi.n	80021ee <DMA_CheckFifoParam+0xda>
 800217e:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <DMA_CheckFifoParam+0x70>)
 8002180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002184:	08002195 	.word	0x08002195
 8002188:	0800219b 	.word	0x0800219b
 800218c:	08002195 	.word	0x08002195
 8002190:	080021ad 	.word	0x080021ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      break;
 8002198:	e030      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d025      	beq.n	80021f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021aa:	e022      	b.n	80021f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b4:	d11f      	bne.n	80021f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ba:	e01c      	b.n	80021f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d903      	bls.n	80021ca <DMA_CheckFifoParam+0xb6>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d003      	beq.n	80021d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c8:	e018      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      break;
 80021ce:	e015      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e00b      	b.n	80021fa <DMA_CheckFifoParam+0xe6>
      break;
 80021e2:	bf00      	nop
 80021e4:	e00a      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e008      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e006      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e004      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      break;
 80021f2:	bf00      	nop
 80021f4:	e002      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      break;   
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <DMA_CheckFifoParam+0xe8>
      break;
 80021fa:	bf00      	nop
    }
  } 
  
  return status; 
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e175      	b.n	8002518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8164 	bne.w	8002512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_GPIO_Init+0x56>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d130      	bne.n	80022c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d017      	beq.n	8002300 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d123      	bne.n	8002354 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80be 	beq.w	8002512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b66      	ldr	r3, [pc, #408]	; (8002530 <HAL_GPIO_Init+0x324>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a65      	ldr	r2, [pc, #404]	; (8002530 <HAL_GPIO_Init+0x324>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_GPIO_Init+0x324>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ae:	4a61      	ldr	r2, [pc, #388]	; (8002534 <HAL_GPIO_Init+0x328>)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_GPIO_Init+0x32c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d037      	beq.n	800244a <HAL_GPIO_Init+0x23e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a57      	ldr	r2, [pc, #348]	; (800253c <HAL_GPIO_Init+0x330>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d031      	beq.n	8002446 <HAL_GPIO_Init+0x23a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_GPIO_Init+0x334>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02b      	beq.n	8002442 <HAL_GPIO_Init+0x236>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a55      	ldr	r2, [pc, #340]	; (8002544 <HAL_GPIO_Init+0x338>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x232>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a54      	ldr	r2, [pc, #336]	; (8002548 <HAL_GPIO_Init+0x33c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x22e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a53      	ldr	r2, [pc, #332]	; (800254c <HAL_GPIO_Init+0x340>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x22a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_GPIO_Init+0x344>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x226>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_GPIO_Init+0x348>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x222>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_GPIO_Init+0x34c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x21e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4f      	ldr	r2, [pc, #316]	; (800255c <HAL_GPIO_Init+0x350>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x21a>
 8002422:	2309      	movs	r3, #9
 8002424:	e012      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002426:	230a      	movs	r3, #10
 8002428:	e010      	b.n	800244c <HAL_GPIO_Init+0x240>
 800242a:	2308      	movs	r3, #8
 800242c:	e00e      	b.n	800244c <HAL_GPIO_Init+0x240>
 800242e:	2307      	movs	r3, #7
 8002430:	e00c      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002432:	2306      	movs	r3, #6
 8002434:	e00a      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002436:	2305      	movs	r3, #5
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x240>
 800243a:	2304      	movs	r3, #4
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x240>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x240>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x328>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_GPIO_Init+0x354>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <HAL_GPIO_Init+0x354>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_GPIO_Init+0x354>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_GPIO_Init+0x354>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f ae86 	bls.w	800222c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40021400 	.word	0x40021400
 8002550:	40021800 	.word	0x40021800
 8002554:	40021c00 	.word	0x40021c00
 8002558:	40022000 	.word	0x40022000
 800255c:	40022400 	.word	0x40022400
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fc3a 	bl	8000e30 <HAL_GPIO_EXTI_Callback>
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ca:	b08f      	sub	sp, #60	; 0x3c
 80025cc:	af0a      	add	r7, sp, #40	; 0x28
 80025ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e116      	b.n	8002808 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe ff95 	bl	8001524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 f827 	bl	800566c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	687e      	ldr	r6, [r7, #4]
 8002626:	466d      	mov	r5, sp
 8002628:	f106 0410 	add.w	r4, r6, #16
 800262c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002638:	e885 0003 	stmia.w	r5, {r0, r1}
 800263c:	1d33      	adds	r3, r6, #4
 800263e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f002 ffbb 	bl	80055bc <USB_CoreInit>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d7      	b.n	8002808 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f003 f815 	bl	800568e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e04a      	b.n	8002700 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	333d      	adds	r3, #61	; 0x3d
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	333c      	adds	r3, #60	; 0x3c
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	b298      	uxth	r0, r3
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3344      	adds	r3, #68	; 0x44
 80026a6:	4602      	mov	r2, r0
 80026a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3340      	adds	r3, #64	; 0x40
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3348      	adds	r3, #72	; 0x48
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	334c      	adds	r3, #76	; 0x4c
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3354      	adds	r3, #84	; 0x54
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3301      	adds	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3af      	bcc.n	800266a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e044      	b.n	800279a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	3301      	adds	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3b5      	bcc.n	8002710 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	687e      	ldr	r6, [r7, #4]
 80027ac:	466d      	mov	r5, sp
 80027ae:	f106 0410 	add.w	r4, r6, #16
 80027b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027be:	e885 0003 	stmia.w	r5, {r0, r1}
 80027c2:	1d33      	adds	r3, r6, #4
 80027c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	f002 ffae 	bl	8005728 <USB_DevInit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e014      	b.n	8002808 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f80a 	bl	8002810 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f003 f96c 	bl	8005ade <USB_DevDisconnect>

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002810 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_PCDEx_ActivateLPM+0x44>)
 8002840:	4313      	orrs	r3, r2
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	10000003 	.word	0x10000003

08002858 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_PWREx_EnableOverDrive+0x98>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_PWREx_EnableOverDrive+0x98>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_PWREx_EnableOverDrive+0x98>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_PWREx_EnableOverDrive+0x9c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a6:	f7fe ff31 	bl	800170c <HAL_GetTick>
 80028aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ac:	e009      	b.n	80028c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028ae:	f7fe ff2d 	bl	800170c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028bc:	d901      	bls.n	80028c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e022      	b.n	8002908 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d1ee      	bne.n	80028ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028dc:	f7fe ff16 	bl	800170c <HAL_GetTick>
 80028e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028e2:	e009      	b.n	80028f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028e4:	f7fe ff12 	bl	800170c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f2:	d901      	bls.n	80028f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e007      	b.n	8002908 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002904:	d1ee      	bne.n	80028e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000

08002918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e29b      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293c:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00c      	beq.n	8002962 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002948:	4b93      	ldr	r3, [pc, #588]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d112      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002962:	4b8d      	ldr	r3, [pc, #564]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d06c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x130>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d168      	bne.n	8002a48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e275      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x7a>
 8002984:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e02e      	b.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x9c>
 800299a:	4b7f      	ldr	r3, [pc, #508]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7e      	ldr	r2, [pc, #504]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b7c      	ldr	r3, [pc, #496]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7b      	ldr	r2, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0xc0>
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a75      	ldr	r2, [pc, #468]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a72      	ldr	r2, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6b      	ldr	r2, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fe88 	bl	800170c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fe84 	bl	800170c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e229      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xe8>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fe74 	bl	800170c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fe70 	bl	800170c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e215      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x110>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d069      	beq.n	8002b2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a56:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x190>
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1e9      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	493d      	ldr	r1, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e040      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a38      	ldr	r2, [pc, #224]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fe26 	bl	800170c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fe22 	bl	800170c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1c7      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4929      	ldr	r1, [pc, #164]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fe02 	bl	800170c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fdfe 	bl	800170c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1a3      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d038      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d019      	beq.n	8002b72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fddf 	bl	800170c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fe fddb 	bl	800170c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e180      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x23a>
 8002b70:	e01a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fdc5 	bl	800170c <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fe fdc1 	bl	800170c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d903      	bls.n	8002b9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e166      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
 8002b98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a4 	beq.w	8002cfe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b8c      	ldr	r3, [pc, #560]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10d      	bne.n	8002bde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a88      	ldr	r2, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4b83      	ldr	r3, [pc, #524]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bea:	4b80      	ldr	r3, [pc, #512]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7f      	ldr	r2, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fd89 	bl	800170c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7fe fd85 	bl	800170c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e12a      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c10:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x4d4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x31a>
 8002c24:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a6f      	ldr	r2, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_OscConfig+0x376>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x33c>
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a6a      	ldr	r2, [pc, #424]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	e01c      	b.n	8002c8e <HAL_RCC_OscConfig+0x376>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x35e>
 8002c5c:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a61      	ldr	r2, [pc, #388]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	e00b      	b.n	8002c8e <HAL_RCC_OscConfig+0x376>
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d015      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe fd39 	bl	800170c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fd35 	bl	800170c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0d8      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ee      	beq.n	8002c9e <HAL_RCC_OscConfig+0x386>
 8002cc0:	e014      	b.n	8002cec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fd23 	bl	800170c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe fd1f 	bl	800170c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e0c2      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ee      	bne.n	8002cca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80ae 	beq.w	8002e64 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d06d      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d14b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fcf0 	bl	800170c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fcec 	bl	800170c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e091      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	491b      	ldr	r1, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fcbe 	bl	800170c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fcba 	bl	800170c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e05f      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x47c>
 8002db2:	e057      	b.n	8002e64 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fca4 	bl	800170c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fca0 	bl	800170c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e045      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4b0>
 8002de6:	e03d      	b.n	8002e64 <HAL_RCC_OscConfig+0x54c>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_RCC_OscConfig+0x558>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d129      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d122      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d119      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d0      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4965      	ldr	r1, [pc, #404]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d040      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d115      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e073      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06b      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4936      	ldr	r1, [pc, #216]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe fbd0 	bl	800170c <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7fe fbcc 	bl	800170c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e053      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 020c 	and.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1eb      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d210      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	4922      	ldr	r1, [pc, #136]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003006:	f000 f821 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490a      	ldr	r1, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x1cc>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1d0>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1d4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fb2c 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	080086c0 	.word	0x080086c0
 8003044:	20000008 	.word	0x20000008
 8003048:	2000000c 	.word	0x2000000c

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b094      	sub	sp, #80	; 0x50
 8003052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	647b      	str	r3, [r7, #68]	; 0x44
 8003058:	2300      	movs	r3, #0
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x40>
 8003070:	2b08      	cmp	r3, #8
 8003072:	f200 80e1 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3a>
 800307e:	e0db      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003084:	e0db      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_GetSysClockFreq+0x208>)
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308a:	e0d8      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4621      	mov	r1, r4
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	4629      	mov	r1, r5
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	ebb2 0801 	subs.w	r8, r2, r1
 8003104:	4659      	mov	r1, fp
 8003106:	eb63 0901 	sbc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	462b      	mov	r3, r5
 800312c:	eb49 0303 	adc.w	r3, r9, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800313e:	4629      	mov	r1, r5
 8003140:	024b      	lsls	r3, r1, #9
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003148:	4621      	mov	r1, r4
 800314a:	024a      	lsls	r2, r1, #9
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
 8003156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315c:	f7fd fa84 	bl	8000668 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003168:	e058      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	4618      	mov	r0, r3
 8003174:	4611      	mov	r1, r2
 8003176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003196:	0150      	lsls	r0, r2, #5
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4641      	mov	r1, r8
 800319e:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a2:	4649      	mov	r1, r9
 80031a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031bc:	ebb2 040a 	subs.w	r4, r2, sl
 80031c0:	eb63 050b 	sbc.w	r5, r3, fp
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	464b      	mov	r3, r9
 80031e0:	eb45 0303 	adc.w	r3, r5, r3
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f2:	4629      	mov	r1, r5
 80031f4:	028b      	lsls	r3, r1, #10
 80031f6:	4621      	mov	r1, r4
 80031f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031fc:	4621      	mov	r1, r4
 80031fe:	028a      	lsls	r2, r1, #10
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003206:	2200      	movs	r2, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	61fa      	str	r2, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	f7fd fa2a 	bl	8000668 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800322c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003240:	4618      	mov	r0, r3
 8003242:	3750      	adds	r7, #80	; 0x50
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	080086d0 	.word	0x080086d0

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffdc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	080086d0 	.word	0x080086d0

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d012      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032e8:	4b69      	ldr	r3, [pc, #420]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a68      	ldr	r2, [pc, #416]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032f2:	6093      	str	r3, [r2, #8]
 80032f4:	4b66      	ldr	r3, [pc, #408]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	4964      	ldr	r1, [pc, #400]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d017      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800331a:	4b5d      	ldr	r3, [pc, #372]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	4959      	ldr	r1, [pc, #356]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d017      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	494a      	ldr	r1, [pc, #296]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003374:	d101      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 808b 	beq.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4a39      	ldr	r2, [pc, #228]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	; 0x40
 80033b0:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033bc:	4b35      	ldr	r3, [pc, #212]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fe f9a0 	bl	800170c <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fe f99c 	bl	800170c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e38f      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d035      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d02e      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d114      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f964 	bl	800170c <HAL_GetTick>
 8003444:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe f960 	bl	800170c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e351      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ee      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003476:	d111      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003486:	400b      	ands	r3, r1
 8003488:	4901      	ldr	r1, [pc, #4]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
 800348e:	e00b      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
 8003498:	0ffffcff 	.word	0x0ffffcff
 800349c:	4bac      	ldr	r3, [pc, #688]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4aab      	ldr	r2, [pc, #684]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034a6:	6093      	str	r3, [r2, #8]
 80034a8:	4ba9      	ldr	r3, [pc, #676]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	49a6      	ldr	r1, [pc, #664]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034c6:	4ba2      	ldr	r3, [pc, #648]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034cc:	4aa0      	ldr	r2, [pc, #640]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034d6:	4b9e      	ldr	r3, [pc, #632]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	499b      	ldr	r1, [pc, #620]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f4:	4b96      	ldr	r3, [pc, #600]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003502:	4993      	ldr	r1, [pc, #588]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003516:	4b8e      	ldr	r3, [pc, #568]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003524:	498a      	ldr	r1, [pc, #552]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003538:	4b85      	ldr	r3, [pc, #532]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	4982      	ldr	r1, [pc, #520]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800355a:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4979      	ldr	r1, [pc, #484]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800357c:	4b74      	ldr	r3, [pc, #464]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	4971      	ldr	r1, [pc, #452]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f023 020c 	bic.w	r2, r3, #12
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	4968      	ldr	r1, [pc, #416]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c0:	4b63      	ldr	r3, [pc, #396]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	4960      	ldr	r1, [pc, #384]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	4957      	ldr	r1, [pc, #348]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003604:	4b52      	ldr	r3, [pc, #328]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	494f      	ldr	r1, [pc, #316]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003626:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	4946      	ldr	r1, [pc, #280]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	493e      	ldr	r1, [pc, #248]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	4935      	ldr	r1, [pc, #212]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800368c:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369a:	492d      	ldr	r1, [pc, #180]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036bc:	4924      	ldr	r1, [pc, #144]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036de:	2301      	movs	r3, #1
 80036e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fc:	4914      	ldr	r1, [pc, #80]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00f      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	4902      	ldr	r1, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800374c:	e002      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003760:	4b8a      	ldr	r3, [pc, #552]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003766:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	4986      	ldr	r1, [pc, #536]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003784:	4b81      	ldr	r3, [pc, #516]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003794:	497d      	ldr	r1, [pc, #500]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d006      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80d6 	beq.w	800395c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037b0:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a75      	ldr	r2, [pc, #468]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037bc:	f7fd ffa6 	bl	800170c <HAL_GetTick>
 80037c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037c4:	f7fd ffa2 	bl	800170c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e195      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d021      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d11d      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037f6:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380a:	0e1b      	lsrs	r3, r3, #24
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	019a      	lsls	r2, r3, #6
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	4958      	ldr	r1, [pc, #352]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02e      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385c:	d129      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800385e:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003872:	0f1b      	lsrs	r3, r3, #28
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	019a      	lsls	r2, r3, #6
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	071b      	lsls	r3, r3, #28
 8003892:	493e      	ldr	r1, [pc, #248]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a0:	f023 021f 	bic.w	r2, r3, #31
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	3b01      	subs	r3, #1
 80038aa:	4938      	ldr	r1, [pc, #224]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01d      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c4:	0e1b      	lsrs	r3, r3, #24
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038cc:	4b2f      	ldr	r3, [pc, #188]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d2:	0f1b      	lsrs	r3, r3, #28
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	019a      	lsls	r2, r3, #6
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	071b      	lsls	r3, r3, #28
 80038f2:	4926      	ldr	r1, [pc, #152]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d011      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	019a      	lsls	r2, r3, #6
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	071b      	lsls	r3, r3, #28
 8003922:	491a      	ldr	r1, [pc, #104]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003936:	f7fd fee9 	bl	800170c <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800393e:	f7fd fee5 	bl	800170c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b64      	cmp	r3, #100	; 0x64
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0d8      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b01      	cmp	r3, #1
 8003960:	f040 80ce 	bne.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fecc 	bl	800170c <HAL_GetTick>
 8003974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003976:	e00b      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003978:	f7fd fec8 	bl	800170c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d904      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0bb      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003990:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399c:	d0ec      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d02e      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d12a      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039c6:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039d4:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	0f1b      	lsrs	r3, r3, #28
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4944      	ldr	r1, [pc, #272]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	493d      	ldr	r1, [pc, #244]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d022      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a30:	d11d      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	0e1b      	lsrs	r3, r3, #24
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	0f1b      	lsrs	r3, r3, #28
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	019a      	lsls	r2, r3, #6
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	4929      	ldr	r1, [pc, #164]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d028      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	0e1b      	lsrs	r3, r3, #24
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	0c1b      	lsrs	r3, r3, #16
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	019a      	lsls	r2, r3, #6
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	071b      	lsls	r3, r3, #28
 8003aae:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4911      	ldr	r1, [pc, #68]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fe18 	bl	800170c <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ae0:	f7fd fe14 	bl	800170c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e007      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d1ef      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e049      	b.n	8003bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fbf4 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 fb30 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e04c      	b.n	8003c72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <HAL_TIM_Base_Start+0xc0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d022      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d01d      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_TIM_Base_Start+0xc4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <HAL_TIM_Base_Start+0xc8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <HAL_TIM_Base_Start+0xcc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_TIM_Base_Start+0xd0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <HAL_TIM_Base_Start+0xd4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <HAL_TIM_Base_Start+0xd8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d115      	bne.n	8003c5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_TIM_Base_Start+0xdc>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d015      	beq.n	8003c6e <HAL_TIM_Base_Start+0xae>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d011      	beq.n	8003c6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	e008      	b.n	8003c6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e000      	b.n	8003c70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40010400 	.word	0x40010400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40001800 	.word	0x40001800
 8003c9c:	00010007 	.word	0x00010007

08003ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d001      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e054      	b.n	8003d62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d01d      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x80>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d115      	bne.n	8003d4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_TIM_Base_Start_IT+0xec>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d015      	beq.n	8003d5e <HAL_TIM_Base_Start_IT+0xbe>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d011      	beq.n	8003d5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	e008      	b.n	8003d5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e000      	b.n	8003d60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40010400 	.word	0x40010400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40001800 	.word	0x40001800
 8003d8c:	00010007 	.word	0x00010007

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9d0 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9c2 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f9d3 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9a6 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f998 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9a9 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f97c 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f96e 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f97f 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f952 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f944 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f955 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc ff2e 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fb0c 	bl	8004558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 faff 	bl	800456c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f903 	bl	80041a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d107      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f06f 0220 	mvn.w	r2, #32
 8003fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fabf 	bl	8004544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_ConfigClockSource+0x1c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0b4      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x186>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	4b56      	ldr	r3, [pc, #344]	; (8004160 <HAL_TIM_ConfigClockSource+0x190>)
 8004008:	4013      	ands	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d03e      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402a:	f200 8087 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x16c>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	f000 8086 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x172>
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d87f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d01a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xa6>
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d87b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d050      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x11a>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d877      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b50      	cmp	r3, #80	; 0x50
 800404e:	d03c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xfa>
 8004050:	2b50      	cmp	r3, #80	; 0x50
 8004052:	d873      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d058      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x13a>
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d86f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b30      	cmp	r3, #48	; 0x30
 800405e:	d064      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	2b30      	cmp	r3, #48	; 0x30
 8004062:	d86b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d060      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d867      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05c      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x15a>
 8004070:	2b10      	cmp	r3, #16
 8004072:	d05a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x15a>
 8004074:	e062      	b.n	800413c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f000 f9af 	bl	80043e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	609a      	str	r2, [r3, #8]
      break;
 80040a2:	e04f      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f000 f998 	bl	80043e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c6:	609a      	str	r2, [r3, #8]
      break;
 80040c8:	e03c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 f90c 	bl	80042f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2150      	movs	r1, #80	; 0x50
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f965 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 80040e8:	e02c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 f92b 	bl	8004352 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2160      	movs	r1, #96	; 0x60
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f955 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8004108:	e01c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 f8ec 	bl	80042f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f945 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8004128:	e00c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f000 f93c 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 800413a:	e003      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e000      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	fffeff88 	.word	0xfffeff88

08004164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <TIM_Base_SetConfig+0x118>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d027      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <TIM_Base_SetConfig+0x118>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d023      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01f      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d017      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <TIM_Base_SetConfig+0x128>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <TIM_Base_SetConfig+0x134>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a24      	ldr	r2, [pc, #144]	; (80042ec <TIM_Base_SetConfig+0x138>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <TIM_Base_SetConfig+0x13c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800
 80042e8:	40001800 	.word	0x40001800
 80042ec:	40001c00 	.word	0x40001c00
 80042f0:	40002000 	.word	0x40002000

080042f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 030a 	bic.w	r3, r3, #10
 8004330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004352:	b480      	push	{r7}
 8004354:	b087      	sub	sp, #28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0210 	bic.w	r2, r3, #16
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f043 0307 	orr.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	021a      	lsls	r2, r3, #8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	431a      	orrs	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4313      	orrs	r3, r2
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e06d      	b.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a30      	ldr	r2, [pc, #192]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2f      	ldr	r2, [pc, #188]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800447a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d01d      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10c      	bne.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000
 8004540:	40001800 	.word	0x40001800

08004544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e040      	b.n	8004614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc ff28 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fb3e 	bl	8004c40 <UART_SetConfig>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e022      	b.n	8004614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fd96 	bl	8005108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fe1d 	bl	800524c <UART_CheckIdleState>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0ba      	sub	sp, #232	; 0xe8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004646:	f640 030f 	movw	r3, #2063	; 0x80f
 800464a:	4013      	ands	r3, r2
 800464c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00f      	beq.n	8004684 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 82ac 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
      }
      return;
 8004682:	e2a6      	b.n	8004bd2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8117 	beq.w	80048bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800469a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800469e:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_UART_IRQHandler+0x298>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 810a 	beq.w	80048bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d011      	beq.n	80046d8 <HAL_UART_IRQHandler+0xbc>
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d011      	beq.n	8004708 <HAL_UART_IRQHandler+0xec>
 80046e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2202      	movs	r2, #2
 80046f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	f043 0204 	orr.w	r2, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d011      	beq.n	8004738 <HAL_UART_IRQHandler+0x11c>
 8004714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2204      	movs	r2, #4
 8004726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d017      	beq.n	8004774 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004754:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2208      	movs	r2, #8
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	f043 0208 	orr.w	r2, r3, #8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <HAL_UART_IRQHandler+0x18a>
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8212 	beq.w	8004bd6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d005      	beq.n	80047fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04f      	beq.n	800489e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fe37 	bl	8005472 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d141      	bne.n	8004896 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800483e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800484a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1d9      	bne.n	8004812 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	2b00      	cmp	r3, #0
 8004864:	d013      	beq.n	800488e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_UART_IRQHandler+0x29c>)
 800486c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	4618      	mov	r0, r3
 8004874:	f7fd fa6c 	bl	8001d50 <HAL_DMA_Abort_IT>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d017      	beq.n	80048ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004888:	4610      	mov	r0, r2
 800488a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00f      	b.n	80048ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9b6 	bl	8004c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e00b      	b.n	80048ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9b2 	bl	8004c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	e007      	b.n	80048ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9ae 	bl	8004c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80048ac:	e193      	b.n	8004bd6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ae:	bf00      	nop
    return;
 80048b0:	e191      	b.n	8004bd6 <HAL_UART_IRQHandler+0x5ba>
 80048b2:	bf00      	nop
 80048b4:	04000120 	.word	0x04000120
 80048b8:	0800553b 	.word	0x0800553b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 814c 	bne.w	8004b5e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8145 	beq.w	8004b5e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 813e 	beq.w	8004b5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2210      	movs	r2, #16
 80048e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	f040 80b6 	bne.w	8004a66 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004906:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8165 	beq.w	8004bda <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491a:	429a      	cmp	r2, r3
 800491c:	f080 815d 	bcs.w	8004bda <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	f000 8086 	beq.w	8004a44 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800494c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004966:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800496e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1da      	bne.n	8004938 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e1      	bne.n	8004982 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e3      	bne.n	80049be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a14:	f023 0310 	bic.w	r3, r3, #16
 8004a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e4      	bne.n	8004a04 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd f916 	bl	8001c70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8d8 	bl	8004c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a64:	e0b9      	b.n	8004bda <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80ab 	beq.w	8004bde <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a6 	beq.w	8004bde <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e4      	bne.n	8004a92 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aec:	633a      	str	r2, [r7, #48]	; 0x30
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e3      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 0310 	bic.w	r3, r3, #16
 8004b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	617b      	str	r3, [r7, #20]
   return(result);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e4      	bne.n	8004b14 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f85c 	bl	8004c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b5c:	e03f      	b.n	8004bde <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00e      	beq.n	8004b88 <HAL_UART_IRQHandler+0x56c>
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f853 	bl	8004c2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b86:	e02d      	b.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00e      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01c      	beq.n	8004be2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
    }
    return;
 8004bb0:	e017      	b.n	8004be2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d012      	beq.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
 8004bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fccb 	bl	8005566 <UART_EndTransmit_IT>
    return;
 8004bd0:	e008      	b.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004bd2:	bf00      	nop
 8004bd4:	e006      	b.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004bd6:	bf00      	nop
 8004bd8:	e004      	b.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004be2:	bf00      	nop
  }

}
 8004be4:	37e8      	adds	r7, #232	; 0xe8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4ba6      	ldr	r3, [pc, #664]	; (8004f04 <UART_SetConfig+0x2c4>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a94      	ldr	r2, [pc, #592]	; (8004f08 <UART_SetConfig+0x2c8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d120      	bne.n	8004cfe <UART_SetConfig+0xbe>
 8004cbc:	4b93      	ldr	r3, [pc, #588]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d816      	bhi.n	8004cf8 <UART_SetConfig+0xb8>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x90>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004ce7 	.word	0x08004ce7
 8004cdc:	08004cf3 	.word	0x08004cf3
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e150      	b.n	8004f88 <UART_SetConfig+0x348>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e14d      	b.n	8004f88 <UART_SetConfig+0x348>
 8004cec:	2304      	movs	r3, #4
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e14a      	b.n	8004f88 <UART_SetConfig+0x348>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e147      	b.n	8004f88 <UART_SetConfig+0x348>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e144      	b.n	8004f88 <UART_SetConfig+0x348>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a83      	ldr	r2, [pc, #524]	; (8004f10 <UART_SetConfig+0x2d0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d132      	bne.n	8004d6e <UART_SetConfig+0x12e>
 8004d08:	4b80      	ldr	r3, [pc, #512]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d828      	bhi.n	8004d68 <UART_SetConfig+0x128>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0xdc>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d5d 	.word	0x08004d5d
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d57 	.word	0x08004d57
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d69 	.word	0x08004d69
 8004d4c:	08004d63 	.word	0x08004d63
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e118      	b.n	8004f88 <UART_SetConfig+0x348>
 8004d56:	2302      	movs	r3, #2
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e115      	b.n	8004f88 <UART_SetConfig+0x348>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e112      	b.n	8004f88 <UART_SetConfig+0x348>
 8004d62:	2308      	movs	r3, #8
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e10f      	b.n	8004f88 <UART_SetConfig+0x348>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e10c      	b.n	8004f88 <UART_SetConfig+0x348>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a68      	ldr	r2, [pc, #416]	; (8004f14 <UART_SetConfig+0x2d4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d120      	bne.n	8004dba <UART_SetConfig+0x17a>
 8004d78:	4b64      	ldr	r3, [pc, #400]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d82:	2b30      	cmp	r3, #48	; 0x30
 8004d84:	d013      	beq.n	8004dae <UART_SetConfig+0x16e>
 8004d86:	2b30      	cmp	r3, #48	; 0x30
 8004d88:	d814      	bhi.n	8004db4 <UART_SetConfig+0x174>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d009      	beq.n	8004da2 <UART_SetConfig+0x162>
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d810      	bhi.n	8004db4 <UART_SetConfig+0x174>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <UART_SetConfig+0x15c>
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d006      	beq.n	8004da8 <UART_SetConfig+0x168>
 8004d9a:	e00b      	b.n	8004db4 <UART_SetConfig+0x174>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e0f2      	b.n	8004f88 <UART_SetConfig+0x348>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e0ef      	b.n	8004f88 <UART_SetConfig+0x348>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e0ec      	b.n	8004f88 <UART_SetConfig+0x348>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e0e9      	b.n	8004f88 <UART_SetConfig+0x348>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e0e6      	b.n	8004f88 <UART_SetConfig+0x348>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a56      	ldr	r2, [pc, #344]	; (8004f18 <UART_SetConfig+0x2d8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d120      	bne.n	8004e06 <UART_SetConfig+0x1c6>
 8004dc4:	4b51      	ldr	r3, [pc, #324]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dce:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd0:	d013      	beq.n	8004dfa <UART_SetConfig+0x1ba>
 8004dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd4:	d814      	bhi.n	8004e00 <UART_SetConfig+0x1c0>
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d009      	beq.n	8004dee <UART_SetConfig+0x1ae>
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d810      	bhi.n	8004e00 <UART_SetConfig+0x1c0>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <UART_SetConfig+0x1a8>
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d006      	beq.n	8004df4 <UART_SetConfig+0x1b4>
 8004de6:	e00b      	b.n	8004e00 <UART_SetConfig+0x1c0>
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e0cc      	b.n	8004f88 <UART_SetConfig+0x348>
 8004dee:	2302      	movs	r3, #2
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e0c9      	b.n	8004f88 <UART_SetConfig+0x348>
 8004df4:	2304      	movs	r3, #4
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0c6      	b.n	8004f88 <UART_SetConfig+0x348>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e0c3      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e00:	2310      	movs	r3, #16
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e0c0      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a44      	ldr	r2, [pc, #272]	; (8004f1c <UART_SetConfig+0x2dc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d125      	bne.n	8004e5c <UART_SetConfig+0x21c>
 8004e10:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1e:	d017      	beq.n	8004e50 <UART_SetConfig+0x210>
 8004e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e24:	d817      	bhi.n	8004e56 <UART_SetConfig+0x216>
 8004e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2a:	d00b      	beq.n	8004e44 <UART_SetConfig+0x204>
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e30:	d811      	bhi.n	8004e56 <UART_SetConfig+0x216>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <UART_SetConfig+0x1fe>
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d006      	beq.n	8004e4a <UART_SetConfig+0x20a>
 8004e3c:	e00b      	b.n	8004e56 <UART_SetConfig+0x216>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e0a1      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e44:	2302      	movs	r3, #2
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e09e      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e09b      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e50:	2308      	movs	r3, #8
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e098      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e56:	2310      	movs	r3, #16
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e095      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <UART_SetConfig+0x2e0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d125      	bne.n	8004eb2 <UART_SetConfig+0x272>
 8004e66:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e74:	d017      	beq.n	8004ea6 <UART_SetConfig+0x266>
 8004e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7a:	d817      	bhi.n	8004eac <UART_SetConfig+0x26c>
 8004e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e80:	d00b      	beq.n	8004e9a <UART_SetConfig+0x25a>
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d811      	bhi.n	8004eac <UART_SetConfig+0x26c>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <UART_SetConfig+0x254>
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d006      	beq.n	8004ea0 <UART_SetConfig+0x260>
 8004e92:	e00b      	b.n	8004eac <UART_SetConfig+0x26c>
 8004e94:	2301      	movs	r3, #1
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e076      	b.n	8004f88 <UART_SetConfig+0x348>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e073      	b.n	8004f88 <UART_SetConfig+0x348>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e070      	b.n	8004f88 <UART_SetConfig+0x348>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e06d      	b.n	8004f88 <UART_SetConfig+0x348>
 8004eac:	2310      	movs	r3, #16
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e06a      	b.n	8004f88 <UART_SetConfig+0x348>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <UART_SetConfig+0x2e4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d138      	bne.n	8004f2e <UART_SetConfig+0x2ee>
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <UART_SetConfig+0x2cc>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eca:	d017      	beq.n	8004efc <UART_SetConfig+0x2bc>
 8004ecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ed0:	d82a      	bhi.n	8004f28 <UART_SetConfig+0x2e8>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d00b      	beq.n	8004ef0 <UART_SetConfig+0x2b0>
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d824      	bhi.n	8004f28 <UART_SetConfig+0x2e8>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <UART_SetConfig+0x2aa>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d006      	beq.n	8004ef6 <UART_SetConfig+0x2b6>
 8004ee8:	e01e      	b.n	8004f28 <UART_SetConfig+0x2e8>
 8004eea:	2300      	movs	r3, #0
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e04b      	b.n	8004f88 <UART_SetConfig+0x348>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e048      	b.n	8004f88 <UART_SetConfig+0x348>
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e045      	b.n	8004f88 <UART_SetConfig+0x348>
 8004efc:	2308      	movs	r3, #8
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e042      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f02:	bf00      	nop
 8004f04:	efff69f3 	.word	0xefff69f3
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40004400 	.word	0x40004400
 8004f14:	40004800 	.word	0x40004800
 8004f18:	40004c00 	.word	0x40004c00
 8004f1c:	40005000 	.word	0x40005000
 8004f20:	40011400 	.word	0x40011400
 8004f24:	40007800 	.word	0x40007800
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e02c      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a72      	ldr	r2, [pc, #456]	; (80050fc <UART_SetConfig+0x4bc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d125      	bne.n	8004f84 <UART_SetConfig+0x344>
 8004f38:	4b71      	ldr	r3, [pc, #452]	; (8005100 <UART_SetConfig+0x4c0>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f46:	d017      	beq.n	8004f78 <UART_SetConfig+0x338>
 8004f48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f4c:	d817      	bhi.n	8004f7e <UART_SetConfig+0x33e>
 8004f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f52:	d00b      	beq.n	8004f6c <UART_SetConfig+0x32c>
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	d811      	bhi.n	8004f7e <UART_SetConfig+0x33e>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <UART_SetConfig+0x326>
 8004f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f62:	d006      	beq.n	8004f72 <UART_SetConfig+0x332>
 8004f64:	e00b      	b.n	8004f7e <UART_SetConfig+0x33e>
 8004f66:	2300      	movs	r3, #0
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e00d      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e00a      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f72:	2304      	movs	r3, #4
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e007      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e004      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e001      	b.n	8004f88 <UART_SetConfig+0x348>
 8004f84:	2310      	movs	r3, #16
 8004f86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f90:	d15b      	bne.n	800504a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d828      	bhi.n	8004fea <UART_SetConfig+0x3aa>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x360>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004feb 	.word	0x08004feb
 8004fb0:	08004fdb 	.word	0x08004fdb
 8004fb4:	08004feb 	.word	0x08004feb
 8004fb8:	08004feb 	.word	0x08004feb
 8004fbc:	08004feb 	.word	0x08004feb
 8004fc0:	08004fe3 	.word	0x08004fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc4:	f7fe f954 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8004fc8:	61b8      	str	r0, [r7, #24]
        break;
 8004fca:	e013      	b.n	8004ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f7fe f964 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	61b8      	str	r0, [r7, #24]
        break;
 8004fd2:	e00f      	b.n	8004ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <UART_SetConfig+0x4c4>)
 8004fd6:	61bb      	str	r3, [r7, #24]
        break;
 8004fd8:	e00c      	b.n	8004ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fda:	f7fe f837 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8004fde:	61b8      	str	r0, [r7, #24]
        break;
 8004fe0:	e008      	b.n	8004ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe6:	61bb      	str	r3, [r7, #24]
        break;
 8004fe8:	e004      	b.n	8004ff4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d074      	beq.n	80050e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	005a      	lsls	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	441a      	add	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b0f      	cmp	r3, #15
 8005014:	d916      	bls.n	8005044 <UART_SetConfig+0x404>
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501c:	d212      	bcs.n	8005044 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f023 030f 	bic.w	r3, r3, #15
 8005026:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	b29b      	uxth	r3, r3
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	b29a      	uxth	r2, r3
 8005034:	89fb      	ldrh	r3, [r7, #14]
 8005036:	4313      	orrs	r3, r2
 8005038:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	89fa      	ldrh	r2, [r7, #14]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e04f      	b.n	80050e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	77bb      	strb	r3, [r7, #30]
 8005048:	e04c      	b.n	80050e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800504a:	7ffb      	ldrb	r3, [r7, #31]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d828      	bhi.n	80050a2 <UART_SetConfig+0x462>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x418>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe f8f8 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8005080:	61b8      	str	r0, [r7, #24]
        break;
 8005082:	e013      	b.n	80050ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe f908 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8005088:	61b8      	str	r0, [r7, #24]
        break;
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <UART_SetConfig+0x4c4>)
 800508e:	61bb      	str	r3, [r7, #24]
        break;
 8005090:	e00c      	b.n	80050ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fd ffdb 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8005096:	61b8      	str	r0, [r7, #24]
        break;
 8005098:	e008      	b.n	80050ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	61bb      	str	r3, [r7, #24]
        break;
 80050a0:	e004      	b.n	80050ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	77bb      	strb	r3, [r7, #30]
        break;
 80050aa:	bf00      	nop
    }

    if (pclk != 0U)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d018      	beq.n	80050e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085a      	lsrs	r2, r3, #1
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d909      	bls.n	80050e0 <UART_SetConfig+0x4a0>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d2:	d205      	bcs.n	80050e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	e001      	b.n	80050e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40007c00 	.word	0x40007c00
 8005100:	40023800 	.word	0x40023800
 8005104:	00f42400 	.word	0x00f42400

08005108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	d10a      	bne.n	800521e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800525c:	f7fc fa56 	bl	800170c <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d10e      	bne.n	800528e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f831 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e027      	b.n	80052de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d10e      	bne.n	80052ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800529c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f81b 	bl	80052e6 <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e011      	b.n	80052de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b09c      	sub	sp, #112	; 0x70
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f6:	e0a7      	b.n	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	f000 80a3 	beq.w	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fc fa03 	bl	800170c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <UART_WaitOnFlagUntilTimeout+0x32>
 8005312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005314:	2b00      	cmp	r3, #0
 8005316:	d13f      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800532c:	667b      	str	r3, [r7, #100]	; 0x64
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005338:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800533c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800536a:	64ba      	str	r2, [r7, #72]	; 0x48
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e068      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d050      	beq.n	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d148      	bne.n	8005448 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
 80053e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	66bb      	str	r3, [r7, #104]	; 0x68
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005412:	623a      	str	r2, [r7, #32]
 8005414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	69f9      	ldr	r1, [r7, #28]
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e010      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	429a      	cmp	r2, r3
 8005464:	f43f af48 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3770      	adds	r7, #112	; 0x70
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b095      	sub	sp, #84	; 0x54
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	643b      	str	r3, [r7, #64]	; 0x40
 800549a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800549e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e6      	bne.n	800547a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e5      	bne.n	80054ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d118      	bne.n	800551a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	613b      	str	r3, [r7, #16]
   return(result);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e6      	bne.n	80054e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800552e:	bf00      	nop
 8005530:	3754      	adds	r7, #84	; 0x54
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff fb51 	bl	8004c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b088      	sub	sp, #32
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60bb      	str	r3, [r7, #8]
   return(result);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fb1d 	bl	8004bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b2:	bf00      	nop
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055bc:	b084      	sub	sp, #16
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	f107 001c 	add.w	r0, r7, #28
 80055ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d120      	bne.n	8005616 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b20      	ldr	r3, [pc, #128]	; (8005668 <USB_CoreInit+0xac>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d105      	bne.n	800560a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa96 	bl	8005b3c <USB_CoreReset>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	e010      	b.n	8005638 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa8a 	bl	8005b3c <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10b      	bne.n	8005656 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f043 0206 	orr.w	r2, r3, #6
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005662:	b004      	add	sp, #16
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	ffbdffbf 	.word	0xffbdffbf

0800566c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f023 0201 	bic.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d115      	bne.n	80056dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056bc:	2001      	movs	r0, #1
 80056be:	f7fc f831 	bl	8001724 <HAL_Delay>
      ms++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa29 	bl	8005b20 <USB_GetMode>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d01e      	beq.n	8005712 <USB_SetCurrentMode+0x84>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b31      	cmp	r3, #49	; 0x31
 80056d8:	d9f0      	bls.n	80056bc <USB_SetCurrentMode+0x2e>
 80056da:	e01a      	b.n	8005712 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d115      	bne.n	800570e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056ee:	2001      	movs	r0, #1
 80056f0:	f7fc f818 	bl	8001724 <HAL_Delay>
      ms++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa10 	bl	8005b20 <USB_GetMode>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USB_SetCurrentMode+0x84>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b31      	cmp	r3, #49	; 0x31
 800570a:	d9f0      	bls.n	80056ee <USB_SetCurrentMode+0x60>
 800570c:	e001      	b.n	8005712 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e005      	b.n	800571e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b32      	cmp	r3, #50	; 0x32
 8005716:	d101      	bne.n	800571c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005728:	b084      	sub	sp, #16
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e009      	b.n	800575c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3340      	adds	r3, #64	; 0x40
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	2200      	movs	r2, #0
 8005754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3301      	adds	r3, #1
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b0e      	cmp	r3, #14
 8005760:	d9f2      	bls.n	8005748 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11c      	bne.n	80057a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005776:	f043 0302 	orr.w	r3, r3, #2
 800577a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e005      	b.n	80057ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c0:	4619      	mov	r1, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	461a      	mov	r2, r3
 80057ca:	680b      	ldr	r3, [r1, #0]
 80057cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10c      	bne.n	80057ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f965 	bl	8005aac <USB_SetDevSpeed>
 80057e2:	e008      	b.n	80057f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057e4:	2101      	movs	r1, #1
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f960 	bl	8005aac <USB_SetDevSpeed>
 80057ec:	e003      	b.n	80057f6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057ee:	2103      	movs	r1, #3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f95b 	bl	8005aac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057f6:	2110      	movs	r1, #16
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8f3 	bl	80059e4 <USB_FlushTxFifo>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f91f 	bl	8005a4c <USB_FlushRxFifo>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	461a      	mov	r2, r3
 800582c:	2300      	movs	r3, #0
 800582e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	461a      	mov	r2, r3
 8005838:	2300      	movs	r3, #0
 800583a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	e043      	b.n	80058ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005858:	d118      	bne.n	800588c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	461a      	mov	r2, r3
 800586e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e013      	b.n	800589e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e008      	b.n	800589e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	461a      	mov	r2, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	461a      	mov	r2, r3
 80058be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	3301      	adds	r3, #1
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d3b7      	bcc.n	8005842 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e043      	b.n	8005960 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ee:	d118      	bne.n	8005922 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	461a      	mov	r2, r3
 8005904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e013      	b.n	8005934 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	461a      	mov	r2, r3
 800591a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e008      	b.n	8005934 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	2300      	movs	r3, #0
 8005932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	2300      	movs	r3, #0
 8005944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3301      	adds	r3, #1
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d3b7      	bcc.n	80058d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800597a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f043 0210 	orr.w	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <USB_DevInit+0x2b4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f043 0208 	orr.w	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d105      	bne.n	80059cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <USB_DevInit+0x2b8>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d8:	b004      	add	sp, #16
 80059da:	4770      	bx	lr
 80059dc:	803c3800 	.word	0x803c3800
 80059e0:	40000004 	.word	0x40000004

080059e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <USB_FlushTxFifo+0x64>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d901      	bls.n	8005a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e01b      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	daf2      	bge.n	80059f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	019b      	lsls	r3, r3, #6
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <USB_FlushTxFifo+0x64>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d0f0      	beq.n	8005a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	00030d40 	.word	0x00030d40

08005a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <USB_FlushRxFifo+0x5c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e018      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	daf2      	bge.n	8005a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <USB_FlushRxFifo+0x5c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e006      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d0f0      	beq.n	8005a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	00030d40 	.word	0x00030d40

08005aac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e01b      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daf2      	bge.n	8005b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e006      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d0f0      	beq.n	8005b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	00030d40 	.word	0x00030d40

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	; (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000014 	.word	0x20000014

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4d0d      	ldr	r5, [pc, #52]	; (8005be8 <__libc_init_array+0x38>)
 8005bb4:	4c0d      	ldr	r4, [pc, #52]	; (8005bec <__libc_init_array+0x3c>)
 8005bb6:	1b64      	subs	r4, r4, r5
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	2600      	movs	r6, #0
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	4d0b      	ldr	r5, [pc, #44]	; (8005bf0 <__libc_init_array+0x40>)
 8005bc2:	4c0c      	ldr	r4, [pc, #48]	; (8005bf4 <__libc_init_array+0x44>)
 8005bc4:	f002 fd6e 	bl	80086a4 <_init>
 8005bc8:	1b64      	subs	r4, r4, r5
 8005bca:	10a4      	asrs	r4, r4, #2
 8005bcc:	2600      	movs	r6, #0
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08008c08 	.word	0x08008c08
 8005bec:	08008c08 	.word	0x08008c08
 8005bf0:	08008c08 	.word	0x08008c08
 8005bf4:	08008c0c 	.word	0x08008c0c

08005bf8 <memset>:
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d100      	bne.n	8005c02 <memset+0xa>
 8005c00:	4770      	bx	lr
 8005c02:	f803 1b01 	strb.w	r1, [r3], #1
 8005c06:	e7f9      	b.n	8005bfc <memset+0x4>

08005c08 <__cvt>:
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	ed2d 8b02 	vpush	{d8}
 8005c0e:	eeb0 8b40 	vmov.f64	d8, d0
 8005c12:	b085      	sub	sp, #20
 8005c14:	4617      	mov	r7, r2
 8005c16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005c18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c1a:	ee18 2a90 	vmov	r2, s17
 8005c1e:	f025 0520 	bic.w	r5, r5, #32
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	bfb6      	itet	lt
 8005c26:	222d      	movlt	r2, #45	; 0x2d
 8005c28:	2200      	movge	r2, #0
 8005c2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8005c2e:	2d46      	cmp	r5, #70	; 0x46
 8005c30:	460c      	mov	r4, r1
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	d004      	beq.n	8005c40 <__cvt+0x38>
 8005c36:	2d45      	cmp	r5, #69	; 0x45
 8005c38:	d100      	bne.n	8005c3c <__cvt+0x34>
 8005c3a:	3401      	adds	r4, #1
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	e000      	b.n	8005c42 <__cvt+0x3a>
 8005c40:	2103      	movs	r1, #3
 8005c42:	ab03      	add	r3, sp, #12
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	ab02      	add	r3, sp, #8
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4633      	mov	r3, r6
 8005c4e:	eeb0 0b48 	vmov.f64	d0, d8
 8005c52:	f000 fca9 	bl	80065a8 <_dtoa_r>
 8005c56:	2d47      	cmp	r5, #71	; 0x47
 8005c58:	d101      	bne.n	8005c5e <__cvt+0x56>
 8005c5a:	07fb      	lsls	r3, r7, #31
 8005c5c:	d51a      	bpl.n	8005c94 <__cvt+0x8c>
 8005c5e:	2d46      	cmp	r5, #70	; 0x46
 8005c60:	eb00 0204 	add.w	r2, r0, r4
 8005c64:	d10c      	bne.n	8005c80 <__cvt+0x78>
 8005c66:	7803      	ldrb	r3, [r0, #0]
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d107      	bne.n	8005c7c <__cvt+0x74>
 8005c6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	bf1c      	itt	ne
 8005c76:	f1c4 0401 	rsbne	r4, r4, #1
 8005c7a:	6034      	strne	r4, [r6, #0]
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	441a      	add	r2, r3
 8005c80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c88:	bf08      	it	eq
 8005c8a:	9203      	streq	r2, [sp, #12]
 8005c8c:	2130      	movs	r1, #48	; 0x30
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d307      	bcc.n	8005ca4 <__cvt+0x9c>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c98:	1a1b      	subs	r3, r3, r0
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	b005      	add	sp, #20
 8005c9e:	ecbd 8b02 	vpop	{d8}
 8005ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca4:	1c5c      	adds	r4, r3, #1
 8005ca6:	9403      	str	r4, [sp, #12]
 8005ca8:	7019      	strb	r1, [r3, #0]
 8005caa:	e7f0      	b.n	8005c8e <__cvt+0x86>

08005cac <__exponent>:
 8005cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	bfb8      	it	lt
 8005cb4:	4249      	neglt	r1, r1
 8005cb6:	f803 2b02 	strb.w	r2, [r3], #2
 8005cba:	bfb4      	ite	lt
 8005cbc:	222d      	movlt	r2, #45	; 0x2d
 8005cbe:	222b      	movge	r2, #43	; 0x2b
 8005cc0:	2909      	cmp	r1, #9
 8005cc2:	7042      	strb	r2, [r0, #1]
 8005cc4:	dd2a      	ble.n	8005d1c <__exponent+0x70>
 8005cc6:	f10d 0407 	add.w	r4, sp, #7
 8005cca:	46a4      	mov	ip, r4
 8005ccc:	270a      	movs	r7, #10
 8005cce:	46a6      	mov	lr, r4
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cd6:	fb07 1516 	mls	r5, r7, r6, r1
 8005cda:	3530      	adds	r5, #48	; 0x30
 8005cdc:	2a63      	cmp	r2, #99	; 0x63
 8005cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	dcf1      	bgt.n	8005cce <__exponent+0x22>
 8005cea:	3130      	adds	r1, #48	; 0x30
 8005cec:	f1ae 0502 	sub.w	r5, lr, #2
 8005cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cf4:	1c44      	adds	r4, r0, #1
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	4561      	cmp	r1, ip
 8005cfa:	d30a      	bcc.n	8005d12 <__exponent+0x66>
 8005cfc:	f10d 0209 	add.w	r2, sp, #9
 8005d00:	eba2 020e 	sub.w	r2, r2, lr
 8005d04:	4565      	cmp	r5, ip
 8005d06:	bf88      	it	hi
 8005d08:	2200      	movhi	r2, #0
 8005d0a:	4413      	add	r3, r2
 8005d0c:	1a18      	subs	r0, r3, r0
 8005d0e:	b003      	add	sp, #12
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d1a:	e7ed      	b.n	8005cf8 <__exponent+0x4c>
 8005d1c:	2330      	movs	r3, #48	; 0x30
 8005d1e:	3130      	adds	r1, #48	; 0x30
 8005d20:	7083      	strb	r3, [r0, #2]
 8005d22:	70c1      	strb	r1, [r0, #3]
 8005d24:	1d03      	adds	r3, r0, #4
 8005d26:	e7f1      	b.n	8005d0c <__exponent+0x60>

08005d28 <_printf_float>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	b08b      	sub	sp, #44	; 0x2c
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005d34:	4616      	mov	r6, r2
 8005d36:	461f      	mov	r7, r3
 8005d38:	4605      	mov	r5, r0
 8005d3a:	f001 f9a3 	bl	8007084 <_localeconv_r>
 8005d3e:	f8d0 b000 	ldr.w	fp, [r0]
 8005d42:	4658      	mov	r0, fp
 8005d44:	f7fa fa7c 	bl	8000240 <strlen>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	3307      	adds	r3, #7
 8005d58:	f023 0307 	bic.w	r3, r3, #7
 8005d5c:	f103 0108 	add.w	r1, r3, #8
 8005d60:	f8c8 1000 	str.w	r1, [r8]
 8005d64:	4682      	mov	sl, r0
 8005d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005d6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005fd0 <_printf_float+0x2a8>
 8005d72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005d76:	eeb0 6bc0 	vabs.f64	d6, d0
 8005d7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	dd24      	ble.n	8005dce <_printf_float+0xa6>
 8005d84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8c:	d502      	bpl.n	8005d94 <_printf_float+0x6c>
 8005d8e:	232d      	movs	r3, #45	; 0x2d
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <_printf_float+0x2b0>)
 8005d96:	4891      	ldr	r0, [pc, #580]	; (8005fdc <_printf_float+0x2b4>)
 8005d98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d9c:	bf94      	ite	ls
 8005d9e:	4698      	movls	r8, r3
 8005da0:	4680      	movhi	r8, r0
 8005da2:	2303      	movs	r3, #3
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	f022 0204 	bic.w	r2, r2, #4
 8005daa:	2300      	movs	r3, #0
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	9700      	str	r7, [sp, #0]
 8005db2:	4633      	mov	r3, r6
 8005db4:	aa09      	add	r2, sp, #36	; 0x24
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f9d3 	bl	8006164 <_printf_common>
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f040 808a 	bne.w	8005ed8 <_printf_float+0x1b0>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	b00b      	add	sp, #44	; 0x2c
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	eeb4 0b40 	vcmp.f64	d0, d0
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	d709      	bvc.n	8005dec <_printf_float+0xc4>
 8005dd8:	ee10 3a90 	vmov	r3, s1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bfbc      	itt	lt
 8005de0:	232d      	movlt	r3, #45	; 0x2d
 8005de2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005de6:	487e      	ldr	r0, [pc, #504]	; (8005fe0 <_printf_float+0x2b8>)
 8005de8:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <_printf_float+0x2bc>)
 8005dea:	e7d5      	b.n	8005d98 <_printf_float+0x70>
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005df2:	9104      	str	r1, [sp, #16]
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	d13c      	bne.n	8005e72 <_printf_float+0x14a>
 8005df8:	2306      	movs	r3, #6
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	ab08      	add	r3, sp, #32
 8005e02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e0a:	ab07      	add	r3, sp, #28
 8005e0c:	6861      	ldr	r1, [r4, #4]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	f10d 031b 	add.w	r3, sp, #27
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff fef6 	bl	8005c08 <__cvt>
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	9907      	ldr	r1, [sp, #28]
 8005e20:	2b47      	cmp	r3, #71	; 0x47
 8005e22:	4680      	mov	r8, r0
 8005e24:	d108      	bne.n	8005e38 <_printf_float+0x110>
 8005e26:	1cc8      	adds	r0, r1, #3
 8005e28:	db02      	blt.n	8005e30 <_printf_float+0x108>
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	dd41      	ble.n	8005eb4 <_printf_float+0x18c>
 8005e30:	f1a9 0902 	sub.w	r9, r9, #2
 8005e34:	fa5f f989 	uxtb.w	r9, r9
 8005e38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e3c:	d820      	bhi.n	8005e80 <_printf_float+0x158>
 8005e3e:	3901      	subs	r1, #1
 8005e40:	464a      	mov	r2, r9
 8005e42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e46:	9107      	str	r1, [sp, #28]
 8005e48:	f7ff ff30 	bl	8005cac <__exponent>
 8005e4c:	9a08      	ldr	r2, [sp, #32]
 8005e4e:	9004      	str	r0, [sp, #16]
 8005e50:	1813      	adds	r3, r2, r0
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	6123      	str	r3, [r4, #16]
 8005e56:	dc02      	bgt.n	8005e5e <_printf_float+0x136>
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	07d2      	lsls	r2, r2, #31
 8005e5c:	d501      	bpl.n	8005e62 <_printf_float+0x13a>
 8005e5e:	3301      	adds	r3, #1
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0a2      	beq.n	8005db0 <_printf_float+0x88>
 8005e6a:	232d      	movs	r3, #45	; 0x2d
 8005e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e70:	e79e      	b.n	8005db0 <_printf_float+0x88>
 8005e72:	9904      	ldr	r1, [sp, #16]
 8005e74:	2947      	cmp	r1, #71	; 0x47
 8005e76:	d1c1      	bne.n	8005dfc <_printf_float+0xd4>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1bf      	bne.n	8005dfc <_printf_float+0xd4>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e7bc      	b.n	8005dfa <_printf_float+0xd2>
 8005e80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e84:	d118      	bne.n	8005eb8 <_printf_float+0x190>
 8005e86:	2900      	cmp	r1, #0
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	dd0b      	ble.n	8005ea4 <_printf_float+0x17c>
 8005e8c:	6121      	str	r1, [r4, #16]
 8005e8e:	b913      	cbnz	r3, 8005e96 <_printf_float+0x16e>
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	07d0      	lsls	r0, r2, #31
 8005e94:	d502      	bpl.n	8005e9c <_printf_float+0x174>
 8005e96:	3301      	adds	r3, #1
 8005e98:	440b      	add	r3, r1
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	e7de      	b.n	8005e62 <_printf_float+0x13a>
 8005ea4:	b913      	cbnz	r3, 8005eac <_printf_float+0x184>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	07d2      	lsls	r2, r2, #31
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_float+0x188>
 8005eac:	3302      	adds	r3, #2
 8005eae:	e7f4      	b.n	8005e9a <_printf_float+0x172>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e7f2      	b.n	8005e9a <_printf_float+0x172>
 8005eb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	db05      	blt.n	8005eca <_printf_float+0x1a2>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	6121      	str	r1, [r4, #16]
 8005ec2:	07d8      	lsls	r0, r3, #31
 8005ec4:	d5ea      	bpl.n	8005e9c <_printf_float+0x174>
 8005ec6:	1c4b      	adds	r3, r1, #1
 8005ec8:	e7e7      	b.n	8005e9a <_printf_float+0x172>
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	bfd4      	ite	le
 8005ece:	f1c1 0202 	rsble	r2, r1, #2
 8005ed2:	2201      	movgt	r2, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	e7e0      	b.n	8005e9a <_printf_float+0x172>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	055a      	lsls	r2, r3, #21
 8005edc:	d407      	bmi.n	8005eee <_printf_float+0x1c6>
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d12a      	bne.n	8005f42 <_printf_float+0x21a>
 8005eec:	e76a      	b.n	8005dc4 <_printf_float+0x9c>
 8005eee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ef2:	f240 80e2 	bls.w	80060ba <_printf_float+0x392>
 8005ef6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005efa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f02:	d133      	bne.n	8005f6c <_printf_float+0x244>
 8005f04:	4a38      	ldr	r2, [pc, #224]	; (8005fe8 <_printf_float+0x2c0>)
 8005f06:	2301      	movs	r3, #1
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f af58 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	db02      	blt.n	8005f22 <_printf_float+0x1fa>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07d8      	lsls	r0, r3, #31
 8005f20:	d50f      	bpl.n	8005f42 <_printf_float+0x21a>
 8005f22:	4653      	mov	r3, sl
 8005f24:	465a      	mov	r2, fp
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f af49 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	f104 091a 	add.w	r9, r4, #26
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4543      	cmp	r3, r8
 8005f40:	dc09      	bgt.n	8005f56 <_printf_float+0x22e>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	079b      	lsls	r3, r3, #30
 8005f46:	f100 8108 	bmi.w	800615a <_printf_float+0x432>
 8005f4a:	68e0      	ldr	r0, [r4, #12]
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	4298      	cmp	r0, r3
 8005f50:	bfb8      	it	lt
 8005f52:	4618      	movlt	r0, r3
 8005f54:	e738      	b.n	8005dc8 <_printf_float+0xa0>
 8005f56:	2301      	movs	r3, #1
 8005f58:	464a      	mov	r2, r9
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f af2f 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	e7e6      	b.n	8005f3a <_printf_float+0x212>
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dc3c      	bgt.n	8005fec <_printf_float+0x2c4>
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <_printf_float+0x2c0>)
 8005f74:	2301      	movs	r3, #1
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f af21 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d102      	bne.n	8005f90 <_printf_float+0x268>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	07d9      	lsls	r1, r3, #31
 8005f8e:	d5d8      	bpl.n	8005f42 <_printf_float+0x21a>
 8005f90:	4653      	mov	r3, sl
 8005f92:	465a      	mov	r2, fp
 8005f94:	4631      	mov	r1, r6
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f af12 	beq.w	8005dc4 <_printf_float+0x9c>
 8005fa0:	f04f 0900 	mov.w	r9, #0
 8005fa4:	f104 0a1a 	add.w	sl, r4, #26
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	425b      	negs	r3, r3
 8005fac:	454b      	cmp	r3, r9
 8005fae:	dc01      	bgt.n	8005fb4 <_printf_float+0x28c>
 8005fb0:	9b08      	ldr	r3, [sp, #32]
 8005fb2:	e795      	b.n	8005ee0 <_printf_float+0x1b8>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f af00 	beq.w	8005dc4 <_printf_float+0x9c>
 8005fc4:	f109 0901 	add.w	r9, r9, #1
 8005fc8:	e7ee      	b.n	8005fa8 <_printf_float+0x280>
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	ffffffff 	.word	0xffffffff
 8005fd4:	7fefffff 	.word	0x7fefffff
 8005fd8:	080086e4 	.word	0x080086e4
 8005fdc:	080086e8 	.word	0x080086e8
 8005fe0:	080086f0 	.word	0x080086f0
 8005fe4:	080086ec 	.word	0x080086ec
 8005fe8:	080086f4 	.word	0x080086f4
 8005fec:	9a08      	ldr	r2, [sp, #32]
 8005fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bfa8      	it	ge
 8005ff4:	461a      	movge	r2, r3
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	dc38      	bgt.n	800606e <_printf_float+0x346>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9305      	str	r3, [sp, #20]
 8006000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006004:	f104 021a 	add.w	r2, r4, #26
 8006008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	eba3 0309 	sub.w	r3, r3, r9
 8006012:	428b      	cmp	r3, r1
 8006014:	dc33      	bgt.n	800607e <_printf_float+0x356>
 8006016:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800601a:	429a      	cmp	r2, r3
 800601c:	db3c      	blt.n	8006098 <_printf_float+0x370>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	07da      	lsls	r2, r3, #31
 8006022:	d439      	bmi.n	8006098 <_printf_float+0x370>
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	9a04      	ldr	r2, [sp, #16]
 8006028:	9907      	ldr	r1, [sp, #28]
 800602a:	1a9a      	subs	r2, r3, r2
 800602c:	eba3 0901 	sub.w	r9, r3, r1
 8006030:	4591      	cmp	r9, r2
 8006032:	bfa8      	it	ge
 8006034:	4691      	movge	r9, r2
 8006036:	f1b9 0f00 	cmp.w	r9, #0
 800603a:	dc35      	bgt.n	80060a8 <_printf_float+0x380>
 800603c:	f04f 0800 	mov.w	r8, #0
 8006040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006044:	f104 0a1a 	add.w	sl, r4, #26
 8006048:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	eba3 0309 	sub.w	r3, r3, r9
 8006052:	4543      	cmp	r3, r8
 8006054:	f77f af75 	ble.w	8005f42 <_printf_float+0x21a>
 8006058:	2301      	movs	r3, #1
 800605a:	4652      	mov	r2, sl
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f aeae 	beq.w	8005dc4 <_printf_float+0x9c>
 8006068:	f108 0801 	add.w	r8, r8, #1
 800606c:	e7ec      	b.n	8006048 <_printf_float+0x320>
 800606e:	4613      	mov	r3, r2
 8006070:	4631      	mov	r1, r6
 8006072:	4642      	mov	r2, r8
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d1bf      	bne.n	8005ffc <_printf_float+0x2d4>
 800607c:	e6a2      	b.n	8005dc4 <_printf_float+0x9c>
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	9204      	str	r2, [sp, #16]
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae9b 	beq.w	8005dc4 <_printf_float+0x9c>
 800608e:	9b05      	ldr	r3, [sp, #20]
 8006090:	9a04      	ldr	r2, [sp, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	e7b7      	b.n	8006008 <_printf_float+0x2e0>
 8006098:	4653      	mov	r3, sl
 800609a:	465a      	mov	r2, fp
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	d1be      	bne.n	8006024 <_printf_float+0x2fc>
 80060a6:	e68d      	b.n	8005dc4 <_printf_float+0x9c>
 80060a8:	9a04      	ldr	r2, [sp, #16]
 80060aa:	464b      	mov	r3, r9
 80060ac:	4442      	add	r2, r8
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d1c1      	bne.n	800603c <_printf_float+0x314>
 80060b8:	e684      	b.n	8005dc4 <_printf_float+0x9c>
 80060ba:	9a08      	ldr	r2, [sp, #32]
 80060bc:	2a01      	cmp	r2, #1
 80060be:	dc01      	bgt.n	80060c4 <_printf_float+0x39c>
 80060c0:	07db      	lsls	r3, r3, #31
 80060c2:	d537      	bpl.n	8006134 <_printf_float+0x40c>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4642      	mov	r2, r8
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f ae78 	beq.w	8005dc4 <_printf_float+0x9c>
 80060d4:	4653      	mov	r3, sl
 80060d6:	465a      	mov	r2, fp
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f ae70 	beq.w	8005dc4 <_printf_float+0x9c>
 80060e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80060e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80060ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f0:	d01b      	beq.n	800612a <_printf_float+0x402>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	f108 0201 	add.w	r2, r8, #1
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	d10e      	bne.n	8006122 <_printf_float+0x3fa>
 8006104:	e65e      	b.n	8005dc4 <_printf_float+0x9c>
 8006106:	2301      	movs	r3, #1
 8006108:	464a      	mov	r2, r9
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	f43f ae57 	beq.w	8005dc4 <_printf_float+0x9c>
 8006116:	f108 0801 	add.w	r8, r8, #1
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	3b01      	subs	r3, #1
 800611e:	4543      	cmp	r3, r8
 8006120:	dcf1      	bgt.n	8006106 <_printf_float+0x3de>
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006128:	e6db      	b.n	8005ee2 <_printf_float+0x1ba>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	f104 091a 	add.w	r9, r4, #26
 8006132:	e7f2      	b.n	800611a <_printf_float+0x3f2>
 8006134:	2301      	movs	r3, #1
 8006136:	4642      	mov	r2, r8
 8006138:	e7df      	b.n	80060fa <_printf_float+0x3d2>
 800613a:	2301      	movs	r3, #1
 800613c:	464a      	mov	r2, r9
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	f43f ae3d 	beq.w	8005dc4 <_printf_float+0x9c>
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	4543      	cmp	r3, r8
 8006156:	dcf0      	bgt.n	800613a <_printf_float+0x412>
 8006158:	e6f7      	b.n	8005f4a <_printf_float+0x222>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	f104 0919 	add.w	r9, r4, #25
 8006162:	e7f4      	b.n	800614e <_printf_float+0x426>

08006164 <_printf_common>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4616      	mov	r6, r2
 800616a:	4699      	mov	r9, r3
 800616c:	688a      	ldr	r2, [r1, #8]
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006174:	4293      	cmp	r3, r2
 8006176:	bfb8      	it	lt
 8006178:	4613      	movlt	r3, r2
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006180:	4607      	mov	r7, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b10a      	cbz	r2, 800618a <_printf_common+0x26>
 8006186:	3301      	adds	r3, #1
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0699      	lsls	r1, r3, #26
 800618e:	bf42      	ittt	mi
 8006190:	6833      	ldrmi	r3, [r6, #0]
 8006192:	3302      	addmi	r3, #2
 8006194:	6033      	strmi	r3, [r6, #0]
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	f015 0506 	ands.w	r5, r5, #6
 800619c:	d106      	bne.n	80061ac <_printf_common+0x48>
 800619e:	f104 0a19 	add.w	sl, r4, #25
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	6832      	ldr	r2, [r6, #0]
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dc26      	bgt.n	80061fa <_printf_common+0x96>
 80061ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b0:	1e13      	subs	r3, r2, #0
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	bf18      	it	ne
 80061b6:	2301      	movne	r3, #1
 80061b8:	0692      	lsls	r2, r2, #26
 80061ba:	d42b      	bmi.n	8006214 <_printf_common+0xb0>
 80061bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c0:	4649      	mov	r1, r9
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d01e      	beq.n	8006208 <_printf_common+0xa4>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	68e5      	ldr	r5, [r4, #12]
 80061ce:	6832      	ldr	r2, [r6, #0]
 80061d0:	f003 0306 	and.w	r3, r3, #6
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	bf08      	it	eq
 80061d8:	1aad      	subeq	r5, r5, r2
 80061da:	68a3      	ldr	r3, [r4, #8]
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	bf0c      	ite	eq
 80061e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e4:	2500      	movne	r5, #0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bfc4      	itt	gt
 80061ea:	1a9b      	subgt	r3, r3, r2
 80061ec:	18ed      	addgt	r5, r5, r3
 80061ee:	2600      	movs	r6, #0
 80061f0:	341a      	adds	r4, #26
 80061f2:	42b5      	cmp	r5, r6
 80061f4:	d11a      	bne.n	800622c <_printf_common+0xc8>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e008      	b.n	800620c <_printf_common+0xa8>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4649      	mov	r1, r9
 8006200:	4638      	mov	r0, r7
 8006202:	47c0      	blx	r8
 8006204:	3001      	adds	r0, #1
 8006206:	d103      	bne.n	8006210 <_printf_common+0xac>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3501      	adds	r5, #1
 8006212:	e7c6      	b.n	80061a2 <_printf_common+0x3e>
 8006214:	18e1      	adds	r1, r4, r3
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	2030      	movs	r0, #48	; 0x30
 800621a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621e:	4422      	add	r2, r4
 8006220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006228:	3302      	adds	r3, #2
 800622a:	e7c7      	b.n	80061bc <_printf_common+0x58>
 800622c:	2301      	movs	r3, #1
 800622e:	4622      	mov	r2, r4
 8006230:	4649      	mov	r1, r9
 8006232:	4638      	mov	r0, r7
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d0e6      	beq.n	8006208 <_printf_common+0xa4>
 800623a:	3601      	adds	r6, #1
 800623c:	e7d9      	b.n	80061f2 <_printf_common+0x8e>
	...

08006240 <_printf_i>:
 8006240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	7e0f      	ldrb	r7, [r1, #24]
 8006246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006248:	2f78      	cmp	r7, #120	; 0x78
 800624a:	4691      	mov	r9, r2
 800624c:	4680      	mov	r8, r0
 800624e:	460c      	mov	r4, r1
 8006250:	469a      	mov	sl, r3
 8006252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006256:	d807      	bhi.n	8006268 <_printf_i+0x28>
 8006258:	2f62      	cmp	r7, #98	; 0x62
 800625a:	d80a      	bhi.n	8006272 <_printf_i+0x32>
 800625c:	2f00      	cmp	r7, #0
 800625e:	f000 80d8 	beq.w	8006412 <_printf_i+0x1d2>
 8006262:	2f58      	cmp	r7, #88	; 0x58
 8006264:	f000 80a3 	beq.w	80063ae <_printf_i+0x16e>
 8006268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800626c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006270:	e03a      	b.n	80062e8 <_printf_i+0xa8>
 8006272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006276:	2b15      	cmp	r3, #21
 8006278:	d8f6      	bhi.n	8006268 <_printf_i+0x28>
 800627a:	a101      	add	r1, pc, #4	; (adr r1, 8006280 <_printf_i+0x40>)
 800627c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062ed 	.word	0x080062ed
 8006288:	08006269 	.word	0x08006269
 800628c:	08006269 	.word	0x08006269
 8006290:	08006269 	.word	0x08006269
 8006294:	08006269 	.word	0x08006269
 8006298:	080062ed 	.word	0x080062ed
 800629c:	08006269 	.word	0x08006269
 80062a0:	08006269 	.word	0x08006269
 80062a4:	08006269 	.word	0x08006269
 80062a8:	08006269 	.word	0x08006269
 80062ac:	080063f9 	.word	0x080063f9
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	080063db 	.word	0x080063db
 80062b8:	08006269 	.word	0x08006269
 80062bc:	08006269 	.word	0x08006269
 80062c0:	0800641b 	.word	0x0800641b
 80062c4:	08006269 	.word	0x08006269
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006269 	.word	0x08006269
 80062d0:	08006269 	.word	0x08006269
 80062d4:	080063e3 	.word	0x080063e3
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0a3      	b.n	8006434 <_printf_i+0x1f4>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	6829      	ldr	r1, [r5, #0]
 80062f0:	0606      	lsls	r6, r0, #24
 80062f2:	f101 0304 	add.w	r3, r1, #4
 80062f6:	d50a      	bpl.n	800630e <_printf_i+0xce>
 80062f8:	680e      	ldr	r6, [r1, #0]
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	da03      	bge.n	8006308 <_printf_i+0xc8>
 8006300:	232d      	movs	r3, #45	; 0x2d
 8006302:	4276      	negs	r6, r6
 8006304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006308:	485e      	ldr	r0, [pc, #376]	; (8006484 <_printf_i+0x244>)
 800630a:	230a      	movs	r3, #10
 800630c:	e019      	b.n	8006342 <_printf_i+0x102>
 800630e:	680e      	ldr	r6, [r1, #0]
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006316:	bf18      	it	ne
 8006318:	b236      	sxthne	r6, r6
 800631a:	e7ef      	b.n	80062fc <_printf_i+0xbc>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	1d19      	adds	r1, r3, #4
 8006322:	6029      	str	r1, [r5, #0]
 8006324:	0601      	lsls	r1, r0, #24
 8006326:	d501      	bpl.n	800632c <_printf_i+0xec>
 8006328:	681e      	ldr	r6, [r3, #0]
 800632a:	e002      	b.n	8006332 <_printf_i+0xf2>
 800632c:	0646      	lsls	r6, r0, #25
 800632e:	d5fb      	bpl.n	8006328 <_printf_i+0xe8>
 8006330:	881e      	ldrh	r6, [r3, #0]
 8006332:	4854      	ldr	r0, [pc, #336]	; (8006484 <_printf_i+0x244>)
 8006334:	2f6f      	cmp	r7, #111	; 0x6f
 8006336:	bf0c      	ite	eq
 8006338:	2308      	moveq	r3, #8
 800633a:	230a      	movne	r3, #10
 800633c:	2100      	movs	r1, #0
 800633e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006342:	6865      	ldr	r5, [r4, #4]
 8006344:	60a5      	str	r5, [r4, #8]
 8006346:	2d00      	cmp	r5, #0
 8006348:	bfa2      	ittt	ge
 800634a:	6821      	ldrge	r1, [r4, #0]
 800634c:	f021 0104 	bicge.w	r1, r1, #4
 8006350:	6021      	strge	r1, [r4, #0]
 8006352:	b90e      	cbnz	r6, 8006358 <_printf_i+0x118>
 8006354:	2d00      	cmp	r5, #0
 8006356:	d04d      	beq.n	80063f4 <_printf_i+0x1b4>
 8006358:	4615      	mov	r5, r2
 800635a:	fbb6 f1f3 	udiv	r1, r6, r3
 800635e:	fb03 6711 	mls	r7, r3, r1, r6
 8006362:	5dc7      	ldrb	r7, [r0, r7]
 8006364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006368:	4637      	mov	r7, r6
 800636a:	42bb      	cmp	r3, r7
 800636c:	460e      	mov	r6, r1
 800636e:	d9f4      	bls.n	800635a <_printf_i+0x11a>
 8006370:	2b08      	cmp	r3, #8
 8006372:	d10b      	bne.n	800638c <_printf_i+0x14c>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	07de      	lsls	r6, r3, #31
 8006378:	d508      	bpl.n	800638c <_printf_i+0x14c>
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	6861      	ldr	r1, [r4, #4]
 800637e:	4299      	cmp	r1, r3
 8006380:	bfde      	ittt	le
 8006382:	2330      	movle	r3, #48	; 0x30
 8006384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	6122      	str	r2, [r4, #16]
 8006390:	f8cd a000 	str.w	sl, [sp]
 8006394:	464b      	mov	r3, r9
 8006396:	aa03      	add	r2, sp, #12
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f7ff fee2 	bl	8006164 <_printf_common>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d14c      	bne.n	800643e <_printf_i+0x1fe>
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	b004      	add	sp, #16
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	4835      	ldr	r0, [pc, #212]	; (8006484 <_printf_i+0x244>)
 80063b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063b4:	6829      	ldr	r1, [r5, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063bc:	6029      	str	r1, [r5, #0]
 80063be:	061d      	lsls	r5, r3, #24
 80063c0:	d514      	bpl.n	80063ec <_printf_i+0x1ac>
 80063c2:	07df      	lsls	r7, r3, #31
 80063c4:	bf44      	itt	mi
 80063c6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ca:	6023      	strmi	r3, [r4, #0]
 80063cc:	b91e      	cbnz	r6, 80063d6 <_printf_i+0x196>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	f023 0320 	bic.w	r3, r3, #32
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	2310      	movs	r3, #16
 80063d8:	e7b0      	b.n	800633c <_printf_i+0xfc>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	2378      	movs	r3, #120	; 0x78
 80063e4:	4828      	ldr	r0, [pc, #160]	; (8006488 <_printf_i+0x248>)
 80063e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ea:	e7e3      	b.n	80063b4 <_printf_i+0x174>
 80063ec:	0659      	lsls	r1, r3, #25
 80063ee:	bf48      	it	mi
 80063f0:	b2b6      	uxthmi	r6, r6
 80063f2:	e7e6      	b.n	80063c2 <_printf_i+0x182>
 80063f4:	4615      	mov	r5, r2
 80063f6:	e7bb      	b.n	8006370 <_printf_i+0x130>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	6826      	ldr	r6, [r4, #0]
 80063fc:	6961      	ldr	r1, [r4, #20]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6028      	str	r0, [r5, #0]
 8006402:	0635      	lsls	r5, r6, #24
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	d501      	bpl.n	800640c <_printf_i+0x1cc>
 8006408:	6019      	str	r1, [r3, #0]
 800640a:	e002      	b.n	8006412 <_printf_i+0x1d2>
 800640c:	0670      	lsls	r0, r6, #25
 800640e:	d5fb      	bpl.n	8006408 <_printf_i+0x1c8>
 8006410:	8019      	strh	r1, [r3, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	4615      	mov	r5, r2
 8006418:	e7ba      	b.n	8006390 <_printf_i+0x150>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	1d1a      	adds	r2, r3, #4
 800641e:	602a      	str	r2, [r5, #0]
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	6862      	ldr	r2, [r4, #4]
 8006424:	2100      	movs	r1, #0
 8006426:	4628      	mov	r0, r5
 8006428:	f7f9 ff12 	bl	8000250 <memchr>
 800642c:	b108      	cbz	r0, 8006432 <_printf_i+0x1f2>
 800642e:	1b40      	subs	r0, r0, r5
 8006430:	6060      	str	r0, [r4, #4]
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	2300      	movs	r3, #0
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	e7a8      	b.n	8006390 <_printf_i+0x150>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	462a      	mov	r2, r5
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	47d0      	blx	sl
 8006448:	3001      	adds	r0, #1
 800644a:	d0ab      	beq.n	80063a4 <_printf_i+0x164>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	079b      	lsls	r3, r3, #30
 8006450:	d413      	bmi.n	800647a <_printf_i+0x23a>
 8006452:	68e0      	ldr	r0, [r4, #12]
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	4298      	cmp	r0, r3
 8006458:	bfb8      	it	lt
 800645a:	4618      	movlt	r0, r3
 800645c:	e7a4      	b.n	80063a8 <_printf_i+0x168>
 800645e:	2301      	movs	r3, #1
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	47d0      	blx	sl
 8006468:	3001      	adds	r0, #1
 800646a:	d09b      	beq.n	80063a4 <_printf_i+0x164>
 800646c:	3501      	adds	r5, #1
 800646e:	68e3      	ldr	r3, [r4, #12]
 8006470:	9903      	ldr	r1, [sp, #12]
 8006472:	1a5b      	subs	r3, r3, r1
 8006474:	42ab      	cmp	r3, r5
 8006476:	dcf2      	bgt.n	800645e <_printf_i+0x21e>
 8006478:	e7eb      	b.n	8006452 <_printf_i+0x212>
 800647a:	2500      	movs	r5, #0
 800647c:	f104 0619 	add.w	r6, r4, #25
 8006480:	e7f5      	b.n	800646e <_printf_i+0x22e>
 8006482:	bf00      	nop
 8006484:	080086f6 	.word	0x080086f6
 8006488:	08008707 	.word	0x08008707

0800648c <quorem>:
 800648c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	6903      	ldr	r3, [r0, #16]
 8006492:	690c      	ldr	r4, [r1, #16]
 8006494:	42a3      	cmp	r3, r4
 8006496:	4607      	mov	r7, r0
 8006498:	f2c0 8081 	blt.w	800659e <quorem+0x112>
 800649c:	3c01      	subs	r4, #1
 800649e:	f101 0814 	add.w	r8, r1, #20
 80064a2:	f100 0514 	add.w	r5, r0, #20
 80064a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064b4:	3301      	adds	r3, #1
 80064b6:	429a      	cmp	r2, r3
 80064b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064c4:	d331      	bcc.n	800652a <quorem+0x9e>
 80064c6:	f04f 0e00 	mov.w	lr, #0
 80064ca:	4640      	mov	r0, r8
 80064cc:	46ac      	mov	ip, r5
 80064ce:	46f2      	mov	sl, lr
 80064d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064d4:	b293      	uxth	r3, r2
 80064d6:	fb06 e303 	mla	r3, r6, r3, lr
 80064da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ebaa 0303 	sub.w	r3, sl, r3
 80064e4:	f8dc a000 	ldr.w	sl, [ip]
 80064e8:	0c12      	lsrs	r2, r2, #16
 80064ea:	fa13 f38a 	uxtah	r3, r3, sl
 80064ee:	fb06 e202 	mla	r2, r6, r2, lr
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064fa:	b292      	uxth	r2, r2
 80064fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006504:	f8bd 3000 	ldrh.w	r3, [sp]
 8006508:	4581      	cmp	r9, r0
 800650a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800650e:	f84c 3b04 	str.w	r3, [ip], #4
 8006512:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006516:	d2db      	bcs.n	80064d0 <quorem+0x44>
 8006518:	f855 300b 	ldr.w	r3, [r5, fp]
 800651c:	b92b      	cbnz	r3, 800652a <quorem+0x9e>
 800651e:	9b01      	ldr	r3, [sp, #4]
 8006520:	3b04      	subs	r3, #4
 8006522:	429d      	cmp	r5, r3
 8006524:	461a      	mov	r2, r3
 8006526:	d32e      	bcc.n	8006586 <quorem+0xfa>
 8006528:	613c      	str	r4, [r7, #16]
 800652a:	4638      	mov	r0, r7
 800652c:	f001 f846 	bl	80075bc <__mcmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	db24      	blt.n	800657e <quorem+0xf2>
 8006534:	3601      	adds	r6, #1
 8006536:	4628      	mov	r0, r5
 8006538:	f04f 0c00 	mov.w	ip, #0
 800653c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006540:	f8d0 e000 	ldr.w	lr, [r0]
 8006544:	b293      	uxth	r3, r2
 8006546:	ebac 0303 	sub.w	r3, ip, r3
 800654a:	0c12      	lsrs	r2, r2, #16
 800654c:	fa13 f38e 	uxtah	r3, r3, lr
 8006550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006558:	b29b      	uxth	r3, r3
 800655a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800655e:	45c1      	cmp	r9, r8
 8006560:	f840 3b04 	str.w	r3, [r0], #4
 8006564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006568:	d2e8      	bcs.n	800653c <quorem+0xb0>
 800656a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800656e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006572:	b922      	cbnz	r2, 800657e <quorem+0xf2>
 8006574:	3b04      	subs	r3, #4
 8006576:	429d      	cmp	r5, r3
 8006578:	461a      	mov	r2, r3
 800657a:	d30a      	bcc.n	8006592 <quorem+0x106>
 800657c:	613c      	str	r4, [r7, #16]
 800657e:	4630      	mov	r0, r6
 8006580:	b003      	add	sp, #12
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	3b04      	subs	r3, #4
 800658a:	2a00      	cmp	r2, #0
 800658c:	d1cc      	bne.n	8006528 <quorem+0x9c>
 800658e:	3c01      	subs	r4, #1
 8006590:	e7c7      	b.n	8006522 <quorem+0x96>
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	3b04      	subs	r3, #4
 8006596:	2a00      	cmp	r2, #0
 8006598:	d1f0      	bne.n	800657c <quorem+0xf0>
 800659a:	3c01      	subs	r4, #1
 800659c:	e7eb      	b.n	8006576 <quorem+0xea>
 800659e:	2000      	movs	r0, #0
 80065a0:	e7ee      	b.n	8006580 <quorem+0xf4>
 80065a2:	0000      	movs	r0, r0
 80065a4:	0000      	movs	r0, r0
	...

080065a8 <_dtoa_r>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	ed2d 8b02 	vpush	{d8}
 80065b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065b2:	b091      	sub	sp, #68	; 0x44
 80065b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065b8:	ec59 8b10 	vmov	r8, r9, d0
 80065bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80065be:	9106      	str	r1, [sp, #24]
 80065c0:	4606      	mov	r6, r0
 80065c2:	9208      	str	r2, [sp, #32]
 80065c4:	930c      	str	r3, [sp, #48]	; 0x30
 80065c6:	b975      	cbnz	r5, 80065e6 <_dtoa_r+0x3e>
 80065c8:	2010      	movs	r0, #16
 80065ca:	f000 fd5f 	bl	800708c <malloc>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6270      	str	r0, [r6, #36]	; 0x24
 80065d2:	b920      	cbnz	r0, 80065de <_dtoa_r+0x36>
 80065d4:	4baa      	ldr	r3, [pc, #680]	; (8006880 <_dtoa_r+0x2d8>)
 80065d6:	21ea      	movs	r1, #234	; 0xea
 80065d8:	48aa      	ldr	r0, [pc, #680]	; (8006884 <_dtoa_r+0x2dc>)
 80065da:	f001 f9f7 	bl	80079cc <__assert_func>
 80065de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065e2:	6005      	str	r5, [r0, #0]
 80065e4:	60c5      	str	r5, [r0, #12]
 80065e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	b151      	cbz	r1, 8006602 <_dtoa_r+0x5a>
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	604a      	str	r2, [r1, #4]
 80065f0:	2301      	movs	r3, #1
 80065f2:	4093      	lsls	r3, r2
 80065f4:	608b      	str	r3, [r1, #8]
 80065f6:	4630      	mov	r0, r6
 80065f8:	f000 fd9e 	bl	8007138 <_Bfree>
 80065fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	f1b9 0300 	subs.w	r3, r9, #0
 8006606:	bfbb      	ittet	lt
 8006608:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800660c:	9303      	strlt	r3, [sp, #12]
 800660e:	2300      	movge	r3, #0
 8006610:	2201      	movlt	r2, #1
 8006612:	bfac      	ite	ge
 8006614:	6023      	strge	r3, [r4, #0]
 8006616:	6022      	strlt	r2, [r4, #0]
 8006618:	4b9b      	ldr	r3, [pc, #620]	; (8006888 <_dtoa_r+0x2e0>)
 800661a:	9c03      	ldr	r4, [sp, #12]
 800661c:	43a3      	bics	r3, r4
 800661e:	d11c      	bne.n	800665a <_dtoa_r+0xb2>
 8006620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006622:	f242 730f 	movw	r3, #9999	; 0x270f
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800662c:	ea53 0308 	orrs.w	r3, r3, r8
 8006630:	f000 84fd 	beq.w	800702e <_dtoa_r+0xa86>
 8006634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006636:	b963      	cbnz	r3, 8006652 <_dtoa_r+0xaa>
 8006638:	4b94      	ldr	r3, [pc, #592]	; (800688c <_dtoa_r+0x2e4>)
 800663a:	e01f      	b.n	800667c <_dtoa_r+0xd4>
 800663c:	4b94      	ldr	r3, [pc, #592]	; (8006890 <_dtoa_r+0x2e8>)
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	3308      	adds	r3, #8
 8006642:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	9801      	ldr	r0, [sp, #4]
 8006648:	b011      	add	sp, #68	; 0x44
 800664a:	ecbd 8b02 	vpop	{d8}
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	4b8e      	ldr	r3, [pc, #568]	; (800688c <_dtoa_r+0x2e4>)
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	3303      	adds	r3, #3
 8006658:	e7f3      	b.n	8006642 <_dtoa_r+0x9a>
 800665a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800665e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006666:	d10b      	bne.n	8006680 <_dtoa_r+0xd8>
 8006668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800666a:	2301      	movs	r3, #1
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 84d9 	beq.w	8007028 <_dtoa_r+0xa80>
 8006676:	4887      	ldr	r0, [pc, #540]	; (8006894 <_dtoa_r+0x2ec>)
 8006678:	6018      	str	r0, [r3, #0]
 800667a:	1e43      	subs	r3, r0, #1
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	e7e2      	b.n	8006646 <_dtoa_r+0x9e>
 8006680:	a90f      	add	r1, sp, #60	; 0x3c
 8006682:	aa0e      	add	r2, sp, #56	; 0x38
 8006684:	4630      	mov	r0, r6
 8006686:	eeb0 0b48 	vmov.f64	d0, d8
 800668a:	f001 f83d 	bl	8007708 <__d2b>
 800668e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006692:	4605      	mov	r5, r0
 8006694:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006696:	2900      	cmp	r1, #0
 8006698:	d046      	beq.n	8006728 <_dtoa_r+0x180>
 800669a:	ee18 4a90 	vmov	r4, s17
 800669e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80066a2:	ec53 2b18 	vmov	r2, r3, d8
 80066a6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80066aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80066b2:	2400      	movs	r4, #0
 80066b4:	ec43 2b16 	vmov	d6, r2, r3
 80066b8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80066bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006868 <_dtoa_r+0x2c0>
 80066c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80066c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006870 <_dtoa_r+0x2c8>
 80066c8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80066cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006878 <_dtoa_r+0x2d0>
 80066d0:	ee07 1a90 	vmov	s15, r1
 80066d4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80066d8:	eeb0 7b46 	vmov.f64	d7, d6
 80066dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80066e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80066e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80066e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ec:	ee16 ba90 	vmov	fp, s13
 80066f0:	940a      	str	r4, [sp, #40]	; 0x28
 80066f2:	d508      	bpl.n	8006706 <_dtoa_r+0x15e>
 80066f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80066f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80066fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006700:	bf18      	it	ne
 8006702:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006706:	f1bb 0f16 	cmp.w	fp, #22
 800670a:	d82f      	bhi.n	800676c <_dtoa_r+0x1c4>
 800670c:	4b62      	ldr	r3, [pc, #392]	; (8006898 <_dtoa_r+0x2f0>)
 800670e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006712:	ed93 7b00 	vldr	d7, [r3]
 8006716:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671e:	d501      	bpl.n	8006724 <_dtoa_r+0x17c>
 8006720:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006724:	2300      	movs	r3, #0
 8006726:	e022      	b.n	800676e <_dtoa_r+0x1c6>
 8006728:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800672a:	4401      	add	r1, r0
 800672c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006730:	2b20      	cmp	r3, #32
 8006732:	bfc1      	itttt	gt
 8006734:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006738:	fa04 f303 	lslgt.w	r3, r4, r3
 800673c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006740:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006744:	bfd6      	itet	le
 8006746:	f1c3 0320 	rsble	r3, r3, #32
 800674a:	ea43 0808 	orrgt.w	r8, r3, r8
 800674e:	fa08 f803 	lslle.w	r8, r8, r3
 8006752:	ee07 8a90 	vmov	s15, r8
 8006756:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800675a:	3901      	subs	r1, #1
 800675c:	ee17 4a90 	vmov	r4, s15
 8006760:	ec53 2b17 	vmov	r2, r3, d7
 8006764:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006768:	2401      	movs	r4, #1
 800676a:	e7a3      	b.n	80066b4 <_dtoa_r+0x10c>
 800676c:	2301      	movs	r3, #1
 800676e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006770:	1a43      	subs	r3, r0, r1
 8006772:	1e5a      	subs	r2, r3, #1
 8006774:	bf45      	ittet	mi
 8006776:	f1c3 0301 	rsbmi	r3, r3, #1
 800677a:	9304      	strmi	r3, [sp, #16]
 800677c:	2300      	movpl	r3, #0
 800677e:	2300      	movmi	r3, #0
 8006780:	9205      	str	r2, [sp, #20]
 8006782:	bf54      	ite	pl
 8006784:	9304      	strpl	r3, [sp, #16]
 8006786:	9305      	strmi	r3, [sp, #20]
 8006788:	f1bb 0f00 	cmp.w	fp, #0
 800678c:	db18      	blt.n	80067c0 <_dtoa_r+0x218>
 800678e:	9b05      	ldr	r3, [sp, #20]
 8006790:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006794:	445b      	add	r3, fp
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	2300      	movs	r3, #0
 800679a:	9a06      	ldr	r2, [sp, #24]
 800679c:	2a09      	cmp	r2, #9
 800679e:	d849      	bhi.n	8006834 <_dtoa_r+0x28c>
 80067a0:	2a05      	cmp	r2, #5
 80067a2:	bfc4      	itt	gt
 80067a4:	3a04      	subgt	r2, #4
 80067a6:	9206      	strgt	r2, [sp, #24]
 80067a8:	9a06      	ldr	r2, [sp, #24]
 80067aa:	f1a2 0202 	sub.w	r2, r2, #2
 80067ae:	bfcc      	ite	gt
 80067b0:	2400      	movgt	r4, #0
 80067b2:	2401      	movle	r4, #1
 80067b4:	2a03      	cmp	r2, #3
 80067b6:	d848      	bhi.n	800684a <_dtoa_r+0x2a2>
 80067b8:	e8df f002 	tbb	[pc, r2]
 80067bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80067c0:	9b04      	ldr	r3, [sp, #16]
 80067c2:	2200      	movs	r2, #0
 80067c4:	eba3 030b 	sub.w	r3, r3, fp
 80067c8:	9304      	str	r3, [sp, #16]
 80067ca:	9209      	str	r2, [sp, #36]	; 0x24
 80067cc:	f1cb 0300 	rsb	r3, fp, #0
 80067d0:	e7e3      	b.n	800679a <_dtoa_r+0x1f2>
 80067d2:	2200      	movs	r2, #0
 80067d4:	9207      	str	r2, [sp, #28]
 80067d6:	9a08      	ldr	r2, [sp, #32]
 80067d8:	2a00      	cmp	r2, #0
 80067da:	dc39      	bgt.n	8006850 <_dtoa_r+0x2a8>
 80067dc:	f04f 0a01 	mov.w	sl, #1
 80067e0:	46d1      	mov	r9, sl
 80067e2:	4652      	mov	r2, sl
 80067e4:	f8cd a020 	str.w	sl, [sp, #32]
 80067e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80067ea:	2100      	movs	r1, #0
 80067ec:	6079      	str	r1, [r7, #4]
 80067ee:	2004      	movs	r0, #4
 80067f0:	f100 0c14 	add.w	ip, r0, #20
 80067f4:	4594      	cmp	ip, r2
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	d92f      	bls.n	800685a <_dtoa_r+0x2b2>
 80067fa:	4630      	mov	r0, r6
 80067fc:	930d      	str	r3, [sp, #52]	; 0x34
 80067fe:	f000 fc5b 	bl	80070b8 <_Balloc>
 8006802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006804:	9001      	str	r0, [sp, #4]
 8006806:	4602      	mov	r2, r0
 8006808:	2800      	cmp	r0, #0
 800680a:	d149      	bne.n	80068a0 <_dtoa_r+0x2f8>
 800680c:	4b23      	ldr	r3, [pc, #140]	; (800689c <_dtoa_r+0x2f4>)
 800680e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006812:	e6e1      	b.n	80065d8 <_dtoa_r+0x30>
 8006814:	2201      	movs	r2, #1
 8006816:	e7dd      	b.n	80067d4 <_dtoa_r+0x22c>
 8006818:	2200      	movs	r2, #0
 800681a:	9207      	str	r2, [sp, #28]
 800681c:	9a08      	ldr	r2, [sp, #32]
 800681e:	eb0b 0a02 	add.w	sl, fp, r2
 8006822:	f10a 0901 	add.w	r9, sl, #1
 8006826:	464a      	mov	r2, r9
 8006828:	2a01      	cmp	r2, #1
 800682a:	bfb8      	it	lt
 800682c:	2201      	movlt	r2, #1
 800682e:	e7db      	b.n	80067e8 <_dtoa_r+0x240>
 8006830:	2201      	movs	r2, #1
 8006832:	e7f2      	b.n	800681a <_dtoa_r+0x272>
 8006834:	2401      	movs	r4, #1
 8006836:	2200      	movs	r2, #0
 8006838:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800683c:	f04f 3aff 	mov.w	sl, #4294967295
 8006840:	2100      	movs	r1, #0
 8006842:	46d1      	mov	r9, sl
 8006844:	2212      	movs	r2, #18
 8006846:	9108      	str	r1, [sp, #32]
 8006848:	e7ce      	b.n	80067e8 <_dtoa_r+0x240>
 800684a:	2201      	movs	r2, #1
 800684c:	9207      	str	r2, [sp, #28]
 800684e:	e7f5      	b.n	800683c <_dtoa_r+0x294>
 8006850:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006854:	46d1      	mov	r9, sl
 8006856:	4652      	mov	r2, sl
 8006858:	e7c6      	b.n	80067e8 <_dtoa_r+0x240>
 800685a:	3101      	adds	r1, #1
 800685c:	6079      	str	r1, [r7, #4]
 800685e:	0040      	lsls	r0, r0, #1
 8006860:	e7c6      	b.n	80067f0 <_dtoa_r+0x248>
 8006862:	bf00      	nop
 8006864:	f3af 8000 	nop.w
 8006868:	636f4361 	.word	0x636f4361
 800686c:	3fd287a7 	.word	0x3fd287a7
 8006870:	8b60c8b3 	.word	0x8b60c8b3
 8006874:	3fc68a28 	.word	0x3fc68a28
 8006878:	509f79fb 	.word	0x509f79fb
 800687c:	3fd34413 	.word	0x3fd34413
 8006880:	08008725 	.word	0x08008725
 8006884:	0800873c 	.word	0x0800873c
 8006888:	7ff00000 	.word	0x7ff00000
 800688c:	08008721 	.word	0x08008721
 8006890:	08008718 	.word	0x08008718
 8006894:	080086f5 	.word	0x080086f5
 8006898:	08008830 	.word	0x08008830
 800689c:	08008797 	.word	0x08008797
 80068a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80068a2:	9901      	ldr	r1, [sp, #4]
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	f1b9 0f0e 	cmp.w	r9, #14
 80068aa:	d86c      	bhi.n	8006986 <_dtoa_r+0x3de>
 80068ac:	2c00      	cmp	r4, #0
 80068ae:	d06a      	beq.n	8006986 <_dtoa_r+0x3de>
 80068b0:	f1bb 0f00 	cmp.w	fp, #0
 80068b4:	f340 80a0 	ble.w	80069f8 <_dtoa_r+0x450>
 80068b8:	49c1      	ldr	r1, [pc, #772]	; (8006bc0 <_dtoa_r+0x618>)
 80068ba:	f00b 020f 	and.w	r2, fp, #15
 80068be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80068c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068c6:	ed92 7b00 	vldr	d7, [r2]
 80068ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80068ce:	f000 8087 	beq.w	80069e0 <_dtoa_r+0x438>
 80068d2:	4abc      	ldr	r2, [pc, #752]	; (8006bc4 <_dtoa_r+0x61c>)
 80068d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80068d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80068dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80068e0:	f001 010f 	and.w	r1, r1, #15
 80068e4:	2203      	movs	r2, #3
 80068e6:	48b7      	ldr	r0, [pc, #732]	; (8006bc4 <_dtoa_r+0x61c>)
 80068e8:	2900      	cmp	r1, #0
 80068ea:	d17b      	bne.n	80069e4 <_dtoa_r+0x43c>
 80068ec:	ed9d 6b02 	vldr	d6, [sp, #8]
 80068f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80068f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068fa:	2900      	cmp	r1, #0
 80068fc:	f000 80a2 	beq.w	8006a44 <_dtoa_r+0x49c>
 8006900:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006904:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006908:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	f140 8098 	bpl.w	8006a44 <_dtoa_r+0x49c>
 8006914:	f1b9 0f00 	cmp.w	r9, #0
 8006918:	f000 8094 	beq.w	8006a44 <_dtoa_r+0x49c>
 800691c:	f1ba 0f00 	cmp.w	sl, #0
 8006920:	dd2f      	ble.n	8006982 <_dtoa_r+0x3da>
 8006922:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800692a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800692e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006932:	3201      	adds	r2, #1
 8006934:	4650      	mov	r0, sl
 8006936:	ed9d 6b02 	vldr	d6, [sp, #8]
 800693a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800693e:	ee07 2a90 	vmov	s15, r2
 8006942:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006946:	eea7 5b06 	vfma.f64	d5, d7, d6
 800694a:	ee15 4a90 	vmov	r4, s11
 800694e:	ec52 1b15 	vmov	r1, r2, d5
 8006952:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006956:	2800      	cmp	r0, #0
 8006958:	d177      	bne.n	8006a4a <_dtoa_r+0x4a2>
 800695a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800695e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006962:	ec42 1b17 	vmov	d7, r1, r2
 8006966:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800696a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696e:	f300 8263 	bgt.w	8006e38 <_dtoa_r+0x890>
 8006972:	eeb1 7b47 	vneg.f64	d7, d7
 8006976:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	f100 8258 	bmi.w	8006e32 <_dtoa_r+0x88a>
 8006982:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006988:	2a00      	cmp	r2, #0
 800698a:	f2c0 811d 	blt.w	8006bc8 <_dtoa_r+0x620>
 800698e:	f1bb 0f0e 	cmp.w	fp, #14
 8006992:	f300 8119 	bgt.w	8006bc8 <_dtoa_r+0x620>
 8006996:	4b8a      	ldr	r3, [pc, #552]	; (8006bc0 <_dtoa_r+0x618>)
 8006998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800699c:	ed93 6b00 	vldr	d6, [r3]
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f280 80b7 	bge.w	8006b16 <_dtoa_r+0x56e>
 80069a8:	f1b9 0f00 	cmp.w	r9, #0
 80069ac:	f300 80b3 	bgt.w	8006b16 <_dtoa_r+0x56e>
 80069b0:	f040 823f 	bne.w	8006e32 <_dtoa_r+0x88a>
 80069b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80069b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80069bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80069c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c8:	464c      	mov	r4, r9
 80069ca:	464f      	mov	r7, r9
 80069cc:	f280 8215 	bge.w	8006dfa <_dtoa_r+0x852>
 80069d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069d4:	2331      	movs	r3, #49	; 0x31
 80069d6:	f808 3b01 	strb.w	r3, [r8], #1
 80069da:	f10b 0b01 	add.w	fp, fp, #1
 80069de:	e211      	b.n	8006e04 <_dtoa_r+0x85c>
 80069e0:	2202      	movs	r2, #2
 80069e2:	e780      	b.n	80068e6 <_dtoa_r+0x33e>
 80069e4:	07cc      	lsls	r4, r1, #31
 80069e6:	d504      	bpl.n	80069f2 <_dtoa_r+0x44a>
 80069e8:	ed90 6b00 	vldr	d6, [r0]
 80069ec:	3201      	adds	r2, #1
 80069ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069f2:	1049      	asrs	r1, r1, #1
 80069f4:	3008      	adds	r0, #8
 80069f6:	e777      	b.n	80068e8 <_dtoa_r+0x340>
 80069f8:	d022      	beq.n	8006a40 <_dtoa_r+0x498>
 80069fa:	f1cb 0100 	rsb	r1, fp, #0
 80069fe:	4a70      	ldr	r2, [pc, #448]	; (8006bc0 <_dtoa_r+0x618>)
 8006a00:	f001 000f 	and.w	r0, r1, #15
 8006a04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006a08:	ed92 7b00 	vldr	d7, [r2]
 8006a0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006a10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a14:	486b      	ldr	r0, [pc, #428]	; (8006bc4 <_dtoa_r+0x61c>)
 8006a16:	1109      	asrs	r1, r1, #4
 8006a18:	2400      	movs	r4, #0
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	b929      	cbnz	r1, 8006a2a <_dtoa_r+0x482>
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	f43f af6a 	beq.w	80068f8 <_dtoa_r+0x350>
 8006a24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a28:	e766      	b.n	80068f8 <_dtoa_r+0x350>
 8006a2a:	07cf      	lsls	r7, r1, #31
 8006a2c:	d505      	bpl.n	8006a3a <_dtoa_r+0x492>
 8006a2e:	ed90 6b00 	vldr	d6, [r0]
 8006a32:	3201      	adds	r2, #1
 8006a34:	2401      	movs	r4, #1
 8006a36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a3a:	1049      	asrs	r1, r1, #1
 8006a3c:	3008      	adds	r0, #8
 8006a3e:	e7ed      	b.n	8006a1c <_dtoa_r+0x474>
 8006a40:	2202      	movs	r2, #2
 8006a42:	e759      	b.n	80068f8 <_dtoa_r+0x350>
 8006a44:	465f      	mov	r7, fp
 8006a46:	4648      	mov	r0, r9
 8006a48:	e775      	b.n	8006936 <_dtoa_r+0x38e>
 8006a4a:	ec42 1b17 	vmov	d7, r1, r2
 8006a4e:	4a5c      	ldr	r2, [pc, #368]	; (8006bc0 <_dtoa_r+0x618>)
 8006a50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006a54:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	1814      	adds	r4, r2, r0
 8006a5c:	9a07      	ldr	r2, [sp, #28]
 8006a5e:	b352      	cbz	r2, 8006ab6 <_dtoa_r+0x50e>
 8006a60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006a64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006a68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a6c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006a70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006a74:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006a78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006a7c:	ee14 2a90 	vmov	r2, s9
 8006a80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006a84:	3230      	adds	r2, #48	; 0x30
 8006a86:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006a8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	f808 2b01 	strb.w	r2, [r8], #1
 8006a96:	d439      	bmi.n	8006b0c <_dtoa_r+0x564>
 8006a98:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006a9c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	d472      	bmi.n	8006b8c <_dtoa_r+0x5e4>
 8006aa6:	45a0      	cmp	r8, r4
 8006aa8:	f43f af6b 	beq.w	8006982 <_dtoa_r+0x3da>
 8006aac:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006ab0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006ab4:	e7e0      	b.n	8006a78 <_dtoa_r+0x4d0>
 8006ab6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006aba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006abe:	4621      	mov	r1, r4
 8006ac0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006ac4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006ac8:	ee14 2a90 	vmov	r2, s9
 8006acc:	3230      	adds	r2, #48	; 0x30
 8006ace:	f808 2b01 	strb.w	r2, [r8], #1
 8006ad2:	45a0      	cmp	r8, r4
 8006ad4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006ad8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006adc:	d118      	bne.n	8006b10 <_dtoa_r+0x568>
 8006ade:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006ae2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006ae6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aee:	dc4d      	bgt.n	8006b8c <_dtoa_r+0x5e4>
 8006af0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006af4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afc:	f57f af41 	bpl.w	8006982 <_dtoa_r+0x3da>
 8006b00:	4688      	mov	r8, r1
 8006b02:	3901      	subs	r1, #1
 8006b04:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	d0f9      	beq.n	8006b00 <_dtoa_r+0x558>
 8006b0c:	46bb      	mov	fp, r7
 8006b0e:	e02a      	b.n	8006b66 <_dtoa_r+0x5be>
 8006b10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006b14:	e7d6      	b.n	8006ac4 <_dtoa_r+0x51c>
 8006b16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b1a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006b1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b22:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006b26:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006b2a:	ee15 3a10 	vmov	r3, s10
 8006b2e:	3330      	adds	r3, #48	; 0x30
 8006b30:	f808 3b01 	strb.w	r3, [r8], #1
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	eba8 0303 	sub.w	r3, r8, r3
 8006b3a:	4599      	cmp	r9, r3
 8006b3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006b40:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006b44:	d133      	bne.n	8006bae <_dtoa_r+0x606>
 8006b46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006b4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	dc1a      	bgt.n	8006b8a <_dtoa_r+0x5e2>
 8006b54:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	d103      	bne.n	8006b66 <_dtoa_r+0x5be>
 8006b5e:	ee15 3a10 	vmov	r3, s10
 8006b62:	07d9      	lsls	r1, r3, #31
 8006b64:	d411      	bmi.n	8006b8a <_dtoa_r+0x5e2>
 8006b66:	4629      	mov	r1, r5
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f000 fae5 	bl	8007138 <_Bfree>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b72:	f888 3000 	strb.w	r3, [r8]
 8006b76:	f10b 0301 	add.w	r3, fp, #1
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f43f ad61 	beq.w	8006646 <_dtoa_r+0x9e>
 8006b84:	f8c3 8000 	str.w	r8, [r3]
 8006b88:	e55d      	b.n	8006646 <_dtoa_r+0x9e>
 8006b8a:	465f      	mov	r7, fp
 8006b8c:	4643      	mov	r3, r8
 8006b8e:	4698      	mov	r8, r3
 8006b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b94:	2a39      	cmp	r2, #57	; 0x39
 8006b96:	d106      	bne.n	8006ba6 <_dtoa_r+0x5fe>
 8006b98:	9a01      	ldr	r2, [sp, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d1f7      	bne.n	8006b8e <_dtoa_r+0x5e6>
 8006b9e:	9901      	ldr	r1, [sp, #4]
 8006ba0:	2230      	movs	r2, #48	; 0x30
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	700a      	strb	r2, [r1, #0]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	3201      	adds	r2, #1
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e7ae      	b.n	8006b0c <_dtoa_r+0x564>
 8006bae:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bba:	d1b2      	bne.n	8006b22 <_dtoa_r+0x57a>
 8006bbc:	e7d3      	b.n	8006b66 <_dtoa_r+0x5be>
 8006bbe:	bf00      	nop
 8006bc0:	08008830 	.word	0x08008830
 8006bc4:	08008808 	.word	0x08008808
 8006bc8:	9907      	ldr	r1, [sp, #28]
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	f000 80d0 	beq.w	8006d70 <_dtoa_r+0x7c8>
 8006bd0:	9906      	ldr	r1, [sp, #24]
 8006bd2:	2901      	cmp	r1, #1
 8006bd4:	f300 80b4 	bgt.w	8006d40 <_dtoa_r+0x798>
 8006bd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	f000 80ac 	beq.w	8006d38 <_dtoa_r+0x790>
 8006be0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006be4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006be8:	461c      	mov	r4, r3
 8006bea:	930a      	str	r3, [sp, #40]	; 0x28
 8006bec:	9b04      	ldr	r3, [sp, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4413      	add	r3, r2
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	f000 fb54 	bl	80072a8 <__i2b>
 8006c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c02:	4607      	mov	r7, r0
 8006c04:	f1b8 0f00 	cmp.w	r8, #0
 8006c08:	dd0d      	ble.n	8006c26 <_dtoa_r+0x67e>
 8006c0a:	9a05      	ldr	r2, [sp, #20]
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	dd0a      	ble.n	8006c26 <_dtoa_r+0x67e>
 8006c10:	4542      	cmp	r2, r8
 8006c12:	9904      	ldr	r1, [sp, #16]
 8006c14:	bfa8      	it	ge
 8006c16:	4642      	movge	r2, r8
 8006c18:	1a89      	subs	r1, r1, r2
 8006c1a:	9104      	str	r1, [sp, #16]
 8006c1c:	9905      	ldr	r1, [sp, #20]
 8006c1e:	eba8 0802 	sub.w	r8, r8, r2
 8006c22:	1a8a      	subs	r2, r1, r2
 8006c24:	9205      	str	r2, [sp, #20]
 8006c26:	b303      	cbz	r3, 8006c6a <_dtoa_r+0x6c2>
 8006c28:	9a07      	ldr	r2, [sp, #28]
 8006c2a:	2a00      	cmp	r2, #0
 8006c2c:	f000 80a5 	beq.w	8006d7a <_dtoa_r+0x7d2>
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	dd13      	ble.n	8006c5c <_dtoa_r+0x6b4>
 8006c34:	4639      	mov	r1, r7
 8006c36:	4622      	mov	r2, r4
 8006c38:	4630      	mov	r0, r6
 8006c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c3c:	f000 fbf4 	bl	8007428 <__pow5mult>
 8006c40:	462a      	mov	r2, r5
 8006c42:	4601      	mov	r1, r0
 8006c44:	4607      	mov	r7, r0
 8006c46:	4630      	mov	r0, r6
 8006c48:	f000 fb44 	bl	80072d4 <__multiply>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	900a      	str	r0, [sp, #40]	; 0x28
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 fa71 	bl	8007138 <_Bfree>
 8006c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c5a:	4615      	mov	r5, r2
 8006c5c:	1b1a      	subs	r2, r3, r4
 8006c5e:	d004      	beq.n	8006c6a <_dtoa_r+0x6c2>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 fbe0 	bl	8007428 <__pow5mult>
 8006c68:	4605      	mov	r5, r0
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f000 fb1b 	bl	80072a8 <__i2b>
 8006c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	f340 8081 	ble.w	8006d7e <_dtoa_r+0x7d6>
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4601      	mov	r1, r0
 8006c80:	4630      	mov	r0, r6
 8006c82:	f000 fbd1 	bl	8007428 <__pow5mult>
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	dd7a      	ble.n	8006d84 <_dtoa_r+0x7dc>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	930a      	str	r3, [sp, #40]	; 0x28
 8006c92:	6922      	ldr	r2, [r4, #16]
 8006c94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006c98:	6910      	ldr	r0, [r2, #16]
 8006c9a:	f000 fab5 	bl	8007208 <__hi0bits>
 8006c9e:	f1c0 0020 	rsb	r0, r0, #32
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	4418      	add	r0, r3
 8006ca6:	f010 001f 	ands.w	r0, r0, #31
 8006caa:	f000 808c 	beq.w	8006dc6 <_dtoa_r+0x81e>
 8006cae:	f1c0 0220 	rsb	r2, r0, #32
 8006cb2:	2a04      	cmp	r2, #4
 8006cb4:	f340 8085 	ble.w	8006dc2 <_dtoa_r+0x81a>
 8006cb8:	f1c0 001c 	rsb	r0, r0, #28
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	4403      	add	r3, r0
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	9b05      	ldr	r3, [sp, #20]
 8006cc4:	4403      	add	r3, r0
 8006cc6:	4480      	add	r8, r0
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd05      	ble.n	8006cdc <_dtoa_r+0x734>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f000 fc01 	bl	80074dc <__lshift>
 8006cda:	4605      	mov	r5, r0
 8006cdc:	9b05      	ldr	r3, [sp, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd05      	ble.n	8006cee <_dtoa_r+0x746>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f000 fbf8 	bl	80074dc <__lshift>
 8006cec:	4604      	mov	r4, r0
 8006cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d06a      	beq.n	8006dca <_dtoa_r+0x822>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 fc60 	bl	80075bc <__mcmp>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	da64      	bge.n	8006dca <_dtoa_r+0x822>
 8006d00:	2300      	movs	r3, #0
 8006d02:	4629      	mov	r1, r5
 8006d04:	220a      	movs	r2, #10
 8006d06:	4630      	mov	r0, r6
 8006d08:	f000 fa38 	bl	800717c <__multadd>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d12:	4605      	mov	r5, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8191 	beq.w	800703c <_dtoa_r+0xa94>
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	220a      	movs	r2, #10
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 fa2b 	bl	800717c <__multadd>
 8006d26:	f1ba 0f00 	cmp.w	sl, #0
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	f300 808d 	bgt.w	8006e4a <_dtoa_r+0x8a2>
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	dc50      	bgt.n	8006dd8 <_dtoa_r+0x830>
 8006d36:	e088      	b.n	8006e4a <_dtoa_r+0x8a2>
 8006d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d3e:	e751      	b.n	8006be4 <_dtoa_r+0x63c>
 8006d40:	f109 34ff 	add.w	r4, r9, #4294967295
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	bfbf      	itttt	lt
 8006d48:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006d4a:	1ae3      	sublt	r3, r4, r3
 8006d4c:	18d2      	addlt	r2, r2, r3
 8006d4e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006d50:	bfb6      	itet	lt
 8006d52:	4623      	movlt	r3, r4
 8006d54:	1b1c      	subge	r4, r3, r4
 8006d56:	2400      	movlt	r4, #0
 8006d58:	f1b9 0f00 	cmp.w	r9, #0
 8006d5c:	bfb5      	itete	lt
 8006d5e:	9a04      	ldrlt	r2, [sp, #16]
 8006d60:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006d64:	eba2 0809 	sublt.w	r8, r2, r9
 8006d68:	464a      	movge	r2, r9
 8006d6a:	bfb8      	it	lt
 8006d6c:	2200      	movlt	r2, #0
 8006d6e:	e73c      	b.n	8006bea <_dtoa_r+0x642>
 8006d70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006d74:	9f07      	ldr	r7, [sp, #28]
 8006d76:	461c      	mov	r4, r3
 8006d78:	e744      	b.n	8006c04 <_dtoa_r+0x65c>
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	e770      	b.n	8006c60 <_dtoa_r+0x6b8>
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	dc18      	bgt.n	8006db6 <_dtoa_r+0x80e>
 8006d84:	9b02      	ldr	r3, [sp, #8]
 8006d86:	b9b3      	cbnz	r3, 8006db6 <_dtoa_r+0x80e>
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006d8e:	b9a2      	cbnz	r2, 8006dba <_dtoa_r+0x812>
 8006d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d94:	0d12      	lsrs	r2, r2, #20
 8006d96:	0512      	lsls	r2, r2, #20
 8006d98:	b18a      	cbz	r2, 8006dbe <_dtoa_r+0x816>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	3301      	adds	r3, #1
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	2301      	movs	r3, #1
 8006da8:	930a      	str	r3, [sp, #40]	; 0x28
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f47f af70 	bne.w	8006c92 <_dtoa_r+0x6ea>
 8006db2:	2001      	movs	r0, #1
 8006db4:	e775      	b.n	8006ca2 <_dtoa_r+0x6fa>
 8006db6:	2300      	movs	r3, #0
 8006db8:	e7f6      	b.n	8006da8 <_dtoa_r+0x800>
 8006dba:	9b02      	ldr	r3, [sp, #8]
 8006dbc:	e7f4      	b.n	8006da8 <_dtoa_r+0x800>
 8006dbe:	920a      	str	r2, [sp, #40]	; 0x28
 8006dc0:	e7f3      	b.n	8006daa <_dtoa_r+0x802>
 8006dc2:	d082      	beq.n	8006cca <_dtoa_r+0x722>
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	301c      	adds	r0, #28
 8006dc8:	e778      	b.n	8006cbc <_dtoa_r+0x714>
 8006dca:	f1b9 0f00 	cmp.w	r9, #0
 8006dce:	dc37      	bgt.n	8006e40 <_dtoa_r+0x898>
 8006dd0:	9b06      	ldr	r3, [sp, #24]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	dd34      	ble.n	8006e40 <_dtoa_r+0x898>
 8006dd6:	46ca      	mov	sl, r9
 8006dd8:	f1ba 0f00 	cmp.w	sl, #0
 8006ddc:	d10d      	bne.n	8006dfa <_dtoa_r+0x852>
 8006dde:	4621      	mov	r1, r4
 8006de0:	4653      	mov	r3, sl
 8006de2:	2205      	movs	r2, #5
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 f9c9 	bl	800717c <__multadd>
 8006dea:	4601      	mov	r1, r0
 8006dec:	4604      	mov	r4, r0
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 fbe4 	bl	80075bc <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f73f adeb 	bgt.w	80069d0 <_dtoa_r+0x428>
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006e00:	ea6f 0b03 	mvn.w	fp, r3
 8006e04:	f04f 0900 	mov.w	r9, #0
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 f994 	bl	8007138 <_Bfree>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	f43f aea8 	beq.w	8006b66 <_dtoa_r+0x5be>
 8006e16:	f1b9 0f00 	cmp.w	r9, #0
 8006e1a:	d005      	beq.n	8006e28 <_dtoa_r+0x880>
 8006e1c:	45b9      	cmp	r9, r7
 8006e1e:	d003      	beq.n	8006e28 <_dtoa_r+0x880>
 8006e20:	4649      	mov	r1, r9
 8006e22:	4630      	mov	r0, r6
 8006e24:	f000 f988 	bl	8007138 <_Bfree>
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f000 f984 	bl	8007138 <_Bfree>
 8006e30:	e699      	b.n	8006b66 <_dtoa_r+0x5be>
 8006e32:	2400      	movs	r4, #0
 8006e34:	4627      	mov	r7, r4
 8006e36:	e7e0      	b.n	8006dfa <_dtoa_r+0x852>
 8006e38:	46bb      	mov	fp, r7
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	e5c7      	b.n	80069d0 <_dtoa_r+0x428>
 8006e40:	9b07      	ldr	r3, [sp, #28]
 8006e42:	46ca      	mov	sl, r9
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8100 	beq.w	800704a <_dtoa_r+0xaa2>
 8006e4a:	f1b8 0f00 	cmp.w	r8, #0
 8006e4e:	dd05      	ble.n	8006e5c <_dtoa_r+0x8b4>
 8006e50:	4639      	mov	r1, r7
 8006e52:	4642      	mov	r2, r8
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 fb41 	bl	80074dc <__lshift>
 8006e5a:	4607      	mov	r7, r0
 8006e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d05d      	beq.n	8006f1e <_dtoa_r+0x976>
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4630      	mov	r0, r6
 8006e66:	f000 f927 	bl	80070b8 <_Balloc>
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	b928      	cbnz	r0, 8006e7a <_dtoa_r+0x8d2>
 8006e6e:	4b82      	ldr	r3, [pc, #520]	; (8007078 <_dtoa_r+0xad0>)
 8006e70:	4602      	mov	r2, r0
 8006e72:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e76:	f7ff bbaf 	b.w	80065d8 <_dtoa_r+0x30>
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	3202      	adds	r2, #2
 8006e7e:	0092      	lsls	r2, r2, #2
 8006e80:	f107 010c 	add.w	r1, r7, #12
 8006e84:	300c      	adds	r0, #12
 8006e86:	f000 f909 	bl	800709c <memcpy>
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 fb24 	bl	80074dc <__lshift>
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	3301      	adds	r3, #1
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	4453      	add	r3, sl
 8006e9e:	9308      	str	r3, [sp, #32]
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	46b9      	mov	r9, r7
 8006ea8:	9307      	str	r3, [sp, #28]
 8006eaa:	4607      	mov	r7, r0
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	4621      	mov	r1, r4
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	9302      	str	r3, [sp, #8]
 8006eb6:	f7ff fae9 	bl	800648c <quorem>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	3330      	adds	r3, #48	; 0x30
 8006ebe:	9005      	str	r0, [sp, #20]
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec6:	f000 fb79 	bl	80075bc <__mcmp>
 8006eca:	463a      	mov	r2, r7
 8006ecc:	4682      	mov	sl, r0
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 fb8f 	bl	80075f4 <__mdiff>
 8006ed6:	68c2      	ldr	r2, [r0, #12]
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	4680      	mov	r8, r0
 8006edc:	bb0a      	cbnz	r2, 8006f22 <_dtoa_r+0x97a>
 8006ede:	4601      	mov	r1, r0
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 fb6b 	bl	80075bc <__mcmp>
 8006ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4641      	mov	r1, r8
 8006eec:	4630      	mov	r0, r6
 8006eee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006ef2:	f000 f921 	bl	8007138 <_Bfree>
 8006ef6:	9b06      	ldr	r3, [sp, #24]
 8006ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006efa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006efe:	ea43 0102 	orr.w	r1, r3, r2
 8006f02:	9b07      	ldr	r3, [sp, #28]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f08:	d10d      	bne.n	8006f26 <_dtoa_r+0x97e>
 8006f0a:	2b39      	cmp	r3, #57	; 0x39
 8006f0c:	d029      	beq.n	8006f62 <_dtoa_r+0x9ba>
 8006f0e:	f1ba 0f00 	cmp.w	sl, #0
 8006f12:	dd01      	ble.n	8006f18 <_dtoa_r+0x970>
 8006f14:	9b05      	ldr	r3, [sp, #20]
 8006f16:	3331      	adds	r3, #49	; 0x31
 8006f18:	9a02      	ldr	r2, [sp, #8]
 8006f1a:	7013      	strb	r3, [r2, #0]
 8006f1c:	e774      	b.n	8006e08 <_dtoa_r+0x860>
 8006f1e:	4638      	mov	r0, r7
 8006f20:	e7b8      	b.n	8006e94 <_dtoa_r+0x8ec>
 8006f22:	2201      	movs	r2, #1
 8006f24:	e7e1      	b.n	8006eea <_dtoa_r+0x942>
 8006f26:	f1ba 0f00 	cmp.w	sl, #0
 8006f2a:	db06      	blt.n	8006f3a <_dtoa_r+0x992>
 8006f2c:	9906      	ldr	r1, [sp, #24]
 8006f2e:	ea41 0a0a 	orr.w	sl, r1, sl
 8006f32:	9907      	ldr	r1, [sp, #28]
 8006f34:	ea5a 0101 	orrs.w	r1, sl, r1
 8006f38:	d120      	bne.n	8006f7c <_dtoa_r+0x9d4>
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	ddec      	ble.n	8006f18 <_dtoa_r+0x970>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	2201      	movs	r2, #1
 8006f42:	4630      	mov	r0, r6
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	f000 fac9 	bl	80074dc <__lshift>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	f000 fb35 	bl	80075bc <__mcmp>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	dc02      	bgt.n	8006f5e <_dtoa_r+0x9b6>
 8006f58:	d1de      	bne.n	8006f18 <_dtoa_r+0x970>
 8006f5a:	07da      	lsls	r2, r3, #31
 8006f5c:	d5dc      	bpl.n	8006f18 <_dtoa_r+0x970>
 8006f5e:	2b39      	cmp	r3, #57	; 0x39
 8006f60:	d1d8      	bne.n	8006f14 <_dtoa_r+0x96c>
 8006f62:	9a02      	ldr	r2, [sp, #8]
 8006f64:	2339      	movs	r3, #57	; 0x39
 8006f66:	7013      	strb	r3, [r2, #0]
 8006f68:	4643      	mov	r3, r8
 8006f6a:	4698      	mov	r8, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006f72:	2a39      	cmp	r2, #57	; 0x39
 8006f74:	d051      	beq.n	800701a <_dtoa_r+0xa72>
 8006f76:	3201      	adds	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e745      	b.n	8006e08 <_dtoa_r+0x860>
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	dd03      	ble.n	8006f88 <_dtoa_r+0x9e0>
 8006f80:	2b39      	cmp	r3, #57	; 0x39
 8006f82:	d0ee      	beq.n	8006f62 <_dtoa_r+0x9ba>
 8006f84:	3301      	adds	r3, #1
 8006f86:	e7c7      	b.n	8006f18 <_dtoa_r+0x970>
 8006f88:	9a04      	ldr	r2, [sp, #16]
 8006f8a:	9908      	ldr	r1, [sp, #32]
 8006f8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f90:	428a      	cmp	r2, r1
 8006f92:	d02b      	beq.n	8006fec <_dtoa_r+0xa44>
 8006f94:	4629      	mov	r1, r5
 8006f96:	2300      	movs	r3, #0
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f000 f8ee 	bl	800717c <__multadd>
 8006fa0:	45b9      	cmp	r9, r7
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	f04f 020a 	mov.w	r2, #10
 8006fac:	4649      	mov	r1, r9
 8006fae:	4630      	mov	r0, r6
 8006fb0:	d107      	bne.n	8006fc2 <_dtoa_r+0xa1a>
 8006fb2:	f000 f8e3 	bl	800717c <__multadd>
 8006fb6:	4681      	mov	r9, r0
 8006fb8:	4607      	mov	r7, r0
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	e774      	b.n	8006eac <_dtoa_r+0x904>
 8006fc2:	f000 f8db 	bl	800717c <__multadd>
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	4681      	mov	r9, r0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	220a      	movs	r2, #10
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f000 f8d4 	bl	800717c <__multadd>
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	e7f0      	b.n	8006fba <_dtoa_r+0xa12>
 8006fd8:	f1ba 0f00 	cmp.w	sl, #0
 8006fdc:	9a01      	ldr	r2, [sp, #4]
 8006fde:	bfcc      	ite	gt
 8006fe0:	46d0      	movgt	r8, sl
 8006fe2:	f04f 0801 	movle.w	r8, #1
 8006fe6:	4490      	add	r8, r2
 8006fe8:	f04f 0900 	mov.w	r9, #0
 8006fec:	4629      	mov	r1, r5
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	9302      	str	r3, [sp, #8]
 8006ff4:	f000 fa72 	bl	80074dc <__lshift>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	f000 fade 	bl	80075bc <__mcmp>
 8007000:	2800      	cmp	r0, #0
 8007002:	dcb1      	bgt.n	8006f68 <_dtoa_r+0x9c0>
 8007004:	d102      	bne.n	800700c <_dtoa_r+0xa64>
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	07db      	lsls	r3, r3, #31
 800700a:	d4ad      	bmi.n	8006f68 <_dtoa_r+0x9c0>
 800700c:	4643      	mov	r3, r8
 800700e:	4698      	mov	r8, r3
 8007010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007014:	2a30      	cmp	r2, #48	; 0x30
 8007016:	d0fa      	beq.n	800700e <_dtoa_r+0xa66>
 8007018:	e6f6      	b.n	8006e08 <_dtoa_r+0x860>
 800701a:	9a01      	ldr	r2, [sp, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d1a4      	bne.n	8006f6a <_dtoa_r+0x9c2>
 8007020:	f10b 0b01 	add.w	fp, fp, #1
 8007024:	2331      	movs	r3, #49	; 0x31
 8007026:	e778      	b.n	8006f1a <_dtoa_r+0x972>
 8007028:	4b14      	ldr	r3, [pc, #80]	; (800707c <_dtoa_r+0xad4>)
 800702a:	f7ff bb27 	b.w	800667c <_dtoa_r+0xd4>
 800702e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f ab03 	bne.w	800663c <_dtoa_r+0x94>
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <_dtoa_r+0xad8>)
 8007038:	f7ff bb20 	b.w	800667c <_dtoa_r+0xd4>
 800703c:	f1ba 0f00 	cmp.w	sl, #0
 8007040:	dc03      	bgt.n	800704a <_dtoa_r+0xaa2>
 8007042:	9b06      	ldr	r3, [sp, #24]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f73f aec7 	bgt.w	8006dd8 <_dtoa_r+0x830>
 800704a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f7ff fa1b 	bl	800648c <quorem>
 8007056:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800705a:	f808 3b01 	strb.w	r3, [r8], #1
 800705e:	9a01      	ldr	r2, [sp, #4]
 8007060:	eba8 0202 	sub.w	r2, r8, r2
 8007064:	4592      	cmp	sl, r2
 8007066:	ddb7      	ble.n	8006fd8 <_dtoa_r+0xa30>
 8007068:	4629      	mov	r1, r5
 800706a:	2300      	movs	r3, #0
 800706c:	220a      	movs	r2, #10
 800706e:	4630      	mov	r0, r6
 8007070:	f000 f884 	bl	800717c <__multadd>
 8007074:	4605      	mov	r5, r0
 8007076:	e7ea      	b.n	800704e <_dtoa_r+0xaa6>
 8007078:	08008797 	.word	0x08008797
 800707c:	080086f4 	.word	0x080086f4
 8007080:	08008718 	.word	0x08008718

08007084 <_localeconv_r>:
 8007084:	4800      	ldr	r0, [pc, #0]	; (8007088 <_localeconv_r+0x4>)
 8007086:	4770      	bx	lr
 8007088:	20000168 	.word	0x20000168

0800708c <malloc>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <malloc+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f000 bc17 	b.w	80078c4 <_malloc_r>
 8007096:	bf00      	nop
 8007098:	20000014 	.word	0x20000014

0800709c <memcpy>:
 800709c:	440a      	add	r2, r1
 800709e:	4291      	cmp	r1, r2
 80070a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a4:	d100      	bne.n	80070a8 <memcpy+0xc>
 80070a6:	4770      	bx	lr
 80070a8:	b510      	push	{r4, lr}
 80070aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b2:	4291      	cmp	r1, r2
 80070b4:	d1f9      	bne.n	80070aa <memcpy+0xe>
 80070b6:	bd10      	pop	{r4, pc}

080070b8 <_Balloc>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	b976      	cbnz	r6, 80070e0 <_Balloc+0x28>
 80070c2:	2010      	movs	r0, #16
 80070c4:	f7ff ffe2 	bl	800708c <malloc>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6260      	str	r0, [r4, #36]	; 0x24
 80070cc:	b920      	cbnz	r0, 80070d8 <_Balloc+0x20>
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <_Balloc+0x78>)
 80070d0:	4818      	ldr	r0, [pc, #96]	; (8007134 <_Balloc+0x7c>)
 80070d2:	2166      	movs	r1, #102	; 0x66
 80070d4:	f000 fc7a 	bl	80079cc <__assert_func>
 80070d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070dc:	6006      	str	r6, [r0, #0]
 80070de:	60c6      	str	r6, [r0, #12]
 80070e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070e2:	68f3      	ldr	r3, [r6, #12]
 80070e4:	b183      	cbz	r3, 8007108 <_Balloc+0x50>
 80070e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ee:	b9b8      	cbnz	r0, 8007120 <_Balloc+0x68>
 80070f0:	2101      	movs	r1, #1
 80070f2:	fa01 f605 	lsl.w	r6, r1, r5
 80070f6:	1d72      	adds	r2, r6, #5
 80070f8:	0092      	lsls	r2, r2, #2
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fb60 	bl	80077c0 <_calloc_r>
 8007100:	b160      	cbz	r0, 800711c <_Balloc+0x64>
 8007102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007106:	e00e      	b.n	8007126 <_Balloc+0x6e>
 8007108:	2221      	movs	r2, #33	; 0x21
 800710a:	2104      	movs	r1, #4
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fb57 	bl	80077c0 <_calloc_r>
 8007112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007114:	60f0      	str	r0, [r6, #12]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e4      	bne.n	80070e6 <_Balloc+0x2e>
 800711c:	2000      	movs	r0, #0
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	6802      	ldr	r2, [r0, #0]
 8007122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007126:	2300      	movs	r3, #0
 8007128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800712c:	e7f7      	b.n	800711e <_Balloc+0x66>
 800712e:	bf00      	nop
 8007130:	08008725 	.word	0x08008725
 8007134:	080087a8 	.word	0x080087a8

08007138 <_Bfree>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800713c:	4605      	mov	r5, r0
 800713e:	460c      	mov	r4, r1
 8007140:	b976      	cbnz	r6, 8007160 <_Bfree+0x28>
 8007142:	2010      	movs	r0, #16
 8007144:	f7ff ffa2 	bl	800708c <malloc>
 8007148:	4602      	mov	r2, r0
 800714a:	6268      	str	r0, [r5, #36]	; 0x24
 800714c:	b920      	cbnz	r0, 8007158 <_Bfree+0x20>
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <_Bfree+0x3c>)
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <_Bfree+0x40>)
 8007152:	218a      	movs	r1, #138	; 0x8a
 8007154:	f000 fc3a 	bl	80079cc <__assert_func>
 8007158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800715c:	6006      	str	r6, [r0, #0]
 800715e:	60c6      	str	r6, [r0, #12]
 8007160:	b13c      	cbz	r4, 8007172 <_Bfree+0x3a>
 8007162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007164:	6862      	ldr	r2, [r4, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800716c:	6021      	str	r1, [r4, #0]
 800716e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	08008725 	.word	0x08008725
 8007178:	080087a8 	.word	0x080087a8

0800717c <__multadd>:
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	690d      	ldr	r5, [r1, #16]
 8007182:	4607      	mov	r7, r0
 8007184:	460c      	mov	r4, r1
 8007186:	461e      	mov	r6, r3
 8007188:	f101 0c14 	add.w	ip, r1, #20
 800718c:	2000      	movs	r0, #0
 800718e:	f8dc 3000 	ldr.w	r3, [ip]
 8007192:	b299      	uxth	r1, r3
 8007194:	fb02 6101 	mla	r1, r2, r1, r6
 8007198:	0c1e      	lsrs	r6, r3, #16
 800719a:	0c0b      	lsrs	r3, r1, #16
 800719c:	fb02 3306 	mla	r3, r2, r6, r3
 80071a0:	b289      	uxth	r1, r1
 80071a2:	3001      	adds	r0, #1
 80071a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071a8:	4285      	cmp	r5, r0
 80071aa:	f84c 1b04 	str.w	r1, [ip], #4
 80071ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071b2:	dcec      	bgt.n	800718e <__multadd+0x12>
 80071b4:	b30e      	cbz	r6, 80071fa <__multadd+0x7e>
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	dc19      	bgt.n	80071f0 <__multadd+0x74>
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	4638      	mov	r0, r7
 80071c0:	3101      	adds	r1, #1
 80071c2:	f7ff ff79 	bl	80070b8 <_Balloc>
 80071c6:	4680      	mov	r8, r0
 80071c8:	b928      	cbnz	r0, 80071d6 <__multadd+0x5a>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <__multadd+0x84>)
 80071ce:	480d      	ldr	r0, [pc, #52]	; (8007204 <__multadd+0x88>)
 80071d0:	21b5      	movs	r1, #181	; 0xb5
 80071d2:	f000 fbfb 	bl	80079cc <__assert_func>
 80071d6:	6922      	ldr	r2, [r4, #16]
 80071d8:	3202      	adds	r2, #2
 80071da:	f104 010c 	add.w	r1, r4, #12
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	300c      	adds	r0, #12
 80071e2:	f7ff ff5b 	bl	800709c <memcpy>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff ffa5 	bl	8007138 <_Bfree>
 80071ee:	4644      	mov	r4, r8
 80071f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071f4:	3501      	adds	r5, #1
 80071f6:	615e      	str	r6, [r3, #20]
 80071f8:	6125      	str	r5, [r4, #16]
 80071fa:	4620      	mov	r0, r4
 80071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007200:	08008797 	.word	0x08008797
 8007204:	080087a8 	.word	0x080087a8

08007208 <__hi0bits>:
 8007208:	0c03      	lsrs	r3, r0, #16
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	b9d3      	cbnz	r3, 8007244 <__hi0bits+0x3c>
 800720e:	0400      	lsls	r0, r0, #16
 8007210:	2310      	movs	r3, #16
 8007212:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007216:	bf04      	itt	eq
 8007218:	0200      	lsleq	r0, r0, #8
 800721a:	3308      	addeq	r3, #8
 800721c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007220:	bf04      	itt	eq
 8007222:	0100      	lsleq	r0, r0, #4
 8007224:	3304      	addeq	r3, #4
 8007226:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800722a:	bf04      	itt	eq
 800722c:	0080      	lsleq	r0, r0, #2
 800722e:	3302      	addeq	r3, #2
 8007230:	2800      	cmp	r0, #0
 8007232:	db05      	blt.n	8007240 <__hi0bits+0x38>
 8007234:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007238:	f103 0301 	add.w	r3, r3, #1
 800723c:	bf08      	it	eq
 800723e:	2320      	moveq	r3, #32
 8007240:	4618      	mov	r0, r3
 8007242:	4770      	bx	lr
 8007244:	2300      	movs	r3, #0
 8007246:	e7e4      	b.n	8007212 <__hi0bits+0xa>

08007248 <__lo0bits>:
 8007248:	6803      	ldr	r3, [r0, #0]
 800724a:	f013 0207 	ands.w	r2, r3, #7
 800724e:	4601      	mov	r1, r0
 8007250:	d00b      	beq.n	800726a <__lo0bits+0x22>
 8007252:	07da      	lsls	r2, r3, #31
 8007254:	d423      	bmi.n	800729e <__lo0bits+0x56>
 8007256:	0798      	lsls	r0, r3, #30
 8007258:	bf49      	itett	mi
 800725a:	085b      	lsrmi	r3, r3, #1
 800725c:	089b      	lsrpl	r3, r3, #2
 800725e:	2001      	movmi	r0, #1
 8007260:	600b      	strmi	r3, [r1, #0]
 8007262:	bf5c      	itt	pl
 8007264:	600b      	strpl	r3, [r1, #0]
 8007266:	2002      	movpl	r0, #2
 8007268:	4770      	bx	lr
 800726a:	b298      	uxth	r0, r3
 800726c:	b9a8      	cbnz	r0, 800729a <__lo0bits+0x52>
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	2010      	movs	r0, #16
 8007272:	b2da      	uxtb	r2, r3
 8007274:	b90a      	cbnz	r2, 800727a <__lo0bits+0x32>
 8007276:	3008      	adds	r0, #8
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	071a      	lsls	r2, r3, #28
 800727c:	bf04      	itt	eq
 800727e:	091b      	lsreq	r3, r3, #4
 8007280:	3004      	addeq	r0, #4
 8007282:	079a      	lsls	r2, r3, #30
 8007284:	bf04      	itt	eq
 8007286:	089b      	lsreq	r3, r3, #2
 8007288:	3002      	addeq	r0, #2
 800728a:	07da      	lsls	r2, r3, #31
 800728c:	d403      	bmi.n	8007296 <__lo0bits+0x4e>
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	f100 0001 	add.w	r0, r0, #1
 8007294:	d005      	beq.n	80072a2 <__lo0bits+0x5a>
 8007296:	600b      	str	r3, [r1, #0]
 8007298:	4770      	bx	lr
 800729a:	4610      	mov	r0, r2
 800729c:	e7e9      	b.n	8007272 <__lo0bits+0x2a>
 800729e:	2000      	movs	r0, #0
 80072a0:	4770      	bx	lr
 80072a2:	2020      	movs	r0, #32
 80072a4:	4770      	bx	lr
	...

080072a8 <__i2b>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	2101      	movs	r1, #1
 80072ae:	f7ff ff03 	bl	80070b8 <_Balloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__i2b+0x1a>
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <__i2b+0x24>)
 80072b8:	4805      	ldr	r0, [pc, #20]	; (80072d0 <__i2b+0x28>)
 80072ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072be:	f000 fb85 	bl	80079cc <__assert_func>
 80072c2:	2301      	movs	r3, #1
 80072c4:	6144      	str	r4, [r0, #20]
 80072c6:	6103      	str	r3, [r0, #16]
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	bf00      	nop
 80072cc:	08008797 	.word	0x08008797
 80072d0:	080087a8 	.word	0x080087a8

080072d4 <__multiply>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	4691      	mov	r9, r2
 80072da:	690a      	ldr	r2, [r1, #16]
 80072dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bfb8      	it	lt
 80072e4:	460b      	movlt	r3, r1
 80072e6:	460c      	mov	r4, r1
 80072e8:	bfbc      	itt	lt
 80072ea:	464c      	movlt	r4, r9
 80072ec:	4699      	movlt	r9, r3
 80072ee:	6927      	ldr	r7, [r4, #16]
 80072f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	6861      	ldr	r1, [r4, #4]
 80072f8:	eb07 060a 	add.w	r6, r7, sl
 80072fc:	42b3      	cmp	r3, r6
 80072fe:	b085      	sub	sp, #20
 8007300:	bfb8      	it	lt
 8007302:	3101      	addlt	r1, #1
 8007304:	f7ff fed8 	bl	80070b8 <_Balloc>
 8007308:	b930      	cbnz	r0, 8007318 <__multiply+0x44>
 800730a:	4602      	mov	r2, r0
 800730c:	4b44      	ldr	r3, [pc, #272]	; (8007420 <__multiply+0x14c>)
 800730e:	4845      	ldr	r0, [pc, #276]	; (8007424 <__multiply+0x150>)
 8007310:	f240 115d 	movw	r1, #349	; 0x15d
 8007314:	f000 fb5a 	bl	80079cc <__assert_func>
 8007318:	f100 0514 	add.w	r5, r0, #20
 800731c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007320:	462b      	mov	r3, r5
 8007322:	2200      	movs	r2, #0
 8007324:	4543      	cmp	r3, r8
 8007326:	d321      	bcc.n	800736c <__multiply+0x98>
 8007328:	f104 0314 	add.w	r3, r4, #20
 800732c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007330:	f109 0314 	add.w	r3, r9, #20
 8007334:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	1b3a      	subs	r2, r7, r4
 800733c:	3a15      	subs	r2, #21
 800733e:	f022 0203 	bic.w	r2, r2, #3
 8007342:	3204      	adds	r2, #4
 8007344:	f104 0115 	add.w	r1, r4, #21
 8007348:	428f      	cmp	r7, r1
 800734a:	bf38      	it	cc
 800734c:	2204      	movcc	r2, #4
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	9a02      	ldr	r2, [sp, #8]
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d80c      	bhi.n	8007372 <__multiply+0x9e>
 8007358:	2e00      	cmp	r6, #0
 800735a:	dd03      	ble.n	8007364 <__multiply+0x90>
 800735c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05a      	beq.n	800741a <__multiply+0x146>
 8007364:	6106      	str	r6, [r0, #16]
 8007366:	b005      	add	sp, #20
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	f843 2b04 	str.w	r2, [r3], #4
 8007370:	e7d8      	b.n	8007324 <__multiply+0x50>
 8007372:	f8b3 a000 	ldrh.w	sl, [r3]
 8007376:	f1ba 0f00 	cmp.w	sl, #0
 800737a:	d024      	beq.n	80073c6 <__multiply+0xf2>
 800737c:	f104 0e14 	add.w	lr, r4, #20
 8007380:	46a9      	mov	r9, r5
 8007382:	f04f 0c00 	mov.w	ip, #0
 8007386:	f85e 2b04 	ldr.w	r2, [lr], #4
 800738a:	f8d9 1000 	ldr.w	r1, [r9]
 800738e:	fa1f fb82 	uxth.w	fp, r2
 8007392:	b289      	uxth	r1, r1
 8007394:	fb0a 110b 	mla	r1, sl, fp, r1
 8007398:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800739c:	f8d9 2000 	ldr.w	r2, [r9]
 80073a0:	4461      	add	r1, ip
 80073a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80073aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ae:	b289      	uxth	r1, r1
 80073b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073b4:	4577      	cmp	r7, lr
 80073b6:	f849 1b04 	str.w	r1, [r9], #4
 80073ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073be:	d8e2      	bhi.n	8007386 <__multiply+0xb2>
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	f845 c002 	str.w	ip, [r5, r2]
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073cc:	3304      	adds	r3, #4
 80073ce:	f1b9 0f00 	cmp.w	r9, #0
 80073d2:	d020      	beq.n	8007416 <__multiply+0x142>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	f104 0c14 	add.w	ip, r4, #20
 80073da:	46ae      	mov	lr, r5
 80073dc:	f04f 0a00 	mov.w	sl, #0
 80073e0:	f8bc b000 	ldrh.w	fp, [ip]
 80073e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073e8:	fb09 220b 	mla	r2, r9, fp, r2
 80073ec:	4492      	add	sl, r2
 80073ee:	b289      	uxth	r1, r1
 80073f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073f4:	f84e 1b04 	str.w	r1, [lr], #4
 80073f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073fc:	f8be 1000 	ldrh.w	r1, [lr]
 8007400:	0c12      	lsrs	r2, r2, #16
 8007402:	fb09 1102 	mla	r1, r9, r2, r1
 8007406:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800740a:	4567      	cmp	r7, ip
 800740c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007410:	d8e6      	bhi.n	80073e0 <__multiply+0x10c>
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	50a9      	str	r1, [r5, r2]
 8007416:	3504      	adds	r5, #4
 8007418:	e79a      	b.n	8007350 <__multiply+0x7c>
 800741a:	3e01      	subs	r6, #1
 800741c:	e79c      	b.n	8007358 <__multiply+0x84>
 800741e:	bf00      	nop
 8007420:	08008797 	.word	0x08008797
 8007424:	080087a8 	.word	0x080087a8

08007428 <__pow5mult>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4615      	mov	r5, r2
 800742e:	f012 0203 	ands.w	r2, r2, #3
 8007432:	4606      	mov	r6, r0
 8007434:	460f      	mov	r7, r1
 8007436:	d007      	beq.n	8007448 <__pow5mult+0x20>
 8007438:	4c25      	ldr	r4, [pc, #148]	; (80074d0 <__pow5mult+0xa8>)
 800743a:	3a01      	subs	r2, #1
 800743c:	2300      	movs	r3, #0
 800743e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007442:	f7ff fe9b 	bl	800717c <__multadd>
 8007446:	4607      	mov	r7, r0
 8007448:	10ad      	asrs	r5, r5, #2
 800744a:	d03d      	beq.n	80074c8 <__pow5mult+0xa0>
 800744c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800744e:	b97c      	cbnz	r4, 8007470 <__pow5mult+0x48>
 8007450:	2010      	movs	r0, #16
 8007452:	f7ff fe1b 	bl	800708c <malloc>
 8007456:	4602      	mov	r2, r0
 8007458:	6270      	str	r0, [r6, #36]	; 0x24
 800745a:	b928      	cbnz	r0, 8007468 <__pow5mult+0x40>
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <__pow5mult+0xac>)
 800745e:	481e      	ldr	r0, [pc, #120]	; (80074d8 <__pow5mult+0xb0>)
 8007460:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007464:	f000 fab2 	bl	80079cc <__assert_func>
 8007468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800746c:	6004      	str	r4, [r0, #0]
 800746e:	60c4      	str	r4, [r0, #12]
 8007470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007478:	b94c      	cbnz	r4, 800748e <__pow5mult+0x66>
 800747a:	f240 2171 	movw	r1, #625	; 0x271
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ff12 	bl	80072a8 <__i2b>
 8007484:	2300      	movs	r3, #0
 8007486:	f8c8 0008 	str.w	r0, [r8, #8]
 800748a:	4604      	mov	r4, r0
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	f04f 0900 	mov.w	r9, #0
 8007492:	07eb      	lsls	r3, r5, #31
 8007494:	d50a      	bpl.n	80074ac <__pow5mult+0x84>
 8007496:	4639      	mov	r1, r7
 8007498:	4622      	mov	r2, r4
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff ff1a 	bl	80072d4 <__multiply>
 80074a0:	4639      	mov	r1, r7
 80074a2:	4680      	mov	r8, r0
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fe47 	bl	8007138 <_Bfree>
 80074aa:	4647      	mov	r7, r8
 80074ac:	106d      	asrs	r5, r5, #1
 80074ae:	d00b      	beq.n	80074c8 <__pow5mult+0xa0>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	b938      	cbnz	r0, 80074c4 <__pow5mult+0x9c>
 80074b4:	4622      	mov	r2, r4
 80074b6:	4621      	mov	r1, r4
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff0b 	bl	80072d4 <__multiply>
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f8c0 9000 	str.w	r9, [r0]
 80074c4:	4604      	mov	r4, r0
 80074c6:	e7e4      	b.n	8007492 <__pow5mult+0x6a>
 80074c8:	4638      	mov	r0, r7
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	bf00      	nop
 80074d0:	080088f8 	.word	0x080088f8
 80074d4:	08008725 	.word	0x08008725
 80074d8:	080087a8 	.word	0x080087a8

080074dc <__lshift>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	6849      	ldr	r1, [r1, #4]
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	4607      	mov	r7, r0
 80074ee:	4691      	mov	r9, r2
 80074f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074f4:	f108 0601 	add.w	r6, r8, #1
 80074f8:	42b3      	cmp	r3, r6
 80074fa:	db0b      	blt.n	8007514 <__lshift+0x38>
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff fddb 	bl	80070b8 <_Balloc>
 8007502:	4605      	mov	r5, r0
 8007504:	b948      	cbnz	r0, 800751a <__lshift+0x3e>
 8007506:	4602      	mov	r2, r0
 8007508:	4b2a      	ldr	r3, [pc, #168]	; (80075b4 <__lshift+0xd8>)
 800750a:	482b      	ldr	r0, [pc, #172]	; (80075b8 <__lshift+0xdc>)
 800750c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007510:	f000 fa5c 	bl	80079cc <__assert_func>
 8007514:	3101      	adds	r1, #1
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	e7ee      	b.n	80074f8 <__lshift+0x1c>
 800751a:	2300      	movs	r3, #0
 800751c:	f100 0114 	add.w	r1, r0, #20
 8007520:	f100 0210 	add.w	r2, r0, #16
 8007524:	4618      	mov	r0, r3
 8007526:	4553      	cmp	r3, sl
 8007528:	db37      	blt.n	800759a <__lshift+0xbe>
 800752a:	6920      	ldr	r0, [r4, #16]
 800752c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007530:	f104 0314 	add.w	r3, r4, #20
 8007534:	f019 091f 	ands.w	r9, r9, #31
 8007538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800753c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007540:	d02f      	beq.n	80075a2 <__lshift+0xc6>
 8007542:	f1c9 0e20 	rsb	lr, r9, #32
 8007546:	468a      	mov	sl, r1
 8007548:	f04f 0c00 	mov.w	ip, #0
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	fa02 f209 	lsl.w	r2, r2, r9
 8007552:	ea42 020c 	orr.w	r2, r2, ip
 8007556:	f84a 2b04 	str.w	r2, [sl], #4
 800755a:	f853 2b04 	ldr.w	r2, [r3], #4
 800755e:	4298      	cmp	r0, r3
 8007560:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007564:	d8f2      	bhi.n	800754c <__lshift+0x70>
 8007566:	1b03      	subs	r3, r0, r4
 8007568:	3b15      	subs	r3, #21
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	3304      	adds	r3, #4
 8007570:	f104 0215 	add.w	r2, r4, #21
 8007574:	4290      	cmp	r0, r2
 8007576:	bf38      	it	cc
 8007578:	2304      	movcc	r3, #4
 800757a:	f841 c003 	str.w	ip, [r1, r3]
 800757e:	f1bc 0f00 	cmp.w	ip, #0
 8007582:	d001      	beq.n	8007588 <__lshift+0xac>
 8007584:	f108 0602 	add.w	r6, r8, #2
 8007588:	3e01      	subs	r6, #1
 800758a:	4638      	mov	r0, r7
 800758c:	612e      	str	r6, [r5, #16]
 800758e:	4621      	mov	r1, r4
 8007590:	f7ff fdd2 	bl	8007138 <_Bfree>
 8007594:	4628      	mov	r0, r5
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	f842 0f04 	str.w	r0, [r2, #4]!
 800759e:	3301      	adds	r3, #1
 80075a0:	e7c1      	b.n	8007526 <__lshift+0x4a>
 80075a2:	3904      	subs	r1, #4
 80075a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075ac:	4298      	cmp	r0, r3
 80075ae:	d8f9      	bhi.n	80075a4 <__lshift+0xc8>
 80075b0:	e7ea      	b.n	8007588 <__lshift+0xac>
 80075b2:	bf00      	nop
 80075b4:	08008797 	.word	0x08008797
 80075b8:	080087a8 	.word	0x080087a8

080075bc <__mcmp>:
 80075bc:	b530      	push	{r4, r5, lr}
 80075be:	6902      	ldr	r2, [r0, #16]
 80075c0:	690c      	ldr	r4, [r1, #16]
 80075c2:	1b12      	subs	r2, r2, r4
 80075c4:	d10e      	bne.n	80075e4 <__mcmp+0x28>
 80075c6:	f100 0314 	add.w	r3, r0, #20
 80075ca:	3114      	adds	r1, #20
 80075cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075dc:	42a5      	cmp	r5, r4
 80075de:	d003      	beq.n	80075e8 <__mcmp+0x2c>
 80075e0:	d305      	bcc.n	80075ee <__mcmp+0x32>
 80075e2:	2201      	movs	r2, #1
 80075e4:	4610      	mov	r0, r2
 80075e6:	bd30      	pop	{r4, r5, pc}
 80075e8:	4283      	cmp	r3, r0
 80075ea:	d3f3      	bcc.n	80075d4 <__mcmp+0x18>
 80075ec:	e7fa      	b.n	80075e4 <__mcmp+0x28>
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	e7f7      	b.n	80075e4 <__mcmp+0x28>

080075f4 <__mdiff>:
 80075f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	4606      	mov	r6, r0
 80075fc:	4611      	mov	r1, r2
 80075fe:	4620      	mov	r0, r4
 8007600:	4690      	mov	r8, r2
 8007602:	f7ff ffdb 	bl	80075bc <__mcmp>
 8007606:	1e05      	subs	r5, r0, #0
 8007608:	d110      	bne.n	800762c <__mdiff+0x38>
 800760a:	4629      	mov	r1, r5
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff fd53 	bl	80070b8 <_Balloc>
 8007612:	b930      	cbnz	r0, 8007622 <__mdiff+0x2e>
 8007614:	4b3a      	ldr	r3, [pc, #232]	; (8007700 <__mdiff+0x10c>)
 8007616:	4602      	mov	r2, r0
 8007618:	f240 2132 	movw	r1, #562	; 0x232
 800761c:	4839      	ldr	r0, [pc, #228]	; (8007704 <__mdiff+0x110>)
 800761e:	f000 f9d5 	bl	80079cc <__assert_func>
 8007622:	2301      	movs	r3, #1
 8007624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	bfa4      	itt	ge
 800762e:	4643      	movge	r3, r8
 8007630:	46a0      	movge	r8, r4
 8007632:	4630      	mov	r0, r6
 8007634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007638:	bfa6      	itte	ge
 800763a:	461c      	movge	r4, r3
 800763c:	2500      	movge	r5, #0
 800763e:	2501      	movlt	r5, #1
 8007640:	f7ff fd3a 	bl	80070b8 <_Balloc>
 8007644:	b920      	cbnz	r0, 8007650 <__mdiff+0x5c>
 8007646:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <__mdiff+0x10c>)
 8007648:	4602      	mov	r2, r0
 800764a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800764e:	e7e5      	b.n	800761c <__mdiff+0x28>
 8007650:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007654:	6926      	ldr	r6, [r4, #16]
 8007656:	60c5      	str	r5, [r0, #12]
 8007658:	f104 0914 	add.w	r9, r4, #20
 800765c:	f108 0514 	add.w	r5, r8, #20
 8007660:	f100 0e14 	add.w	lr, r0, #20
 8007664:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007668:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800766c:	f108 0210 	add.w	r2, r8, #16
 8007670:	46f2      	mov	sl, lr
 8007672:	2100      	movs	r1, #0
 8007674:	f859 3b04 	ldr.w	r3, [r9], #4
 8007678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800767c:	fa1f f883 	uxth.w	r8, r3
 8007680:	fa11 f18b 	uxtah	r1, r1, fp
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	eba1 0808 	sub.w	r8, r1, r8
 800768a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800768e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007692:	fa1f f888 	uxth.w	r8, r8
 8007696:	1419      	asrs	r1, r3, #16
 8007698:	454e      	cmp	r6, r9
 800769a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800769e:	f84a 3b04 	str.w	r3, [sl], #4
 80076a2:	d8e7      	bhi.n	8007674 <__mdiff+0x80>
 80076a4:	1b33      	subs	r3, r6, r4
 80076a6:	3b15      	subs	r3, #21
 80076a8:	f023 0303 	bic.w	r3, r3, #3
 80076ac:	3304      	adds	r3, #4
 80076ae:	3415      	adds	r4, #21
 80076b0:	42a6      	cmp	r6, r4
 80076b2:	bf38      	it	cc
 80076b4:	2304      	movcc	r3, #4
 80076b6:	441d      	add	r5, r3
 80076b8:	4473      	add	r3, lr
 80076ba:	469e      	mov	lr, r3
 80076bc:	462e      	mov	r6, r5
 80076be:	4566      	cmp	r6, ip
 80076c0:	d30e      	bcc.n	80076e0 <__mdiff+0xec>
 80076c2:	f10c 0203 	add.w	r2, ip, #3
 80076c6:	1b52      	subs	r2, r2, r5
 80076c8:	f022 0203 	bic.w	r2, r2, #3
 80076cc:	3d03      	subs	r5, #3
 80076ce:	45ac      	cmp	ip, r5
 80076d0:	bf38      	it	cc
 80076d2:	2200      	movcc	r2, #0
 80076d4:	441a      	add	r2, r3
 80076d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076da:	b17b      	cbz	r3, 80076fc <__mdiff+0x108>
 80076dc:	6107      	str	r7, [r0, #16]
 80076de:	e7a3      	b.n	8007628 <__mdiff+0x34>
 80076e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80076e4:	fa11 f288 	uxtah	r2, r1, r8
 80076e8:	1414      	asrs	r4, r2, #16
 80076ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076ee:	b292      	uxth	r2, r2
 80076f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076f4:	f84e 2b04 	str.w	r2, [lr], #4
 80076f8:	1421      	asrs	r1, r4, #16
 80076fa:	e7e0      	b.n	80076be <__mdiff+0xca>
 80076fc:	3f01      	subs	r7, #1
 80076fe:	e7ea      	b.n	80076d6 <__mdiff+0xe2>
 8007700:	08008797 	.word	0x08008797
 8007704:	080087a8 	.word	0x080087a8

08007708 <__d2b>:
 8007708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800770c:	4689      	mov	r9, r1
 800770e:	2101      	movs	r1, #1
 8007710:	ec57 6b10 	vmov	r6, r7, d0
 8007714:	4690      	mov	r8, r2
 8007716:	f7ff fccf 	bl	80070b8 <_Balloc>
 800771a:	4604      	mov	r4, r0
 800771c:	b930      	cbnz	r0, 800772c <__d2b+0x24>
 800771e:	4602      	mov	r2, r0
 8007720:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <__d2b+0xb0>)
 8007722:	4826      	ldr	r0, [pc, #152]	; (80077bc <__d2b+0xb4>)
 8007724:	f240 310a 	movw	r1, #778	; 0x30a
 8007728:	f000 f950 	bl	80079cc <__assert_func>
 800772c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007734:	bb35      	cbnz	r5, 8007784 <__d2b+0x7c>
 8007736:	2e00      	cmp	r6, #0
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	d028      	beq.n	800778e <__d2b+0x86>
 800773c:	4668      	mov	r0, sp
 800773e:	9600      	str	r6, [sp, #0]
 8007740:	f7ff fd82 	bl	8007248 <__lo0bits>
 8007744:	9900      	ldr	r1, [sp, #0]
 8007746:	b300      	cbz	r0, 800778a <__d2b+0x82>
 8007748:	9a01      	ldr	r2, [sp, #4]
 800774a:	f1c0 0320 	rsb	r3, r0, #32
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	430b      	orrs	r3, r1
 8007754:	40c2      	lsrs	r2, r0
 8007756:	6163      	str	r3, [r4, #20]
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	9b01      	ldr	r3, [sp, #4]
 800775c:	61a3      	str	r3, [r4, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2202      	movne	r2, #2
 8007764:	2201      	moveq	r2, #1
 8007766:	6122      	str	r2, [r4, #16]
 8007768:	b1d5      	cbz	r5, 80077a0 <__d2b+0x98>
 800776a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800776e:	4405      	add	r5, r0
 8007770:	f8c9 5000 	str.w	r5, [r9]
 8007774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007778:	f8c8 0000 	str.w	r0, [r8]
 800777c:	4620      	mov	r0, r4
 800777e:	b003      	add	sp, #12
 8007780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007788:	e7d5      	b.n	8007736 <__d2b+0x2e>
 800778a:	6161      	str	r1, [r4, #20]
 800778c:	e7e5      	b.n	800775a <__d2b+0x52>
 800778e:	a801      	add	r0, sp, #4
 8007790:	f7ff fd5a 	bl	8007248 <__lo0bits>
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	6163      	str	r3, [r4, #20]
 8007798:	2201      	movs	r2, #1
 800779a:	6122      	str	r2, [r4, #16]
 800779c:	3020      	adds	r0, #32
 800779e:	e7e3      	b.n	8007768 <__d2b+0x60>
 80077a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077a8:	f8c9 0000 	str.w	r0, [r9]
 80077ac:	6918      	ldr	r0, [r3, #16]
 80077ae:	f7ff fd2b 	bl	8007208 <__hi0bits>
 80077b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077b6:	e7df      	b.n	8007778 <__d2b+0x70>
 80077b8:	08008797 	.word	0x08008797
 80077bc:	080087a8 	.word	0x080087a8

080077c0 <_calloc_r>:
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	fba1 2402 	umull	r2, r4, r1, r2
 80077c6:	b94c      	cbnz	r4, 80077dc <_calloc_r+0x1c>
 80077c8:	4611      	mov	r1, r2
 80077ca:	9201      	str	r2, [sp, #4]
 80077cc:	f000 f87a 	bl	80078c4 <_malloc_r>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	4605      	mov	r5, r0
 80077d4:	b930      	cbnz	r0, 80077e4 <_calloc_r+0x24>
 80077d6:	4628      	mov	r0, r5
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	220c      	movs	r2, #12
 80077de:	6002      	str	r2, [r0, #0]
 80077e0:	2500      	movs	r5, #0
 80077e2:	e7f8      	b.n	80077d6 <_calloc_r+0x16>
 80077e4:	4621      	mov	r1, r4
 80077e6:	f7fe fa07 	bl	8005bf8 <memset>
 80077ea:	e7f4      	b.n	80077d6 <_calloc_r+0x16>

080077ec <_free_r>:
 80077ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d044      	beq.n	800787c <_free_r+0x90>
 80077f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f6:	9001      	str	r0, [sp, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f1a1 0404 	sub.w	r4, r1, #4
 80077fe:	bfb8      	it	lt
 8007800:	18e4      	addlt	r4, r4, r3
 8007802:	f000 f925 	bl	8007a50 <__malloc_lock>
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <_free_r+0x94>)
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	b933      	cbnz	r3, 800781c <_free_r+0x30>
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	6014      	str	r4, [r2, #0]
 8007812:	b003      	add	sp, #12
 8007814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007818:	f000 b920 	b.w	8007a5c <__malloc_unlock>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x46>
 8007820:	6825      	ldr	r5, [r4, #0]
 8007822:	1961      	adds	r1, r4, r5
 8007824:	428b      	cmp	r3, r1
 8007826:	bf01      	itttt	eq
 8007828:	6819      	ldreq	r1, [r3, #0]
 800782a:	685b      	ldreq	r3, [r3, #4]
 800782c:	1949      	addeq	r1, r1, r5
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	e7ed      	b.n	800780e <_free_r+0x22>
 8007832:	461a      	mov	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b10b      	cbz	r3, 800783c <_free_r+0x50>
 8007838:	42a3      	cmp	r3, r4
 800783a:	d9fa      	bls.n	8007832 <_free_r+0x46>
 800783c:	6811      	ldr	r1, [r2, #0]
 800783e:	1855      	adds	r5, r2, r1
 8007840:	42a5      	cmp	r5, r4
 8007842:	d10b      	bne.n	800785c <_free_r+0x70>
 8007844:	6824      	ldr	r4, [r4, #0]
 8007846:	4421      	add	r1, r4
 8007848:	1854      	adds	r4, r2, r1
 800784a:	42a3      	cmp	r3, r4
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	d1e0      	bne.n	8007812 <_free_r+0x26>
 8007850:	681c      	ldr	r4, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	6053      	str	r3, [r2, #4]
 8007856:	4421      	add	r1, r4
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	e7da      	b.n	8007812 <_free_r+0x26>
 800785c:	d902      	bls.n	8007864 <_free_r+0x78>
 800785e:	230c      	movs	r3, #12
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	e7d6      	b.n	8007812 <_free_r+0x26>
 8007864:	6825      	ldr	r5, [r4, #0]
 8007866:	1961      	adds	r1, r4, r5
 8007868:	428b      	cmp	r3, r1
 800786a:	bf04      	itt	eq
 800786c:	6819      	ldreq	r1, [r3, #0]
 800786e:	685b      	ldreq	r3, [r3, #4]
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	bf04      	itt	eq
 8007874:	1949      	addeq	r1, r1, r5
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	6054      	str	r4, [r2, #4]
 800787a:	e7ca      	b.n	8007812 <_free_r+0x26>
 800787c:	b003      	add	sp, #12
 800787e:	bd30      	pop	{r4, r5, pc}
 8007880:	200008b4 	.word	0x200008b4

08007884 <sbrk_aligned>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4e0e      	ldr	r6, [pc, #56]	; (80078c0 <sbrk_aligned+0x3c>)
 8007888:	460c      	mov	r4, r1
 800788a:	6831      	ldr	r1, [r6, #0]
 800788c:	4605      	mov	r5, r0
 800788e:	b911      	cbnz	r1, 8007896 <sbrk_aligned+0x12>
 8007890:	f000 f88c 	bl	80079ac <_sbrk_r>
 8007894:	6030      	str	r0, [r6, #0]
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f887 	bl	80079ac <_sbrk_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	d00a      	beq.n	80078b8 <sbrk_aligned+0x34>
 80078a2:	1cc4      	adds	r4, r0, #3
 80078a4:	f024 0403 	bic.w	r4, r4, #3
 80078a8:	42a0      	cmp	r0, r4
 80078aa:	d007      	beq.n	80078bc <sbrk_aligned+0x38>
 80078ac:	1a21      	subs	r1, r4, r0
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 f87c 	bl	80079ac <_sbrk_r>
 80078b4:	3001      	adds	r0, #1
 80078b6:	d101      	bne.n	80078bc <sbrk_aligned+0x38>
 80078b8:	f04f 34ff 	mov.w	r4, #4294967295
 80078bc:	4620      	mov	r0, r4
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	200008b8 	.word	0x200008b8

080078c4 <_malloc_r>:
 80078c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	1ccd      	adds	r5, r1, #3
 80078ca:	f025 0503 	bic.w	r5, r5, #3
 80078ce:	3508      	adds	r5, #8
 80078d0:	2d0c      	cmp	r5, #12
 80078d2:	bf38      	it	cc
 80078d4:	250c      	movcc	r5, #12
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	4607      	mov	r7, r0
 80078da:	db01      	blt.n	80078e0 <_malloc_r+0x1c>
 80078dc:	42a9      	cmp	r1, r5
 80078de:	d905      	bls.n	80078ec <_malloc_r+0x28>
 80078e0:	230c      	movs	r3, #12
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	2600      	movs	r6, #0
 80078e6:	4630      	mov	r0, r6
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	4e2e      	ldr	r6, [pc, #184]	; (80079a8 <_malloc_r+0xe4>)
 80078ee:	f000 f8af 	bl	8007a50 <__malloc_lock>
 80078f2:	6833      	ldr	r3, [r6, #0]
 80078f4:	461c      	mov	r4, r3
 80078f6:	bb34      	cbnz	r4, 8007946 <_malloc_r+0x82>
 80078f8:	4629      	mov	r1, r5
 80078fa:	4638      	mov	r0, r7
 80078fc:	f7ff ffc2 	bl	8007884 <sbrk_aligned>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	4604      	mov	r4, r0
 8007904:	d14d      	bne.n	80079a2 <_malloc_r+0xde>
 8007906:	6834      	ldr	r4, [r6, #0]
 8007908:	4626      	mov	r6, r4
 800790a:	2e00      	cmp	r6, #0
 800790c:	d140      	bne.n	8007990 <_malloc_r+0xcc>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	4631      	mov	r1, r6
 8007912:	4638      	mov	r0, r7
 8007914:	eb04 0803 	add.w	r8, r4, r3
 8007918:	f000 f848 	bl	80079ac <_sbrk_r>
 800791c:	4580      	cmp	r8, r0
 800791e:	d13a      	bne.n	8007996 <_malloc_r+0xd2>
 8007920:	6821      	ldr	r1, [r4, #0]
 8007922:	3503      	adds	r5, #3
 8007924:	1a6d      	subs	r5, r5, r1
 8007926:	f025 0503 	bic.w	r5, r5, #3
 800792a:	3508      	adds	r5, #8
 800792c:	2d0c      	cmp	r5, #12
 800792e:	bf38      	it	cc
 8007930:	250c      	movcc	r5, #12
 8007932:	4629      	mov	r1, r5
 8007934:	4638      	mov	r0, r7
 8007936:	f7ff ffa5 	bl	8007884 <sbrk_aligned>
 800793a:	3001      	adds	r0, #1
 800793c:	d02b      	beq.n	8007996 <_malloc_r+0xd2>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	442b      	add	r3, r5
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	e00e      	b.n	8007964 <_malloc_r+0xa0>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	1b52      	subs	r2, r2, r5
 800794a:	d41e      	bmi.n	800798a <_malloc_r+0xc6>
 800794c:	2a0b      	cmp	r2, #11
 800794e:	d916      	bls.n	800797e <_malloc_r+0xba>
 8007950:	1961      	adds	r1, r4, r5
 8007952:	42a3      	cmp	r3, r4
 8007954:	6025      	str	r5, [r4, #0]
 8007956:	bf18      	it	ne
 8007958:	6059      	strne	r1, [r3, #4]
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	bf08      	it	eq
 800795e:	6031      	streq	r1, [r6, #0]
 8007960:	5162      	str	r2, [r4, r5]
 8007962:	604b      	str	r3, [r1, #4]
 8007964:	4638      	mov	r0, r7
 8007966:	f104 060b 	add.w	r6, r4, #11
 800796a:	f000 f877 	bl	8007a5c <__malloc_unlock>
 800796e:	f026 0607 	bic.w	r6, r6, #7
 8007972:	1d23      	adds	r3, r4, #4
 8007974:	1af2      	subs	r2, r6, r3
 8007976:	d0b6      	beq.n	80078e6 <_malloc_r+0x22>
 8007978:	1b9b      	subs	r3, r3, r6
 800797a:	50a3      	str	r3, [r4, r2]
 800797c:	e7b3      	b.n	80078e6 <_malloc_r+0x22>
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	42a3      	cmp	r3, r4
 8007982:	bf0c      	ite	eq
 8007984:	6032      	streq	r2, [r6, #0]
 8007986:	605a      	strne	r2, [r3, #4]
 8007988:	e7ec      	b.n	8007964 <_malloc_r+0xa0>
 800798a:	4623      	mov	r3, r4
 800798c:	6864      	ldr	r4, [r4, #4]
 800798e:	e7b2      	b.n	80078f6 <_malloc_r+0x32>
 8007990:	4634      	mov	r4, r6
 8007992:	6876      	ldr	r6, [r6, #4]
 8007994:	e7b9      	b.n	800790a <_malloc_r+0x46>
 8007996:	230c      	movs	r3, #12
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4638      	mov	r0, r7
 800799c:	f000 f85e 	bl	8007a5c <__malloc_unlock>
 80079a0:	e7a1      	b.n	80078e6 <_malloc_r+0x22>
 80079a2:	6025      	str	r5, [r4, #0]
 80079a4:	e7de      	b.n	8007964 <_malloc_r+0xa0>
 80079a6:	bf00      	nop
 80079a8:	200008b4 	.word	0x200008b4

080079ac <_sbrk_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	; (80079c8 <_sbrk_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7f9 fbe8 	bl	800118c <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_sbrk_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_sbrk_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	200008bc 	.word	0x200008bc

080079cc <__assert_func>:
 80079cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ce:	4614      	mov	r4, r2
 80079d0:	461a      	mov	r2, r3
 80079d2:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <__assert_func+0x2c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4605      	mov	r5, r0
 80079d8:	68d8      	ldr	r0, [r3, #12]
 80079da:	b14c      	cbz	r4, 80079f0 <__assert_func+0x24>
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <__assert_func+0x30>)
 80079de:	9100      	str	r1, [sp, #0]
 80079e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079e4:	4906      	ldr	r1, [pc, #24]	; (8007a00 <__assert_func+0x34>)
 80079e6:	462b      	mov	r3, r5
 80079e8:	f000 f80e 	bl	8007a08 <fiprintf>
 80079ec:	f000 fa64 	bl	8007eb8 <abort>
 80079f0:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <__assert_func+0x38>)
 80079f2:	461c      	mov	r4, r3
 80079f4:	e7f3      	b.n	80079de <__assert_func+0x12>
 80079f6:	bf00      	nop
 80079f8:	20000014 	.word	0x20000014
 80079fc:	08008904 	.word	0x08008904
 8007a00:	08008911 	.word	0x08008911
 8007a04:	0800893f 	.word	0x0800893f

08007a08 <fiprintf>:
 8007a08:	b40e      	push	{r1, r2, r3}
 8007a0a:	b503      	push	{r0, r1, lr}
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	ab03      	add	r3, sp, #12
 8007a10:	4805      	ldr	r0, [pc, #20]	; (8007a28 <fiprintf+0x20>)
 8007a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a16:	6800      	ldr	r0, [r0, #0]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	f000 f84f 	bl	8007abc <_vfiprintf_r>
 8007a1e:	b002      	add	sp, #8
 8007a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a24:	b003      	add	sp, #12
 8007a26:	4770      	bx	lr
 8007a28:	20000014 	.word	0x20000014

08007a2c <__ascii_mbtowc>:
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	b901      	cbnz	r1, 8007a32 <__ascii_mbtowc+0x6>
 8007a30:	a901      	add	r1, sp, #4
 8007a32:	b142      	cbz	r2, 8007a46 <__ascii_mbtowc+0x1a>
 8007a34:	b14b      	cbz	r3, 8007a4a <__ascii_mbtowc+0x1e>
 8007a36:	7813      	ldrb	r3, [r2, #0]
 8007a38:	600b      	str	r3, [r1, #0]
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	1e10      	subs	r0, r2, #0
 8007a3e:	bf18      	it	ne
 8007a40:	2001      	movne	r0, #1
 8007a42:	b002      	add	sp, #8
 8007a44:	4770      	bx	lr
 8007a46:	4610      	mov	r0, r2
 8007a48:	e7fb      	b.n	8007a42 <__ascii_mbtowc+0x16>
 8007a4a:	f06f 0001 	mvn.w	r0, #1
 8007a4e:	e7f8      	b.n	8007a42 <__ascii_mbtowc+0x16>

08007a50 <__malloc_lock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__malloc_lock+0x8>)
 8007a52:	f000 bbf1 	b.w	8008238 <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	200008c0 	.word	0x200008c0

08007a5c <__malloc_unlock>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <__malloc_unlock+0x8>)
 8007a5e:	f000 bbec 	b.w	800823a <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	200008c0 	.word	0x200008c0

08007a68 <__sfputc_r>:
 8007a68:	6893      	ldr	r3, [r2, #8]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	b410      	push	{r4}
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	da08      	bge.n	8007a86 <__sfputc_r+0x1e>
 8007a74:	6994      	ldr	r4, [r2, #24]
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	db01      	blt.n	8007a7e <__sfputc_r+0x16>
 8007a7a:	290a      	cmp	r1, #10
 8007a7c:	d103      	bne.n	8007a86 <__sfputc_r+0x1e>
 8007a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a82:	f000 b94b 	b.w	8007d1c <__swbuf_r>
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	1c58      	adds	r0, r3, #1
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	7019      	strb	r1, [r3, #0]
 8007a8e:	4608      	mov	r0, r1
 8007a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <__sfputs_r>:
 8007a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	18d5      	adds	r5, r2, r3
 8007aa0:	42ac      	cmp	r4, r5
 8007aa2:	d101      	bne.n	8007aa8 <__sfputs_r+0x12>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e007      	b.n	8007ab8 <__sfputs_r+0x22>
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	463a      	mov	r2, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ffda 	bl	8007a68 <__sfputc_r>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d1f3      	bne.n	8007aa0 <__sfputs_r+0xa>
 8007ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007abc <_vfiprintf_r>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	b09d      	sub	sp, #116	; 0x74
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4698      	mov	r8, r3
 8007ac8:	4606      	mov	r6, r0
 8007aca:	b118      	cbz	r0, 8007ad4 <_vfiprintf_r+0x18>
 8007acc:	6983      	ldr	r3, [r0, #24]
 8007ace:	b90b      	cbnz	r3, 8007ad4 <_vfiprintf_r+0x18>
 8007ad0:	f000 fb14 	bl	80080fc <__sinit>
 8007ad4:	4b89      	ldr	r3, [pc, #548]	; (8007cfc <_vfiprintf_r+0x240>)
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	d11b      	bne.n	8007b12 <_vfiprintf_r+0x56>
 8007ada:	6875      	ldr	r5, [r6, #4]
 8007adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ade:	07d9      	lsls	r1, r3, #31
 8007ae0:	d405      	bmi.n	8007aee <_vfiprintf_r+0x32>
 8007ae2:	89ab      	ldrh	r3, [r5, #12]
 8007ae4:	059a      	lsls	r2, r3, #22
 8007ae6:	d402      	bmi.n	8007aee <_vfiprintf_r+0x32>
 8007ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aea:	f000 fba5 	bl	8008238 <__retarget_lock_acquire_recursive>
 8007aee:	89ab      	ldrh	r3, [r5, #12]
 8007af0:	071b      	lsls	r3, r3, #28
 8007af2:	d501      	bpl.n	8007af8 <_vfiprintf_r+0x3c>
 8007af4:	692b      	ldr	r3, [r5, #16]
 8007af6:	b9eb      	cbnz	r3, 8007b34 <_vfiprintf_r+0x78>
 8007af8:	4629      	mov	r1, r5
 8007afa:	4630      	mov	r0, r6
 8007afc:	f000 f96e 	bl	8007ddc <__swsetup_r>
 8007b00:	b1c0      	cbz	r0, 8007b34 <_vfiprintf_r+0x78>
 8007b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b04:	07dc      	lsls	r4, r3, #31
 8007b06:	d50e      	bpl.n	8007b26 <_vfiprintf_r+0x6a>
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	b01d      	add	sp, #116	; 0x74
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	4b7b      	ldr	r3, [pc, #492]	; (8007d00 <_vfiprintf_r+0x244>)
 8007b14:	429d      	cmp	r5, r3
 8007b16:	d101      	bne.n	8007b1c <_vfiprintf_r+0x60>
 8007b18:	68b5      	ldr	r5, [r6, #8]
 8007b1a:	e7df      	b.n	8007adc <_vfiprintf_r+0x20>
 8007b1c:	4b79      	ldr	r3, [pc, #484]	; (8007d04 <_vfiprintf_r+0x248>)
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	bf08      	it	eq
 8007b22:	68f5      	ldreq	r5, [r6, #12]
 8007b24:	e7da      	b.n	8007adc <_vfiprintf_r+0x20>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	0598      	lsls	r0, r3, #22
 8007b2a:	d4ed      	bmi.n	8007b08 <_vfiprintf_r+0x4c>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f000 fb84 	bl	800823a <__retarget_lock_release_recursive>
 8007b32:	e7e9      	b.n	8007b08 <_vfiprintf_r+0x4c>
 8007b34:	2300      	movs	r3, #0
 8007b36:	9309      	str	r3, [sp, #36]	; 0x24
 8007b38:	2320      	movs	r3, #32
 8007b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b42:	2330      	movs	r3, #48	; 0x30
 8007b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d08 <_vfiprintf_r+0x24c>
 8007b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4c:	f04f 0901 	mov.w	r9, #1
 8007b50:	4623      	mov	r3, r4
 8007b52:	469a      	mov	sl, r3
 8007b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b58:	b10a      	cbz	r2, 8007b5e <_vfiprintf_r+0xa2>
 8007b5a:	2a25      	cmp	r2, #37	; 0x25
 8007b5c:	d1f9      	bne.n	8007b52 <_vfiprintf_r+0x96>
 8007b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b62:	d00b      	beq.n	8007b7c <_vfiprintf_r+0xc0>
 8007b64:	465b      	mov	r3, fp
 8007b66:	4622      	mov	r2, r4
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff ff93 	bl	8007a96 <__sfputs_r>
 8007b70:	3001      	adds	r0, #1
 8007b72:	f000 80aa 	beq.w	8007cca <_vfiprintf_r+0x20e>
 8007b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b78:	445a      	add	r2, fp
 8007b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80a2 	beq.w	8007cca <_vfiprintf_r+0x20e>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b90:	f10a 0a01 	add.w	sl, sl, #1
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	9307      	str	r3, [sp, #28]
 8007b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba6:	4858      	ldr	r0, [pc, #352]	; (8007d08 <_vfiprintf_r+0x24c>)
 8007ba8:	f7f8 fb52 	bl	8000250 <memchr>
 8007bac:	9a04      	ldr	r2, [sp, #16]
 8007bae:	b9d8      	cbnz	r0, 8007be8 <_vfiprintf_r+0x12c>
 8007bb0:	06d1      	lsls	r1, r2, #27
 8007bb2:	bf44      	itt	mi
 8007bb4:	2320      	movmi	r3, #32
 8007bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bba:	0713      	lsls	r3, r2, #28
 8007bbc:	bf44      	itt	mi
 8007bbe:	232b      	movmi	r3, #43	; 0x2b
 8007bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bca:	d015      	beq.n	8007bf8 <_vfiprintf_r+0x13c>
 8007bcc:	9a07      	ldr	r2, [sp, #28]
 8007bce:	4654      	mov	r4, sl
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f04f 0c0a 	mov.w	ip, #10
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bdc:	3b30      	subs	r3, #48	; 0x30
 8007bde:	2b09      	cmp	r3, #9
 8007be0:	d94e      	bls.n	8007c80 <_vfiprintf_r+0x1c4>
 8007be2:	b1b0      	cbz	r0, 8007c12 <_vfiprintf_r+0x156>
 8007be4:	9207      	str	r2, [sp, #28]
 8007be6:	e014      	b.n	8007c12 <_vfiprintf_r+0x156>
 8007be8:	eba0 0308 	sub.w	r3, r0, r8
 8007bec:	fa09 f303 	lsl.w	r3, r9, r3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	46a2      	mov	sl, r4
 8007bf6:	e7d2      	b.n	8007b9e <_vfiprintf_r+0xe2>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	1d19      	adds	r1, r3, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	9103      	str	r1, [sp, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bfbb      	ittet	lt
 8007c04:	425b      	neglt	r3, r3
 8007c06:	f042 0202 	orrlt.w	r2, r2, #2
 8007c0a:	9307      	strge	r3, [sp, #28]
 8007c0c:	9307      	strlt	r3, [sp, #28]
 8007c0e:	bfb8      	it	lt
 8007c10:	9204      	strlt	r2, [sp, #16]
 8007c12:	7823      	ldrb	r3, [r4, #0]
 8007c14:	2b2e      	cmp	r3, #46	; 0x2e
 8007c16:	d10c      	bne.n	8007c32 <_vfiprintf_r+0x176>
 8007c18:	7863      	ldrb	r3, [r4, #1]
 8007c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1c:	d135      	bne.n	8007c8a <_vfiprintf_r+0x1ce>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	9203      	str	r2, [sp, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfb8      	it	lt
 8007c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2e:	3402      	adds	r4, #2
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d18 <_vfiprintf_r+0x25c>
 8007c36:	7821      	ldrb	r1, [r4, #0]
 8007c38:	2203      	movs	r2, #3
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	f7f8 fb08 	bl	8000250 <memchr>
 8007c40:	b140      	cbz	r0, 8007c54 <_vfiprintf_r+0x198>
 8007c42:	2340      	movs	r3, #64	; 0x40
 8007c44:	eba0 000a 	sub.w	r0, r0, sl
 8007c48:	fa03 f000 	lsl.w	r0, r3, r0
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	4303      	orrs	r3, r0
 8007c50:	3401      	adds	r4, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c58:	482c      	ldr	r0, [pc, #176]	; (8007d0c <_vfiprintf_r+0x250>)
 8007c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5e:	2206      	movs	r2, #6
 8007c60:	f7f8 faf6 	bl	8000250 <memchr>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d03f      	beq.n	8007ce8 <_vfiprintf_r+0x22c>
 8007c68:	4b29      	ldr	r3, [pc, #164]	; (8007d10 <_vfiprintf_r+0x254>)
 8007c6a:	bb1b      	cbnz	r3, 8007cb4 <_vfiprintf_r+0x1f8>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	3307      	adds	r3, #7
 8007c70:	f023 0307 	bic.w	r3, r3, #7
 8007c74:	3308      	adds	r3, #8
 8007c76:	9303      	str	r3, [sp, #12]
 8007c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7a:	443b      	add	r3, r7
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7e:	e767      	b.n	8007b50 <_vfiprintf_r+0x94>
 8007c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c84:	460c      	mov	r4, r1
 8007c86:	2001      	movs	r0, #1
 8007c88:	e7a5      	b.n	8007bd6 <_vfiprintf_r+0x11a>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	3401      	adds	r4, #1
 8007c8e:	9305      	str	r3, [sp, #20]
 8007c90:	4619      	mov	r1, r3
 8007c92:	f04f 0c0a 	mov.w	ip, #10
 8007c96:	4620      	mov	r0, r4
 8007c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c9c:	3a30      	subs	r2, #48	; 0x30
 8007c9e:	2a09      	cmp	r2, #9
 8007ca0:	d903      	bls.n	8007caa <_vfiprintf_r+0x1ee>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0c5      	beq.n	8007c32 <_vfiprintf_r+0x176>
 8007ca6:	9105      	str	r1, [sp, #20]
 8007ca8:	e7c3      	b.n	8007c32 <_vfiprintf_r+0x176>
 8007caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cae:	4604      	mov	r4, r0
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e7f0      	b.n	8007c96 <_vfiprintf_r+0x1da>
 8007cb4:	ab03      	add	r3, sp, #12
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <_vfiprintf_r+0x258>)
 8007cbc:	a904      	add	r1, sp, #16
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fe f832 	bl	8005d28 <_printf_float>
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	1c78      	adds	r0, r7, #1
 8007cc8:	d1d6      	bne.n	8007c78 <_vfiprintf_r+0x1bc>
 8007cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ccc:	07d9      	lsls	r1, r3, #31
 8007cce:	d405      	bmi.n	8007cdc <_vfiprintf_r+0x220>
 8007cd0:	89ab      	ldrh	r3, [r5, #12]
 8007cd2:	059a      	lsls	r2, r3, #22
 8007cd4:	d402      	bmi.n	8007cdc <_vfiprintf_r+0x220>
 8007cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd8:	f000 faaf 	bl	800823a <__retarget_lock_release_recursive>
 8007cdc:	89ab      	ldrh	r3, [r5, #12]
 8007cde:	065b      	lsls	r3, r3, #25
 8007ce0:	f53f af12 	bmi.w	8007b08 <_vfiprintf_r+0x4c>
 8007ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce6:	e711      	b.n	8007b0c <_vfiprintf_r+0x50>
 8007ce8:	ab03      	add	r3, sp, #12
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	462a      	mov	r2, r5
 8007cee:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <_vfiprintf_r+0x258>)
 8007cf0:	a904      	add	r1, sp, #16
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7fe faa4 	bl	8006240 <_printf_i>
 8007cf8:	e7e4      	b.n	8007cc4 <_vfiprintf_r+0x208>
 8007cfa:	bf00      	nop
 8007cfc:	08008a7c 	.word	0x08008a7c
 8007d00:	08008a9c 	.word	0x08008a9c
 8007d04:	08008a5c 	.word	0x08008a5c
 8007d08:	0800894a 	.word	0x0800894a
 8007d0c:	08008954 	.word	0x08008954
 8007d10:	08005d29 	.word	0x08005d29
 8007d14:	08007a97 	.word	0x08007a97
 8007d18:	08008950 	.word	0x08008950

08007d1c <__swbuf_r>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	460e      	mov	r6, r1
 8007d20:	4614      	mov	r4, r2
 8007d22:	4605      	mov	r5, r0
 8007d24:	b118      	cbz	r0, 8007d2e <__swbuf_r+0x12>
 8007d26:	6983      	ldr	r3, [r0, #24]
 8007d28:	b90b      	cbnz	r3, 8007d2e <__swbuf_r+0x12>
 8007d2a:	f000 f9e7 	bl	80080fc <__sinit>
 8007d2e:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <__swbuf_r+0x98>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d12b      	bne.n	8007d8c <__swbuf_r+0x70>
 8007d34:	686c      	ldr	r4, [r5, #4]
 8007d36:	69a3      	ldr	r3, [r4, #24]
 8007d38:	60a3      	str	r3, [r4, #8]
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	071a      	lsls	r2, r3, #28
 8007d3e:	d52f      	bpl.n	8007da0 <__swbuf_r+0x84>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	b36b      	cbz	r3, 8007da0 <__swbuf_r+0x84>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	1ac0      	subs	r0, r0, r3
 8007d4a:	6963      	ldr	r3, [r4, #20]
 8007d4c:	b2f6      	uxtb	r6, r6
 8007d4e:	4283      	cmp	r3, r0
 8007d50:	4637      	mov	r7, r6
 8007d52:	dc04      	bgt.n	8007d5e <__swbuf_r+0x42>
 8007d54:	4621      	mov	r1, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 f93c 	bl	8007fd4 <_fflush_r>
 8007d5c:	bb30      	cbnz	r0, 8007dac <__swbuf_r+0x90>
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	60a3      	str	r3, [r4, #8]
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	6022      	str	r2, [r4, #0]
 8007d6a:	701e      	strb	r6, [r3, #0]
 8007d6c:	6963      	ldr	r3, [r4, #20]
 8007d6e:	3001      	adds	r0, #1
 8007d70:	4283      	cmp	r3, r0
 8007d72:	d004      	beq.n	8007d7e <__swbuf_r+0x62>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	07db      	lsls	r3, r3, #31
 8007d78:	d506      	bpl.n	8007d88 <__swbuf_r+0x6c>
 8007d7a:	2e0a      	cmp	r6, #10
 8007d7c:	d104      	bne.n	8007d88 <__swbuf_r+0x6c>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 f927 	bl	8007fd4 <_fflush_r>
 8007d86:	b988      	cbnz	r0, 8007dac <__swbuf_r+0x90>
 8007d88:	4638      	mov	r0, r7
 8007d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <__swbuf_r+0x9c>)
 8007d8e:	429c      	cmp	r4, r3
 8007d90:	d101      	bne.n	8007d96 <__swbuf_r+0x7a>
 8007d92:	68ac      	ldr	r4, [r5, #8]
 8007d94:	e7cf      	b.n	8007d36 <__swbuf_r+0x1a>
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <__swbuf_r+0xa0>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	bf08      	it	eq
 8007d9c:	68ec      	ldreq	r4, [r5, #12]
 8007d9e:	e7ca      	b.n	8007d36 <__swbuf_r+0x1a>
 8007da0:	4621      	mov	r1, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 f81a 	bl	8007ddc <__swsetup_r>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d0cb      	beq.n	8007d44 <__swbuf_r+0x28>
 8007dac:	f04f 37ff 	mov.w	r7, #4294967295
 8007db0:	e7ea      	b.n	8007d88 <__swbuf_r+0x6c>
 8007db2:	bf00      	nop
 8007db4:	08008a7c 	.word	0x08008a7c
 8007db8:	08008a9c 	.word	0x08008a9c
 8007dbc:	08008a5c 	.word	0x08008a5c

08007dc0 <__ascii_wctomb>:
 8007dc0:	b149      	cbz	r1, 8007dd6 <__ascii_wctomb+0x16>
 8007dc2:	2aff      	cmp	r2, #255	; 0xff
 8007dc4:	bf85      	ittet	hi
 8007dc6:	238a      	movhi	r3, #138	; 0x8a
 8007dc8:	6003      	strhi	r3, [r0, #0]
 8007dca:	700a      	strbls	r2, [r1, #0]
 8007dcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dd0:	bf98      	it	ls
 8007dd2:	2001      	movls	r0, #1
 8007dd4:	4770      	bx	lr
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	4770      	bx	lr
	...

08007ddc <__swsetup_r>:
 8007ddc:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <__swsetup_r+0xcc>)
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	681d      	ldr	r5, [r3, #0]
 8007de2:	4606      	mov	r6, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	b125      	cbz	r5, 8007df2 <__swsetup_r+0x16>
 8007de8:	69ab      	ldr	r3, [r5, #24]
 8007dea:	b913      	cbnz	r3, 8007df2 <__swsetup_r+0x16>
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f985 	bl	80080fc <__sinit>
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <__swsetup_r+0xd0>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d10f      	bne.n	8007e18 <__swsetup_r+0x3c>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e00:	0719      	lsls	r1, r3, #28
 8007e02:	d42c      	bmi.n	8007e5e <__swsetup_r+0x82>
 8007e04:	06dd      	lsls	r5, r3, #27
 8007e06:	d411      	bmi.n	8007e2c <__swsetup_r+0x50>
 8007e08:	2309      	movs	r3, #9
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	e03e      	b.n	8007e96 <__swsetup_r+0xba>
 8007e18:	4b25      	ldr	r3, [pc, #148]	; (8007eb0 <__swsetup_r+0xd4>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d101      	bne.n	8007e22 <__swsetup_r+0x46>
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	e7eb      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <__swsetup_r+0xd8>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	bf08      	it	eq
 8007e28:	68ec      	ldreq	r4, [r5, #12]
 8007e2a:	e7e6      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e2c:	0758      	lsls	r0, r3, #29
 8007e2e:	d512      	bpl.n	8007e56 <__swsetup_r+0x7a>
 8007e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e32:	b141      	cbz	r1, 8007e46 <__swsetup_r+0x6a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__swsetup_r+0x66>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7ff fcd5 	bl	80077ec <_free_r>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6363      	str	r3, [r4, #52]	; 0x34
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0308 	orr.w	r3, r3, #8
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	b94b      	cbnz	r3, 8007e76 <__swsetup_r+0x9a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d003      	beq.n	8007e76 <__swsetup_r+0x9a>
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 fa09 	bl	8008288 <__smakebuf_r>
 8007e76:	89a0      	ldrh	r0, [r4, #12]
 8007e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e7c:	f010 0301 	ands.w	r3, r0, #1
 8007e80:	d00a      	beq.n	8007e98 <__swsetup_r+0xbc>
 8007e82:	2300      	movs	r3, #0
 8007e84:	60a3      	str	r3, [r4, #8]
 8007e86:	6963      	ldr	r3, [r4, #20]
 8007e88:	425b      	negs	r3, r3
 8007e8a:	61a3      	str	r3, [r4, #24]
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	b943      	cbnz	r3, 8007ea2 <__swsetup_r+0xc6>
 8007e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e94:	d1ba      	bne.n	8007e0c <__swsetup_r+0x30>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	0781      	lsls	r1, r0, #30
 8007e9a:	bf58      	it	pl
 8007e9c:	6963      	ldrpl	r3, [r4, #20]
 8007e9e:	60a3      	str	r3, [r4, #8]
 8007ea0:	e7f4      	b.n	8007e8c <__swsetup_r+0xb0>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7f7      	b.n	8007e96 <__swsetup_r+0xba>
 8007ea6:	bf00      	nop
 8007ea8:	20000014 	.word	0x20000014
 8007eac:	08008a7c 	.word	0x08008a7c
 8007eb0:	08008a9c 	.word	0x08008a9c
 8007eb4:	08008a5c 	.word	0x08008a5c

08007eb8 <abort>:
 8007eb8:	b508      	push	{r3, lr}
 8007eba:	2006      	movs	r0, #6
 8007ebc:	f000 fa4c 	bl	8008358 <raise>
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	f7f9 f8eb 	bl	800109c <_exit>
	...

08007ec8 <__sflush_r>:
 8007ec8:	898a      	ldrh	r2, [r1, #12]
 8007eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	4605      	mov	r5, r0
 8007ed0:	0710      	lsls	r0, r2, #28
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	d458      	bmi.n	8007f88 <__sflush_r+0xc0>
 8007ed6:	684b      	ldr	r3, [r1, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc05      	bgt.n	8007ee8 <__sflush_r+0x20>
 8007edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dc02      	bgt.n	8007ee8 <__sflush_r+0x20>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	d0f9      	beq.n	8007ee2 <__sflush_r+0x1a>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ef4:	682f      	ldr	r7, [r5, #0]
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	d032      	beq.n	8007f60 <__sflush_r+0x98>
 8007efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	075a      	lsls	r2, r3, #29
 8007f00:	d505      	bpl.n	8007f0e <__sflush_r+0x46>
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	1ac0      	subs	r0, r0, r3
 8007f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f08:	b10b      	cbz	r3, 8007f0e <__sflush_r+0x46>
 8007f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f0c:	1ac0      	subs	r0, r0, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4602      	mov	r2, r0
 8007f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f14:	6a21      	ldr	r1, [r4, #32]
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b0      	blx	r6
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	d106      	bne.n	8007f2e <__sflush_r+0x66>
 8007f20:	6829      	ldr	r1, [r5, #0]
 8007f22:	291d      	cmp	r1, #29
 8007f24:	d82c      	bhi.n	8007f80 <__sflush_r+0xb8>
 8007f26:	4a2a      	ldr	r2, [pc, #168]	; (8007fd0 <__sflush_r+0x108>)
 8007f28:	40ca      	lsrs	r2, r1
 8007f2a:	07d6      	lsls	r6, r2, #31
 8007f2c:	d528      	bpl.n	8007f80 <__sflush_r+0xb8>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6062      	str	r2, [r4, #4]
 8007f32:	04d9      	lsls	r1, r3, #19
 8007f34:	6922      	ldr	r2, [r4, #16]
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	d504      	bpl.n	8007f44 <__sflush_r+0x7c>
 8007f3a:	1c42      	adds	r2, r0, #1
 8007f3c:	d101      	bne.n	8007f42 <__sflush_r+0x7a>
 8007f3e:	682b      	ldr	r3, [r5, #0]
 8007f40:	b903      	cbnz	r3, 8007f44 <__sflush_r+0x7c>
 8007f42:	6560      	str	r0, [r4, #84]	; 0x54
 8007f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f46:	602f      	str	r7, [r5, #0]
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	d0ca      	beq.n	8007ee2 <__sflush_r+0x1a>
 8007f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f50:	4299      	cmp	r1, r3
 8007f52:	d002      	beq.n	8007f5a <__sflush_r+0x92>
 8007f54:	4628      	mov	r0, r5
 8007f56:	f7ff fc49 	bl	80077ec <_free_r>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f5e:	e7c1      	b.n	8007ee4 <__sflush_r+0x1c>
 8007f60:	6a21      	ldr	r1, [r4, #32]
 8007f62:	2301      	movs	r3, #1
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b0      	blx	r6
 8007f68:	1c41      	adds	r1, r0, #1
 8007f6a:	d1c7      	bne.n	8007efc <__sflush_r+0x34>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0c4      	beq.n	8007efc <__sflush_r+0x34>
 8007f72:	2b1d      	cmp	r3, #29
 8007f74:	d001      	beq.n	8007f7a <__sflush_r+0xb2>
 8007f76:	2b16      	cmp	r3, #22
 8007f78:	d101      	bne.n	8007f7e <__sflush_r+0xb6>
 8007f7a:	602f      	str	r7, [r5, #0]
 8007f7c:	e7b1      	b.n	8007ee2 <__sflush_r+0x1a>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7ad      	b.n	8007ee4 <__sflush_r+0x1c>
 8007f88:	690f      	ldr	r7, [r1, #16]
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	d0a9      	beq.n	8007ee2 <__sflush_r+0x1a>
 8007f8e:	0793      	lsls	r3, r2, #30
 8007f90:	680e      	ldr	r6, [r1, #0]
 8007f92:	bf08      	it	eq
 8007f94:	694b      	ldreq	r3, [r1, #20]
 8007f96:	600f      	str	r7, [r1, #0]
 8007f98:	bf18      	it	ne
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	eba6 0807 	sub.w	r8, r6, r7
 8007fa0:	608b      	str	r3, [r1, #8]
 8007fa2:	f1b8 0f00 	cmp.w	r8, #0
 8007fa6:	dd9c      	ble.n	8007ee2 <__sflush_r+0x1a>
 8007fa8:	6a21      	ldr	r1, [r4, #32]
 8007faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fac:	4643      	mov	r3, r8
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b0      	blx	r6
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	dc06      	bgt.n	8007fc6 <__sflush_r+0xfe>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	e78e      	b.n	8007ee4 <__sflush_r+0x1c>
 8007fc6:	4407      	add	r7, r0
 8007fc8:	eba8 0800 	sub.w	r8, r8, r0
 8007fcc:	e7e9      	b.n	8007fa2 <__sflush_r+0xda>
 8007fce:	bf00      	nop
 8007fd0:	20400001 	.word	0x20400001

08007fd4 <_fflush_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	690b      	ldr	r3, [r1, #16]
 8007fd8:	4605      	mov	r5, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	b913      	cbnz	r3, 8007fe4 <_fflush_r+0x10>
 8007fde:	2500      	movs	r5, #0
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	b118      	cbz	r0, 8007fee <_fflush_r+0x1a>
 8007fe6:	6983      	ldr	r3, [r0, #24]
 8007fe8:	b90b      	cbnz	r3, 8007fee <_fflush_r+0x1a>
 8007fea:	f000 f887 	bl	80080fc <__sinit>
 8007fee:	4b14      	ldr	r3, [pc, #80]	; (8008040 <_fflush_r+0x6c>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d11b      	bne.n	800802c <_fflush_r+0x58>
 8007ff4:	686c      	ldr	r4, [r5, #4]
 8007ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0ef      	beq.n	8007fde <_fflush_r+0xa>
 8007ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008000:	07d0      	lsls	r0, r2, #31
 8008002:	d404      	bmi.n	800800e <_fflush_r+0x3a>
 8008004:	0599      	lsls	r1, r3, #22
 8008006:	d402      	bmi.n	800800e <_fflush_r+0x3a>
 8008008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800a:	f000 f915 	bl	8008238 <__retarget_lock_acquire_recursive>
 800800e:	4628      	mov	r0, r5
 8008010:	4621      	mov	r1, r4
 8008012:	f7ff ff59 	bl	8007ec8 <__sflush_r>
 8008016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008018:	07da      	lsls	r2, r3, #31
 800801a:	4605      	mov	r5, r0
 800801c:	d4e0      	bmi.n	8007fe0 <_fflush_r+0xc>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	059b      	lsls	r3, r3, #22
 8008022:	d4dd      	bmi.n	8007fe0 <_fflush_r+0xc>
 8008024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008026:	f000 f908 	bl	800823a <__retarget_lock_release_recursive>
 800802a:	e7d9      	b.n	8007fe0 <_fflush_r+0xc>
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_fflush_r+0x70>)
 800802e:	429c      	cmp	r4, r3
 8008030:	d101      	bne.n	8008036 <_fflush_r+0x62>
 8008032:	68ac      	ldr	r4, [r5, #8]
 8008034:	e7df      	b.n	8007ff6 <_fflush_r+0x22>
 8008036:	4b04      	ldr	r3, [pc, #16]	; (8008048 <_fflush_r+0x74>)
 8008038:	429c      	cmp	r4, r3
 800803a:	bf08      	it	eq
 800803c:	68ec      	ldreq	r4, [r5, #12]
 800803e:	e7da      	b.n	8007ff6 <_fflush_r+0x22>
 8008040:	08008a7c 	.word	0x08008a7c
 8008044:	08008a9c 	.word	0x08008a9c
 8008048:	08008a5c 	.word	0x08008a5c

0800804c <std>:
 800804c:	2300      	movs	r3, #0
 800804e:	b510      	push	{r4, lr}
 8008050:	4604      	mov	r4, r0
 8008052:	e9c0 3300 	strd	r3, r3, [r0]
 8008056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800805a:	6083      	str	r3, [r0, #8]
 800805c:	8181      	strh	r1, [r0, #12]
 800805e:	6643      	str	r3, [r0, #100]	; 0x64
 8008060:	81c2      	strh	r2, [r0, #14]
 8008062:	6183      	str	r3, [r0, #24]
 8008064:	4619      	mov	r1, r3
 8008066:	2208      	movs	r2, #8
 8008068:	305c      	adds	r0, #92	; 0x5c
 800806a:	f7fd fdc5 	bl	8005bf8 <memset>
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <std+0x38>)
 8008070:	6263      	str	r3, [r4, #36]	; 0x24
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <std+0x3c>)
 8008074:	62a3      	str	r3, [r4, #40]	; 0x28
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <std+0x40>)
 8008078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <std+0x44>)
 800807c:	6224      	str	r4, [r4, #32]
 800807e:	6323      	str	r3, [r4, #48]	; 0x30
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	08008391 	.word	0x08008391
 8008088:	080083b3 	.word	0x080083b3
 800808c:	080083eb 	.word	0x080083eb
 8008090:	0800840f 	.word	0x0800840f

08008094 <_cleanup_r>:
 8008094:	4901      	ldr	r1, [pc, #4]	; (800809c <_cleanup_r+0x8>)
 8008096:	f000 b8af 	b.w	80081f8 <_fwalk_reent>
 800809a:	bf00      	nop
 800809c:	08007fd5 	.word	0x08007fd5

080080a0 <__sfmoreglue>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	2268      	movs	r2, #104	; 0x68
 80080a4:	1e4d      	subs	r5, r1, #1
 80080a6:	4355      	muls	r5, r2
 80080a8:	460e      	mov	r6, r1
 80080aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080ae:	f7ff fc09 	bl	80078c4 <_malloc_r>
 80080b2:	4604      	mov	r4, r0
 80080b4:	b140      	cbz	r0, 80080c8 <__sfmoreglue+0x28>
 80080b6:	2100      	movs	r1, #0
 80080b8:	e9c0 1600 	strd	r1, r6, [r0]
 80080bc:	300c      	adds	r0, #12
 80080be:	60a0      	str	r0, [r4, #8]
 80080c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080c4:	f7fd fd98 	bl	8005bf8 <memset>
 80080c8:	4620      	mov	r0, r4
 80080ca:	bd70      	pop	{r4, r5, r6, pc}

080080cc <__sfp_lock_acquire>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__sfp_lock_acquire+0x8>)
 80080ce:	f000 b8b3 	b.w	8008238 <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	200008c1 	.word	0x200008c1

080080d8 <__sfp_lock_release>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__sfp_lock_release+0x8>)
 80080da:	f000 b8ae 	b.w	800823a <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	200008c1 	.word	0x200008c1

080080e4 <__sinit_lock_acquire>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__sinit_lock_acquire+0x8>)
 80080e6:	f000 b8a7 	b.w	8008238 <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	200008c2 	.word	0x200008c2

080080f0 <__sinit_lock_release>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__sinit_lock_release+0x8>)
 80080f2:	f000 b8a2 	b.w	800823a <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	200008c2 	.word	0x200008c2

080080fc <__sinit>:
 80080fc:	b510      	push	{r4, lr}
 80080fe:	4604      	mov	r4, r0
 8008100:	f7ff fff0 	bl	80080e4 <__sinit_lock_acquire>
 8008104:	69a3      	ldr	r3, [r4, #24]
 8008106:	b11b      	cbz	r3, 8008110 <__sinit+0x14>
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f7ff bff0 	b.w	80080f0 <__sinit_lock_release>
 8008110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008114:	6523      	str	r3, [r4, #80]	; 0x50
 8008116:	4b13      	ldr	r3, [pc, #76]	; (8008164 <__sinit+0x68>)
 8008118:	4a13      	ldr	r2, [pc, #76]	; (8008168 <__sinit+0x6c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	62a2      	str	r2, [r4, #40]	; 0x28
 800811e:	42a3      	cmp	r3, r4
 8008120:	bf04      	itt	eq
 8008122:	2301      	moveq	r3, #1
 8008124:	61a3      	streq	r3, [r4, #24]
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f820 	bl	800816c <__sfp>
 800812c:	6060      	str	r0, [r4, #4]
 800812e:	4620      	mov	r0, r4
 8008130:	f000 f81c 	bl	800816c <__sfp>
 8008134:	60a0      	str	r0, [r4, #8]
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f818 	bl	800816c <__sfp>
 800813c:	2200      	movs	r2, #0
 800813e:	60e0      	str	r0, [r4, #12]
 8008140:	2104      	movs	r1, #4
 8008142:	6860      	ldr	r0, [r4, #4]
 8008144:	f7ff ff82 	bl	800804c <std>
 8008148:	68a0      	ldr	r0, [r4, #8]
 800814a:	2201      	movs	r2, #1
 800814c:	2109      	movs	r1, #9
 800814e:	f7ff ff7d 	bl	800804c <std>
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	2202      	movs	r2, #2
 8008156:	2112      	movs	r1, #18
 8008158:	f7ff ff78 	bl	800804c <std>
 800815c:	2301      	movs	r3, #1
 800815e:	61a3      	str	r3, [r4, #24]
 8008160:	e7d2      	b.n	8008108 <__sinit+0xc>
 8008162:	bf00      	nop
 8008164:	080086e0 	.word	0x080086e0
 8008168:	08008095 	.word	0x08008095

0800816c <__sfp>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	4607      	mov	r7, r0
 8008170:	f7ff ffac 	bl	80080cc <__sfp_lock_acquire>
 8008174:	4b1e      	ldr	r3, [pc, #120]	; (80081f0 <__sfp+0x84>)
 8008176:	681e      	ldr	r6, [r3, #0]
 8008178:	69b3      	ldr	r3, [r6, #24]
 800817a:	b913      	cbnz	r3, 8008182 <__sfp+0x16>
 800817c:	4630      	mov	r0, r6
 800817e:	f7ff ffbd 	bl	80080fc <__sinit>
 8008182:	3648      	adds	r6, #72	; 0x48
 8008184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008188:	3b01      	subs	r3, #1
 800818a:	d503      	bpl.n	8008194 <__sfp+0x28>
 800818c:	6833      	ldr	r3, [r6, #0]
 800818e:	b30b      	cbz	r3, 80081d4 <__sfp+0x68>
 8008190:	6836      	ldr	r6, [r6, #0]
 8008192:	e7f7      	b.n	8008184 <__sfp+0x18>
 8008194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008198:	b9d5      	cbnz	r5, 80081d0 <__sfp+0x64>
 800819a:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <__sfp+0x88>)
 800819c:	60e3      	str	r3, [r4, #12]
 800819e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081a2:	6665      	str	r5, [r4, #100]	; 0x64
 80081a4:	f000 f847 	bl	8008236 <__retarget_lock_init_recursive>
 80081a8:	f7ff ff96 	bl	80080d8 <__sfp_lock_release>
 80081ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081b4:	6025      	str	r5, [r4, #0]
 80081b6:	61a5      	str	r5, [r4, #24]
 80081b8:	2208      	movs	r2, #8
 80081ba:	4629      	mov	r1, r5
 80081bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081c0:	f7fd fd1a 	bl	8005bf8 <memset>
 80081c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081cc:	4620      	mov	r0, r4
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d0:	3468      	adds	r4, #104	; 0x68
 80081d2:	e7d9      	b.n	8008188 <__sfp+0x1c>
 80081d4:	2104      	movs	r1, #4
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ff62 	bl	80080a0 <__sfmoreglue>
 80081dc:	4604      	mov	r4, r0
 80081de:	6030      	str	r0, [r6, #0]
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d1d5      	bne.n	8008190 <__sfp+0x24>
 80081e4:	f7ff ff78 	bl	80080d8 <__sfp_lock_release>
 80081e8:	230c      	movs	r3, #12
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	e7ee      	b.n	80081cc <__sfp+0x60>
 80081ee:	bf00      	nop
 80081f0:	080086e0 	.word	0x080086e0
 80081f4:	ffff0001 	.word	0xffff0001

080081f8 <_fwalk_reent>:
 80081f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081fc:	4606      	mov	r6, r0
 80081fe:	4688      	mov	r8, r1
 8008200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008204:	2700      	movs	r7, #0
 8008206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800820a:	f1b9 0901 	subs.w	r9, r9, #1
 800820e:	d505      	bpl.n	800821c <_fwalk_reent+0x24>
 8008210:	6824      	ldr	r4, [r4, #0]
 8008212:	2c00      	cmp	r4, #0
 8008214:	d1f7      	bne.n	8008206 <_fwalk_reent+0xe>
 8008216:	4638      	mov	r0, r7
 8008218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800821c:	89ab      	ldrh	r3, [r5, #12]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d907      	bls.n	8008232 <_fwalk_reent+0x3a>
 8008222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008226:	3301      	adds	r3, #1
 8008228:	d003      	beq.n	8008232 <_fwalk_reent+0x3a>
 800822a:	4629      	mov	r1, r5
 800822c:	4630      	mov	r0, r6
 800822e:	47c0      	blx	r8
 8008230:	4307      	orrs	r7, r0
 8008232:	3568      	adds	r5, #104	; 0x68
 8008234:	e7e9      	b.n	800820a <_fwalk_reent+0x12>

08008236 <__retarget_lock_init_recursive>:
 8008236:	4770      	bx	lr

08008238 <__retarget_lock_acquire_recursive>:
 8008238:	4770      	bx	lr

0800823a <__retarget_lock_release_recursive>:
 800823a:	4770      	bx	lr

0800823c <__swhatbuf_r>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	460e      	mov	r6, r1
 8008240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008244:	2900      	cmp	r1, #0
 8008246:	b096      	sub	sp, #88	; 0x58
 8008248:	4614      	mov	r4, r2
 800824a:	461d      	mov	r5, r3
 800824c:	da08      	bge.n	8008260 <__swhatbuf_r+0x24>
 800824e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	602a      	str	r2, [r5, #0]
 8008256:	061a      	lsls	r2, r3, #24
 8008258:	d410      	bmi.n	800827c <__swhatbuf_r+0x40>
 800825a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825e:	e00e      	b.n	800827e <__swhatbuf_r+0x42>
 8008260:	466a      	mov	r2, sp
 8008262:	f000 f8fb 	bl	800845c <_fstat_r>
 8008266:	2800      	cmp	r0, #0
 8008268:	dbf1      	blt.n	800824e <__swhatbuf_r+0x12>
 800826a:	9a01      	ldr	r2, [sp, #4]
 800826c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008274:	425a      	negs	r2, r3
 8008276:	415a      	adcs	r2, r3
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	e7ee      	b.n	800825a <__swhatbuf_r+0x1e>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	2000      	movs	r0, #0
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	b016      	add	sp, #88	; 0x58
 8008284:	bd70      	pop	{r4, r5, r6, pc}
	...

08008288 <__smakebuf_r>:
 8008288:	898b      	ldrh	r3, [r1, #12]
 800828a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800828c:	079d      	lsls	r5, r3, #30
 800828e:	4606      	mov	r6, r0
 8008290:	460c      	mov	r4, r1
 8008292:	d507      	bpl.n	80082a4 <__smakebuf_r+0x1c>
 8008294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	6123      	str	r3, [r4, #16]
 800829c:	2301      	movs	r3, #1
 800829e:	6163      	str	r3, [r4, #20]
 80082a0:	b002      	add	sp, #8
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	ab01      	add	r3, sp, #4
 80082a6:	466a      	mov	r2, sp
 80082a8:	f7ff ffc8 	bl	800823c <__swhatbuf_r>
 80082ac:	9900      	ldr	r1, [sp, #0]
 80082ae:	4605      	mov	r5, r0
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff fb07 	bl	80078c4 <_malloc_r>
 80082b6:	b948      	cbnz	r0, 80082cc <__smakebuf_r+0x44>
 80082b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082bc:	059a      	lsls	r2, r3, #22
 80082be:	d4ef      	bmi.n	80082a0 <__smakebuf_r+0x18>
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	f043 0302 	orr.w	r3, r3, #2
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	e7e3      	b.n	8008294 <__smakebuf_r+0xc>
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <__smakebuf_r+0x7c>)
 80082ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	6020      	str	r0, [r4, #0]
 80082d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	6163      	str	r3, [r4, #20]
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	6120      	str	r0, [r4, #16]
 80082e2:	b15b      	cbz	r3, 80082fc <__smakebuf_r+0x74>
 80082e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 f8c9 	bl	8008480 <_isatty_r>
 80082ee:	b128      	cbz	r0, 80082fc <__smakebuf_r+0x74>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f023 0303 	bic.w	r3, r3, #3
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	89a0      	ldrh	r0, [r4, #12]
 80082fe:	4305      	orrs	r5, r0
 8008300:	81a5      	strh	r5, [r4, #12]
 8008302:	e7cd      	b.n	80082a0 <__smakebuf_r+0x18>
 8008304:	08008095 	.word	0x08008095

08008308 <_raise_r>:
 8008308:	291f      	cmp	r1, #31
 800830a:	b538      	push	{r3, r4, r5, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	d904      	bls.n	800831c <_raise_r+0x14>
 8008312:	2316      	movs	r3, #22
 8008314:	6003      	str	r3, [r0, #0]
 8008316:	f04f 30ff 	mov.w	r0, #4294967295
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800831e:	b112      	cbz	r2, 8008326 <_raise_r+0x1e>
 8008320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008324:	b94b      	cbnz	r3, 800833a <_raise_r+0x32>
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f830 	bl	800838c <_getpid_r>
 800832c:	462a      	mov	r2, r5
 800832e:	4601      	mov	r1, r0
 8008330:	4620      	mov	r0, r4
 8008332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008336:	f000 b817 	b.w	8008368 <_kill_r>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d00a      	beq.n	8008354 <_raise_r+0x4c>
 800833e:	1c59      	adds	r1, r3, #1
 8008340:	d103      	bne.n	800834a <_raise_r+0x42>
 8008342:	2316      	movs	r3, #22
 8008344:	6003      	str	r3, [r0, #0]
 8008346:	2001      	movs	r0, #1
 8008348:	e7e7      	b.n	800831a <_raise_r+0x12>
 800834a:	2400      	movs	r4, #0
 800834c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008350:	4628      	mov	r0, r5
 8008352:	4798      	blx	r3
 8008354:	2000      	movs	r0, #0
 8008356:	e7e0      	b.n	800831a <_raise_r+0x12>

08008358 <raise>:
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <raise+0xc>)
 800835a:	4601      	mov	r1, r0
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	f7ff bfd3 	b.w	8008308 <_raise_r>
 8008362:	bf00      	nop
 8008364:	20000014 	.word	0x20000014

08008368 <_kill_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d07      	ldr	r5, [pc, #28]	; (8008388 <_kill_r+0x20>)
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	f7f8 fe81 	bl	800107c <_kill>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d102      	bne.n	8008384 <_kill_r+0x1c>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	b103      	cbz	r3, 8008384 <_kill_r+0x1c>
 8008382:	6023      	str	r3, [r4, #0]
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	200008bc 	.word	0x200008bc

0800838c <_getpid_r>:
 800838c:	f7f8 be6e 	b.w	800106c <_getpid>

08008390 <__sread>:
 8008390:	b510      	push	{r4, lr}
 8008392:	460c      	mov	r4, r1
 8008394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008398:	f000 f894 	bl	80084c4 <_read_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	bfab      	itete	ge
 80083a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083a2:	89a3      	ldrhlt	r3, [r4, #12]
 80083a4:	181b      	addge	r3, r3, r0
 80083a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083aa:	bfac      	ite	ge
 80083ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80083ae:	81a3      	strhlt	r3, [r4, #12]
 80083b0:	bd10      	pop	{r4, pc}

080083b2 <__swrite>:
 80083b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b6:	461f      	mov	r7, r3
 80083b8:	898b      	ldrh	r3, [r1, #12]
 80083ba:	05db      	lsls	r3, r3, #23
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	4616      	mov	r6, r2
 80083c2:	d505      	bpl.n	80083d0 <__swrite+0x1e>
 80083c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c8:	2302      	movs	r3, #2
 80083ca:	2200      	movs	r2, #0
 80083cc:	f000 f868 	bl	80084a0 <_lseek_r>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	4632      	mov	r2, r6
 80083de:	463b      	mov	r3, r7
 80083e0:	4628      	mov	r0, r5
 80083e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	f000 b817 	b.w	8008418 <_write_r>

080083ea <__sseek>:
 80083ea:	b510      	push	{r4, lr}
 80083ec:	460c      	mov	r4, r1
 80083ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f2:	f000 f855 	bl	80084a0 <_lseek_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	bf15      	itete	ne
 80083fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008406:	81a3      	strheq	r3, [r4, #12]
 8008408:	bf18      	it	ne
 800840a:	81a3      	strhne	r3, [r4, #12]
 800840c:	bd10      	pop	{r4, pc}

0800840e <__sclose>:
 800840e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008412:	f000 b813 	b.w	800843c <_close_r>
	...

08008418 <_write_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_write_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f8 fe5f 	bl	80010ea <_write>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_write_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_write_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	200008bc 	.word	0x200008bc

0800843c <_close_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_close_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7f8 fe6b 	bl	8001122 <_close>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_close_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_close_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	200008bc 	.word	0x200008bc

0800845c <_fstat_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	; (800847c <_fstat_r+0x20>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f7f8 fe66 	bl	800113a <_fstat>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d102      	bne.n	8008478 <_fstat_r+0x1c>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	b103      	cbz	r3, 8008478 <_fstat_r+0x1c>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	200008bc 	.word	0x200008bc

08008480 <_isatty_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	; (800849c <_isatty_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f8 fe65 	bl	800115a <_isatty>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_isatty_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_isatty_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	200008bc 	.word	0x200008bc

080084a0 <_lseek_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	; (80084c0 <_lseek_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f8 fe5e 	bl	8001170 <_lseek>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_lseek_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_lseek_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	200008bc 	.word	0x200008bc

080084c4 <_read_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d07      	ldr	r5, [pc, #28]	; (80084e4 <_read_r+0x20>)
 80084c8:	4604      	mov	r4, r0
 80084ca:	4608      	mov	r0, r1
 80084cc:	4611      	mov	r1, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	602a      	str	r2, [r5, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	f7f8 fdec 	bl	80010b0 <_read>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_read_r+0x1e>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_read_r+0x1e>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	200008bc 	.word	0x200008bc

080084e8 <sinf_poly>:
 80084e8:	07cb      	lsls	r3, r1, #31
 80084ea:	d412      	bmi.n	8008512 <sinf_poly+0x2a>
 80084ec:	ee21 5b00 	vmul.f64	d5, d1, d0
 80084f0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80084f4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80084f8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80084fc:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8008500:	ee21 1b05 	vmul.f64	d1, d1, d5
 8008504:	eea6 0b05 	vfma.f64	d0, d6, d5
 8008508:	eea7 0b01 	vfma.f64	d0, d7, d1
 800850c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008510:	4770      	bx	lr
 8008512:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8008516:	ee21 5b01 	vmul.f64	d5, d1, d1
 800851a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800851e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8008522:	eea1 7b06 	vfma.f64	d7, d1, d6
 8008526:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800852a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800852e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8008532:	ee21 1b05 	vmul.f64	d1, d1, d5
 8008536:	eea5 0b06 	vfma.f64	d0, d5, d6
 800853a:	e7e5      	b.n	8008508 <sinf_poly+0x20>
 800853c:	0000      	movs	r0, r0
	...

08008540 <sinf>:
 8008540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008542:	ee10 4a10 	vmov	r4, s0
 8008546:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800854a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800854e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8008552:	eef0 7a40 	vmov.f32	s15, s0
 8008556:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800855a:	d218      	bcs.n	800858e <sinf+0x4e>
 800855c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8008560:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8008564:	d20a      	bcs.n	800857c <sinf+0x3c>
 8008566:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800856a:	d103      	bne.n	8008574 <sinf+0x34>
 800856c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8008570:	ed8d 1a01 	vstr	s2, [sp, #4]
 8008574:	eeb0 0a67 	vmov.f32	s0, s15
 8008578:	b003      	add	sp, #12
 800857a:	bd30      	pop	{r4, r5, pc}
 800857c:	483a      	ldr	r0, [pc, #232]	; (8008668 <sinf+0x128>)
 800857e:	eeb0 0b46 	vmov.f64	d0, d6
 8008582:	2100      	movs	r1, #0
 8008584:	b003      	add	sp, #12
 8008586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800858a:	f7ff bfad 	b.w	80084e8 <sinf_poly>
 800858e:	f240 422e 	movw	r2, #1070	; 0x42e
 8008592:	4293      	cmp	r3, r2
 8008594:	d824      	bhi.n	80085e0 <sinf+0xa0>
 8008596:	4b34      	ldr	r3, [pc, #208]	; (8008668 <sinf+0x128>)
 8008598:	ed93 7b08 	vldr	d7, [r3, #32]
 800859c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80085a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80085a4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80085a8:	ee17 1a90 	vmov	r1, s15
 80085ac:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80085b0:	1609      	asrs	r1, r1, #24
 80085b2:	ee07 1a90 	vmov	s15, r1
 80085b6:	f001 0203 	and.w	r2, r1, #3
 80085ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80085be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80085c2:	ed92 0b00 	vldr	d0, [r2]
 80085c6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80085ca:	f011 0f02 	tst.w	r1, #2
 80085ce:	eea5 6b47 	vfms.f64	d6, d5, d7
 80085d2:	bf08      	it	eq
 80085d4:	4618      	moveq	r0, r3
 80085d6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80085da:	ee20 0b06 	vmul.f64	d0, d0, d6
 80085de:	e7d1      	b.n	8008584 <sinf+0x44>
 80085e0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80085e4:	d237      	bcs.n	8008656 <sinf+0x116>
 80085e6:	4a21      	ldr	r2, [pc, #132]	; (800866c <sinf+0x12c>)
 80085e8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80085ec:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80085f0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80085f4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80085f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085fc:	4083      	lsls	r3, r0
 80085fe:	6a28      	ldr	r0, [r5, #32]
 8008600:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008604:	fba3 1000 	umull	r1, r0, r3, r0
 8008608:	6929      	ldr	r1, [r5, #16]
 800860a:	435a      	muls	r2, r3
 800860c:	fbe3 0201 	umlal	r0, r2, r3, r1
 8008610:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8008614:	0f8d      	lsrs	r5, r1, #30
 8008616:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800861a:	1a51      	subs	r1, r2, r1
 800861c:	f7f7 fff6 	bl	800060c <__aeabi_l2d>
 8008620:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <sinf+0x128>)
 8008626:	f004 0203 	and.w	r2, r4, #3
 800862a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800862e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8008660 <sinf+0x120>
 8008632:	ed92 0b00 	vldr	d0, [r2]
 8008636:	ec41 0b16 	vmov	d6, r0, r1
 800863a:	f014 0f02 	tst.w	r4, #2
 800863e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008642:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8008646:	4629      	mov	r1, r5
 8008648:	bf08      	it	eq
 800864a:	4618      	moveq	r0, r3
 800864c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8008650:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008654:	e796      	b.n	8008584 <sinf+0x44>
 8008656:	b003      	add	sp, #12
 8008658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800865c:	f000 b813 	b.w	8008686 <__math_invalidf>
 8008660:	54442d18 	.word	0x54442d18
 8008664:	3c1921fb 	.word	0x3c1921fb
 8008668:	08008b20 	.word	0x08008b20
 800866c:	08008abc 	.word	0x08008abc

08008670 <with_errnof>:
 8008670:	b513      	push	{r0, r1, r4, lr}
 8008672:	4604      	mov	r4, r0
 8008674:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008678:	f7fd fa94 	bl	8005ba4 <__errno>
 800867c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008680:	6004      	str	r4, [r0, #0]
 8008682:	b002      	add	sp, #8
 8008684:	bd10      	pop	{r4, pc}

08008686 <__math_invalidf>:
 8008686:	eef0 7a40 	vmov.f32	s15, s0
 800868a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800868e:	eef4 7a67 	vcmp.f32	s15, s15
 8008692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008696:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800869a:	d602      	bvs.n	80086a2 <__math_invalidf+0x1c>
 800869c:	2021      	movs	r0, #33	; 0x21
 800869e:	f7ff bfe7 	b.w	8008670 <with_errnof>
 80086a2:	4770      	bx	lr

080086a4 <_init>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	bf00      	nop
 80086a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086aa:	bc08      	pop	{r3}
 80086ac:	469e      	mov	lr, r3
 80086ae:	4770      	bx	lr

080086b0 <_fini>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr
