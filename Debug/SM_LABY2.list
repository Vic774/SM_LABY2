
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009118  08009118  00019118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800953c  0800953c  00020cd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009544  08009544  00020cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cd0  20000000  0800954c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000cd0  0800a21c  00020cd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  0800a21c  000213b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020cd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019435  00000000  00000000  00020cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003767  00000000  00000000  0003a133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae38  00000000  00000000  0003ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d74  00000000  00000000  0006ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101859  00000000  00000000  00084b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006390  00000000  00000000  001863c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000cd0 	.word	0x20000cd0
 800021c:	00000000 	.word	0x00000000
 8000220:	08009100 	.word	0x08009100

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000cd4 	.word	0x20000cd4
 800023c:	08009100 	.word	0x08009100

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_DAC_Init+0x4c>)
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_DAC_Init+0x50>)
 8000606:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_DAC_Init+0x4c>)
 800060a:	f000 ffe2 	bl	80015d2 <HAL_DAC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000614:	f000 fad2 	bl	8000bbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000618:	2304      	movs	r3, #4
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_DAC_Init+0x4c>)
 8000628:	f001 f932 	bl	8001890 <HAL_DAC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000632:	f000 fac3 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000cec 	.word	0x20000cec
 8000644:	40007400 	.word	0x40007400

08000648 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2d      	ldr	r2, [pc, #180]	; (800071c <HAL_DAC_MspInit+0xd4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d154      	bne.n	8000714 <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800069a:	2310      	movs	r3, #16
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <HAL_DAC_MspInit+0xdc>)
 80006ae:	f001 fdd3 	bl	8002258 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_DAC_MspInit+0xe4>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80006be:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006c2:	2240      	movs	r2, #64	; 0x40
 80006c4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006da:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ea:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006fa:	f001 f9a3 	bl	8001a44 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000704:	f000 fa5a 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40007400 	.word	0x40007400
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	20000d00 	.word	0x20000d00
 800072c:	40026088 	.word	0x40026088

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_DMA_Init+0x38>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <MX_DMA_Init+0x38>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_DMA_Init+0x38>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2010      	movs	r0, #16
 8000754:	f000 ff07 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000758:	2010      	movs	r0, #16
 800075a:	f000 ff20 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	4b7b      	ldr	r3, [pc, #492]	; (8000970 <MX_GPIO_Init+0x204>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <MX_GPIO_Init+0x204>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b78      	ldr	r3, [pc, #480]	; (8000970 <MX_GPIO_Init+0x204>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b75      	ldr	r3, [pc, #468]	; (8000970 <MX_GPIO_Init+0x204>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a74      	ldr	r2, [pc, #464]	; (8000970 <MX_GPIO_Init+0x204>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b72      	ldr	r3, [pc, #456]	; (8000970 <MX_GPIO_Init+0x204>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b6f      	ldr	r3, [pc, #444]	; (8000970 <MX_GPIO_Init+0x204>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a6e      	ldr	r2, [pc, #440]	; (8000970 <MX_GPIO_Init+0x204>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b6c      	ldr	r3, [pc, #432]	; (8000970 <MX_GPIO_Init+0x204>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b69      	ldr	r3, [pc, #420]	; (8000970 <MX_GPIO_Init+0x204>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a68      	ldr	r2, [pc, #416]	; (8000970 <MX_GPIO_Init+0x204>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b66      	ldr	r3, [pc, #408]	; (8000970 <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <MX_GPIO_Init+0x204>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a62      	ldr	r2, [pc, #392]	; (8000970 <MX_GPIO_Init+0x204>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <MX_GPIO_Init+0x204>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <MX_GPIO_Init+0x204>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <MX_GPIO_Init+0x204>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <MX_GPIO_Init+0x204>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4b57      	ldr	r3, [pc, #348]	; (8000970 <MX_GPIO_Init+0x204>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a56      	ldr	r2, [pc, #344]	; (8000970 <MX_GPIO_Init+0x204>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b54      	ldr	r3, [pc, #336]	; (8000970 <MX_GPIO_Init+0x204>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2110      	movs	r1, #16
 800082e:	4851      	ldr	r0, [pc, #324]	; (8000974 <MX_GPIO_Init+0x208>)
 8000830:	f001 febe 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f244 0181 	movw	r1, #16513	; 0x4081
 800083a:	484f      	ldr	r0, [pc, #316]	; (8000978 <MX_GPIO_Init+0x20c>)
 800083c:	f001 feb8 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	484d      	ldr	r0, [pc, #308]	; (800097c <MX_GPIO_Init+0x210>)
 8000846:	f001 feb3 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800084a:	2310      	movs	r3, #16
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4844      	ldr	r0, [pc, #272]	; (8000974 <MX_GPIO_Init+0x208>)
 8000862:	f001 fcf9 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4840      	ldr	r0, [pc, #256]	; (8000980 <MX_GPIO_Init+0x214>)
 800087e:	f001 fceb 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000882:	2332      	movs	r3, #50	; 0x32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000892:	230b      	movs	r3, #11
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4838      	ldr	r0, [pc, #224]	; (8000980 <MX_GPIO_Init+0x214>)
 800089e:	f001 fcdb 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008a2:	2386      	movs	r3, #134	; 0x86
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4831      	ldr	r0, [pc, #196]	; (8000984 <MX_GPIO_Init+0x218>)
 80008be:	f001 fccb 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4827      	ldr	r0, [pc, #156]	; (8000978 <MX_GPIO_Init+0x20c>)
 80008dc:	f001 fcbc 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f2:	230b      	movs	r3, #11
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481e      	ldr	r0, [pc, #120]	; (8000978 <MX_GPIO_Init+0x20c>)
 80008fe:	f001 fcab 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0x210>)
 800091a:	f001 fc9d 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <MX_GPIO_Init+0x210>)
 8000932:	f001 fc91 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_GPIO_Init+0x210>)
 8000954:	f001 fc80 	bl	8002258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f000 fe02 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f000 fe1b 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 8000968:	bf00      	nop
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020400 	.word	0x40020400
 800097c:	40021800 	.word	0x40021800
 8000980:	40020800 	.word	0x40020800
 8000984:	40020000 	.word	0x40020000

08000988 <HAL_TIM_PeriodElapsedCallback>:
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Reg);
}

// timers callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
//		}
//
//		wykres = sygnal[signal_sample];
//		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sygnal[signal_sample++]);
	}
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_GPIO_EXTI_Callback>:

// GPIO callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]

}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <send_string>:

void send_string(char* s)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fc3f 	bl	8000240 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <send_string+0x24>)
 80009cc:	f003 fe4c 	bl	8004668 <HAL_UART_Transmit_IT>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000e10 	.word	0x20000e10

080009dc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	uint8_t Data[6];
	sprintf(Data, "%s",Received);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_UART_RxCpltCallback+0x74>)
 80009ea:	491a      	ldr	r1, [pc, #104]	; (8000a54 <HAL_UART_RxCpltCallback+0x78>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 f901 	bl	8006bf4 <siprintf>
	if(Data[0]=='A')
 80009f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009f6:	2b41      	cmp	r3, #65	; 0x41
 80009f8:	d121      	bne.n	8000a3e <HAL_UART_RxCpltCallback+0x62>
	{
		int value = atoi(&Data[1]);
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	3301      	adds	r3, #1
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fc7f 	bl	8006304 <atoi>
 8000a06:	6378      	str	r0, [r7, #52]	; 0x34
		if(value >= 0 && value <=1000)
 8000a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db17      	blt.n	8000a3e <HAL_UART_RxCpltCallback+0x62>
 8000a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a14:	dc13      	bgt.n	8000a3e <HAL_UART_RxCpltCallback+0x62>
		{
			char str_buffer[32];
			sprintf(str_buffer, "Amplitude set at: %4d [mV] \r\n", value);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a1c:	490e      	ldr	r1, [pc, #56]	; (8000a58 <HAL_UART_RxCpltCallback+0x7c>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f006 f8e8 	bl	8006bf4 <siprintf>
			send_string(str_buffer);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ffc3 	bl	80009b4 <send_string>
			Amp = value;
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_UART_RxCpltCallback+0x80>)
 8000a3a:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 5);
 8000a3e:	2205      	movs	r2, #5
 8000a40:	4903      	ldr	r1, [pc, #12]	; (8000a50 <HAL_UART_RxCpltCallback+0x74>)
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <HAL_UART_RxCpltCallback+0x84>)
 8000a44:	f003 fe6e 	bl	8004724 <HAL_UART_Receive_IT>
}
 8000a48:	bf00      	nop
 8000a4a:	3738      	adds	r7, #56	; 0x38
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000d60 	.word	0x20000d60
 8000a54:	08009118 	.word	0x08009118
 8000a58:	0800911c 	.word	0x0800911c
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000e10 	.word	0x20000e10

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f000 fc20 	bl	80012ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f833 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f7ff fe7b 	bl	800076c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a76:	f000 fab1 	bl	8000fdc <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000a7a:	f7ff fe59 	bl	8000730 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a7e:	f000 fb45 	bl	800110c <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000a82:	f7ff fdb7 	bl	80005f4 <MX_DAC_Init>
  MX_TIM4_Init();
 8000a86:	f000 f9eb 	bl	8000e60 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000a8a:	f000 fa37 	bl	8000efc <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <main+0x5c>)
 8000a92:	f000 fdc0 	bl	8001616 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <main+0x60>)
 8000a98:	f003 f928 	bl	8003cec <HAL_TIM_Base_Start_IT>

//  task #5
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sygnal, SIGNAL_SIZE, DAC_ALIGN_12B_R);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8000aa4:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <main+0x64>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <main+0x5c>)
 8000aaa:	f000 fe07 	bl	80016bc <HAL_DAC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <main+0x68>)
 8000ab0:	f003 f8ac 	bl	8003c0c <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3, Received, 5);
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	4906      	ldr	r1, [pc, #24]	; (8000ad0 <main+0x6c>)
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <main+0x70>)
 8000aba:	f003 fe33 	bl	8004724 <HAL_UART_Receive_IT>




  while (1)
 8000abe:	e7fe      	b.n	8000abe <main+0x5a>
 8000ac0:	20000cec 	.word	0x20000cec
 8000ac4:	20000d78 	.word	0x20000d78
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000dc4 	.word	0x20000dc4
 8000ad0:	20000d60 	.word	0x20000d60
 8000ad4:	20000e10 	.word	0x20000e10

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2234      	movs	r2, #52	; 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fc3a 	bl	8006360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000afc:	f001 fed2 	bl	80028a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <SystemClock_Config+0xdc>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SystemClock_Config+0xe0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b20:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <SystemClock_Config+0xe0>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <SystemClock_Config+0xe0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b4c:	2360      	movs	r3, #96	; 0x60
 8000b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 feff 	bl	8002964 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b6c:	f000 f826 	bl	8000bbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b70:	f001 fea8 	bl	80028c4 <HAL_PWREx_EnableOverDrive>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b7a:	f000 f81f 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	230f      	movs	r3, #15
 8000b80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b82:	2302      	movs	r3, #2
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2103      	movs	r1, #3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 f990 	bl	8002ec0 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ba6:	f000 f809 	bl	8000bbc <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3750      	adds	r7, #80	; 0x50
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x44>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x44>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x44>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x44>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 fb64 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <DMA1_Stream5_IRQHandler+0x10>)
 8000c6a:	f001 f88b 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000d00 	.word	0x20000d00

08000c78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM4_IRQHandler+0x10>)
 8000c7e:	f003 f8ad 	bl	8003ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000d78 	.word	0x20000d78

08000c8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <USART3_IRQHandler+0x10>)
 8000c92:	f003 fd8b 	bl	80047ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000e10 	.word	0x20000e10

08000ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ca4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ca8:	f001 fc9c 	bl	80025e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
	return 1;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_kill>:

int _kill(int pid, int sig)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cca:	f005 fb1f 	bl	800630c <__errno>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2216      	movs	r2, #22
 8000cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_exit>:

void _exit (int status)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffe7 	bl	8000cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cf2:	e7fe      	b.n	8000cf2 <_exit+0x12>

08000cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
	}

return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e009      	b.n	8000d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf1      	blt.n	8000d40 <_write+0x12>
	}
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_close>:

int _close(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_isatty>:

int _isatty(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return 1;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f005 fa84 	bl	800630c <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20080000 	.word	0x20080000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000d74 	.word	0x20000d74
 8000e38:	200013b8 	.word	0x200013b8

08000e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <MX_TIM4_Init+0x98>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000e86:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000e8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000e94:	2263      	movs	r2, #99	; 0x63
 8000e96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000ea6:	f002 fe59 	bl	8003b5c <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000eb0:	f7ff fe84 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000ec2:	f003 f8ab 	bl	800401c <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ecc:	f7ff fe76 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_TIM4_Init+0x94>)
 8000ede:	f003 fac9 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f7ff fe68 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000d78 	.word	0x20000d78
 8000ef8:	40000800 	.word	0x40000800

08000efc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f14:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000f18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f22:	2263      	movs	r2, #99	; 0x63
 8000f24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f2e:	f002 fe15 	bl	8003b5c <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f38:	f7ff fe40 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_TIM6_Init+0x64>)
 8000f4a:	f003 fa93 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f54:	f7ff fe32 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000dc4 	.word	0x20000dc4
 8000f64:	40001000 	.word	0x40001000

08000f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <HAL_TIM_Base_MspInit+0x68>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d114      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201e      	movs	r0, #30
 8000f98:	f000 fae5 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f9c:	201e      	movs	r0, #30
 8000f9e:	f000 fafe 	bl	800159e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000fa2:	e010      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10b      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40001000 	.word	0x40001000

08000fdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_USART3_UART_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8000fe8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USART3_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USART3_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USART3_UART_Init+0x58>)
 8001020:	f003 fad4 	bl	80045cc <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fdc7 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000e10 	.word	0x20000e10
 8001038:	40004800 	.word	0x40004800

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ae      	sub	sp, #184	; 0xb8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2290      	movs	r2, #144	; 0x90
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f005 f97f 	bl	8006360 <memset>
  if(uartHandle->Instance==USART3)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <HAL_UART_MspInit+0xc4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d144      	bne.n	80010f6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001072:	2300      	movs	r3, #0
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f002 f946 	bl	800330c <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff fd99 	bl	8000bbc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_UART_MspInit+0xc8>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <HAL_UART_MspInit+0xc8>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_UART_MspInit+0xc8>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_UART_MspInit+0xc8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xc8>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_UART_MspInit+0xc8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010de:	4619      	mov	r1, r3
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <HAL_UART_MspInit+0xcc>)
 80010e2:	f001 f8b9 	bl	8002258 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2027      	movs	r0, #39	; 0x27
 80010ec:	f000 fa3b 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010f0:	2027      	movs	r0, #39	; 0x27
 80010f2:	f000 fa54 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	37b8      	adds	r7, #184	; 0xb8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40004800 	.word	0x40004800
 8001104:	40023800 	.word	0x40023800
 8001108:	40020c00 	.word	0x40020c00

0800110c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001116:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111a:	2206      	movs	r2, #6
 800111c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001120:	2202      	movs	r2, #2
 8001122:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112c:	2202      	movs	r2, #2
 800112e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001132:	2201      	movs	r2, #1
 8001134:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001144:	2201      	movs	r2, #1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001150:	f001 fa60 	bl	8002614 <HAL_PCD_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800115a:	f7ff fd2f 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000e98 	.word	0x20000e98

08001168 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ae      	sub	sp, #184	; 0xb8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2290      	movs	r2, #144	; 0x90
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f005 f8e9 	bl	8006360 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001196:	d159      	bne.n	800124c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001198:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800119c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 f8af 	bl	800330c <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011b4:	f7ff fd02 	bl	8000bbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_PCD_MspInit+0xec>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a25      	ldr	r2, [pc, #148]	; (8001254 <HAL_PCD_MspInit+0xec>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_PCD_MspInit+0xec>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ea:	230a      	movs	r3, #10
 80011ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <HAL_PCD_MspInit+0xf0>)
 80011f8:	f001 f82e 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001214:	4619      	mov	r1, r3
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <HAL_PCD_MspInit+0xf0>)
 8001218:	f001 f81e 	bl	8002258 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_PCD_MspInit+0xec>)
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <HAL_PCD_MspInit+0xec>)
 8001222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001226:	6353      	str	r3, [r2, #52]	; 0x34
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_PCD_MspInit+0xec>)
 800122a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_PCD_MspInit+0xec>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_PCD_MspInit+0xec>)
 800123a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123e:	6453      	str	r3, [r2, #68]	; 0x44
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HAL_PCD_MspInit+0xec>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	37b8      	adds	r7, #184	; 0xb8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001286:	f7ff fdd9 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f005 f845 	bl	8006318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fbe9 	bl	8000a64 <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000cd0 	.word	0x20000cd0
  ldr r2, =_sidata
 80012a0:	0800954c 	.word	0x0800954c
  ldr r2, =_sbss
 80012a4:	20000cd0 	.word	0x20000cd0
  ldr r4, =_ebss
 80012a8:	200013b4 	.word	0x200013b4

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>

080012ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f94c 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f805 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012be:	f7ff fc83 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f967 	bl	80015ba <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f92f 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000af4 	.word	0x20000af4
 8001320:	20000afc 	.word	0x20000afc
 8001324:	20000af8 	.word	0x20000af8

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000afc 	.word	0x20000afc
 800134c:	200013a0 	.word	0x200013a0

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200013a0 	.word	0x200013a0

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000afc 	.word	0x20000afc

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	05fa0000 	.word	0x05fa0000

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e014      	b.n	800160e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff f827 	bl	8000648 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2202      	movs	r2, #2
 80015fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_DAC_Start+0x16>
 8001628:	2302      	movs	r3, #2
 800162a:	e040      	b.n	80016ae <HAL_DAC_Start+0x98>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	2201      	movs	r2, #1
 8001646:	409a      	lsls	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001660:	2b3c      	cmp	r3, #60	; 0x3c
 8001662:	d11d      	bne.n	80016a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	e014      	b.n	80016a0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	213c      	movs	r1, #60	; 0x3c
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	429a      	cmp	r2, r3
 800168e:	d107      	bne.n	80016a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0202 	orr.w	r2, r2, #2
 800169e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_DAC_Start_DMA+0x1e>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e0ab      	b.n	8001832 <HAL_DAC_Start_DMA+0x176>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2202      	movs	r2, #2
 80016e4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d12f      	bne.n	800174c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_DAC_Start_DMA+0x180>)
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_DAC_Start_DMA+0x184>)
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a50      	ldr	r2, [pc, #320]	; (8001844 <HAL_DAC_Start_DMA+0x188>)
 8001702:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001712:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	2b08      	cmp	r3, #8
 8001718:	d013      	beq.n	8001742 <HAL_DAC_Start_DMA+0x86>
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d845      	bhi.n	80017ac <HAL_DAC_Start_DMA+0xf0>
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_DAC_Start_DMA+0x72>
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800172c:	e03e      	b.n	80017ac <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3308      	adds	r3, #8
 8001734:	613b      	str	r3, [r7, #16]
        break;
 8001736:	e03c      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	330c      	adds	r3, #12
 800173e:	613b      	str	r3, [r7, #16]
        break;
 8001740:	e037      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3310      	adds	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
        break;
 800174a:	e032      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <HAL_DAC_Start_DMA+0x18c>)
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4a3c      	ldr	r2, [pc, #240]	; (800184c <HAL_DAC_Start_DMA+0x190>)
 800175a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <HAL_DAC_Start_DMA+0x194>)
 8001762:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001772:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d013      	beq.n	80017a2 <HAL_DAC_Start_DMA+0xe6>
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d817      	bhi.n	80017b0 <HAL_DAC_Start_DMA+0xf4>
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DAC_Start_DMA+0xd2>
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d005      	beq.n	8001798 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800178c:	e010      	b.n	80017b0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3314      	adds	r3, #20
 8001794:	613b      	str	r3, [r7, #16]
        break;
 8001796:	e00c      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3318      	adds	r3, #24
 800179e:	613b      	str	r3, [r7, #16]
        break;
 80017a0:	e007      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	331c      	adds	r3, #28
 80017a8:	613b      	str	r3, [r7, #16]
        break;
 80017aa:	e002      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80017b0:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d111      	bne.n	80017dc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6898      	ldr	r0, [r3, #8]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	f000 f9e5 	bl	8001ba0 <HAL_DMA_Start_IT>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	e010      	b.n	80017fe <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68d8      	ldr	r0, [r3, #12]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	f000 f9d3 	bl	8001ba0 <HAL_DMA_Start_IT>
 80017fa:	4603      	mov	r3, r0
 80017fc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2201      	movs	r2, #1
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e005      	b.n	8001830 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0800192f 	.word	0x0800192f
 8001840:	08001951 	.word	0x08001951
 8001844:	0800196d 	.word	0x0800196d
 8001848:	080019d7 	.word	0x080019d7
 800184c:	080019f9 	.word	0x080019f9
 8001850:	08001a15 	.word	0x08001a15

08001854 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	795b      	ldrb	r3, [r3, #5]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_DAC_ConfigChannel+0x18>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e03c      	b.n	8001922 <HAL_DAC_ConfigChannel+0x92>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2202      	movs	r2, #2
 80018b2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4013      	ands	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	22c0      	movs	r2, #192	; 0xc0
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff ff89 	bl	8001854 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	711a      	strb	r2, [r3, #4]
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff ff82 	bl	8001868 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f043 0204 	orr.w	r2, r3, #4
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff ff78 	bl	800187c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	711a      	strb	r2, [r3, #4]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff ffd8 	bl	800199a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	711a      	strb	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff ffd1 	bl	80019ae <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f043 0204 	orr.w	r2, r3, #4
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff ffc7 	bl	80019c2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	711a      	strb	r2, [r3, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff fc7e 	bl	8001350 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e099      	b.n	8001b94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	e00f      	b.n	8001aa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff fc65 	bl	8001350 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d908      	bls.n	8001aa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e078      	b.n	8001b94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e8      	bne.n	8001a82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_DMA_Init+0x158>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d107      	bne.n	8001b0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4313      	orrs	r3, r2
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f023 0307 	bic.w	r3, r3, #7
 8001b22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d117      	bne.n	8001b66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fb09 	bl	8002160 <DMA_CheckFifoParam>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b62:	2301      	movs	r3, #1
 8001b64:	e016      	b.n	8001b94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fac0 	bl	80020f4 <DMA_CalcBaseAndBitshift>
 8001b74:	4603      	mov	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	e010803f 	.word	0xe010803f

08001ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_DMA_Start_IT+0x26>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e048      	b.n	8001c58 <HAL_DMA_Start_IT+0xb8>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d137      	bne.n	8001c4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fa52 	bl	8002098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	223f      	movs	r2, #63	; 0x3f
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0216 	orr.w	r2, r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c1e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0208 	orr.w	r2, r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e005      	b.n	8001c56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c6e:	f7ff fb6f 	bl	8001350 <HAL_GetTick>
 8001c72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e052      	b.n	8001d38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0216 	bic.w	r2, r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_DMA_Abort+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0208 	bic.w	r2, r2, #8
 8001cd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	e013      	b.n	8001d0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce4:	f7ff fb34 	bl	8001350 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d90c      	bls.n	8001d0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e015      	b.n	8001d38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1e4      	bne.n	8001ce4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	223f      	movs	r2, #63	; 0x3f
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d004      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00c      	b.n	8001d78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d90:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_DMA_IRQHandler+0x248>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	; (8001fd0 <HAL_DMA_IRQHandler+0x24c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2208      	movs	r2, #8
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2208      	movs	r2, #8
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2210      	movs	r2, #16
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d043      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03c      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2210      	movs	r2, #16
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
 8001eb2:	e01f      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2220      	movs	r2, #32
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808f 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8087 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d136      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0216 	bic.w	r2, r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_DMA_IRQHandler+0x1da>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	223f      	movs	r2, #63	; 0x3f
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07e      	beq.n	8002090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
        }
        return;
 8001f9a:	e079      	b.n	8002090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d031      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
 8001fc8:	e02c      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
 8001fca:	bf00      	nop
 8001fcc:	20000af4 	.word	0x20000af4
 8001fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e01e      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0210 	bic.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d307      	bcc.n	800206c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_DMA_IRQHandler+0x2cc>
 800206a:	e000      	b.n	800206e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800206c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e000      	b.n	8002092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002090:	bf00      	nop
    }
  }
}
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d108      	bne.n	80020d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d6:	e007      	b.n	80020e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b10      	subs	r3, #16
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <DMA_CalcBaseAndBitshift+0x60>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <DMA_CalcBaseAndBitshift+0x64>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d908      	bls.n	8002134 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <DMA_CalcBaseAndBitshift+0x68>)
 800212a:	4013      	ands	r3, r2
 800212c:	1d1a      	adds	r2, r3, #4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	659a      	str	r2, [r3, #88]	; 0x58
 8002132:	e006      	b.n	8002142 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <DMA_CalcBaseAndBitshift+0x68>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08009154 	.word	0x08009154
 800215c:	fffffc00 	.word	0xfffffc00

08002160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d856      	bhi.n	800222e <DMA_CheckFifoParam+0xce>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <DMA_CheckFifoParam+0x28>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	080021ab 	.word	0x080021ab
 8002190:	08002199 	.word	0x08002199
 8002194:	0800222f 	.word	0x0800222f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d046      	beq.n	8002232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e043      	b.n	8002232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b2:	d140      	bne.n	8002236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e03d      	b.n	8002236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	d121      	bne.n	8002208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d837      	bhi.n	800223a <DMA_CheckFifoParam+0xda>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <DMA_CheckFifoParam+0x70>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021e7 	.word	0x080021e7
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	080021f9 	.word	0x080021f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e030      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d025      	beq.n	800223e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f6:	e022      	b.n	800223e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002206:	e01c      	b.n	8002242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d903      	bls.n	8002216 <DMA_CheckFifoParam+0xb6>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d003      	beq.n	800221c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002214:	e018      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      break;
 800221a:	e015      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e00b      	b.n	8002246 <DMA_CheckFifoParam+0xe6>
      break;
 800222e:	bf00      	nop
 8002230:	e00a      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e008      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e006      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;   
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
    }
  } 
  
  return status; 
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e175      	b.n	8002564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8164 	bne.w	800255e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x56>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80be 	beq.w	800255e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_GPIO_Init+0x324>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_GPIO_Init+0x324>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_GPIO_Init+0x324>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023fa:	4a61      	ldr	r2, [pc, #388]	; (8002580 <HAL_GPIO_Init+0x328>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_GPIO_Init+0x32c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d037      	beq.n	8002496 <HAL_GPIO_Init+0x23e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a57      	ldr	r2, [pc, #348]	; (8002588 <HAL_GPIO_Init+0x330>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_GPIO_Init+0x23a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_GPIO_Init+0x334>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x236>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_GPIO_Init+0x338>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d025      	beq.n	800248a <HAL_GPIO_Init+0x232>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a54      	ldr	r2, [pc, #336]	; (8002594 <HAL_GPIO_Init+0x33c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01f      	beq.n	8002486 <HAL_GPIO_Init+0x22e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a53      	ldr	r2, [pc, #332]	; (8002598 <HAL_GPIO_Init+0x340>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x22a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_GPIO_Init+0x344>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x226>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <HAL_GPIO_Init+0x348>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x222>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_GPIO_Init+0x34c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x21e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x21a>
 800246e:	2309      	movs	r3, #9
 8002470:	e012      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002472:	230a      	movs	r3, #10
 8002474:	e010      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002476:	2308      	movs	r3, #8
 8002478:	e00e      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800247a:	2307      	movs	r3, #7
 800247c:	e00c      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800247e:	2306      	movs	r3, #6
 8002480:	e00a      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002482:	2305      	movs	r3, #5
 8002484:	e008      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002486:	2304      	movs	r3, #4
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002496:	2300      	movs	r3, #0
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024a8:	4935      	ldr	r1, [pc, #212]	; (8002580 <HAL_GPIO_Init+0x328>)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_GPIO_Init+0x354>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <HAL_GPIO_Init+0x354>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_GPIO_Init+0x354>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_GPIO_Init+0x354>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_GPIO_Init+0x354>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252e:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_GPIO_Init+0x354>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_GPIO_Init+0x354>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_GPIO_Init+0x354>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	f67f ae86 	bls.w	8002278 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40021000 	.word	0x40021000
 8002598:	40021400 	.word	0x40021400
 800259c:	40021800 	.word	0x40021800
 80025a0:	40021c00 	.word	0x40021c00
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40022400 	.word	0x40022400
 80025ac:	40013c00 	.word	0x40013c00

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025cc:	e003      	b.n	80025d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	041a      	lsls	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	619a      	str	r2, [r3, #24]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe f9ca 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	b08f      	sub	sp, #60	; 0x3c
 8002618:	af0a      	add	r7, sp, #40	; 0x28
 800261a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e116      	b.n	8002854 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7fe fd91 	bl	8001168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2203      	movs	r2, #3
 800264a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fbb1 	bl	8005dcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	687e      	ldr	r6, [r7, #4]
 8002672:	466d      	mov	r5, sp
 8002674:	f106 0410 	add.w	r4, r6, #16
 8002678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002680:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002684:	e885 0003 	stmia.w	r5, {r0, r1}
 8002688:	1d33      	adds	r3, r6, #4
 800268a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	f003 fb45 	bl	8005d1c <USB_CoreInit>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d7      	b.n	8002854 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fb9f 	bl	8005dee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e04a      	b.n	800274c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	333d      	adds	r3, #61	; 0x3d
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	333c      	adds	r3, #60	; 0x3c
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	b298      	uxth	r0, r3
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3344      	adds	r3, #68	; 0x44
 80026f2:	4602      	mov	r2, r0
 80026f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3340      	adds	r3, #64	; 0x40
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3348      	adds	r3, #72	; 0x48
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	334c      	adds	r3, #76	; 0x4c
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3354      	adds	r3, #84	; 0x54
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	3301      	adds	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	d3af      	bcc.n	80026b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e044      	b.n	80027e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	3301      	adds	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3b5      	bcc.n	800275c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	687e      	ldr	r6, [r7, #4]
 80027f8:	466d      	mov	r5, sp
 80027fa:	f106 0410 	add.w	r4, r6, #16
 80027fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800280a:	e885 0003 	stmia.w	r5, {r0, r1}
 800280e:	1d33      	adds	r3, r6, #4
 8002810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	f003 fb38 	bl	8005e88 <USB_DevInit>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e014      	b.n	8002854 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b01      	cmp	r3, #1
 8002840:	d102      	bne.n	8002848 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f80a 	bl	800285c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fcf6 	bl	800623e <USB_DevDisconnect>

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800285c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800288c:	4313      	orrs	r3, r2
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	10000003 	.word	0x10000003

080028a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000

080028c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_PWREx_EnableOverDrive+0x98>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_PWREx_EnableOverDrive+0x98>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_PWREx_EnableOverDrive+0x98>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f2:	f7fe fd2d 	bl	8001350 <HAL_GetTick>
 80028f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028f8:	e009      	b.n	800290e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028fa:	f7fe fd29 	bl	8001350 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002908:	d901      	bls.n	800290e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e022      	b.n	8002954 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291a:	d1ee      	bne.n	80028fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_PWREx_EnableOverDrive+0x9c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002928:	f7fe fd12 	bl	8001350 <HAL_GetTick>
 800292c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800292e:	e009      	b.n	8002944 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002930:	f7fe fd0e 	bl	8001350 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293e:	d901      	bls.n	8002944 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e007      	b.n	8002954 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002950:	d1ee      	bne.n	8002930 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e29b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b96      	ldr	r3, [pc, #600]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002994:	4b93      	ldr	r3, [pc, #588]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x62>
 80029a0:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b8d      	ldr	r3, [pc, #564]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x130>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d168      	bne.n	8002a94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e275      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x7a>
 80029d0:	4b84      	ldr	r3, [pc, #528]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a83      	ldr	r2, [pc, #524]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0xd8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x9c>
 80029e6:	4b7f      	ldr	r3, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7e      	ldr	r2, [pc, #504]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7b      	ldr	r2, [pc, #492]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xd8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xc0>
 8002a0a:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a72      	ldr	r2, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xd8>
 8002a24:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6e      	ldr	r2, [pc, #440]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b6c      	ldr	r3, [pc, #432]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fc84 	bl	8001350 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fc80 	bl	8001350 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e229      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b61      	ldr	r3, [pc, #388]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe8>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fc70 	bl	8001350 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fc6c 	bl	8001350 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e215      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x110>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d069      	beq.n	8002b76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x190>
 8002aba:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x17a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1e9      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	493d      	ldr	r1, [pc, #244]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e040      	b.n	8002b76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d023      	beq.n	8002b44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a38      	ldr	r2, [pc, #224]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fc22 	bl	8001350 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7fe fc1e 	bl	8001350 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1c7      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4929      	ldr	r1, [pc, #164]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
 8002b42:	e018      	b.n	8002b76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fbfe 	bl	8001350 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe fbfa 	bl	8001350 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1a3      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d038      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d019      	beq.n	8002bbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe fbdb 	bl	8001350 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe fbd7 	bl	8001350 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e180      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x23a>
 8002bbc:	e01a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe fbc1 	bl	8001350 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fbbd 	bl	8001350 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d903      	bls.n	8002be8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e166      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
 8002be4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a4 	beq.w	8002d4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a88      	ldr	r2, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x4d4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c36:	4b80      	ldr	r3, [pc, #512]	; (8002e38 <HAL_RCC_OscConfig+0x4d4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7f      	ldr	r2, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x4d4>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fb85 	bl	8001350 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe fb81 	bl	8001350 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e12a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x4d4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x31a>
 8002c70:	4b70      	ldr	r3, [pc, #448]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a6f      	ldr	r2, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	e02d      	b.n	8002cda <HAL_RCC_OscConfig+0x376>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x33c>
 8002c86:	4b6b      	ldr	r3, [pc, #428]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	e01c      	b.n	8002cda <HAL_RCC_OscConfig+0x376>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x35e>
 8002ca8:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a61      	ldr	r2, [pc, #388]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0x376>
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5b      	ldr	r2, [pc, #364]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fb35 	bl	8001350 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fb31 	bl	8001350 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0d8      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCC_OscConfig+0x386>
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fb1f 	bl	8001350 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe fb1b 	bl	8001350 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0c2      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ee      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80ae 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d06d      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d14b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe faec 	bl	8001350 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fae8 	bl	8001350 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e091      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	071b      	lsls	r3, r3, #28
 8002dc6:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe faba 	bl	8001350 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fab6 	bl	8001350 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e05f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x47c>
 8002dfe:	e057      	b.n	8002eb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe faa0 	bl	8001350 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe fa9c 	bl	8001350 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e045      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4b0>
 8002e32:	e03d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x54c>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_RCC_OscConfig+0x558>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d030      	beq.n	8002eac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d129      	bne.n	8002eac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d122      	bne.n	8002eac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d119      	bne.n	8002eac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d10f      	bne.n	8002eac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d0      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b67      	ldr	r3, [pc, #412]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	4965      	ldr	r1, [pc, #404]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b8      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b50      	ldr	r3, [pc, #320]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	494d      	ldr	r1, [pc, #308]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d040      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d115      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e073      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06b      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4936      	ldr	r1, [pc, #216]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fe f9cc 	bl	8001350 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe f9c8 	bl	8001350 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e053      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d210      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	4922      	ldr	r1, [pc, #136]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e032      	b.n	800307a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490e      	ldr	r1, [pc, #56]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003052:	f000 f821 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490a      	ldr	r1, [pc, #40]	; (800308c <HAL_RCC_ClockConfig+0x1cc>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_RCC_ClockConfig+0x1d0>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1d4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f928 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023c00 	.word	0x40023c00
 8003088:	40023800 	.word	0x40023800
 800308c:	0800913c 	.word	0x0800913c
 8003090:	20000af4 	.word	0x20000af4
 8003094:	20000af8 	.word	0x20000af8

08003098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800309c:	b094      	sub	sp, #80	; 0x50
 800309e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	647b      	str	r3, [r7, #68]	; 0x44
 80030a4:	2300      	movs	r3, #0
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a8:	2300      	movs	r3, #0
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b0:	4b79      	ldr	r3, [pc, #484]	; (8003298 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d00d      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x40>
 80030bc:	2b08      	cmp	r3, #8
 80030be:	f200 80e1 	bhi.w	8003284 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x34>
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ca:	e0db      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030cc:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_RCC_GetSysClockFreq+0x204>)
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d0:	e0db      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d6:	e0d8      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d8:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_GetSysClockFreq+0x200>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d063      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	2200      	movs	r2, #0
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
 8003106:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800310a:	4622      	mov	r2, r4
 800310c:	462b      	mov	r3, r5
 800310e:	f04f 0000 	mov.w	r0, #0
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	0159      	lsls	r1, r3, #5
 8003118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800311c:	0150      	lsls	r0, r2, #5
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4621      	mov	r1, r4
 8003124:	1a51      	subs	r1, r2, r1
 8003126:	6139      	str	r1, [r7, #16]
 8003128:	4629      	mov	r1, r5
 800312a:	eb63 0301 	sbc.w	r3, r3, r1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800313c:	4659      	mov	r1, fp
 800313e:	018b      	lsls	r3, r1, #6
 8003140:	4651      	mov	r1, sl
 8003142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003146:	4651      	mov	r1, sl
 8003148:	018a      	lsls	r2, r1, #6
 800314a:	4651      	mov	r1, sl
 800314c:	ebb2 0801 	subs.w	r8, r2, r1
 8003150:	4659      	mov	r1, fp
 8003152:	eb63 0901 	sbc.w	r9, r3, r1
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800316a:	4690      	mov	r8, r2
 800316c:	4699      	mov	r9, r3
 800316e:	4623      	mov	r3, r4
 8003170:	eb18 0303 	adds.w	r3, r8, r3
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	462b      	mov	r3, r5
 8003178:	eb49 0303 	adc.w	r3, r9, r3
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800318a:	4629      	mov	r1, r5
 800318c:	024b      	lsls	r3, r1, #9
 800318e:	4621      	mov	r1, r4
 8003190:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003194:	4621      	mov	r1, r4
 8003196:	024a      	lsls	r2, r1, #9
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319e:	2200      	movs	r2, #0
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031a8:	f7fd f8a2 	bl	80002f0 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4613      	mov	r3, r2
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b4:	e058      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	2200      	movs	r2, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	4611      	mov	r1, r2
 80031c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031d0:	4642      	mov	r2, r8
 80031d2:	464b      	mov	r3, r9
 80031d4:	f04f 0000 	mov.w	r0, #0
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	0159      	lsls	r1, r3, #5
 80031de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e2:	0150      	lsls	r0, r2, #5
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4641      	mov	r1, r8
 80031ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ee:	4649      	mov	r1, r9
 80031f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003200:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003204:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003208:	ebb2 040a 	subs.w	r4, r2, sl
 800320c:	eb63 050b 	sbc.w	r5, r3, fp
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	00eb      	lsls	r3, r5, #3
 800321a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321e:	00e2      	lsls	r2, r4, #3
 8003220:	4614      	mov	r4, r2
 8003222:	461d      	mov	r5, r3
 8003224:	4643      	mov	r3, r8
 8003226:	18e3      	adds	r3, r4, r3
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	464b      	mov	r3, r9
 800322c:	eb45 0303 	adc.w	r3, r5, r3
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800323e:	4629      	mov	r1, r5
 8003240:	028b      	lsls	r3, r1, #10
 8003242:	4621      	mov	r1, r4
 8003244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003248:	4621      	mov	r1, r4
 800324a:	028a      	lsls	r2, r1, #10
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003252:	2200      	movs	r2, #0
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	61fa      	str	r2, [r7, #28]
 8003258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800325c:	f7fd f848 	bl	80002f0 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4613      	mov	r3, r2
 8003266:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_GetSysClockFreq+0x200>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800327a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003282:	e002      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetSysClockFreq+0x204>)
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800328c:	4618      	mov	r0, r3
 800328e:	3750      	adds	r7, #80	; 0x50
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	00f42400 	.word	0x00f42400
 80032a0:	007a1200 	.word	0x007a1200

080032a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000af4 	.word	0x20000af4

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c0:	f7ff fff0 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	0800914c 	.word	0x0800914c

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032e8:	f7ff ffdc 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0b5b      	lsrs	r3, r3, #13
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	0800914c 	.word	0x0800914c

0800330c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003334:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a68      	ldr	r2, [pc, #416]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800333e:	6093      	str	r3, [r2, #8]
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003348:	4964      	ldr	r1, [pc, #400]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d017      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003366:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	4959      	ldr	r1, [pc, #356]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d017      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	494a      	ldr	r1, [pc, #296]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 808b 	beq.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	4a39      	ldr	r2, [pc, #228]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6413      	str	r3, [r2, #64]	; 0x40
 80033fc:	4b37      	ldr	r3, [pc, #220]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003408:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a34      	ldr	r2, [pc, #208]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003414:	f7fd ff9c 	bl	8001350 <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fd ff98 	bl	8001350 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e38f      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d035      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d02e      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003458:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003478:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d114      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd ff60 	bl	8001350 <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fd ff5c 	bl	8001350 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e351      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c2:	d111      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	4901      	ldr	r1, [pc, #4]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
 80034da:	e00b      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40007000 	.word	0x40007000
 80034e4:	0ffffcff 	.word	0x0ffffcff
 80034e8:	4bac      	ldr	r3, [pc, #688]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4aab      	ldr	r2, [pc, #684]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034f2:	6093      	str	r3, [r2, #8]
 80034f4:	4ba9      	ldr	r3, [pc, #676]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	49a6      	ldr	r1, [pc, #664]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003502:	4313      	orrs	r3, r2
 8003504:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d010      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003512:	4ba2      	ldr	r3, [pc, #648]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003518:	4aa0      	ldr	r2, [pc, #640]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003522:	4b9e      	ldr	r3, [pc, #632]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003524:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	499b      	ldr	r1, [pc, #620]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003540:	4b96      	ldr	r3, [pc, #600]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354e:	4993      	ldr	r1, [pc, #588]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003562:	4b8e      	ldr	r3, [pc, #568]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003570:	498a      	ldr	r1, [pc, #552]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003584:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	4982      	ldr	r1, [pc, #520]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4979      	ldr	r1, [pc, #484]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035c8:	4b74      	ldr	r3, [pc, #464]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4971      	ldr	r1, [pc, #452]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035ea:	4b6c      	ldr	r3, [pc, #432]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f023 020c 	bic.w	r2, r3, #12
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	4968      	ldr	r1, [pc, #416]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800360c:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	4960      	ldr	r1, [pc, #384]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363c:	4957      	ldr	r1, [pc, #348]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003650:	4b52      	ldr	r3, [pc, #328]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	494f      	ldr	r1, [pc, #316]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	4946      	ldr	r1, [pc, #280]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003694:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	493e      	ldr	r1, [pc, #248]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	4935      	ldr	r1, [pc, #212]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e6:	492d      	ldr	r1, [pc, #180]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d011      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	4924      	ldr	r1, [pc, #144]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	4914      	ldr	r1, [pc, #80]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376c:	490b      	ldr	r1, [pc, #44]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003790:	4902      	ldr	r1, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ac:	4b8a      	ldr	r3, [pc, #552]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	4986      	ldr	r1, [pc, #536]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	497d      	ldr	r1, [pc, #500]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d006      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80d6 	beq.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037fc:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fd fda2 	bl	8001350 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003810:	f7fd fd9e 	bl	8001350 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e195      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d021      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11d      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003856:	0e1b      	lsrs	r3, r3, #24
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	019a      	lsls	r2, r3, #6
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	4958      	ldr	r1, [pc, #352]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d02e      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a8:	d129      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038aa:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038b8:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038be:	0f1b      	lsrs	r3, r3, #28
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	019a      	lsls	r2, r3, #6
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	493e      	ldr	r1, [pc, #248]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	f023 021f 	bic.w	r2, r3, #31
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	3b01      	subs	r3, #1
 80038f6:	4938      	ldr	r1, [pc, #224]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01d      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391e:	0f1b      	lsrs	r3, r3, #28
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	019a      	lsls	r2, r3, #6
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	431a      	orrs	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	4926      	ldr	r1, [pc, #152]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	019a      	lsls	r2, r3, #6
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	491a      	ldr	r1, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003982:	f7fd fce5 	bl	8001350 <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800398a:	f7fd fce1 	bl	8001350 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b64      	cmp	r3, #100	; 0x64
 8003996:	d901      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0d8      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	f040 80ce 	bne.w	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd fcc8 	bl	8001350 <HAL_GetTick>
 80039c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039c2:	e00b      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039c4:	f7fd fcc4 	bl	8001350 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d904      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0bb      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039dc:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d0ec      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d02e      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d12a      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a12:	4b51      	ldr	r3, [pc, #324]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a20:	4b4d      	ldr	r3, [pc, #308]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	0f1b      	lsrs	r3, r3, #28
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	019a      	lsls	r2, r3, #6
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	071b      	lsls	r3, r3, #28
 8003a46:	4944      	ldr	r1, [pc, #272]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a4e:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	493d      	ldr	r1, [pc, #244]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d022      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7c:	d11d      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	0f1b      	lsrs	r3, r3, #28
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	4929      	ldr	r1, [pc, #164]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d028      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	0e1b      	lsrs	r3, r3, #24
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ad4:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	019a      	lsls	r2, r3, #6
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	431a      	orrs	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	4917      	ldr	r1, [pc, #92]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4911      	ldr	r1, [pc, #68]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fd fc14 	bl	8001350 <HAL_GetTick>
 8003b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b2c:	f7fd fc10 	bl	8001350 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e007      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4a:	d1ef      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800

08003b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e049      	b.n	8003c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f9f0 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 fb30 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e04c      	b.n	8003cbe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <HAL_TIM_Base_Start+0xc0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d022      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3e:	d01d      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_TIM_Base_Start+0xc4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_TIM_Base_Start+0xc8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <HAL_TIM_Base_Start+0xcc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_TIM_Base_Start+0xd0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <HAL_TIM_Base_Start+0xd4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIM_Base_Start+0x70>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_TIM_Base_Start+0xd8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d115      	bne.n	8003ca8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_TIM_Base_Start+0xdc>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d015      	beq.n	8003cba <HAL_TIM_Base_Start+0xae>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d011      	beq.n	8003cba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca6:	e008      	b.n	8003cba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40010400 	.word	0x40010400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40001800 	.word	0x40001800
 8003ce8:	00010007 	.word	0x00010007

08003cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e054      	b.n	8003dae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d01d      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_TIM_Base_Start_IT+0xe0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x80>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d115      	bne.n	8003d98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xec>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d015      	beq.n	8003daa <HAL_TIM_Base_Start_IT+0xbe>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d011      	beq.n	8003daa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	e008      	b.n	8003daa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e000      	b.n	8003dac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40010400 	.word	0x40010400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40001800 	.word	0x40001800
 8003dd8:	00010007 	.word	0x00010007

08003ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0202 	mvn.w	r2, #2
 8003e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f9d0 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9c2 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f9d3 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0204 	mvn.w	r2, #4
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9a6 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f998 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f9a9 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d122      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0208 	mvn.w	r2, #8
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f97c 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f96e 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f97f 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d122      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d11b      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f952 	bl	80041c4 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f944 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f955 	bl	80041d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10e      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0201 	mvn.w	r2, #1
 8003f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fd14 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb0c 	bl	80045a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9a:	d10e      	bne.n	8003fba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d107      	bne.n	8003fba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 faff 	bl	80045b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f903 	bl	80041ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d10e      	bne.n	8004012 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d107      	bne.n	8004012 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0220 	mvn.w	r2, #32
 800400a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fabf 	bl	8004590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIM_ConfigClockSource+0x1c>
 8004034:	2302      	movs	r3, #2
 8004036:	e0b4      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x186>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4b56      	ldr	r3, [pc, #344]	; (80041ac <HAL_TIM_ConfigClockSource+0x190>)
 8004054:	4013      	ands	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	d03e      	beq.n	80040f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004076:	f200 8087 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	f000 8086 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x172>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d87f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d01a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0xa6>
 800408c:	2b70      	cmp	r3, #112	; 0x70
 800408e:	d87b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d050      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0x11a>
 8004094:	2b60      	cmp	r3, #96	; 0x60
 8004096:	d877      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d03c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xfa>
 800409c:	2b50      	cmp	r3, #80	; 0x50
 800409e:	d873      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d058      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x13a>
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d86f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d064      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d86b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d060      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d867      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05c      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d05a      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040c0:	e062      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f000 f9af 	bl	8004434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	609a      	str	r2, [r3, #8]
      break;
 80040ee:	e04f      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f000 f998 	bl	8004434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004112:	609a      	str	r2, [r3, #8]
      break;
 8004114:	e03c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	461a      	mov	r2, r3
 8004124:	f000 f90c 	bl	8004340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2150      	movs	r1, #80	; 0x50
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f965 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8004134:	e02c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f92b 	bl	800439e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2160      	movs	r1, #96	; 0x60
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f955 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8004154:	e01c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f8ec 	bl	8004340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f945 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8004174:	e00c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f000 f93c 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8004186:	e003      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e000      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800418e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	fffeff88 	.word	0xfffeff88

080041b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a40      	ldr	r2, [pc, #256]	; (8004314 <TIM_Base_SetConfig+0x114>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421e:	d00f      	beq.n	8004240 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3d      	ldr	r2, [pc, #244]	; (8004318 <TIM_Base_SetConfig+0x118>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00b      	beq.n	8004240 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a3c      	ldr	r2, [pc, #240]	; (800431c <TIM_Base_SetConfig+0x11c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <TIM_Base_SetConfig+0x120>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3a      	ldr	r2, [pc, #232]	; (8004324 <TIM_Base_SetConfig+0x124>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d108      	bne.n	8004252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <TIM_Base_SetConfig+0x114>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02b      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004260:	d027      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <TIM_Base_SetConfig+0x118>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d023      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2b      	ldr	r2, [pc, #172]	; (800431c <TIM_Base_SetConfig+0x11c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01f      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <TIM_Base_SetConfig+0x120>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01b      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <TIM_Base_SetConfig+0x124>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d017      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a28      	ldr	r2, [pc, #160]	; (8004328 <TIM_Base_SetConfig+0x128>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a27      	ldr	r2, [pc, #156]	; (800432c <TIM_Base_SetConfig+0x12c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00f      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a26      	ldr	r2, [pc, #152]	; (8004330 <TIM_Base_SetConfig+0x130>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <TIM_Base_SetConfig+0x134>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a24      	ldr	r2, [pc, #144]	; (8004338 <TIM_Base_SetConfig+0x138>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a23      	ldr	r2, [pc, #140]	; (800433c <TIM_Base_SetConfig+0x13c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <TIM_Base_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0xf8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <TIM_Base_SetConfig+0x124>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d103      	bne.n	8004300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	615a      	str	r2, [r3, #20]
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40010400 	.word	0x40010400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800
 8004334:	40001800 	.word	0x40001800
 8004338:	40001c00 	.word	0x40001c00
 800433c:	40002000 	.word	0x40002000

08004340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	f043 0307 	orr.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e06d      	b.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d022      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d01d      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10c      	bne.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40010000 	.word	0x40010000
 8004578:	40010400 	.word	0x40010400
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40001800 	.word	0x40001800

08004590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e040      	b.n	8004660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc fd24 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fbe0 	bl	8004dd0 <UART_SetConfig>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e022      	b.n	8004660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fe38 	bl	8005298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 febf 	bl	80053dc <UART_CheckIdleState>
 800465e:	4603      	mov	r3, r0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004668:	b480      	push	{r7}
 800466a:	b08b      	sub	sp, #44	; 0x2c
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	2b20      	cmp	r3, #32
 800467c:	d147      	bne.n	800470e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_UART_Transmit_IT+0x22>
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e040      	b.n	8004710 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2221      	movs	r2, #33	; 0x21
 80046b6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d107      	bne.n	80046d2 <HAL_UART_Transmit_IT+0x6a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <HAL_UART_Transmit_IT+0xb4>)
 80046ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80046d0:	e002      	b.n	80046d8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <HAL_UART_Transmit_IT+0xb8>)
 80046d6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	613b      	str	r3, [r7, #16]
   return(result);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69f9      	ldr	r1, [r7, #28]
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	61bb      	str	r3, [r7, #24]
   return(result);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	372c      	adds	r7, #44	; 0x2c
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	0800593b 	.word	0x0800593b
 8004720:	08005885 	.word	0x08005885

08004724 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004738:	2b20      	cmp	r3, #32
 800473a:	d132      	bne.n	80047a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_UART_Receive_IT+0x24>
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e02b      	b.n	80047a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d018      	beq.n	8004792 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	613b      	str	r3, [r7, #16]
   return(result);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	69f9      	ldr	r1, [r7, #28]
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	61bb      	str	r3, [r7, #24]
   return(result);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e6      	bne.n	8004760 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	461a      	mov	r2, r3
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 ff33 	bl	8005604 <UART_Start_Receive_IT>
 800479e:	4603      	mov	r3, r0
 80047a0:	e000      	b.n	80047a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	; 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b0ba      	sub	sp, #232	; 0xe8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047da:	4013      	ands	r3, r2
 80047dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d115      	bne.n	8004814 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00f      	beq.n	8004814 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 82ac 	beq.w	8004d62 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
      }
      return;
 8004812:	e2a6      	b.n	8004d62 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8117 	beq.w	8004a4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800481e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800482a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800482e:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_UART_IRQHandler+0x298>)
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 810a 	beq.w	8004a4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d011      	beq.n	8004868 <HAL_UART_IRQHandler+0xbc>
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d011      	beq.n	8004898 <HAL_UART_IRQHandler+0xec>
 8004874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2202      	movs	r2, #2
 8004886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d011      	beq.n	80048c8 <HAL_UART_IRQHandler+0x11c>
 80048a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2204      	movs	r2, #4
 80048b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d017      	beq.n	8004904 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2208      	movs	r2, #8
 80048f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fa:	f043 0208 	orr.w	r2, r3, #8
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <HAL_UART_IRQHandler+0x18a>
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8212 	beq.w	8004d66 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800494e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004970:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d005      	beq.n	800498e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004986:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800498a:	2b00      	cmp	r3, #0
 800498c:	d04f      	beq.n	8004a2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fefe 	bl	8005790 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d141      	bne.n	8004a26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1d9      	bne.n	80049a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d013      	beq.n	8004a1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HAL_UART_IRQHandler+0x29c>)
 80049fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd f99c 	bl	8001d40 <HAL_DMA_Abort_IT>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d017      	beq.n	8004a3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e00f      	b.n	8004a3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9b6 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	e00b      	b.n	8004a3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9b2 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	e007      	b.n	8004a3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9ae 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a3c:	e193      	b.n	8004d66 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3e:	bf00      	nop
    return;
 8004a40:	e191      	b.n	8004d66 <HAL_UART_IRQHandler+0x5ba>
 8004a42:	bf00      	nop
 8004a44:	04000120 	.word	0x04000120
 8004a48:	08005859 	.word	0x08005859

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 814c 	bne.w	8004cee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8145 	beq.w	8004cee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 813e 	beq.w	8004cee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	f040 80b6 	bne.w	8004bf6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8165 	beq.w	8004d6a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	f080 815d 	bcs.w	8004d6a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	f000 8086 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004af6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1da      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e1      	bne.n	8004b12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e3      	bne.n	8004b4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e4      	bne.n	8004b94 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fd f846 	bl	8001c60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8d8 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bf4:	e0b9      	b.n	8004d6a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80ab 	beq.w	8004d6e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a6 	beq.w	8004d6e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c44:	647b      	str	r3, [r7, #68]	; 0x44
 8004c46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e4      	bne.n	8004c22 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	623b      	str	r3, [r7, #32]
   return(result);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e3      	bne.n	8004c58 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f023 0310 	bic.w	r3, r3, #16
 8004cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e4      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f85c 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cec:	e03f      	b.n	8004d6e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <HAL_UART_IRQHandler+0x56c>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f853 	bl	8004dbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d16:	e02d      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01c      	beq.n	8004d72 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
    }
    return;
 8004d40:	e017      	b.n	8004d72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d012      	beq.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fe4d 	bl	80059fa <UART_EndTransmit_IT>
    return;
 8004d60:	e008      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004d62:	bf00      	nop
 8004d64:	e006      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004d66:	bf00      	nop
 8004d68:	e004      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004d72:	bf00      	nop
  }

}
 8004d74:	37e8      	adds	r7, #232	; 0xe8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4ba6      	ldr	r3, [pc, #664]	; (8005094 <UART_SetConfig+0x2c4>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a94      	ldr	r2, [pc, #592]	; (8005098 <UART_SetConfig+0x2c8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d120      	bne.n	8004e8e <UART_SetConfig+0xbe>
 8004e4c:	4b93      	ldr	r3, [pc, #588]	; (800509c <UART_SetConfig+0x2cc>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d816      	bhi.n	8004e88 <UART_SetConfig+0xb8>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x90>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e7d 	.word	0x08004e7d
 8004e68:	08004e77 	.word	0x08004e77
 8004e6c:	08004e83 	.word	0x08004e83
 8004e70:	2301      	movs	r3, #1
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e150      	b.n	8005118 <UART_SetConfig+0x348>
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e14d      	b.n	8005118 <UART_SetConfig+0x348>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e14a      	b.n	8005118 <UART_SetConfig+0x348>
 8004e82:	2308      	movs	r3, #8
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e147      	b.n	8005118 <UART_SetConfig+0x348>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e144      	b.n	8005118 <UART_SetConfig+0x348>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a83      	ldr	r2, [pc, #524]	; (80050a0 <UART_SetConfig+0x2d0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d132      	bne.n	8004efe <UART_SetConfig+0x12e>
 8004e98:	4b80      	ldr	r3, [pc, #512]	; (800509c <UART_SetConfig+0x2cc>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	d828      	bhi.n	8004ef8 <UART_SetConfig+0x128>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0xdc>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ef9 	.word	0x08004ef9
 8004eb4:	08004ef9 	.word	0x08004ef9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004eed 	.word	0x08004eed
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ee7 	.word	0x08004ee7
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004ef9 	.word	0x08004ef9
 8004edc:	08004ef3 	.word	0x08004ef3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e118      	b.n	8005118 <UART_SetConfig+0x348>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e115      	b.n	8005118 <UART_SetConfig+0x348>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e112      	b.n	8005118 <UART_SetConfig+0x348>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e10f      	b.n	8005118 <UART_SetConfig+0x348>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e10c      	b.n	8005118 <UART_SetConfig+0x348>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a68      	ldr	r2, [pc, #416]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d120      	bne.n	8004f4a <UART_SetConfig+0x17a>
 8004f08:	4b64      	ldr	r3, [pc, #400]	; (800509c <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f12:	2b30      	cmp	r3, #48	; 0x30
 8004f14:	d013      	beq.n	8004f3e <UART_SetConfig+0x16e>
 8004f16:	2b30      	cmp	r3, #48	; 0x30
 8004f18:	d814      	bhi.n	8004f44 <UART_SetConfig+0x174>
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d009      	beq.n	8004f32 <UART_SetConfig+0x162>
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d810      	bhi.n	8004f44 <UART_SetConfig+0x174>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <UART_SetConfig+0x15c>
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d006      	beq.n	8004f38 <UART_SetConfig+0x168>
 8004f2a:	e00b      	b.n	8004f44 <UART_SetConfig+0x174>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e0f2      	b.n	8005118 <UART_SetConfig+0x348>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e0ef      	b.n	8005118 <UART_SetConfig+0x348>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0ec      	b.n	8005118 <UART_SetConfig+0x348>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0e9      	b.n	8005118 <UART_SetConfig+0x348>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e0e6      	b.n	8005118 <UART_SetConfig+0x348>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a56      	ldr	r2, [pc, #344]	; (80050a8 <UART_SetConfig+0x2d8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d120      	bne.n	8004f96 <UART_SetConfig+0x1c6>
 8004f54:	4b51      	ldr	r3, [pc, #324]	; (800509c <UART_SetConfig+0x2cc>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f60:	d013      	beq.n	8004f8a <UART_SetConfig+0x1ba>
 8004f62:	2bc0      	cmp	r3, #192	; 0xc0
 8004f64:	d814      	bhi.n	8004f90 <UART_SetConfig+0x1c0>
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d009      	beq.n	8004f7e <UART_SetConfig+0x1ae>
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d810      	bhi.n	8004f90 <UART_SetConfig+0x1c0>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <UART_SetConfig+0x1a8>
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d006      	beq.n	8004f84 <UART_SetConfig+0x1b4>
 8004f76:	e00b      	b.n	8004f90 <UART_SetConfig+0x1c0>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e0cc      	b.n	8005118 <UART_SetConfig+0x348>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e0c9      	b.n	8005118 <UART_SetConfig+0x348>
 8004f84:	2304      	movs	r3, #4
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e0c6      	b.n	8005118 <UART_SetConfig+0x348>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e0c3      	b.n	8005118 <UART_SetConfig+0x348>
 8004f90:	2310      	movs	r3, #16
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e0c0      	b.n	8005118 <UART_SetConfig+0x348>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a44      	ldr	r2, [pc, #272]	; (80050ac <UART_SetConfig+0x2dc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d125      	bne.n	8004fec <UART_SetConfig+0x21c>
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <UART_SetConfig+0x2cc>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fae:	d017      	beq.n	8004fe0 <UART_SetConfig+0x210>
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb4:	d817      	bhi.n	8004fe6 <UART_SetConfig+0x216>
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fba:	d00b      	beq.n	8004fd4 <UART_SetConfig+0x204>
 8004fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc0:	d811      	bhi.n	8004fe6 <UART_SetConfig+0x216>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <UART_SetConfig+0x1fe>
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d006      	beq.n	8004fda <UART_SetConfig+0x20a>
 8004fcc:	e00b      	b.n	8004fe6 <UART_SetConfig+0x216>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e0a1      	b.n	8005118 <UART_SetConfig+0x348>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e09e      	b.n	8005118 <UART_SetConfig+0x348>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e09b      	b.n	8005118 <UART_SetConfig+0x348>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e098      	b.n	8005118 <UART_SetConfig+0x348>
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e095      	b.n	8005118 <UART_SetConfig+0x348>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <UART_SetConfig+0x2e0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d125      	bne.n	8005042 <UART_SetConfig+0x272>
 8004ff6:	4b29      	ldr	r3, [pc, #164]	; (800509c <UART_SetConfig+0x2cc>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005004:	d017      	beq.n	8005036 <UART_SetConfig+0x266>
 8005006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800500a:	d817      	bhi.n	800503c <UART_SetConfig+0x26c>
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005010:	d00b      	beq.n	800502a <UART_SetConfig+0x25a>
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d811      	bhi.n	800503c <UART_SetConfig+0x26c>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <UART_SetConfig+0x254>
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d006      	beq.n	8005030 <UART_SetConfig+0x260>
 8005022:	e00b      	b.n	800503c <UART_SetConfig+0x26c>
 8005024:	2301      	movs	r3, #1
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e076      	b.n	8005118 <UART_SetConfig+0x348>
 800502a:	2302      	movs	r3, #2
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e073      	b.n	8005118 <UART_SetConfig+0x348>
 8005030:	2304      	movs	r3, #4
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e070      	b.n	8005118 <UART_SetConfig+0x348>
 8005036:	2308      	movs	r3, #8
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e06d      	b.n	8005118 <UART_SetConfig+0x348>
 800503c:	2310      	movs	r3, #16
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e06a      	b.n	8005118 <UART_SetConfig+0x348>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <UART_SetConfig+0x2e4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d138      	bne.n	80050be <UART_SetConfig+0x2ee>
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <UART_SetConfig+0x2cc>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005056:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800505a:	d017      	beq.n	800508c <UART_SetConfig+0x2bc>
 800505c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005060:	d82a      	bhi.n	80050b8 <UART_SetConfig+0x2e8>
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	d00b      	beq.n	8005080 <UART_SetConfig+0x2b0>
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d824      	bhi.n	80050b8 <UART_SetConfig+0x2e8>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <UART_SetConfig+0x2aa>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d006      	beq.n	8005086 <UART_SetConfig+0x2b6>
 8005078:	e01e      	b.n	80050b8 <UART_SetConfig+0x2e8>
 800507a:	2300      	movs	r3, #0
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e04b      	b.n	8005118 <UART_SetConfig+0x348>
 8005080:	2302      	movs	r3, #2
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e048      	b.n	8005118 <UART_SetConfig+0x348>
 8005086:	2304      	movs	r3, #4
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e045      	b.n	8005118 <UART_SetConfig+0x348>
 800508c:	2308      	movs	r3, #8
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e042      	b.n	8005118 <UART_SetConfig+0x348>
 8005092:	bf00      	nop
 8005094:	efff69f3 	.word	0xefff69f3
 8005098:	40011000 	.word	0x40011000
 800509c:	40023800 	.word	0x40023800
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40004800 	.word	0x40004800
 80050a8:	40004c00 	.word	0x40004c00
 80050ac:	40005000 	.word	0x40005000
 80050b0:	40011400 	.word	0x40011400
 80050b4:	40007800 	.word	0x40007800
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e02c      	b.n	8005118 <UART_SetConfig+0x348>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <UART_SetConfig+0x4bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d125      	bne.n	8005114 <UART_SetConfig+0x344>
 80050c8:	4b71      	ldr	r3, [pc, #452]	; (8005290 <UART_SetConfig+0x4c0>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050d6:	d017      	beq.n	8005108 <UART_SetConfig+0x338>
 80050d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050dc:	d817      	bhi.n	800510e <UART_SetConfig+0x33e>
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d00b      	beq.n	80050fc <UART_SetConfig+0x32c>
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d811      	bhi.n	800510e <UART_SetConfig+0x33e>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <UART_SetConfig+0x326>
 80050ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f2:	d006      	beq.n	8005102 <UART_SetConfig+0x332>
 80050f4:	e00b      	b.n	800510e <UART_SetConfig+0x33e>
 80050f6:	2300      	movs	r3, #0
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e00d      	b.n	8005118 <UART_SetConfig+0x348>
 80050fc:	2302      	movs	r3, #2
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e00a      	b.n	8005118 <UART_SetConfig+0x348>
 8005102:	2304      	movs	r3, #4
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e007      	b.n	8005118 <UART_SetConfig+0x348>
 8005108:	2308      	movs	r3, #8
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e004      	b.n	8005118 <UART_SetConfig+0x348>
 800510e:	2310      	movs	r3, #16
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e001      	b.n	8005118 <UART_SetConfig+0x348>
 8005114:	2310      	movs	r3, #16
 8005116:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	d15b      	bne.n	80051da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005122:	7ffb      	ldrb	r3, [r7, #31]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d828      	bhi.n	800517a <UART_SetConfig+0x3aa>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <UART_SetConfig+0x360>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	0800517b 	.word	0x0800517b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fe f8b2 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8005158:	61b8      	str	r0, [r7, #24]
        break;
 800515a:	e013      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7fe f8c2 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8005160:	61b8      	str	r0, [r7, #24]
        break;
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b4b      	ldr	r3, [pc, #300]	; (8005294 <UART_SetConfig+0x4c4>)
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e00c      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fd ff95 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 800516e:	61b8      	str	r0, [r7, #24]
        break;
 8005170:	e008      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	61bb      	str	r3, [r7, #24]
        break;
 8005178:	e004      	b.n	8005184 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	77bb      	strb	r3, [r7, #30]
        break;
 8005182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d074      	beq.n	8005274 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	005a      	lsls	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d916      	bls.n	80051d4 <UART_SetConfig+0x404>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d212      	bcs.n	80051d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f023 030f 	bic.w	r3, r3, #15
 80051b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	89fb      	ldrh	r3, [r7, #14]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	89fa      	ldrh	r2, [r7, #14]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e04f      	b.n	8005274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	77bb      	strb	r3, [r7, #30]
 80051d8:	e04c      	b.n	8005274 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d828      	bhi.n	8005232 <UART_SetConfig+0x462>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x418>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	08005233 	.word	0x08005233
 80051f8:	08005223 	.word	0x08005223
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005233 	.word	0x08005233
 8005204:	08005233 	.word	0x08005233
 8005208:	0800522b 	.word	0x0800522b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe f856 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8005210:	61b8      	str	r0, [r7, #24]
        break;
 8005212:	e013      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7fe f866 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8005218:	61b8      	str	r0, [r7, #24]
        break;
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <UART_SetConfig+0x4c4>)
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e00c      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fd ff39 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8005226:	61b8      	str	r0, [r7, #24]
        break;
 8005228:	e008      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	61bb      	str	r3, [r7, #24]
        break;
 8005230:	e004      	b.n	800523c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	77bb      	strb	r3, [r7, #30]
        break;
 800523a:	bf00      	nop
    }

    if (pclk != 0U)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	085a      	lsrs	r2, r3, #1
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	441a      	add	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d909      	bls.n	8005270 <UART_SetConfig+0x4a0>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d205      	bcs.n	8005270 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e001      	b.n	8005274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005280:	7fbb      	ldrb	r3, [r7, #30]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40007c00 	.word	0x40007c00
 8005290:	40023800 	.word	0x40023800
 8005294:	00f42400 	.word	0x00f42400

08005298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005396:	d10a      	bne.n	80053ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ec:	f7fb ffb0 	bl	8001350 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d10e      	bne.n	800541e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f831 	bl	8005476 <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e027      	b.n	800546e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b04      	cmp	r3, #4
 800542a:	d10e      	bne.n	800544a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f81b 	bl	8005476 <UART_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e011      	b.n	800546e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b09c      	sub	sp, #112	; 0x70
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005486:	e0a7      	b.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	f000 80a3 	beq.w	80055d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005492:	f7fb ff5d 	bl	8001350 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800549e:	429a      	cmp	r2, r3
 80054a0:	d302      	bcc.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80054a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d13f      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054bc:	667b      	str	r3, [r7, #100]	; 0x64
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e6      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	f023 0301 	bic.w	r3, r3, #1
 80054f0:	663b      	str	r3, [r7, #96]	; 0x60
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e068      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d050      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005544:	d148      	bne.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800554e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	613b      	str	r3, [r7, #16]
   return(result);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055a2:	623a      	str	r2, [r7, #32]
 80055a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	69f9      	ldr	r1, [r7, #28]
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e5      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e010      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	f43f af48 	beq.w	8005488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3770      	adds	r7, #112	; 0x70
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005604:	b480      	push	{r7}
 8005606:	b097      	sub	sp, #92	; 0x5c
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	d10e      	bne.n	8005656 <UART_Start_Receive_IT+0x52>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <UART_Start_Receive_IT+0x48>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800564a:	e02d      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005654:	e028      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <UART_Start_Receive_IT+0x76>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <UART_Start_Receive_IT+0x6c>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800566e:	e01b      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	227f      	movs	r2, #127	; 0x7f
 8005674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005678:	e016      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005682:	d10d      	bne.n	80056a0 <UART_Start_Receive_IT+0x9c>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <UART_Start_Receive_IT+0x92>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	227f      	movs	r2, #127	; 0x7f
 8005690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005694:	e008      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	223f      	movs	r2, #63	; 0x3f
 800569a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800569e:	e003      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2222      	movs	r2, #34	; 0x22
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3308      	adds	r3, #8
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	657b      	str	r3, [r7, #84]	; 0x54
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80056da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e5      	bne.n	80056b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d107      	bne.n	8005706 <UART_Start_Receive_IT+0x102>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <UART_Start_Receive_IT+0x184>)
 8005702:	669a      	str	r2, [r3, #104]	; 0x68
 8005704:	e002      	b.n	800570c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a20      	ldr	r2, [pc, #128]	; (800578c <UART_Start_Receive_IT+0x188>)
 800570a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
 8005734:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e6      	bne.n	8005714 <UART_Start_Receive_IT+0x110>
 8005746:	e018      	b.n	800577a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f043 0320 	orr.w	r3, r3, #32
 800575c:	653b      	str	r3, [r7, #80]	; 0x50
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	6a3a      	ldr	r2, [r7, #32]
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	61bb      	str	r3, [r7, #24]
   return(result);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e6      	bne.n	8005748 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	375c      	adds	r7, #92	; 0x5c
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	08005bb5 	.word	0x08005bb5
 800578c:	08005a4f 	.word	0x08005a4f

08005790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b095      	sub	sp, #84	; 0x54
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b6:	643b      	str	r3, [r7, #64]	; 0x40
 80057b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e6      	bne.n	8005798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3308      	adds	r3, #8
 80057d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3308      	adds	r3, #8
 80057e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e5      	bne.n	80057ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005802:	2b01      	cmp	r3, #1
 8005804:	d118      	bne.n	8005838 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60bb      	str	r3, [r7, #8]
   return(result);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	647b      	str	r3, [r7, #68]	; 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6979      	ldr	r1, [r7, #20]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	613b      	str	r3, [r7, #16]
   return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e6      	bne.n	8005806 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800584c:	bf00      	nop
 800584e:	3754      	adds	r7, #84	; 0x54
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fa8a 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b08f      	sub	sp, #60	; 0x3c
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005890:	2b21      	cmp	r3, #33	; 0x21
 8005892:	d14c      	bne.n	800592e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d132      	bne.n	8005906 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e6:	633b      	str	r3, [r7, #48]	; 0x30
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005904:	e013      	b.n	800592e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800592e:	bf00      	nop
 8005930:	373c      	adds	r7, #60	; 0x3c
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800593a:	b480      	push	{r7}
 800593c:	b091      	sub	sp, #68	; 0x44
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005946:	2b21      	cmp	r3, #33	; 0x21
 8005948:	d151      	bne.n	80059ee <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d132      	bne.n	80059bc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	623b      	str	r3, [r7, #32]
   return(result);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596a:	63bb      	str	r3, [r7, #56]	; 0x38
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	633b      	str	r3, [r7, #48]	; 0x30
 8005976:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	60fb      	str	r3, [r7, #12]
   return(result);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	69b9      	ldr	r1, [r7, #24]
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	617b      	str	r3, [r7, #20]
   return(result);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e6      	bne.n	8005988 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80059ba:	e018      	b.n	80059ee <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80059c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d6:	1c9a      	adds	r2, r3, #2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059ee:	bf00      	nop
 80059f0:	3744      	adds	r7, #68	; 0x44
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6979      	ldr	r1, [r7, #20]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff f99b 	bl	8004d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a46:	bf00      	nop
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b096      	sub	sp, #88	; 0x58
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a66:	2b22      	cmp	r3, #34	; 0x22
 8005a68:	f040 8098 	bne.w	8005b9c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a7a:	b2d9      	uxtb	r1, r3
 8005a7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	400a      	ands	r2, r1
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d17b      	bne.n	8005bac <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	623b      	str	r3, [r7, #32]
   return(result);
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b06:	633a      	str	r2, [r7, #48]	; 0x30
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d12e      	bne.n	8005b94 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	69b9      	ldr	r1, [r7, #24]
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	617b      	str	r3, [r7, #20]
   return(result);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d103      	bne.n	8005b84 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2210      	movs	r2, #16
 8005b82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff f909 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b92:	e00b      	b.n	8005bac <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fa ff21 	bl	80009dc <HAL_UART_RxCpltCallback>
}
 8005b9a:	e007      	b.n	8005bac <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0208 	orr.w	r2, r2, #8
 8005baa:	619a      	str	r2, [r3, #24]
}
 8005bac:	bf00      	nop
 8005bae:	3758      	adds	r7, #88	; 0x58
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b096      	sub	sp, #88	; 0x58
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bcc:	2b22      	cmp	r3, #34	; 0x22
 8005bce:	f040 8098 	bne.w	8005d02 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005be2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005be6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bea:	4013      	ands	r3, r2
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	1c9a      	adds	r2, r3, #2
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d17b      	bne.n	8005d12 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d12e      	bne.n	8005cfa <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d103      	bne.n	8005cea <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff f856 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cf8:	e00b      	b.n	8005d12 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fa fe6e 	bl	80009dc <HAL_UART_RxCpltCallback>
}
 8005d00:	e007      	b.n	8005d12 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0208 	orr.w	r2, r2, #8
 8005d10:	619a      	str	r2, [r3, #24]
}
 8005d12:	bf00      	nop
 8005d14:	3758      	adds	r7, #88	; 0x58
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	f107 001c 	add.w	r0, r7, #28
 8005d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d120      	bne.n	8005d76 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <USB_CoreInit+0xac>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d105      	bne.n	8005d6a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa96 	bl	800629c <USB_CoreReset>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]
 8005d74:	e010      	b.n	8005d98 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa8a 	bl	800629c <USB_CoreReset>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10b      	bne.n	8005db6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f043 0206 	orr.w	r2, r3, #6
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc2:	b004      	add	sp, #16
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	ffbdffbf 	.word	0xffbdffbf

08005dcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 0201 	bic.w	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d115      	bne.n	8005e3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	f7fb faa3 	bl	8001368 <HAL_Delay>
      ms++;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa29 	bl	8006280 <USB_GetMode>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d01e      	beq.n	8005e72 <USB_SetCurrentMode+0x84>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b31      	cmp	r3, #49	; 0x31
 8005e38:	d9f0      	bls.n	8005e1c <USB_SetCurrentMode+0x2e>
 8005e3a:	e01a      	b.n	8005e72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d115      	bne.n	8005e6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f7fb fa8a 	bl	8001368 <HAL_Delay>
      ms++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa10 	bl	8006280 <USB_GetMode>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <USB_SetCurrentMode+0x84>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b31      	cmp	r3, #49	; 0x31
 8005e6a:	d9f0      	bls.n	8005e4e <USB_SetCurrentMode+0x60>
 8005e6c:	e001      	b.n	8005e72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e005      	b.n	8005e7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b32      	cmp	r3, #50	; 0x32
 8005e76:	d101      	bne.n	8005e7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e88:	b084      	sub	sp, #16
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	e009      	b.n	8005ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3340      	adds	r3, #64	; 0x40
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b0e      	cmp	r3, #14
 8005ec0:	d9f2      	bls.n	8005ea8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11c      	bne.n	8005f02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e005      	b.n	8005f0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	4619      	mov	r1, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f28:	461a      	mov	r2, r3
 8005f2a:	680b      	ldr	r3, [r1, #0]
 8005f2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10c      	bne.n	8005f4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f965 	bl	800620c <USB_SetDevSpeed>
 8005f42:	e008      	b.n	8005f56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f44:	2101      	movs	r1, #1
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f960 	bl	800620c <USB_SetDevSpeed>
 8005f4c:	e003      	b.n	8005f56 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f4e:	2103      	movs	r1, #3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f95b 	bl	800620c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f56:	2110      	movs	r1, #16
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8f3 	bl	8006144 <USB_FlushTxFifo>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f91f 	bl	80061ac <USB_FlushRxFifo>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2300      	movs	r3, #0
 8005f82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	461a      	mov	r2, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	e043      	b.n	800602a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb8:	d118      	bne.n	8005fec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e013      	b.n	8005ffe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e008      	b.n	8005ffe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	461a      	mov	r2, r3
 800600c:	2300      	movs	r3, #0
 800600e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	461a      	mov	r2, r3
 800601e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	3301      	adds	r3, #1
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d3b7      	bcc.n	8005fa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	e043      	b.n	80060c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604e:	d118      	bne.n	8006082 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e013      	b.n	8006094 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	461a      	mov	r2, r3
 800607a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e008      	b.n	8006094 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	461a      	mov	r2, r3
 8006090:	2300      	movs	r3, #0
 8006092:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	461a      	mov	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	461a      	mov	r2, r3
 80060b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	3301      	adds	r3, #1
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3b7      	bcc.n	8006038 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f043 0210 	orr.w	r2, r3, #16
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <USB_DevInit+0x2b4>)
 8006102:	4313      	orrs	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699a      	ldr	r2, [r3, #24]
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <USB_DevInit+0x2b8>)
 8006126:	4313      	orrs	r3, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006138:	b004      	add	sp, #16
 800613a:	4770      	bx	lr
 800613c:	803c3800 	.word	0x803c3800
 8006140:	40000004 	.word	0x40000004

08006144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <USB_FlushTxFifo+0x64>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d901      	bls.n	8006164 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e01b      	b.n	800619c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	daf2      	bge.n	8006152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	019b      	lsls	r3, r3, #6
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <USB_FlushTxFifo+0x64>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e006      	b.n	800619c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b20      	cmp	r3, #32
 8006198:	d0f0      	beq.n	800617c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	00030d40 	.word	0x00030d40

080061ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a11      	ldr	r2, [pc, #68]	; (8006208 <USB_FlushRxFifo+0x5c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e018      	b.n	80061fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	daf2      	bge.n	80061b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2210      	movs	r2, #16
 80061da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a08      	ldr	r2, [pc, #32]	; (8006208 <USB_FlushRxFifo+0x5c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e006      	b.n	80061fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d0f0      	beq.n	80061dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	00030d40 	.word	0x00030d40

0800620c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0301 	and.w	r3, r3, #1
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4a13      	ldr	r2, [pc, #76]	; (8006300 <USB_CoreReset+0x64>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e01b      	b.n	80062f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	daf2      	bge.n	80062a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f043 0201 	orr.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a09      	ldr	r2, [pc, #36]	; (8006300 <USB_CoreReset+0x64>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e006      	b.n	80062f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d0f0      	beq.n	80062d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	00030d40 	.word	0x00030d40

08006304 <atoi>:
 8006304:	220a      	movs	r2, #10
 8006306:	2100      	movs	r1, #0
 8006308:	f000 bd16 	b.w	8006d38 <strtol>

0800630c <__errno>:
 800630c:	4b01      	ldr	r3, [pc, #4]	; (8006314 <__errno+0x8>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000b00 	.word	0x20000b00

08006318 <__libc_init_array>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	4d0d      	ldr	r5, [pc, #52]	; (8006350 <__libc_init_array+0x38>)
 800631c:	4c0d      	ldr	r4, [pc, #52]	; (8006354 <__libc_init_array+0x3c>)
 800631e:	1b64      	subs	r4, r4, r5
 8006320:	10a4      	asrs	r4, r4, #2
 8006322:	2600      	movs	r6, #0
 8006324:	42a6      	cmp	r6, r4
 8006326:	d109      	bne.n	800633c <__libc_init_array+0x24>
 8006328:	4d0b      	ldr	r5, [pc, #44]	; (8006358 <__libc_init_array+0x40>)
 800632a:	4c0c      	ldr	r4, [pc, #48]	; (800635c <__libc_init_array+0x44>)
 800632c:	f002 fee8 	bl	8009100 <_init>
 8006330:	1b64      	subs	r4, r4, r5
 8006332:	10a4      	asrs	r4, r4, #2
 8006334:	2600      	movs	r6, #0
 8006336:	42a6      	cmp	r6, r4
 8006338:	d105      	bne.n	8006346 <__libc_init_array+0x2e>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006340:	4798      	blx	r3
 8006342:	3601      	adds	r6, #1
 8006344:	e7ee      	b.n	8006324 <__libc_init_array+0xc>
 8006346:	f855 3b04 	ldr.w	r3, [r5], #4
 800634a:	4798      	blx	r3
 800634c:	3601      	adds	r6, #1
 800634e:	e7f2      	b.n	8006336 <__libc_init_array+0x1e>
 8006350:	08009544 	.word	0x08009544
 8006354:	08009544 	.word	0x08009544
 8006358:	08009544 	.word	0x08009544
 800635c:	08009548 	.word	0x08009548

08006360 <memset>:
 8006360:	4402      	add	r2, r0
 8006362:	4603      	mov	r3, r0
 8006364:	4293      	cmp	r3, r2
 8006366:	d100      	bne.n	800636a <memset+0xa>
 8006368:	4770      	bx	lr
 800636a:	f803 1b01 	strb.w	r1, [r3], #1
 800636e:	e7f9      	b.n	8006364 <memset+0x4>

08006370 <__cvt>:
 8006370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006372:	ed2d 8b02 	vpush	{d8}
 8006376:	eeb0 8b40 	vmov.f64	d8, d0
 800637a:	b085      	sub	sp, #20
 800637c:	4617      	mov	r7, r2
 800637e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006380:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006382:	ee18 2a90 	vmov	r2, s17
 8006386:	f025 0520 	bic.w	r5, r5, #32
 800638a:	2a00      	cmp	r2, #0
 800638c:	bfb6      	itet	lt
 800638e:	222d      	movlt	r2, #45	; 0x2d
 8006390:	2200      	movge	r2, #0
 8006392:	eeb1 8b40 	vneglt.f64	d8, d0
 8006396:	2d46      	cmp	r5, #70	; 0x46
 8006398:	460c      	mov	r4, r1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	d004      	beq.n	80063a8 <__cvt+0x38>
 800639e:	2d45      	cmp	r5, #69	; 0x45
 80063a0:	d100      	bne.n	80063a4 <__cvt+0x34>
 80063a2:	3401      	adds	r4, #1
 80063a4:	2102      	movs	r1, #2
 80063a6:	e000      	b.n	80063aa <__cvt+0x3a>
 80063a8:	2103      	movs	r1, #3
 80063aa:	ab03      	add	r3, sp, #12
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	ab02      	add	r3, sp, #8
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4622      	mov	r2, r4
 80063b4:	4633      	mov	r3, r6
 80063b6:	eeb0 0b48 	vmov.f64	d0, d8
 80063ba:	f000 fd55 	bl	8006e68 <_dtoa_r>
 80063be:	2d47      	cmp	r5, #71	; 0x47
 80063c0:	d101      	bne.n	80063c6 <__cvt+0x56>
 80063c2:	07fb      	lsls	r3, r7, #31
 80063c4:	d51a      	bpl.n	80063fc <__cvt+0x8c>
 80063c6:	2d46      	cmp	r5, #70	; 0x46
 80063c8:	eb00 0204 	add.w	r2, r0, r4
 80063cc:	d10c      	bne.n	80063e8 <__cvt+0x78>
 80063ce:	7803      	ldrb	r3, [r0, #0]
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d107      	bne.n	80063e4 <__cvt+0x74>
 80063d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	bf1c      	itt	ne
 80063de:	f1c4 0401 	rsbne	r4, r4, #1
 80063e2:	6034      	strne	r4, [r6, #0]
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	441a      	add	r2, r3
 80063e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f0:	bf08      	it	eq
 80063f2:	9203      	streq	r2, [sp, #12]
 80063f4:	2130      	movs	r1, #48	; 0x30
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d307      	bcc.n	800640c <__cvt+0x9c>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006400:	1a1b      	subs	r3, r3, r0
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	b005      	add	sp, #20
 8006406:	ecbd 8b02 	vpop	{d8}
 800640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640c:	1c5c      	adds	r4, r3, #1
 800640e:	9403      	str	r4, [sp, #12]
 8006410:	7019      	strb	r1, [r3, #0]
 8006412:	e7f0      	b.n	80063f6 <__cvt+0x86>

08006414 <__exponent>:
 8006414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006416:	4603      	mov	r3, r0
 8006418:	2900      	cmp	r1, #0
 800641a:	bfb8      	it	lt
 800641c:	4249      	neglt	r1, r1
 800641e:	f803 2b02 	strb.w	r2, [r3], #2
 8006422:	bfb4      	ite	lt
 8006424:	222d      	movlt	r2, #45	; 0x2d
 8006426:	222b      	movge	r2, #43	; 0x2b
 8006428:	2909      	cmp	r1, #9
 800642a:	7042      	strb	r2, [r0, #1]
 800642c:	dd2a      	ble.n	8006484 <__exponent+0x70>
 800642e:	f10d 0407 	add.w	r4, sp, #7
 8006432:	46a4      	mov	ip, r4
 8006434:	270a      	movs	r7, #10
 8006436:	46a6      	mov	lr, r4
 8006438:	460a      	mov	r2, r1
 800643a:	fb91 f6f7 	sdiv	r6, r1, r7
 800643e:	fb07 1516 	mls	r5, r7, r6, r1
 8006442:	3530      	adds	r5, #48	; 0x30
 8006444:	2a63      	cmp	r2, #99	; 0x63
 8006446:	f104 34ff 	add.w	r4, r4, #4294967295
 800644a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800644e:	4631      	mov	r1, r6
 8006450:	dcf1      	bgt.n	8006436 <__exponent+0x22>
 8006452:	3130      	adds	r1, #48	; 0x30
 8006454:	f1ae 0502 	sub.w	r5, lr, #2
 8006458:	f804 1c01 	strb.w	r1, [r4, #-1]
 800645c:	1c44      	adds	r4, r0, #1
 800645e:	4629      	mov	r1, r5
 8006460:	4561      	cmp	r1, ip
 8006462:	d30a      	bcc.n	800647a <__exponent+0x66>
 8006464:	f10d 0209 	add.w	r2, sp, #9
 8006468:	eba2 020e 	sub.w	r2, r2, lr
 800646c:	4565      	cmp	r5, ip
 800646e:	bf88      	it	hi
 8006470:	2200      	movhi	r2, #0
 8006472:	4413      	add	r3, r2
 8006474:	1a18      	subs	r0, r3, r0
 8006476:	b003      	add	sp, #12
 8006478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006482:	e7ed      	b.n	8006460 <__exponent+0x4c>
 8006484:	2330      	movs	r3, #48	; 0x30
 8006486:	3130      	adds	r1, #48	; 0x30
 8006488:	7083      	strb	r3, [r0, #2]
 800648a:	70c1      	strb	r1, [r0, #3]
 800648c:	1d03      	adds	r3, r0, #4
 800648e:	e7f1      	b.n	8006474 <__exponent+0x60>

08006490 <_printf_float>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	b08b      	sub	sp, #44	; 0x2c
 8006496:	460c      	mov	r4, r1
 8006498:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800649c:	4616      	mov	r6, r2
 800649e:	461f      	mov	r7, r3
 80064a0:	4605      	mov	r5, r0
 80064a2:	f001 fa4f 	bl	8007944 <_localeconv_r>
 80064a6:	f8d0 b000 	ldr.w	fp, [r0]
 80064aa:	4658      	mov	r0, fp
 80064ac:	f7f9 fec8 	bl	8000240 <strlen>
 80064b0:	2300      	movs	r3, #0
 80064b2:	9308      	str	r3, [sp, #32]
 80064b4:	f8d8 3000 	ldr.w	r3, [r8]
 80064b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064bc:	6822      	ldr	r2, [r4, #0]
 80064be:	3307      	adds	r3, #7
 80064c0:	f023 0307 	bic.w	r3, r3, #7
 80064c4:	f103 0108 	add.w	r1, r3, #8
 80064c8:	f8c8 1000 	str.w	r1, [r8]
 80064cc:	4682      	mov	sl, r0
 80064ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80064d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006738 <_printf_float+0x2a8>
 80064da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80064de:	eeb0 6bc0 	vabs.f64	d6, d0
 80064e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	dd24      	ble.n	8006536 <_printf_float+0xa6>
 80064ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80064f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f4:	d502      	bpl.n	80064fc <_printf_float+0x6c>
 80064f6:	232d      	movs	r3, #45	; 0x2d
 80064f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064fc:	4b90      	ldr	r3, [pc, #576]	; (8006740 <_printf_float+0x2b0>)
 80064fe:	4891      	ldr	r0, [pc, #580]	; (8006744 <_printf_float+0x2b4>)
 8006500:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006504:	bf94      	ite	ls
 8006506:	4698      	movls	r8, r3
 8006508:	4680      	movhi	r8, r0
 800650a:	2303      	movs	r3, #3
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	f022 0204 	bic.w	r2, r2, #4
 8006512:	2300      	movs	r3, #0
 8006514:	6022      	str	r2, [r4, #0]
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	9700      	str	r7, [sp, #0]
 800651a:	4633      	mov	r3, r6
 800651c:	aa09      	add	r2, sp, #36	; 0x24
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f000 f9d3 	bl	80068cc <_printf_common>
 8006526:	3001      	adds	r0, #1
 8006528:	f040 808a 	bne.w	8006640 <_printf_float+0x1b0>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	b00b      	add	sp, #44	; 0x2c
 8006532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006536:	eeb4 0b40 	vcmp.f64	d0, d0
 800653a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653e:	d709      	bvc.n	8006554 <_printf_float+0xc4>
 8006540:	ee10 3a90 	vmov	r3, s1
 8006544:	2b00      	cmp	r3, #0
 8006546:	bfbc      	itt	lt
 8006548:	232d      	movlt	r3, #45	; 0x2d
 800654a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800654e:	487e      	ldr	r0, [pc, #504]	; (8006748 <_printf_float+0x2b8>)
 8006550:	4b7e      	ldr	r3, [pc, #504]	; (800674c <_printf_float+0x2bc>)
 8006552:	e7d5      	b.n	8006500 <_printf_float+0x70>
 8006554:	6863      	ldr	r3, [r4, #4]
 8006556:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800655a:	9104      	str	r1, [sp, #16]
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	d13c      	bne.n	80065da <_printf_float+0x14a>
 8006560:	2306      	movs	r3, #6
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	2300      	movs	r3, #0
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	ab08      	add	r3, sp, #32
 800656a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800656e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006572:	ab07      	add	r3, sp, #28
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	f10d 031b 	add.w	r3, sp, #27
 800657e:	4628      	mov	r0, r5
 8006580:	f7ff fef6 	bl	8006370 <__cvt>
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	9907      	ldr	r1, [sp, #28]
 8006588:	2b47      	cmp	r3, #71	; 0x47
 800658a:	4680      	mov	r8, r0
 800658c:	d108      	bne.n	80065a0 <_printf_float+0x110>
 800658e:	1cc8      	adds	r0, r1, #3
 8006590:	db02      	blt.n	8006598 <_printf_float+0x108>
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	4299      	cmp	r1, r3
 8006596:	dd41      	ble.n	800661c <_printf_float+0x18c>
 8006598:	f1a9 0902 	sub.w	r9, r9, #2
 800659c:	fa5f f989 	uxtb.w	r9, r9
 80065a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065a4:	d820      	bhi.n	80065e8 <_printf_float+0x158>
 80065a6:	3901      	subs	r1, #1
 80065a8:	464a      	mov	r2, r9
 80065aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065ae:	9107      	str	r1, [sp, #28]
 80065b0:	f7ff ff30 	bl	8006414 <__exponent>
 80065b4:	9a08      	ldr	r2, [sp, #32]
 80065b6:	9004      	str	r0, [sp, #16]
 80065b8:	1813      	adds	r3, r2, r0
 80065ba:	2a01      	cmp	r2, #1
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	dc02      	bgt.n	80065c6 <_printf_float+0x136>
 80065c0:	6822      	ldr	r2, [r4, #0]
 80065c2:	07d2      	lsls	r2, r2, #31
 80065c4:	d501      	bpl.n	80065ca <_printf_float+0x13a>
 80065c6:	3301      	adds	r3, #1
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0a2      	beq.n	8006518 <_printf_float+0x88>
 80065d2:	232d      	movs	r3, #45	; 0x2d
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d8:	e79e      	b.n	8006518 <_printf_float+0x88>
 80065da:	9904      	ldr	r1, [sp, #16]
 80065dc:	2947      	cmp	r1, #71	; 0x47
 80065de:	d1c1      	bne.n	8006564 <_printf_float+0xd4>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1bf      	bne.n	8006564 <_printf_float+0xd4>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e7bc      	b.n	8006562 <_printf_float+0xd2>
 80065e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80065ec:	d118      	bne.n	8006620 <_printf_float+0x190>
 80065ee:	2900      	cmp	r1, #0
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	dd0b      	ble.n	800660c <_printf_float+0x17c>
 80065f4:	6121      	str	r1, [r4, #16]
 80065f6:	b913      	cbnz	r3, 80065fe <_printf_float+0x16e>
 80065f8:	6822      	ldr	r2, [r4, #0]
 80065fa:	07d0      	lsls	r0, r2, #31
 80065fc:	d502      	bpl.n	8006604 <_printf_float+0x174>
 80065fe:	3301      	adds	r3, #1
 8006600:	440b      	add	r3, r1
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	2300      	movs	r3, #0
 8006606:	65a1      	str	r1, [r4, #88]	; 0x58
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	e7de      	b.n	80065ca <_printf_float+0x13a>
 800660c:	b913      	cbnz	r3, 8006614 <_printf_float+0x184>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	07d2      	lsls	r2, r2, #31
 8006612:	d501      	bpl.n	8006618 <_printf_float+0x188>
 8006614:	3302      	adds	r3, #2
 8006616:	e7f4      	b.n	8006602 <_printf_float+0x172>
 8006618:	2301      	movs	r3, #1
 800661a:	e7f2      	b.n	8006602 <_printf_float+0x172>
 800661c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	4299      	cmp	r1, r3
 8006624:	db05      	blt.n	8006632 <_printf_float+0x1a2>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	6121      	str	r1, [r4, #16]
 800662a:	07d8      	lsls	r0, r3, #31
 800662c:	d5ea      	bpl.n	8006604 <_printf_float+0x174>
 800662e:	1c4b      	adds	r3, r1, #1
 8006630:	e7e7      	b.n	8006602 <_printf_float+0x172>
 8006632:	2900      	cmp	r1, #0
 8006634:	bfd4      	ite	le
 8006636:	f1c1 0202 	rsble	r2, r1, #2
 800663a:	2201      	movgt	r2, #1
 800663c:	4413      	add	r3, r2
 800663e:	e7e0      	b.n	8006602 <_printf_float+0x172>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	055a      	lsls	r2, r3, #21
 8006644:	d407      	bmi.n	8006656 <_printf_float+0x1c6>
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	4642      	mov	r2, r8
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	d12a      	bne.n	80066aa <_printf_float+0x21a>
 8006654:	e76a      	b.n	800652c <_printf_float+0x9c>
 8006656:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800665a:	f240 80e2 	bls.w	8006822 <_printf_float+0x392>
 800665e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006662:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666a:	d133      	bne.n	80066d4 <_printf_float+0x244>
 800666c:	4a38      	ldr	r2, [pc, #224]	; (8006750 <_printf_float+0x2c0>)
 800666e:	2301      	movs	r3, #1
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f af58 	beq.w	800652c <_printf_float+0x9c>
 800667c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006680:	429a      	cmp	r2, r3
 8006682:	db02      	blt.n	800668a <_printf_float+0x1fa>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	07d8      	lsls	r0, r3, #31
 8006688:	d50f      	bpl.n	80066aa <_printf_float+0x21a>
 800668a:	4653      	mov	r3, sl
 800668c:	465a      	mov	r2, fp
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f af49 	beq.w	800652c <_printf_float+0x9c>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	f104 091a 	add.w	r9, r4, #26
 80066a2:	9b08      	ldr	r3, [sp, #32]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	4543      	cmp	r3, r8
 80066a8:	dc09      	bgt.n	80066be <_printf_float+0x22e>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	079b      	lsls	r3, r3, #30
 80066ae:	f100 8108 	bmi.w	80068c2 <_printf_float+0x432>
 80066b2:	68e0      	ldr	r0, [r4, #12]
 80066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b6:	4298      	cmp	r0, r3
 80066b8:	bfb8      	it	lt
 80066ba:	4618      	movlt	r0, r3
 80066bc:	e738      	b.n	8006530 <_printf_float+0xa0>
 80066be:	2301      	movs	r3, #1
 80066c0:	464a      	mov	r2, r9
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f af2f 	beq.w	800652c <_printf_float+0x9c>
 80066ce:	f108 0801 	add.w	r8, r8, #1
 80066d2:	e7e6      	b.n	80066a2 <_printf_float+0x212>
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	dc3c      	bgt.n	8006754 <_printf_float+0x2c4>
 80066da:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <_printf_float+0x2c0>)
 80066dc:	2301      	movs	r3, #1
 80066de:	4631      	mov	r1, r6
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	f43f af21 	beq.w	800652c <_printf_float+0x9c>
 80066ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d102      	bne.n	80066f8 <_printf_float+0x268>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	07d9      	lsls	r1, r3, #31
 80066f6:	d5d8      	bpl.n	80066aa <_printf_float+0x21a>
 80066f8:	4653      	mov	r3, sl
 80066fa:	465a      	mov	r2, fp
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f af12 	beq.w	800652c <_printf_float+0x9c>
 8006708:	f04f 0900 	mov.w	r9, #0
 800670c:	f104 0a1a 	add.w	sl, r4, #26
 8006710:	9b07      	ldr	r3, [sp, #28]
 8006712:	425b      	negs	r3, r3
 8006714:	454b      	cmp	r3, r9
 8006716:	dc01      	bgt.n	800671c <_printf_float+0x28c>
 8006718:	9b08      	ldr	r3, [sp, #32]
 800671a:	e795      	b.n	8006648 <_printf_float+0x1b8>
 800671c:	2301      	movs	r3, #1
 800671e:	4652      	mov	r2, sl
 8006720:	4631      	mov	r1, r6
 8006722:	4628      	mov	r0, r5
 8006724:	47b8      	blx	r7
 8006726:	3001      	adds	r0, #1
 8006728:	f43f af00 	beq.w	800652c <_printf_float+0x9c>
 800672c:	f109 0901 	add.w	r9, r9, #1
 8006730:	e7ee      	b.n	8006710 <_printf_float+0x280>
 8006732:	bf00      	nop
 8006734:	f3af 8000 	nop.w
 8006738:	ffffffff 	.word	0xffffffff
 800673c:	7fefffff 	.word	0x7fefffff
 8006740:	08009160 	.word	0x08009160
 8006744:	08009164 	.word	0x08009164
 8006748:	0800916c 	.word	0x0800916c
 800674c:	08009168 	.word	0x08009168
 8006750:	08009170 	.word	0x08009170
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006758:	429a      	cmp	r2, r3
 800675a:	bfa8      	it	ge
 800675c:	461a      	movge	r2, r3
 800675e:	2a00      	cmp	r2, #0
 8006760:	4691      	mov	r9, r2
 8006762:	dc38      	bgt.n	80067d6 <_printf_float+0x346>
 8006764:	2300      	movs	r3, #0
 8006766:	9305      	str	r3, [sp, #20]
 8006768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800676c:	f104 021a 	add.w	r2, r4, #26
 8006770:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006772:	9905      	ldr	r1, [sp, #20]
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	eba3 0309 	sub.w	r3, r3, r9
 800677a:	428b      	cmp	r3, r1
 800677c:	dc33      	bgt.n	80067e6 <_printf_float+0x356>
 800677e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006782:	429a      	cmp	r2, r3
 8006784:	db3c      	blt.n	8006800 <_printf_float+0x370>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	07da      	lsls	r2, r3, #31
 800678a:	d439      	bmi.n	8006800 <_printf_float+0x370>
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	9a04      	ldr	r2, [sp, #16]
 8006790:	9907      	ldr	r1, [sp, #28]
 8006792:	1a9a      	subs	r2, r3, r2
 8006794:	eba3 0901 	sub.w	r9, r3, r1
 8006798:	4591      	cmp	r9, r2
 800679a:	bfa8      	it	ge
 800679c:	4691      	movge	r9, r2
 800679e:	f1b9 0f00 	cmp.w	r9, #0
 80067a2:	dc35      	bgt.n	8006810 <_printf_float+0x380>
 80067a4:	f04f 0800 	mov.w	r8, #0
 80067a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ac:	f104 0a1a 	add.w	sl, r4, #26
 80067b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	eba3 0309 	sub.w	r3, r3, r9
 80067ba:	4543      	cmp	r3, r8
 80067bc:	f77f af75 	ble.w	80066aa <_printf_float+0x21a>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4652      	mov	r2, sl
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f aeae 	beq.w	800652c <_printf_float+0x9c>
 80067d0:	f108 0801 	add.w	r8, r8, #1
 80067d4:	e7ec      	b.n	80067b0 <_printf_float+0x320>
 80067d6:	4613      	mov	r3, r2
 80067d8:	4631      	mov	r1, r6
 80067da:	4642      	mov	r2, r8
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	d1bf      	bne.n	8006764 <_printf_float+0x2d4>
 80067e4:	e6a2      	b.n	800652c <_printf_float+0x9c>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	9204      	str	r2, [sp, #16]
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f ae9b 	beq.w	800652c <_printf_float+0x9c>
 80067f6:	9b05      	ldr	r3, [sp, #20]
 80067f8:	9a04      	ldr	r2, [sp, #16]
 80067fa:	3301      	adds	r3, #1
 80067fc:	9305      	str	r3, [sp, #20]
 80067fe:	e7b7      	b.n	8006770 <_printf_float+0x2e0>
 8006800:	4653      	mov	r3, sl
 8006802:	465a      	mov	r2, fp
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	d1be      	bne.n	800678c <_printf_float+0x2fc>
 800680e:	e68d      	b.n	800652c <_printf_float+0x9c>
 8006810:	9a04      	ldr	r2, [sp, #16]
 8006812:	464b      	mov	r3, r9
 8006814:	4442      	add	r2, r8
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	d1c1      	bne.n	80067a4 <_printf_float+0x314>
 8006820:	e684      	b.n	800652c <_printf_float+0x9c>
 8006822:	9a08      	ldr	r2, [sp, #32]
 8006824:	2a01      	cmp	r2, #1
 8006826:	dc01      	bgt.n	800682c <_printf_float+0x39c>
 8006828:	07db      	lsls	r3, r3, #31
 800682a:	d537      	bpl.n	800689c <_printf_float+0x40c>
 800682c:	2301      	movs	r3, #1
 800682e:	4642      	mov	r2, r8
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f ae78 	beq.w	800652c <_printf_float+0x9c>
 800683c:	4653      	mov	r3, sl
 800683e:	465a      	mov	r2, fp
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f ae70 	beq.w	800652c <_printf_float+0x9c>
 800684c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006850:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006858:	d01b      	beq.n	8006892 <_printf_float+0x402>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	f108 0201 	add.w	r2, r8, #1
 8006860:	3b01      	subs	r3, #1
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	d10e      	bne.n	800688a <_printf_float+0x3fa>
 800686c:	e65e      	b.n	800652c <_printf_float+0x9c>
 800686e:	2301      	movs	r3, #1
 8006870:	464a      	mov	r2, r9
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae57 	beq.w	800652c <_printf_float+0x9c>
 800687e:	f108 0801 	add.w	r8, r8, #1
 8006882:	9b08      	ldr	r3, [sp, #32]
 8006884:	3b01      	subs	r3, #1
 8006886:	4543      	cmp	r3, r8
 8006888:	dcf1      	bgt.n	800686e <_printf_float+0x3de>
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006890:	e6db      	b.n	800664a <_printf_float+0x1ba>
 8006892:	f04f 0800 	mov.w	r8, #0
 8006896:	f104 091a 	add.w	r9, r4, #26
 800689a:	e7f2      	b.n	8006882 <_printf_float+0x3f2>
 800689c:	2301      	movs	r3, #1
 800689e:	4642      	mov	r2, r8
 80068a0:	e7df      	b.n	8006862 <_printf_float+0x3d2>
 80068a2:	2301      	movs	r3, #1
 80068a4:	464a      	mov	r2, r9
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f ae3d 	beq.w	800652c <_printf_float+0x9c>
 80068b2:	f108 0801 	add.w	r8, r8, #1
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ba:	1a5b      	subs	r3, r3, r1
 80068bc:	4543      	cmp	r3, r8
 80068be:	dcf0      	bgt.n	80068a2 <_printf_float+0x412>
 80068c0:	e6f7      	b.n	80066b2 <_printf_float+0x222>
 80068c2:	f04f 0800 	mov.w	r8, #0
 80068c6:	f104 0919 	add.w	r9, r4, #25
 80068ca:	e7f4      	b.n	80068b6 <_printf_float+0x426>

080068cc <_printf_common>:
 80068cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	4616      	mov	r6, r2
 80068d2:	4699      	mov	r9, r3
 80068d4:	688a      	ldr	r2, [r1, #8]
 80068d6:	690b      	ldr	r3, [r1, #16]
 80068d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068dc:	4293      	cmp	r3, r2
 80068de:	bfb8      	it	lt
 80068e0:	4613      	movlt	r3, r2
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068e8:	4607      	mov	r7, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	b10a      	cbz	r2, 80068f2 <_printf_common+0x26>
 80068ee:	3301      	adds	r3, #1
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	0699      	lsls	r1, r3, #26
 80068f6:	bf42      	ittt	mi
 80068f8:	6833      	ldrmi	r3, [r6, #0]
 80068fa:	3302      	addmi	r3, #2
 80068fc:	6033      	strmi	r3, [r6, #0]
 80068fe:	6825      	ldr	r5, [r4, #0]
 8006900:	f015 0506 	ands.w	r5, r5, #6
 8006904:	d106      	bne.n	8006914 <_printf_common+0x48>
 8006906:	f104 0a19 	add.w	sl, r4, #25
 800690a:	68e3      	ldr	r3, [r4, #12]
 800690c:	6832      	ldr	r2, [r6, #0]
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	42ab      	cmp	r3, r5
 8006912:	dc26      	bgt.n	8006962 <_printf_common+0x96>
 8006914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006918:	1e13      	subs	r3, r2, #0
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	bf18      	it	ne
 800691e:	2301      	movne	r3, #1
 8006920:	0692      	lsls	r2, r2, #26
 8006922:	d42b      	bmi.n	800697c <_printf_common+0xb0>
 8006924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006928:	4649      	mov	r1, r9
 800692a:	4638      	mov	r0, r7
 800692c:	47c0      	blx	r8
 800692e:	3001      	adds	r0, #1
 8006930:	d01e      	beq.n	8006970 <_printf_common+0xa4>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	68e5      	ldr	r5, [r4, #12]
 8006936:	6832      	ldr	r2, [r6, #0]
 8006938:	f003 0306 	and.w	r3, r3, #6
 800693c:	2b04      	cmp	r3, #4
 800693e:	bf08      	it	eq
 8006940:	1aad      	subeq	r5, r5, r2
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	6922      	ldr	r2, [r4, #16]
 8006946:	bf0c      	ite	eq
 8006948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800694c:	2500      	movne	r5, #0
 800694e:	4293      	cmp	r3, r2
 8006950:	bfc4      	itt	gt
 8006952:	1a9b      	subgt	r3, r3, r2
 8006954:	18ed      	addgt	r5, r5, r3
 8006956:	2600      	movs	r6, #0
 8006958:	341a      	adds	r4, #26
 800695a:	42b5      	cmp	r5, r6
 800695c:	d11a      	bne.n	8006994 <_printf_common+0xc8>
 800695e:	2000      	movs	r0, #0
 8006960:	e008      	b.n	8006974 <_printf_common+0xa8>
 8006962:	2301      	movs	r3, #1
 8006964:	4652      	mov	r2, sl
 8006966:	4649      	mov	r1, r9
 8006968:	4638      	mov	r0, r7
 800696a:	47c0      	blx	r8
 800696c:	3001      	adds	r0, #1
 800696e:	d103      	bne.n	8006978 <_printf_common+0xac>
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006978:	3501      	adds	r5, #1
 800697a:	e7c6      	b.n	800690a <_printf_common+0x3e>
 800697c:	18e1      	adds	r1, r4, r3
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	2030      	movs	r0, #48	; 0x30
 8006982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006986:	4422      	add	r2, r4
 8006988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800698c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006990:	3302      	adds	r3, #2
 8006992:	e7c7      	b.n	8006924 <_printf_common+0x58>
 8006994:	2301      	movs	r3, #1
 8006996:	4622      	mov	r2, r4
 8006998:	4649      	mov	r1, r9
 800699a:	4638      	mov	r0, r7
 800699c:	47c0      	blx	r8
 800699e:	3001      	adds	r0, #1
 80069a0:	d0e6      	beq.n	8006970 <_printf_common+0xa4>
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7d9      	b.n	800695a <_printf_common+0x8e>
	...

080069a8 <_printf_i>:
 80069a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	7e0f      	ldrb	r7, [r1, #24]
 80069ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069b0:	2f78      	cmp	r7, #120	; 0x78
 80069b2:	4691      	mov	r9, r2
 80069b4:	4680      	mov	r8, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	469a      	mov	sl, r3
 80069ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069be:	d807      	bhi.n	80069d0 <_printf_i+0x28>
 80069c0:	2f62      	cmp	r7, #98	; 0x62
 80069c2:	d80a      	bhi.n	80069da <_printf_i+0x32>
 80069c4:	2f00      	cmp	r7, #0
 80069c6:	f000 80d8 	beq.w	8006b7a <_printf_i+0x1d2>
 80069ca:	2f58      	cmp	r7, #88	; 0x58
 80069cc:	f000 80a3 	beq.w	8006b16 <_printf_i+0x16e>
 80069d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d8:	e03a      	b.n	8006a50 <_printf_i+0xa8>
 80069da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069de:	2b15      	cmp	r3, #21
 80069e0:	d8f6      	bhi.n	80069d0 <_printf_i+0x28>
 80069e2:	a101      	add	r1, pc, #4	; (adr r1, 80069e8 <_printf_i+0x40>)
 80069e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e8:	08006a41 	.word	0x08006a41
 80069ec:	08006a55 	.word	0x08006a55
 80069f0:	080069d1 	.word	0x080069d1
 80069f4:	080069d1 	.word	0x080069d1
 80069f8:	080069d1 	.word	0x080069d1
 80069fc:	080069d1 	.word	0x080069d1
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	080069d1 	.word	0x080069d1
 8006a08:	080069d1 	.word	0x080069d1
 8006a0c:	080069d1 	.word	0x080069d1
 8006a10:	080069d1 	.word	0x080069d1
 8006a14:	08006b61 	.word	0x08006b61
 8006a18:	08006a85 	.word	0x08006a85
 8006a1c:	08006b43 	.word	0x08006b43
 8006a20:	080069d1 	.word	0x080069d1
 8006a24:	080069d1 	.word	0x080069d1
 8006a28:	08006b83 	.word	0x08006b83
 8006a2c:	080069d1 	.word	0x080069d1
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	080069d1 	.word	0x080069d1
 8006a38:	080069d1 	.word	0x080069d1
 8006a3c:	08006b4b 	.word	0x08006b4b
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	1d1a      	adds	r2, r3, #4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	602a      	str	r2, [r5, #0]
 8006a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0a3      	b.n	8006b9c <_printf_i+0x1f4>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	6829      	ldr	r1, [r5, #0]
 8006a58:	0606      	lsls	r6, r0, #24
 8006a5a:	f101 0304 	add.w	r3, r1, #4
 8006a5e:	d50a      	bpl.n	8006a76 <_printf_i+0xce>
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	da03      	bge.n	8006a70 <_printf_i+0xc8>
 8006a68:	232d      	movs	r3, #45	; 0x2d
 8006a6a:	4276      	negs	r6, r6
 8006a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a70:	485e      	ldr	r0, [pc, #376]	; (8006bec <_printf_i+0x244>)
 8006a72:	230a      	movs	r3, #10
 8006a74:	e019      	b.n	8006aaa <_printf_i+0x102>
 8006a76:	680e      	ldr	r6, [r1, #0]
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a7e:	bf18      	it	ne
 8006a80:	b236      	sxthne	r6, r6
 8006a82:	e7ef      	b.n	8006a64 <_printf_i+0xbc>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	6820      	ldr	r0, [r4, #0]
 8006a88:	1d19      	adds	r1, r3, #4
 8006a8a:	6029      	str	r1, [r5, #0]
 8006a8c:	0601      	lsls	r1, r0, #24
 8006a8e:	d501      	bpl.n	8006a94 <_printf_i+0xec>
 8006a90:	681e      	ldr	r6, [r3, #0]
 8006a92:	e002      	b.n	8006a9a <_printf_i+0xf2>
 8006a94:	0646      	lsls	r6, r0, #25
 8006a96:	d5fb      	bpl.n	8006a90 <_printf_i+0xe8>
 8006a98:	881e      	ldrh	r6, [r3, #0]
 8006a9a:	4854      	ldr	r0, [pc, #336]	; (8006bec <_printf_i+0x244>)
 8006a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a9e:	bf0c      	ite	eq
 8006aa0:	2308      	moveq	r3, #8
 8006aa2:	230a      	movne	r3, #10
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aaa:	6865      	ldr	r5, [r4, #4]
 8006aac:	60a5      	str	r5, [r4, #8]
 8006aae:	2d00      	cmp	r5, #0
 8006ab0:	bfa2      	ittt	ge
 8006ab2:	6821      	ldrge	r1, [r4, #0]
 8006ab4:	f021 0104 	bicge.w	r1, r1, #4
 8006ab8:	6021      	strge	r1, [r4, #0]
 8006aba:	b90e      	cbnz	r6, 8006ac0 <_printf_i+0x118>
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	d04d      	beq.n	8006b5c <_printf_i+0x1b4>
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8006aca:	5dc7      	ldrb	r7, [r0, r7]
 8006acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ad0:	4637      	mov	r7, r6
 8006ad2:	42bb      	cmp	r3, r7
 8006ad4:	460e      	mov	r6, r1
 8006ad6:	d9f4      	bls.n	8006ac2 <_printf_i+0x11a>
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d10b      	bne.n	8006af4 <_printf_i+0x14c>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	07de      	lsls	r6, r3, #31
 8006ae0:	d508      	bpl.n	8006af4 <_printf_i+0x14c>
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	bfde      	ittt	le
 8006aea:	2330      	movle	r3, #48	; 0x30
 8006aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006af0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006af4:	1b52      	subs	r2, r2, r5
 8006af6:	6122      	str	r2, [r4, #16]
 8006af8:	f8cd a000 	str.w	sl, [sp]
 8006afc:	464b      	mov	r3, r9
 8006afe:	aa03      	add	r2, sp, #12
 8006b00:	4621      	mov	r1, r4
 8006b02:	4640      	mov	r0, r8
 8006b04:	f7ff fee2 	bl	80068cc <_printf_common>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d14c      	bne.n	8006ba6 <_printf_i+0x1fe>
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	b004      	add	sp, #16
 8006b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b16:	4835      	ldr	r0, [pc, #212]	; (8006bec <_printf_i+0x244>)
 8006b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b1c:	6829      	ldr	r1, [r5, #0]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b24:	6029      	str	r1, [r5, #0]
 8006b26:	061d      	lsls	r5, r3, #24
 8006b28:	d514      	bpl.n	8006b54 <_printf_i+0x1ac>
 8006b2a:	07df      	lsls	r7, r3, #31
 8006b2c:	bf44      	itt	mi
 8006b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b32:	6023      	strmi	r3, [r4, #0]
 8006b34:	b91e      	cbnz	r6, 8006b3e <_printf_i+0x196>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f023 0320 	bic.w	r3, r3, #32
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	2310      	movs	r3, #16
 8006b40:	e7b0      	b.n	8006aa4 <_printf_i+0xfc>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	f043 0320 	orr.w	r3, r3, #32
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	2378      	movs	r3, #120	; 0x78
 8006b4c:	4828      	ldr	r0, [pc, #160]	; (8006bf0 <_printf_i+0x248>)
 8006b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b52:	e7e3      	b.n	8006b1c <_printf_i+0x174>
 8006b54:	0659      	lsls	r1, r3, #25
 8006b56:	bf48      	it	mi
 8006b58:	b2b6      	uxthmi	r6, r6
 8006b5a:	e7e6      	b.n	8006b2a <_printf_i+0x182>
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	e7bb      	b.n	8006ad8 <_printf_i+0x130>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	6826      	ldr	r6, [r4, #0]
 8006b64:	6961      	ldr	r1, [r4, #20]
 8006b66:	1d18      	adds	r0, r3, #4
 8006b68:	6028      	str	r0, [r5, #0]
 8006b6a:	0635      	lsls	r5, r6, #24
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	d501      	bpl.n	8006b74 <_printf_i+0x1cc>
 8006b70:	6019      	str	r1, [r3, #0]
 8006b72:	e002      	b.n	8006b7a <_printf_i+0x1d2>
 8006b74:	0670      	lsls	r0, r6, #25
 8006b76:	d5fb      	bpl.n	8006b70 <_printf_i+0x1c8>
 8006b78:	8019      	strh	r1, [r3, #0]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	4615      	mov	r5, r2
 8006b80:	e7ba      	b.n	8006af8 <_printf_i+0x150>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	1d1a      	adds	r2, r3, #4
 8006b86:	602a      	str	r2, [r5, #0]
 8006b88:	681d      	ldr	r5, [r3, #0]
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7f9 fb5e 	bl	8000250 <memchr>
 8006b94:	b108      	cbz	r0, 8006b9a <_printf_i+0x1f2>
 8006b96:	1b40      	subs	r0, r0, r5
 8006b98:	6060      	str	r0, [r4, #4]
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba4:	e7a8      	b.n	8006af8 <_printf_i+0x150>
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4649      	mov	r1, r9
 8006bac:	4640      	mov	r0, r8
 8006bae:	47d0      	blx	sl
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d0ab      	beq.n	8006b0c <_printf_i+0x164>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	079b      	lsls	r3, r3, #30
 8006bb8:	d413      	bmi.n	8006be2 <_printf_i+0x23a>
 8006bba:	68e0      	ldr	r0, [r4, #12]
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	4298      	cmp	r0, r3
 8006bc0:	bfb8      	it	lt
 8006bc2:	4618      	movlt	r0, r3
 8006bc4:	e7a4      	b.n	8006b10 <_printf_i+0x168>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	47d0      	blx	sl
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d09b      	beq.n	8006b0c <_printf_i+0x164>
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	68e3      	ldr	r3, [r4, #12]
 8006bd8:	9903      	ldr	r1, [sp, #12]
 8006bda:	1a5b      	subs	r3, r3, r1
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	dcf2      	bgt.n	8006bc6 <_printf_i+0x21e>
 8006be0:	e7eb      	b.n	8006bba <_printf_i+0x212>
 8006be2:	2500      	movs	r5, #0
 8006be4:	f104 0619 	add.w	r6, r4, #25
 8006be8:	e7f5      	b.n	8006bd6 <_printf_i+0x22e>
 8006bea:	bf00      	nop
 8006bec:	08009172 	.word	0x08009172
 8006bf0:	08009183 	.word	0x08009183

08006bf4 <siprintf>:
 8006bf4:	b40e      	push	{r1, r2, r3}
 8006bf6:	b500      	push	{lr}
 8006bf8:	b09c      	sub	sp, #112	; 0x70
 8006bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8006bfc:	9002      	str	r0, [sp, #8]
 8006bfe:	9006      	str	r0, [sp, #24]
 8006c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c04:	4809      	ldr	r0, [pc, #36]	; (8006c2c <siprintf+0x38>)
 8006c06:	9107      	str	r1, [sp, #28]
 8006c08:	9104      	str	r1, [sp, #16]
 8006c0a:	4909      	ldr	r1, [pc, #36]	; (8006c30 <siprintf+0x3c>)
 8006c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c10:	9105      	str	r1, [sp, #20]
 8006c12:	6800      	ldr	r0, [r0, #0]
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	a902      	add	r1, sp, #8
 8006c18:	f001 fb84 	bl	8008324 <_svfiprintf_r>
 8006c1c:	9b02      	ldr	r3, [sp, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	b01c      	add	sp, #112	; 0x70
 8006c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c28:	b003      	add	sp, #12
 8006c2a:	4770      	bx	lr
 8006c2c:	20000b00 	.word	0x20000b00
 8006c30:	ffff0208 	.word	0xffff0208

08006c34 <_strtol_l.constprop.0>:
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3a:	d001      	beq.n	8006c40 <_strtol_l.constprop.0+0xc>
 8006c3c:	2b24      	cmp	r3, #36	; 0x24
 8006c3e:	d906      	bls.n	8006c4e <_strtol_l.constprop.0+0x1a>
 8006c40:	f7ff fb64 	bl	800630c <__errno>
 8006c44:	2316      	movs	r3, #22
 8006c46:	6003      	str	r3, [r0, #0]
 8006c48:	2000      	movs	r0, #0
 8006c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d34 <_strtol_l.constprop.0+0x100>
 8006c52:	460d      	mov	r5, r1
 8006c54:	462e      	mov	r6, r5
 8006c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006c5e:	f017 0708 	ands.w	r7, r7, #8
 8006c62:	d1f7      	bne.n	8006c54 <_strtol_l.constprop.0+0x20>
 8006c64:	2c2d      	cmp	r4, #45	; 0x2d
 8006c66:	d132      	bne.n	8006cce <_strtol_l.constprop.0+0x9a>
 8006c68:	782c      	ldrb	r4, [r5, #0]
 8006c6a:	2701      	movs	r7, #1
 8006c6c:	1cb5      	adds	r5, r6, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d05b      	beq.n	8006d2a <_strtol_l.constprop.0+0xf6>
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d109      	bne.n	8006c8a <_strtol_l.constprop.0+0x56>
 8006c76:	2c30      	cmp	r4, #48	; 0x30
 8006c78:	d107      	bne.n	8006c8a <_strtol_l.constprop.0+0x56>
 8006c7a:	782c      	ldrb	r4, [r5, #0]
 8006c7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006c80:	2c58      	cmp	r4, #88	; 0x58
 8006c82:	d14d      	bne.n	8006d20 <_strtol_l.constprop.0+0xec>
 8006c84:	786c      	ldrb	r4, [r5, #1]
 8006c86:	2310      	movs	r3, #16
 8006c88:	3502      	adds	r5, #2
 8006c8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006c8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c92:	f04f 0c00 	mov.w	ip, #0
 8006c96:	fbb8 f9f3 	udiv	r9, r8, r3
 8006c9a:	4666      	mov	r6, ip
 8006c9c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ca0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ca4:	f1be 0f09 	cmp.w	lr, #9
 8006ca8:	d816      	bhi.n	8006cd8 <_strtol_l.constprop.0+0xa4>
 8006caa:	4674      	mov	r4, lr
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	dd24      	ble.n	8006cfa <_strtol_l.constprop.0+0xc6>
 8006cb0:	f1bc 0f00 	cmp.w	ip, #0
 8006cb4:	db1e      	blt.n	8006cf4 <_strtol_l.constprop.0+0xc0>
 8006cb6:	45b1      	cmp	r9, r6
 8006cb8:	d31c      	bcc.n	8006cf4 <_strtol_l.constprop.0+0xc0>
 8006cba:	d101      	bne.n	8006cc0 <_strtol_l.constprop.0+0x8c>
 8006cbc:	45a2      	cmp	sl, r4
 8006cbe:	db19      	blt.n	8006cf4 <_strtol_l.constprop.0+0xc0>
 8006cc0:	fb06 4603 	mla	r6, r6, r3, r4
 8006cc4:	f04f 0c01 	mov.w	ip, #1
 8006cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ccc:	e7e8      	b.n	8006ca0 <_strtol_l.constprop.0+0x6c>
 8006cce:	2c2b      	cmp	r4, #43	; 0x2b
 8006cd0:	bf04      	itt	eq
 8006cd2:	782c      	ldrbeq	r4, [r5, #0]
 8006cd4:	1cb5      	addeq	r5, r6, #2
 8006cd6:	e7ca      	b.n	8006c6e <_strtol_l.constprop.0+0x3a>
 8006cd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006cdc:	f1be 0f19 	cmp.w	lr, #25
 8006ce0:	d801      	bhi.n	8006ce6 <_strtol_l.constprop.0+0xb2>
 8006ce2:	3c37      	subs	r4, #55	; 0x37
 8006ce4:	e7e2      	b.n	8006cac <_strtol_l.constprop.0+0x78>
 8006ce6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006cea:	f1be 0f19 	cmp.w	lr, #25
 8006cee:	d804      	bhi.n	8006cfa <_strtol_l.constprop.0+0xc6>
 8006cf0:	3c57      	subs	r4, #87	; 0x57
 8006cf2:	e7db      	b.n	8006cac <_strtol_l.constprop.0+0x78>
 8006cf4:	f04f 3cff 	mov.w	ip, #4294967295
 8006cf8:	e7e6      	b.n	8006cc8 <_strtol_l.constprop.0+0x94>
 8006cfa:	f1bc 0f00 	cmp.w	ip, #0
 8006cfe:	da05      	bge.n	8006d0c <_strtol_l.constprop.0+0xd8>
 8006d00:	2322      	movs	r3, #34	; 0x22
 8006d02:	6003      	str	r3, [r0, #0]
 8006d04:	4646      	mov	r6, r8
 8006d06:	b942      	cbnz	r2, 8006d1a <_strtol_l.constprop.0+0xe6>
 8006d08:	4630      	mov	r0, r6
 8006d0a:	e79e      	b.n	8006c4a <_strtol_l.constprop.0+0x16>
 8006d0c:	b107      	cbz	r7, 8006d10 <_strtol_l.constprop.0+0xdc>
 8006d0e:	4276      	negs	r6, r6
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	d0f9      	beq.n	8006d08 <_strtol_l.constprop.0+0xd4>
 8006d14:	f1bc 0f00 	cmp.w	ip, #0
 8006d18:	d000      	beq.n	8006d1c <_strtol_l.constprop.0+0xe8>
 8006d1a:	1e69      	subs	r1, r5, #1
 8006d1c:	6011      	str	r1, [r2, #0]
 8006d1e:	e7f3      	b.n	8006d08 <_strtol_l.constprop.0+0xd4>
 8006d20:	2430      	movs	r4, #48	; 0x30
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1b1      	bne.n	8006c8a <_strtol_l.constprop.0+0x56>
 8006d26:	2308      	movs	r3, #8
 8006d28:	e7af      	b.n	8006c8a <_strtol_l.constprop.0+0x56>
 8006d2a:	2c30      	cmp	r4, #48	; 0x30
 8006d2c:	d0a5      	beq.n	8006c7a <_strtol_l.constprop.0+0x46>
 8006d2e:	230a      	movs	r3, #10
 8006d30:	e7ab      	b.n	8006c8a <_strtol_l.constprop.0+0x56>
 8006d32:	bf00      	nop
 8006d34:	08009195 	.word	0x08009195

08006d38 <strtol>:
 8006d38:	4613      	mov	r3, r2
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	4802      	ldr	r0, [pc, #8]	; (8006d48 <strtol+0x10>)
 8006d40:	6800      	ldr	r0, [r0, #0]
 8006d42:	f7ff bf77 	b.w	8006c34 <_strtol_l.constprop.0>
 8006d46:	bf00      	nop
 8006d48:	20000b00 	.word	0x20000b00

08006d4c <quorem>:
 8006d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	6903      	ldr	r3, [r0, #16]
 8006d52:	690c      	ldr	r4, [r1, #16]
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	4607      	mov	r7, r0
 8006d58:	f2c0 8081 	blt.w	8006e5e <quorem+0x112>
 8006d5c:	3c01      	subs	r4, #1
 8006d5e:	f101 0814 	add.w	r8, r1, #20
 8006d62:	f100 0514 	add.w	r5, r0, #20
 8006d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d6a:	9301      	str	r3, [sp, #4]
 8006d6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d74:	3301      	adds	r3, #1
 8006d76:	429a      	cmp	r2, r3
 8006d78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d80:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d84:	d331      	bcc.n	8006dea <quorem+0x9e>
 8006d86:	f04f 0e00 	mov.w	lr, #0
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	46ac      	mov	ip, r5
 8006d8e:	46f2      	mov	sl, lr
 8006d90:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d94:	b293      	uxth	r3, r2
 8006d96:	fb06 e303 	mla	r3, r6, r3, lr
 8006d9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ebaa 0303 	sub.w	r3, sl, r3
 8006da4:	f8dc a000 	ldr.w	sl, [ip]
 8006da8:	0c12      	lsrs	r2, r2, #16
 8006daa:	fa13 f38a 	uxtah	r3, r3, sl
 8006dae:	fb06 e202 	mla	r2, r6, r2, lr
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	9b00      	ldr	r3, [sp, #0]
 8006db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006dc8:	4581      	cmp	r9, r0
 8006dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dce:	f84c 3b04 	str.w	r3, [ip], #4
 8006dd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dd6:	d2db      	bcs.n	8006d90 <quorem+0x44>
 8006dd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ddc:	b92b      	cbnz	r3, 8006dea <quorem+0x9e>
 8006dde:	9b01      	ldr	r3, [sp, #4]
 8006de0:	3b04      	subs	r3, #4
 8006de2:	429d      	cmp	r5, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	d32e      	bcc.n	8006e46 <quorem+0xfa>
 8006de8:	613c      	str	r4, [r7, #16]
 8006dea:	4638      	mov	r0, r7
 8006dec:	f001 f846 	bl	8007e7c <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	db24      	blt.n	8006e3e <quorem+0xf2>
 8006df4:	3601      	adds	r6, #1
 8006df6:	4628      	mov	r0, r5
 8006df8:	f04f 0c00 	mov.w	ip, #0
 8006dfc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e00:	f8d0 e000 	ldr.w	lr, [r0]
 8006e04:	b293      	uxth	r3, r2
 8006e06:	ebac 0303 	sub.w	r3, ip, r3
 8006e0a:	0c12      	lsrs	r2, r2, #16
 8006e0c:	fa13 f38e 	uxtah	r3, r3, lr
 8006e10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e1e:	45c1      	cmp	r9, r8
 8006e20:	f840 3b04 	str.w	r3, [r0], #4
 8006e24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e28:	d2e8      	bcs.n	8006dfc <quorem+0xb0>
 8006e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e32:	b922      	cbnz	r2, 8006e3e <quorem+0xf2>
 8006e34:	3b04      	subs	r3, #4
 8006e36:	429d      	cmp	r5, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	d30a      	bcc.n	8006e52 <quorem+0x106>
 8006e3c:	613c      	str	r4, [r7, #16]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	b003      	add	sp, #12
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	3b04      	subs	r3, #4
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d1cc      	bne.n	8006de8 <quorem+0x9c>
 8006e4e:	3c01      	subs	r4, #1
 8006e50:	e7c7      	b.n	8006de2 <quorem+0x96>
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	3b04      	subs	r3, #4
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d1f0      	bne.n	8006e3c <quorem+0xf0>
 8006e5a:	3c01      	subs	r4, #1
 8006e5c:	e7eb      	b.n	8006e36 <quorem+0xea>
 8006e5e:	2000      	movs	r0, #0
 8006e60:	e7ee      	b.n	8006e40 <quorem+0xf4>
 8006e62:	0000      	movs	r0, r0
 8006e64:	0000      	movs	r0, r0
	...

08006e68 <_dtoa_r>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	ed2d 8b02 	vpush	{d8}
 8006e70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e72:	b091      	sub	sp, #68	; 0x44
 8006e74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e78:	ec59 8b10 	vmov	r8, r9, d0
 8006e7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006e7e:	9106      	str	r1, [sp, #24]
 8006e80:	4606      	mov	r6, r0
 8006e82:	9208      	str	r2, [sp, #32]
 8006e84:	930c      	str	r3, [sp, #48]	; 0x30
 8006e86:	b975      	cbnz	r5, 8006ea6 <_dtoa_r+0x3e>
 8006e88:	2010      	movs	r0, #16
 8006e8a:	f000 fd5f 	bl	800794c <malloc>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6270      	str	r0, [r6, #36]	; 0x24
 8006e92:	b920      	cbnz	r0, 8006e9e <_dtoa_r+0x36>
 8006e94:	4baa      	ldr	r3, [pc, #680]	; (8007140 <_dtoa_r+0x2d8>)
 8006e96:	21ea      	movs	r1, #234	; 0xea
 8006e98:	48aa      	ldr	r0, [pc, #680]	; (8007144 <_dtoa_r+0x2dc>)
 8006e9a:	f001 fb53 	bl	8008544 <__assert_func>
 8006e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ea2:	6005      	str	r5, [r0, #0]
 8006ea4:	60c5      	str	r5, [r0, #12]
 8006ea6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ea8:	6819      	ldr	r1, [r3, #0]
 8006eaa:	b151      	cbz	r1, 8006ec2 <_dtoa_r+0x5a>
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	604a      	str	r2, [r1, #4]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4093      	lsls	r3, r2
 8006eb4:	608b      	str	r3, [r1, #8]
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f000 fd9e 	bl	80079f8 <_Bfree>
 8006ebc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f1b9 0300 	subs.w	r3, r9, #0
 8006ec6:	bfbb      	ittet	lt
 8006ec8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ecc:	9303      	strlt	r3, [sp, #12]
 8006ece:	2300      	movge	r3, #0
 8006ed0:	2201      	movlt	r2, #1
 8006ed2:	bfac      	ite	ge
 8006ed4:	6023      	strge	r3, [r4, #0]
 8006ed6:	6022      	strlt	r2, [r4, #0]
 8006ed8:	4b9b      	ldr	r3, [pc, #620]	; (8007148 <_dtoa_r+0x2e0>)
 8006eda:	9c03      	ldr	r4, [sp, #12]
 8006edc:	43a3      	bics	r3, r4
 8006ede:	d11c      	bne.n	8006f1a <_dtoa_r+0xb2>
 8006ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ee2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006eec:	ea53 0308 	orrs.w	r3, r3, r8
 8006ef0:	f000 84fd 	beq.w	80078ee <_dtoa_r+0xa86>
 8006ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ef6:	b963      	cbnz	r3, 8006f12 <_dtoa_r+0xaa>
 8006ef8:	4b94      	ldr	r3, [pc, #592]	; (800714c <_dtoa_r+0x2e4>)
 8006efa:	e01f      	b.n	8006f3c <_dtoa_r+0xd4>
 8006efc:	4b94      	ldr	r3, [pc, #592]	; (8007150 <_dtoa_r+0x2e8>)
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	3308      	adds	r3, #8
 8006f02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	9801      	ldr	r0, [sp, #4]
 8006f08:	b011      	add	sp, #68	; 0x44
 8006f0a:	ecbd 8b02 	vpop	{d8}
 8006f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f12:	4b8e      	ldr	r3, [pc, #568]	; (800714c <_dtoa_r+0x2e4>)
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	3303      	adds	r3, #3
 8006f18:	e7f3      	b.n	8006f02 <_dtoa_r+0x9a>
 8006f1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006f1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f26:	d10b      	bne.n	8006f40 <_dtoa_r+0xd8>
 8006f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 84d9 	beq.w	80078e8 <_dtoa_r+0xa80>
 8006f36:	4887      	ldr	r0, [pc, #540]	; (8007154 <_dtoa_r+0x2ec>)
 8006f38:	6018      	str	r0, [r3, #0]
 8006f3a:	1e43      	subs	r3, r0, #1
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	e7e2      	b.n	8006f06 <_dtoa_r+0x9e>
 8006f40:	a90f      	add	r1, sp, #60	; 0x3c
 8006f42:	aa0e      	add	r2, sp, #56	; 0x38
 8006f44:	4630      	mov	r0, r6
 8006f46:	eeb0 0b48 	vmov.f64	d0, d8
 8006f4a:	f001 f83d 	bl	8007fc8 <__d2b>
 8006f4e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006f52:	4605      	mov	r5, r0
 8006f54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d046      	beq.n	8006fe8 <_dtoa_r+0x180>
 8006f5a:	ee18 4a90 	vmov	r4, s17
 8006f5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006f62:	ec53 2b18 	vmov	r2, r3, d8
 8006f66:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006f6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006f72:	2400      	movs	r4, #0
 8006f74:	ec43 2b16 	vmov	d6, r2, r3
 8006f78:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006f7c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007128 <_dtoa_r+0x2c0>
 8006f80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f84:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007130 <_dtoa_r+0x2c8>
 8006f88:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006f8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007138 <_dtoa_r+0x2d0>
 8006f90:	ee07 1a90 	vmov	s15, r1
 8006f94:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006f98:	eeb0 7b46 	vmov.f64	d7, d6
 8006f9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006fa0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006fa4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fac:	ee16 ba90 	vmov	fp, s13
 8006fb0:	940a      	str	r4, [sp, #40]	; 0x28
 8006fb2:	d508      	bpl.n	8006fc6 <_dtoa_r+0x15e>
 8006fb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006fb8:	eeb4 6b47 	vcmp.f64	d6, d7
 8006fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc0:	bf18      	it	ne
 8006fc2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006fc6:	f1bb 0f16 	cmp.w	fp, #22
 8006fca:	d82f      	bhi.n	800702c <_dtoa_r+0x1c4>
 8006fcc:	4b62      	ldr	r3, [pc, #392]	; (8007158 <_dtoa_r+0x2f0>)
 8006fce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fd2:	ed93 7b00 	vldr	d7, [r3]
 8006fd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fde:	d501      	bpl.n	8006fe4 <_dtoa_r+0x17c>
 8006fe0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e022      	b.n	800702e <_dtoa_r+0x1c6>
 8006fe8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fea:	4401      	add	r1, r0
 8006fec:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	bfc1      	itttt	gt
 8006ff4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ff8:	fa04 f303 	lslgt.w	r3, r4, r3
 8006ffc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007000:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007004:	bfd6      	itet	le
 8007006:	f1c3 0320 	rsble	r3, r3, #32
 800700a:	ea43 0808 	orrgt.w	r8, r3, r8
 800700e:	fa08 f803 	lslle.w	r8, r8, r3
 8007012:	ee07 8a90 	vmov	s15, r8
 8007016:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800701a:	3901      	subs	r1, #1
 800701c:	ee17 4a90 	vmov	r4, s15
 8007020:	ec53 2b17 	vmov	r2, r3, d7
 8007024:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007028:	2401      	movs	r4, #1
 800702a:	e7a3      	b.n	8006f74 <_dtoa_r+0x10c>
 800702c:	2301      	movs	r3, #1
 800702e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007030:	1a43      	subs	r3, r0, r1
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	bf45      	ittet	mi
 8007036:	f1c3 0301 	rsbmi	r3, r3, #1
 800703a:	9304      	strmi	r3, [sp, #16]
 800703c:	2300      	movpl	r3, #0
 800703e:	2300      	movmi	r3, #0
 8007040:	9205      	str	r2, [sp, #20]
 8007042:	bf54      	ite	pl
 8007044:	9304      	strpl	r3, [sp, #16]
 8007046:	9305      	strmi	r3, [sp, #20]
 8007048:	f1bb 0f00 	cmp.w	fp, #0
 800704c:	db18      	blt.n	8007080 <_dtoa_r+0x218>
 800704e:	9b05      	ldr	r3, [sp, #20]
 8007050:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007054:	445b      	add	r3, fp
 8007056:	9305      	str	r3, [sp, #20]
 8007058:	2300      	movs	r3, #0
 800705a:	9a06      	ldr	r2, [sp, #24]
 800705c:	2a09      	cmp	r2, #9
 800705e:	d849      	bhi.n	80070f4 <_dtoa_r+0x28c>
 8007060:	2a05      	cmp	r2, #5
 8007062:	bfc4      	itt	gt
 8007064:	3a04      	subgt	r2, #4
 8007066:	9206      	strgt	r2, [sp, #24]
 8007068:	9a06      	ldr	r2, [sp, #24]
 800706a:	f1a2 0202 	sub.w	r2, r2, #2
 800706e:	bfcc      	ite	gt
 8007070:	2400      	movgt	r4, #0
 8007072:	2401      	movle	r4, #1
 8007074:	2a03      	cmp	r2, #3
 8007076:	d848      	bhi.n	800710a <_dtoa_r+0x2a2>
 8007078:	e8df f002 	tbb	[pc, r2]
 800707c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	2200      	movs	r2, #0
 8007084:	eba3 030b 	sub.w	r3, r3, fp
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	9209      	str	r2, [sp, #36]	; 0x24
 800708c:	f1cb 0300 	rsb	r3, fp, #0
 8007090:	e7e3      	b.n	800705a <_dtoa_r+0x1f2>
 8007092:	2200      	movs	r2, #0
 8007094:	9207      	str	r2, [sp, #28]
 8007096:	9a08      	ldr	r2, [sp, #32]
 8007098:	2a00      	cmp	r2, #0
 800709a:	dc39      	bgt.n	8007110 <_dtoa_r+0x2a8>
 800709c:	f04f 0a01 	mov.w	sl, #1
 80070a0:	46d1      	mov	r9, sl
 80070a2:	4652      	mov	r2, sl
 80070a4:	f8cd a020 	str.w	sl, [sp, #32]
 80070a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80070aa:	2100      	movs	r1, #0
 80070ac:	6079      	str	r1, [r7, #4]
 80070ae:	2004      	movs	r0, #4
 80070b0:	f100 0c14 	add.w	ip, r0, #20
 80070b4:	4594      	cmp	ip, r2
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	d92f      	bls.n	800711a <_dtoa_r+0x2b2>
 80070ba:	4630      	mov	r0, r6
 80070bc:	930d      	str	r3, [sp, #52]	; 0x34
 80070be:	f000 fc5b 	bl	8007978 <_Balloc>
 80070c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c4:	9001      	str	r0, [sp, #4]
 80070c6:	4602      	mov	r2, r0
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d149      	bne.n	8007160 <_dtoa_r+0x2f8>
 80070cc:	4b23      	ldr	r3, [pc, #140]	; (800715c <_dtoa_r+0x2f4>)
 80070ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070d2:	e6e1      	b.n	8006e98 <_dtoa_r+0x30>
 80070d4:	2201      	movs	r2, #1
 80070d6:	e7dd      	b.n	8007094 <_dtoa_r+0x22c>
 80070d8:	2200      	movs	r2, #0
 80070da:	9207      	str	r2, [sp, #28]
 80070dc:	9a08      	ldr	r2, [sp, #32]
 80070de:	eb0b 0a02 	add.w	sl, fp, r2
 80070e2:	f10a 0901 	add.w	r9, sl, #1
 80070e6:	464a      	mov	r2, r9
 80070e8:	2a01      	cmp	r2, #1
 80070ea:	bfb8      	it	lt
 80070ec:	2201      	movlt	r2, #1
 80070ee:	e7db      	b.n	80070a8 <_dtoa_r+0x240>
 80070f0:	2201      	movs	r2, #1
 80070f2:	e7f2      	b.n	80070da <_dtoa_r+0x272>
 80070f4:	2401      	movs	r4, #1
 80070f6:	2200      	movs	r2, #0
 80070f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80070fc:	f04f 3aff 	mov.w	sl, #4294967295
 8007100:	2100      	movs	r1, #0
 8007102:	46d1      	mov	r9, sl
 8007104:	2212      	movs	r2, #18
 8007106:	9108      	str	r1, [sp, #32]
 8007108:	e7ce      	b.n	80070a8 <_dtoa_r+0x240>
 800710a:	2201      	movs	r2, #1
 800710c:	9207      	str	r2, [sp, #28]
 800710e:	e7f5      	b.n	80070fc <_dtoa_r+0x294>
 8007110:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007114:	46d1      	mov	r9, sl
 8007116:	4652      	mov	r2, sl
 8007118:	e7c6      	b.n	80070a8 <_dtoa_r+0x240>
 800711a:	3101      	adds	r1, #1
 800711c:	6079      	str	r1, [r7, #4]
 800711e:	0040      	lsls	r0, r0, #1
 8007120:	e7c6      	b.n	80070b0 <_dtoa_r+0x248>
 8007122:	bf00      	nop
 8007124:	f3af 8000 	nop.w
 8007128:	636f4361 	.word	0x636f4361
 800712c:	3fd287a7 	.word	0x3fd287a7
 8007130:	8b60c8b3 	.word	0x8b60c8b3
 8007134:	3fc68a28 	.word	0x3fc68a28
 8007138:	509f79fb 	.word	0x509f79fb
 800713c:	3fd34413 	.word	0x3fd34413
 8007140:	080092a2 	.word	0x080092a2
 8007144:	080092b9 	.word	0x080092b9
 8007148:	7ff00000 	.word	0x7ff00000
 800714c:	0800929e 	.word	0x0800929e
 8007150:	08009295 	.word	0x08009295
 8007154:	08009171 	.word	0x08009171
 8007158:	080093b0 	.word	0x080093b0
 800715c:	08009314 	.word	0x08009314
 8007160:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007162:	9901      	ldr	r1, [sp, #4]
 8007164:	6011      	str	r1, [r2, #0]
 8007166:	f1b9 0f0e 	cmp.w	r9, #14
 800716a:	d86c      	bhi.n	8007246 <_dtoa_r+0x3de>
 800716c:	2c00      	cmp	r4, #0
 800716e:	d06a      	beq.n	8007246 <_dtoa_r+0x3de>
 8007170:	f1bb 0f00 	cmp.w	fp, #0
 8007174:	f340 80a0 	ble.w	80072b8 <_dtoa_r+0x450>
 8007178:	49c1      	ldr	r1, [pc, #772]	; (8007480 <_dtoa_r+0x618>)
 800717a:	f00b 020f 	and.w	r2, fp, #15
 800717e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007182:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007186:	ed92 7b00 	vldr	d7, [r2]
 800718a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800718e:	f000 8087 	beq.w	80072a0 <_dtoa_r+0x438>
 8007192:	4abc      	ldr	r2, [pc, #752]	; (8007484 <_dtoa_r+0x61c>)
 8007194:	ed92 6b08 	vldr	d6, [r2, #32]
 8007198:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800719c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071a0:	f001 010f 	and.w	r1, r1, #15
 80071a4:	2203      	movs	r2, #3
 80071a6:	48b7      	ldr	r0, [pc, #732]	; (8007484 <_dtoa_r+0x61c>)
 80071a8:	2900      	cmp	r1, #0
 80071aa:	d17b      	bne.n	80072a4 <_dtoa_r+0x43c>
 80071ac:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80071b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071ba:	2900      	cmp	r1, #0
 80071bc:	f000 80a2 	beq.w	8007304 <_dtoa_r+0x49c>
 80071c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80071c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d0:	f140 8098 	bpl.w	8007304 <_dtoa_r+0x49c>
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	f000 8094 	beq.w	8007304 <_dtoa_r+0x49c>
 80071dc:	f1ba 0f00 	cmp.w	sl, #0
 80071e0:	dd2f      	ble.n	8007242 <_dtoa_r+0x3da>
 80071e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80071e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071ee:	f10b 37ff 	add.w	r7, fp, #4294967295
 80071f2:	3201      	adds	r2, #1
 80071f4:	4650      	mov	r0, sl
 80071f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071fa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80071fe:	ee07 2a90 	vmov	s15, r2
 8007202:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007206:	eea7 5b06 	vfma.f64	d5, d7, d6
 800720a:	ee15 4a90 	vmov	r4, s11
 800720e:	ec52 1b15 	vmov	r1, r2, d5
 8007212:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007216:	2800      	cmp	r0, #0
 8007218:	d177      	bne.n	800730a <_dtoa_r+0x4a2>
 800721a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800721e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007222:	ec42 1b17 	vmov	d7, r1, r2
 8007226:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722e:	f300 8263 	bgt.w	80076f8 <_dtoa_r+0x890>
 8007232:	eeb1 7b47 	vneg.f64	d7, d7
 8007236:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723e:	f100 8258 	bmi.w	80076f2 <_dtoa_r+0x88a>
 8007242:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007248:	2a00      	cmp	r2, #0
 800724a:	f2c0 811d 	blt.w	8007488 <_dtoa_r+0x620>
 800724e:	f1bb 0f0e 	cmp.w	fp, #14
 8007252:	f300 8119 	bgt.w	8007488 <_dtoa_r+0x620>
 8007256:	4b8a      	ldr	r3, [pc, #552]	; (8007480 <_dtoa_r+0x618>)
 8007258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800725c:	ed93 6b00 	vldr	d6, [r3]
 8007260:	9b08      	ldr	r3, [sp, #32]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f280 80b7 	bge.w	80073d6 <_dtoa_r+0x56e>
 8007268:	f1b9 0f00 	cmp.w	r9, #0
 800726c:	f300 80b3 	bgt.w	80073d6 <_dtoa_r+0x56e>
 8007270:	f040 823f 	bne.w	80076f2 <_dtoa_r+0x88a>
 8007274:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007278:	ee26 6b07 	vmul.f64	d6, d6, d7
 800727c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007280:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007288:	464c      	mov	r4, r9
 800728a:	464f      	mov	r7, r9
 800728c:	f280 8215 	bge.w	80076ba <_dtoa_r+0x852>
 8007290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007294:	2331      	movs	r3, #49	; 0x31
 8007296:	f808 3b01 	strb.w	r3, [r8], #1
 800729a:	f10b 0b01 	add.w	fp, fp, #1
 800729e:	e211      	b.n	80076c4 <_dtoa_r+0x85c>
 80072a0:	2202      	movs	r2, #2
 80072a2:	e780      	b.n	80071a6 <_dtoa_r+0x33e>
 80072a4:	07cc      	lsls	r4, r1, #31
 80072a6:	d504      	bpl.n	80072b2 <_dtoa_r+0x44a>
 80072a8:	ed90 6b00 	vldr	d6, [r0]
 80072ac:	3201      	adds	r2, #1
 80072ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072b2:	1049      	asrs	r1, r1, #1
 80072b4:	3008      	adds	r0, #8
 80072b6:	e777      	b.n	80071a8 <_dtoa_r+0x340>
 80072b8:	d022      	beq.n	8007300 <_dtoa_r+0x498>
 80072ba:	f1cb 0100 	rsb	r1, fp, #0
 80072be:	4a70      	ldr	r2, [pc, #448]	; (8007480 <_dtoa_r+0x618>)
 80072c0:	f001 000f 	and.w	r0, r1, #15
 80072c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80072c8:	ed92 7b00 	vldr	d7, [r2]
 80072cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80072d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072d4:	486b      	ldr	r0, [pc, #428]	; (8007484 <_dtoa_r+0x61c>)
 80072d6:	1109      	asrs	r1, r1, #4
 80072d8:	2400      	movs	r4, #0
 80072da:	2202      	movs	r2, #2
 80072dc:	b929      	cbnz	r1, 80072ea <_dtoa_r+0x482>
 80072de:	2c00      	cmp	r4, #0
 80072e0:	f43f af6a 	beq.w	80071b8 <_dtoa_r+0x350>
 80072e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072e8:	e766      	b.n	80071b8 <_dtoa_r+0x350>
 80072ea:	07cf      	lsls	r7, r1, #31
 80072ec:	d505      	bpl.n	80072fa <_dtoa_r+0x492>
 80072ee:	ed90 6b00 	vldr	d6, [r0]
 80072f2:	3201      	adds	r2, #1
 80072f4:	2401      	movs	r4, #1
 80072f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072fa:	1049      	asrs	r1, r1, #1
 80072fc:	3008      	adds	r0, #8
 80072fe:	e7ed      	b.n	80072dc <_dtoa_r+0x474>
 8007300:	2202      	movs	r2, #2
 8007302:	e759      	b.n	80071b8 <_dtoa_r+0x350>
 8007304:	465f      	mov	r7, fp
 8007306:	4648      	mov	r0, r9
 8007308:	e775      	b.n	80071f6 <_dtoa_r+0x38e>
 800730a:	ec42 1b17 	vmov	d7, r1, r2
 800730e:	4a5c      	ldr	r2, [pc, #368]	; (8007480 <_dtoa_r+0x618>)
 8007310:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007314:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007318:	9a01      	ldr	r2, [sp, #4]
 800731a:	1814      	adds	r4, r2, r0
 800731c:	9a07      	ldr	r2, [sp, #28]
 800731e:	b352      	cbz	r2, 8007376 <_dtoa_r+0x50e>
 8007320:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007324:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007328:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800732c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007330:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007334:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007338:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800733c:	ee14 2a90 	vmov	r2, s9
 8007340:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007344:	3230      	adds	r2, #48	; 0x30
 8007346:	ee36 6b45 	vsub.f64	d6, d6, d5
 800734a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	f808 2b01 	strb.w	r2, [r8], #1
 8007356:	d439      	bmi.n	80073cc <_dtoa_r+0x564>
 8007358:	ee32 5b46 	vsub.f64	d5, d2, d6
 800735c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007364:	d472      	bmi.n	800744c <_dtoa_r+0x5e4>
 8007366:	45a0      	cmp	r8, r4
 8007368:	f43f af6b 	beq.w	8007242 <_dtoa_r+0x3da>
 800736c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007370:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007374:	e7e0      	b.n	8007338 <_dtoa_r+0x4d0>
 8007376:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800737a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800737e:	4621      	mov	r1, r4
 8007380:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007384:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007388:	ee14 2a90 	vmov	r2, s9
 800738c:	3230      	adds	r2, #48	; 0x30
 800738e:	f808 2b01 	strb.w	r2, [r8], #1
 8007392:	45a0      	cmp	r8, r4
 8007394:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007398:	ee36 6b45 	vsub.f64	d6, d6, d5
 800739c:	d118      	bne.n	80073d0 <_dtoa_r+0x568>
 800739e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80073a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80073a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	dc4d      	bgt.n	800744c <_dtoa_r+0x5e4>
 80073b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073bc:	f57f af41 	bpl.w	8007242 <_dtoa_r+0x3da>
 80073c0:	4688      	mov	r8, r1
 80073c2:	3901      	subs	r1, #1
 80073c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80073c8:	2b30      	cmp	r3, #48	; 0x30
 80073ca:	d0f9      	beq.n	80073c0 <_dtoa_r+0x558>
 80073cc:	46bb      	mov	fp, r7
 80073ce:	e02a      	b.n	8007426 <_dtoa_r+0x5be>
 80073d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073d4:	e7d6      	b.n	8007384 <_dtoa_r+0x51c>
 80073d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80073de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80073e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80073ea:	ee15 3a10 	vmov	r3, s10
 80073ee:	3330      	adds	r3, #48	; 0x30
 80073f0:	f808 3b01 	strb.w	r3, [r8], #1
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	eba8 0303 	sub.w	r3, r8, r3
 80073fa:	4599      	cmp	r9, r3
 80073fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007400:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007404:	d133      	bne.n	800746e <_dtoa_r+0x606>
 8007406:	ee37 7b07 	vadd.f64	d7, d7, d7
 800740a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800740e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007412:	dc1a      	bgt.n	800744a <_dtoa_r+0x5e2>
 8007414:	eeb4 7b46 	vcmp.f64	d7, d6
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	d103      	bne.n	8007426 <_dtoa_r+0x5be>
 800741e:	ee15 3a10 	vmov	r3, s10
 8007422:	07d9      	lsls	r1, r3, #31
 8007424:	d411      	bmi.n	800744a <_dtoa_r+0x5e2>
 8007426:	4629      	mov	r1, r5
 8007428:	4630      	mov	r0, r6
 800742a:	f000 fae5 	bl	80079f8 <_Bfree>
 800742e:	2300      	movs	r3, #0
 8007430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007432:	f888 3000 	strb.w	r3, [r8]
 8007436:	f10b 0301 	add.w	r3, fp, #1
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800743e:	2b00      	cmp	r3, #0
 8007440:	f43f ad61 	beq.w	8006f06 <_dtoa_r+0x9e>
 8007444:	f8c3 8000 	str.w	r8, [r3]
 8007448:	e55d      	b.n	8006f06 <_dtoa_r+0x9e>
 800744a:	465f      	mov	r7, fp
 800744c:	4643      	mov	r3, r8
 800744e:	4698      	mov	r8, r3
 8007450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007454:	2a39      	cmp	r2, #57	; 0x39
 8007456:	d106      	bne.n	8007466 <_dtoa_r+0x5fe>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d1f7      	bne.n	800744e <_dtoa_r+0x5e6>
 800745e:	9901      	ldr	r1, [sp, #4]
 8007460:	2230      	movs	r2, #48	; 0x30
 8007462:	3701      	adds	r7, #1
 8007464:	700a      	strb	r2, [r1, #0]
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	3201      	adds	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e7ae      	b.n	80073cc <_dtoa_r+0x564>
 800746e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007472:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	d1b2      	bne.n	80073e2 <_dtoa_r+0x57a>
 800747c:	e7d3      	b.n	8007426 <_dtoa_r+0x5be>
 800747e:	bf00      	nop
 8007480:	080093b0 	.word	0x080093b0
 8007484:	08009388 	.word	0x08009388
 8007488:	9907      	ldr	r1, [sp, #28]
 800748a:	2900      	cmp	r1, #0
 800748c:	f000 80d0 	beq.w	8007630 <_dtoa_r+0x7c8>
 8007490:	9906      	ldr	r1, [sp, #24]
 8007492:	2901      	cmp	r1, #1
 8007494:	f300 80b4 	bgt.w	8007600 <_dtoa_r+0x798>
 8007498:	990a      	ldr	r1, [sp, #40]	; 0x28
 800749a:	2900      	cmp	r1, #0
 800749c:	f000 80ac 	beq.w	80075f8 <_dtoa_r+0x790>
 80074a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80074a8:	461c      	mov	r4, r3
 80074aa:	930a      	str	r3, [sp, #40]	; 0x28
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9b05      	ldr	r3, [sp, #20]
 80074b4:	2101      	movs	r1, #1
 80074b6:	4413      	add	r3, r2
 80074b8:	4630      	mov	r0, r6
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	f000 fb54 	bl	8007b68 <__i2b>
 80074c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c2:	4607      	mov	r7, r0
 80074c4:	f1b8 0f00 	cmp.w	r8, #0
 80074c8:	dd0d      	ble.n	80074e6 <_dtoa_r+0x67e>
 80074ca:	9a05      	ldr	r2, [sp, #20]
 80074cc:	2a00      	cmp	r2, #0
 80074ce:	dd0a      	ble.n	80074e6 <_dtoa_r+0x67e>
 80074d0:	4542      	cmp	r2, r8
 80074d2:	9904      	ldr	r1, [sp, #16]
 80074d4:	bfa8      	it	ge
 80074d6:	4642      	movge	r2, r8
 80074d8:	1a89      	subs	r1, r1, r2
 80074da:	9104      	str	r1, [sp, #16]
 80074dc:	9905      	ldr	r1, [sp, #20]
 80074de:	eba8 0802 	sub.w	r8, r8, r2
 80074e2:	1a8a      	subs	r2, r1, r2
 80074e4:	9205      	str	r2, [sp, #20]
 80074e6:	b303      	cbz	r3, 800752a <_dtoa_r+0x6c2>
 80074e8:	9a07      	ldr	r2, [sp, #28]
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	f000 80a5 	beq.w	800763a <_dtoa_r+0x7d2>
 80074f0:	2c00      	cmp	r4, #0
 80074f2:	dd13      	ble.n	800751c <_dtoa_r+0x6b4>
 80074f4:	4639      	mov	r1, r7
 80074f6:	4622      	mov	r2, r4
 80074f8:	4630      	mov	r0, r6
 80074fa:	930d      	str	r3, [sp, #52]	; 0x34
 80074fc:	f000 fbf4 	bl	8007ce8 <__pow5mult>
 8007500:	462a      	mov	r2, r5
 8007502:	4601      	mov	r1, r0
 8007504:	4607      	mov	r7, r0
 8007506:	4630      	mov	r0, r6
 8007508:	f000 fb44 	bl	8007b94 <__multiply>
 800750c:	4629      	mov	r1, r5
 800750e:	900a      	str	r0, [sp, #40]	; 0x28
 8007510:	4630      	mov	r0, r6
 8007512:	f000 fa71 	bl	80079f8 <_Bfree>
 8007516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800751a:	4615      	mov	r5, r2
 800751c:	1b1a      	subs	r2, r3, r4
 800751e:	d004      	beq.n	800752a <_dtoa_r+0x6c2>
 8007520:	4629      	mov	r1, r5
 8007522:	4630      	mov	r0, r6
 8007524:	f000 fbe0 	bl	8007ce8 <__pow5mult>
 8007528:	4605      	mov	r5, r0
 800752a:	2101      	movs	r1, #1
 800752c:	4630      	mov	r0, r6
 800752e:	f000 fb1b 	bl	8007b68 <__i2b>
 8007532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	f340 8081 	ble.w	800763e <_dtoa_r+0x7d6>
 800753c:	461a      	mov	r2, r3
 800753e:	4601      	mov	r1, r0
 8007540:	4630      	mov	r0, r6
 8007542:	f000 fbd1 	bl	8007ce8 <__pow5mult>
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	2b01      	cmp	r3, #1
 800754a:	4604      	mov	r4, r0
 800754c:	dd7a      	ble.n	8007644 <_dtoa_r+0x7dc>
 800754e:	2300      	movs	r3, #0
 8007550:	930a      	str	r3, [sp, #40]	; 0x28
 8007552:	6922      	ldr	r2, [r4, #16]
 8007554:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007558:	6910      	ldr	r0, [r2, #16]
 800755a:	f000 fab5 	bl	8007ac8 <__hi0bits>
 800755e:	f1c0 0020 	rsb	r0, r0, #32
 8007562:	9b05      	ldr	r3, [sp, #20]
 8007564:	4418      	add	r0, r3
 8007566:	f010 001f 	ands.w	r0, r0, #31
 800756a:	f000 808c 	beq.w	8007686 <_dtoa_r+0x81e>
 800756e:	f1c0 0220 	rsb	r2, r0, #32
 8007572:	2a04      	cmp	r2, #4
 8007574:	f340 8085 	ble.w	8007682 <_dtoa_r+0x81a>
 8007578:	f1c0 001c 	rsb	r0, r0, #28
 800757c:	9b04      	ldr	r3, [sp, #16]
 800757e:	4403      	add	r3, r0
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	4403      	add	r3, r0
 8007586:	4480      	add	r8, r0
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	dd05      	ble.n	800759c <_dtoa_r+0x734>
 8007590:	4629      	mov	r1, r5
 8007592:	461a      	mov	r2, r3
 8007594:	4630      	mov	r0, r6
 8007596:	f000 fc01 	bl	8007d9c <__lshift>
 800759a:	4605      	mov	r5, r0
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dd05      	ble.n	80075ae <_dtoa_r+0x746>
 80075a2:	4621      	mov	r1, r4
 80075a4:	461a      	mov	r2, r3
 80075a6:	4630      	mov	r0, r6
 80075a8:	f000 fbf8 	bl	8007d9c <__lshift>
 80075ac:	4604      	mov	r4, r0
 80075ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d06a      	beq.n	800768a <_dtoa_r+0x822>
 80075b4:	4621      	mov	r1, r4
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fc60 	bl	8007e7c <__mcmp>
 80075bc:	2800      	cmp	r0, #0
 80075be:	da64      	bge.n	800768a <_dtoa_r+0x822>
 80075c0:	2300      	movs	r3, #0
 80075c2:	4629      	mov	r1, r5
 80075c4:	220a      	movs	r2, #10
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 fa38 	bl	8007a3c <__multadd>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075d2:	4605      	mov	r5, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8191 	beq.w	80078fc <_dtoa_r+0xa94>
 80075da:	4639      	mov	r1, r7
 80075dc:	2300      	movs	r3, #0
 80075de:	220a      	movs	r2, #10
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 fa2b 	bl	8007a3c <__multadd>
 80075e6:	f1ba 0f00 	cmp.w	sl, #0
 80075ea:	4607      	mov	r7, r0
 80075ec:	f300 808d 	bgt.w	800770a <_dtoa_r+0x8a2>
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	dc50      	bgt.n	8007698 <_dtoa_r+0x830>
 80075f6:	e088      	b.n	800770a <_dtoa_r+0x8a2>
 80075f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075fe:	e751      	b.n	80074a4 <_dtoa_r+0x63c>
 8007600:	f109 34ff 	add.w	r4, r9, #4294967295
 8007604:	42a3      	cmp	r3, r4
 8007606:	bfbf      	itttt	lt
 8007608:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800760a:	1ae3      	sublt	r3, r4, r3
 800760c:	18d2      	addlt	r2, r2, r3
 800760e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007610:	bfb6      	itet	lt
 8007612:	4623      	movlt	r3, r4
 8007614:	1b1c      	subge	r4, r3, r4
 8007616:	2400      	movlt	r4, #0
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	bfb5      	itete	lt
 800761e:	9a04      	ldrlt	r2, [sp, #16]
 8007620:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007624:	eba2 0809 	sublt.w	r8, r2, r9
 8007628:	464a      	movge	r2, r9
 800762a:	bfb8      	it	lt
 800762c:	2200      	movlt	r2, #0
 800762e:	e73c      	b.n	80074aa <_dtoa_r+0x642>
 8007630:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007634:	9f07      	ldr	r7, [sp, #28]
 8007636:	461c      	mov	r4, r3
 8007638:	e744      	b.n	80074c4 <_dtoa_r+0x65c>
 800763a:	461a      	mov	r2, r3
 800763c:	e770      	b.n	8007520 <_dtoa_r+0x6b8>
 800763e:	9b06      	ldr	r3, [sp, #24]
 8007640:	2b01      	cmp	r3, #1
 8007642:	dc18      	bgt.n	8007676 <_dtoa_r+0x80e>
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	b9b3      	cbnz	r3, 8007676 <_dtoa_r+0x80e>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800764e:	b9a2      	cbnz	r2, 800767a <_dtoa_r+0x812>
 8007650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007654:	0d12      	lsrs	r2, r2, #20
 8007656:	0512      	lsls	r2, r2, #20
 8007658:	b18a      	cbz	r2, 800767e <_dtoa_r+0x816>
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	3301      	adds	r3, #1
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	3301      	adds	r3, #1
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	2301      	movs	r3, #1
 8007668:	930a      	str	r3, [sp, #40]	; 0x28
 800766a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	f47f af70 	bne.w	8007552 <_dtoa_r+0x6ea>
 8007672:	2001      	movs	r0, #1
 8007674:	e775      	b.n	8007562 <_dtoa_r+0x6fa>
 8007676:	2300      	movs	r3, #0
 8007678:	e7f6      	b.n	8007668 <_dtoa_r+0x800>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	e7f4      	b.n	8007668 <_dtoa_r+0x800>
 800767e:	920a      	str	r2, [sp, #40]	; 0x28
 8007680:	e7f3      	b.n	800766a <_dtoa_r+0x802>
 8007682:	d082      	beq.n	800758a <_dtoa_r+0x722>
 8007684:	4610      	mov	r0, r2
 8007686:	301c      	adds	r0, #28
 8007688:	e778      	b.n	800757c <_dtoa_r+0x714>
 800768a:	f1b9 0f00 	cmp.w	r9, #0
 800768e:	dc37      	bgt.n	8007700 <_dtoa_r+0x898>
 8007690:	9b06      	ldr	r3, [sp, #24]
 8007692:	2b02      	cmp	r3, #2
 8007694:	dd34      	ble.n	8007700 <_dtoa_r+0x898>
 8007696:	46ca      	mov	sl, r9
 8007698:	f1ba 0f00 	cmp.w	sl, #0
 800769c:	d10d      	bne.n	80076ba <_dtoa_r+0x852>
 800769e:	4621      	mov	r1, r4
 80076a0:	4653      	mov	r3, sl
 80076a2:	2205      	movs	r2, #5
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 f9c9 	bl	8007a3c <__multadd>
 80076aa:	4601      	mov	r1, r0
 80076ac:	4604      	mov	r4, r0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fbe4 	bl	8007e7c <__mcmp>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f73f adeb 	bgt.w	8007290 <_dtoa_r+0x428>
 80076ba:	9b08      	ldr	r3, [sp, #32]
 80076bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076c0:	ea6f 0b03 	mvn.w	fp, r3
 80076c4:	f04f 0900 	mov.w	r9, #0
 80076c8:	4621      	mov	r1, r4
 80076ca:	4630      	mov	r0, r6
 80076cc:	f000 f994 	bl	80079f8 <_Bfree>
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	f43f aea8 	beq.w	8007426 <_dtoa_r+0x5be>
 80076d6:	f1b9 0f00 	cmp.w	r9, #0
 80076da:	d005      	beq.n	80076e8 <_dtoa_r+0x880>
 80076dc:	45b9      	cmp	r9, r7
 80076de:	d003      	beq.n	80076e8 <_dtoa_r+0x880>
 80076e0:	4649      	mov	r1, r9
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f988 	bl	80079f8 <_Bfree>
 80076e8:	4639      	mov	r1, r7
 80076ea:	4630      	mov	r0, r6
 80076ec:	f000 f984 	bl	80079f8 <_Bfree>
 80076f0:	e699      	b.n	8007426 <_dtoa_r+0x5be>
 80076f2:	2400      	movs	r4, #0
 80076f4:	4627      	mov	r7, r4
 80076f6:	e7e0      	b.n	80076ba <_dtoa_r+0x852>
 80076f8:	46bb      	mov	fp, r7
 80076fa:	4604      	mov	r4, r0
 80076fc:	4607      	mov	r7, r0
 80076fe:	e5c7      	b.n	8007290 <_dtoa_r+0x428>
 8007700:	9b07      	ldr	r3, [sp, #28]
 8007702:	46ca      	mov	sl, r9
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8100 	beq.w	800790a <_dtoa_r+0xaa2>
 800770a:	f1b8 0f00 	cmp.w	r8, #0
 800770e:	dd05      	ble.n	800771c <_dtoa_r+0x8b4>
 8007710:	4639      	mov	r1, r7
 8007712:	4642      	mov	r2, r8
 8007714:	4630      	mov	r0, r6
 8007716:	f000 fb41 	bl	8007d9c <__lshift>
 800771a:	4607      	mov	r7, r0
 800771c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771e:	2b00      	cmp	r3, #0
 8007720:	d05d      	beq.n	80077de <_dtoa_r+0x976>
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4630      	mov	r0, r6
 8007726:	f000 f927 	bl	8007978 <_Balloc>
 800772a:	4680      	mov	r8, r0
 800772c:	b928      	cbnz	r0, 800773a <_dtoa_r+0x8d2>
 800772e:	4b82      	ldr	r3, [pc, #520]	; (8007938 <_dtoa_r+0xad0>)
 8007730:	4602      	mov	r2, r0
 8007732:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007736:	f7ff bbaf 	b.w	8006e98 <_dtoa_r+0x30>
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	3202      	adds	r2, #2
 800773e:	0092      	lsls	r2, r2, #2
 8007740:	f107 010c 	add.w	r1, r7, #12
 8007744:	300c      	adds	r0, #12
 8007746:	f000 f909 	bl	800795c <memcpy>
 800774a:	2201      	movs	r2, #1
 800774c:	4641      	mov	r1, r8
 800774e:	4630      	mov	r0, r6
 8007750:	f000 fb24 	bl	8007d9c <__lshift>
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	3301      	adds	r3, #1
 8007758:	9304      	str	r3, [sp, #16]
 800775a:	9b01      	ldr	r3, [sp, #4]
 800775c:	4453      	add	r3, sl
 800775e:	9308      	str	r3, [sp, #32]
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	46b9      	mov	r9, r7
 8007768:	9307      	str	r3, [sp, #28]
 800776a:	4607      	mov	r7, r0
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	4621      	mov	r1, r4
 8007770:	3b01      	subs	r3, #1
 8007772:	4628      	mov	r0, r5
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	f7ff fae9 	bl	8006d4c <quorem>
 800777a:	4603      	mov	r3, r0
 800777c:	3330      	adds	r3, #48	; 0x30
 800777e:	9005      	str	r0, [sp, #20]
 8007780:	4649      	mov	r1, r9
 8007782:	4628      	mov	r0, r5
 8007784:	9309      	str	r3, [sp, #36]	; 0x24
 8007786:	f000 fb79 	bl	8007e7c <__mcmp>
 800778a:	463a      	mov	r2, r7
 800778c:	4682      	mov	sl, r0
 800778e:	4621      	mov	r1, r4
 8007790:	4630      	mov	r0, r6
 8007792:	f000 fb8f 	bl	8007eb4 <__mdiff>
 8007796:	68c2      	ldr	r2, [r0, #12]
 8007798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779a:	4680      	mov	r8, r0
 800779c:	bb0a      	cbnz	r2, 80077e2 <_dtoa_r+0x97a>
 800779e:	4601      	mov	r1, r0
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 fb6b 	bl	8007e7c <__mcmp>
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	4602      	mov	r2, r0
 80077aa:	4641      	mov	r1, r8
 80077ac:	4630      	mov	r0, r6
 80077ae:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80077b2:	f000 f921 	bl	80079f8 <_Bfree>
 80077b6:	9b06      	ldr	r3, [sp, #24]
 80077b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80077be:	ea43 0102 	orr.w	r1, r3, r2
 80077c2:	9b07      	ldr	r3, [sp, #28]
 80077c4:	430b      	orrs	r3, r1
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	d10d      	bne.n	80077e6 <_dtoa_r+0x97e>
 80077ca:	2b39      	cmp	r3, #57	; 0x39
 80077cc:	d029      	beq.n	8007822 <_dtoa_r+0x9ba>
 80077ce:	f1ba 0f00 	cmp.w	sl, #0
 80077d2:	dd01      	ble.n	80077d8 <_dtoa_r+0x970>
 80077d4:	9b05      	ldr	r3, [sp, #20]
 80077d6:	3331      	adds	r3, #49	; 0x31
 80077d8:	9a02      	ldr	r2, [sp, #8]
 80077da:	7013      	strb	r3, [r2, #0]
 80077dc:	e774      	b.n	80076c8 <_dtoa_r+0x860>
 80077de:	4638      	mov	r0, r7
 80077e0:	e7b8      	b.n	8007754 <_dtoa_r+0x8ec>
 80077e2:	2201      	movs	r2, #1
 80077e4:	e7e1      	b.n	80077aa <_dtoa_r+0x942>
 80077e6:	f1ba 0f00 	cmp.w	sl, #0
 80077ea:	db06      	blt.n	80077fa <_dtoa_r+0x992>
 80077ec:	9906      	ldr	r1, [sp, #24]
 80077ee:	ea41 0a0a 	orr.w	sl, r1, sl
 80077f2:	9907      	ldr	r1, [sp, #28]
 80077f4:	ea5a 0101 	orrs.w	r1, sl, r1
 80077f8:	d120      	bne.n	800783c <_dtoa_r+0x9d4>
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	ddec      	ble.n	80077d8 <_dtoa_r+0x970>
 80077fe:	4629      	mov	r1, r5
 8007800:	2201      	movs	r2, #1
 8007802:	4630      	mov	r0, r6
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	f000 fac9 	bl	8007d9c <__lshift>
 800780a:	4621      	mov	r1, r4
 800780c:	4605      	mov	r5, r0
 800780e:	f000 fb35 	bl	8007e7c <__mcmp>
 8007812:	2800      	cmp	r0, #0
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	dc02      	bgt.n	800781e <_dtoa_r+0x9b6>
 8007818:	d1de      	bne.n	80077d8 <_dtoa_r+0x970>
 800781a:	07da      	lsls	r2, r3, #31
 800781c:	d5dc      	bpl.n	80077d8 <_dtoa_r+0x970>
 800781e:	2b39      	cmp	r3, #57	; 0x39
 8007820:	d1d8      	bne.n	80077d4 <_dtoa_r+0x96c>
 8007822:	9a02      	ldr	r2, [sp, #8]
 8007824:	2339      	movs	r3, #57	; 0x39
 8007826:	7013      	strb	r3, [r2, #0]
 8007828:	4643      	mov	r3, r8
 800782a:	4698      	mov	r8, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007832:	2a39      	cmp	r2, #57	; 0x39
 8007834:	d051      	beq.n	80078da <_dtoa_r+0xa72>
 8007836:	3201      	adds	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	e745      	b.n	80076c8 <_dtoa_r+0x860>
 800783c:	2a00      	cmp	r2, #0
 800783e:	dd03      	ble.n	8007848 <_dtoa_r+0x9e0>
 8007840:	2b39      	cmp	r3, #57	; 0x39
 8007842:	d0ee      	beq.n	8007822 <_dtoa_r+0x9ba>
 8007844:	3301      	adds	r3, #1
 8007846:	e7c7      	b.n	80077d8 <_dtoa_r+0x970>
 8007848:	9a04      	ldr	r2, [sp, #16]
 800784a:	9908      	ldr	r1, [sp, #32]
 800784c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007850:	428a      	cmp	r2, r1
 8007852:	d02b      	beq.n	80078ac <_dtoa_r+0xa44>
 8007854:	4629      	mov	r1, r5
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	4630      	mov	r0, r6
 800785c:	f000 f8ee 	bl	8007a3c <__multadd>
 8007860:	45b9      	cmp	r9, r7
 8007862:	4605      	mov	r5, r0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	f04f 020a 	mov.w	r2, #10
 800786c:	4649      	mov	r1, r9
 800786e:	4630      	mov	r0, r6
 8007870:	d107      	bne.n	8007882 <_dtoa_r+0xa1a>
 8007872:	f000 f8e3 	bl	8007a3c <__multadd>
 8007876:	4681      	mov	r9, r0
 8007878:	4607      	mov	r7, r0
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	3301      	adds	r3, #1
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	e774      	b.n	800776c <_dtoa_r+0x904>
 8007882:	f000 f8db 	bl	8007a3c <__multadd>
 8007886:	4639      	mov	r1, r7
 8007888:	4681      	mov	r9, r0
 800788a:	2300      	movs	r3, #0
 800788c:	220a      	movs	r2, #10
 800788e:	4630      	mov	r0, r6
 8007890:	f000 f8d4 	bl	8007a3c <__multadd>
 8007894:	4607      	mov	r7, r0
 8007896:	e7f0      	b.n	800787a <_dtoa_r+0xa12>
 8007898:	f1ba 0f00 	cmp.w	sl, #0
 800789c:	9a01      	ldr	r2, [sp, #4]
 800789e:	bfcc      	ite	gt
 80078a0:	46d0      	movgt	r8, sl
 80078a2:	f04f 0801 	movle.w	r8, #1
 80078a6:	4490      	add	r8, r2
 80078a8:	f04f 0900 	mov.w	r9, #0
 80078ac:	4629      	mov	r1, r5
 80078ae:	2201      	movs	r2, #1
 80078b0:	4630      	mov	r0, r6
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	f000 fa72 	bl	8007d9c <__lshift>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4605      	mov	r5, r0
 80078bc:	f000 fade 	bl	8007e7c <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	dcb1      	bgt.n	8007828 <_dtoa_r+0x9c0>
 80078c4:	d102      	bne.n	80078cc <_dtoa_r+0xa64>
 80078c6:	9b02      	ldr	r3, [sp, #8]
 80078c8:	07db      	lsls	r3, r3, #31
 80078ca:	d4ad      	bmi.n	8007828 <_dtoa_r+0x9c0>
 80078cc:	4643      	mov	r3, r8
 80078ce:	4698      	mov	r8, r3
 80078d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078d4:	2a30      	cmp	r2, #48	; 0x30
 80078d6:	d0fa      	beq.n	80078ce <_dtoa_r+0xa66>
 80078d8:	e6f6      	b.n	80076c8 <_dtoa_r+0x860>
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d1a4      	bne.n	800782a <_dtoa_r+0x9c2>
 80078e0:	f10b 0b01 	add.w	fp, fp, #1
 80078e4:	2331      	movs	r3, #49	; 0x31
 80078e6:	e778      	b.n	80077da <_dtoa_r+0x972>
 80078e8:	4b14      	ldr	r3, [pc, #80]	; (800793c <_dtoa_r+0xad4>)
 80078ea:	f7ff bb27 	b.w	8006f3c <_dtoa_r+0xd4>
 80078ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f ab03 	bne.w	8006efc <_dtoa_r+0x94>
 80078f6:	4b12      	ldr	r3, [pc, #72]	; (8007940 <_dtoa_r+0xad8>)
 80078f8:	f7ff bb20 	b.w	8006f3c <_dtoa_r+0xd4>
 80078fc:	f1ba 0f00 	cmp.w	sl, #0
 8007900:	dc03      	bgt.n	800790a <_dtoa_r+0xaa2>
 8007902:	9b06      	ldr	r3, [sp, #24]
 8007904:	2b02      	cmp	r3, #2
 8007906:	f73f aec7 	bgt.w	8007698 <_dtoa_r+0x830>
 800790a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800790e:	4621      	mov	r1, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f7ff fa1b 	bl	8006d4c <quorem>
 8007916:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800791a:	f808 3b01 	strb.w	r3, [r8], #1
 800791e:	9a01      	ldr	r2, [sp, #4]
 8007920:	eba8 0202 	sub.w	r2, r8, r2
 8007924:	4592      	cmp	sl, r2
 8007926:	ddb7      	ble.n	8007898 <_dtoa_r+0xa30>
 8007928:	4629      	mov	r1, r5
 800792a:	2300      	movs	r3, #0
 800792c:	220a      	movs	r2, #10
 800792e:	4630      	mov	r0, r6
 8007930:	f000 f884 	bl	8007a3c <__multadd>
 8007934:	4605      	mov	r5, r0
 8007936:	e7ea      	b.n	800790e <_dtoa_r+0xaa6>
 8007938:	08009314 	.word	0x08009314
 800793c:	08009170 	.word	0x08009170
 8007940:	08009295 	.word	0x08009295

08007944 <_localeconv_r>:
 8007944:	4800      	ldr	r0, [pc, #0]	; (8007948 <_localeconv_r+0x4>)
 8007946:	4770      	bx	lr
 8007948:	20000c54 	.word	0x20000c54

0800794c <malloc>:
 800794c:	4b02      	ldr	r3, [pc, #8]	; (8007958 <malloc+0xc>)
 800794e:	4601      	mov	r1, r0
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f000 bc17 	b.w	8008184 <_malloc_r>
 8007956:	bf00      	nop
 8007958:	20000b00 	.word	0x20000b00

0800795c <memcpy>:
 800795c:	440a      	add	r2, r1
 800795e:	4291      	cmp	r1, r2
 8007960:	f100 33ff 	add.w	r3, r0, #4294967295
 8007964:	d100      	bne.n	8007968 <memcpy+0xc>
 8007966:	4770      	bx	lr
 8007968:	b510      	push	{r4, lr}
 800796a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007972:	4291      	cmp	r1, r2
 8007974:	d1f9      	bne.n	800796a <memcpy+0xe>
 8007976:	bd10      	pop	{r4, pc}

08007978 <_Balloc>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	b976      	cbnz	r6, 80079a0 <_Balloc+0x28>
 8007982:	2010      	movs	r0, #16
 8007984:	f7ff ffe2 	bl	800794c <malloc>
 8007988:	4602      	mov	r2, r0
 800798a:	6260      	str	r0, [r4, #36]	; 0x24
 800798c:	b920      	cbnz	r0, 8007998 <_Balloc+0x20>
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <_Balloc+0x78>)
 8007990:	4818      	ldr	r0, [pc, #96]	; (80079f4 <_Balloc+0x7c>)
 8007992:	2166      	movs	r1, #102	; 0x66
 8007994:	f000 fdd6 	bl	8008544 <__assert_func>
 8007998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800799c:	6006      	str	r6, [r0, #0]
 800799e:	60c6      	str	r6, [r0, #12]
 80079a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079a2:	68f3      	ldr	r3, [r6, #12]
 80079a4:	b183      	cbz	r3, 80079c8 <_Balloc+0x50>
 80079a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ae:	b9b8      	cbnz	r0, 80079e0 <_Balloc+0x68>
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f605 	lsl.w	r6, r1, r5
 80079b6:	1d72      	adds	r2, r6, #5
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fb60 	bl	8008080 <_calloc_r>
 80079c0:	b160      	cbz	r0, 80079dc <_Balloc+0x64>
 80079c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079c6:	e00e      	b.n	80079e6 <_Balloc+0x6e>
 80079c8:	2221      	movs	r2, #33	; 0x21
 80079ca:	2104      	movs	r1, #4
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fb57 	bl	8008080 <_calloc_r>
 80079d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d4:	60f0      	str	r0, [r6, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <_Balloc+0x2e>
 80079dc:	2000      	movs	r0, #0
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	6802      	ldr	r2, [r0, #0]
 80079e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079e6:	2300      	movs	r3, #0
 80079e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079ec:	e7f7      	b.n	80079de <_Balloc+0x66>
 80079ee:	bf00      	nop
 80079f0:	080092a2 	.word	0x080092a2
 80079f4:	08009325 	.word	0x08009325

080079f8 <_Bfree>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	b976      	cbnz	r6, 8007a20 <_Bfree+0x28>
 8007a02:	2010      	movs	r0, #16
 8007a04:	f7ff ffa2 	bl	800794c <malloc>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6268      	str	r0, [r5, #36]	; 0x24
 8007a0c:	b920      	cbnz	r0, 8007a18 <_Bfree+0x20>
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <_Bfree+0x3c>)
 8007a10:	4809      	ldr	r0, [pc, #36]	; (8007a38 <_Bfree+0x40>)
 8007a12:	218a      	movs	r1, #138	; 0x8a
 8007a14:	f000 fd96 	bl	8008544 <__assert_func>
 8007a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a1c:	6006      	str	r6, [r0, #0]
 8007a1e:	60c6      	str	r6, [r0, #12]
 8007a20:	b13c      	cbz	r4, 8007a32 <_Bfree+0x3a>
 8007a22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a2c:	6021      	str	r1, [r4, #0]
 8007a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	080092a2 	.word	0x080092a2
 8007a38:	08009325 	.word	0x08009325

08007a3c <__multadd>:
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	690d      	ldr	r5, [r1, #16]
 8007a42:	4607      	mov	r7, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	461e      	mov	r6, r3
 8007a48:	f101 0c14 	add.w	ip, r1, #20
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a52:	b299      	uxth	r1, r3
 8007a54:	fb02 6101 	mla	r1, r2, r1, r6
 8007a58:	0c1e      	lsrs	r6, r3, #16
 8007a5a:	0c0b      	lsrs	r3, r1, #16
 8007a5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a60:	b289      	uxth	r1, r1
 8007a62:	3001      	adds	r0, #1
 8007a64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a68:	4285      	cmp	r5, r0
 8007a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a72:	dcec      	bgt.n	8007a4e <__multadd+0x12>
 8007a74:	b30e      	cbz	r6, 8007aba <__multadd+0x7e>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	dc19      	bgt.n	8007ab0 <__multadd+0x74>
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4638      	mov	r0, r7
 8007a80:	3101      	adds	r1, #1
 8007a82:	f7ff ff79 	bl	8007978 <_Balloc>
 8007a86:	4680      	mov	r8, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <__multadd+0x5a>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <__multadd+0x84>)
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <__multadd+0x88>)
 8007a90:	21b5      	movs	r1, #181	; 0xb5
 8007a92:	f000 fd57 	bl	8008544 <__assert_func>
 8007a96:	6922      	ldr	r2, [r4, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	f104 010c 	add.w	r1, r4, #12
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f7ff ff5b 	bl	800795c <memcpy>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ffa5 	bl	80079f8 <_Bfree>
 8007aae:	4644      	mov	r4, r8
 8007ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	615e      	str	r6, [r3, #20]
 8007ab8:	6125      	str	r5, [r4, #16]
 8007aba:	4620      	mov	r0, r4
 8007abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac0:	08009314 	.word	0x08009314
 8007ac4:	08009325 	.word	0x08009325

08007ac8 <__hi0bits>:
 8007ac8:	0c03      	lsrs	r3, r0, #16
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	b9d3      	cbnz	r3, 8007b04 <__hi0bits+0x3c>
 8007ace:	0400      	lsls	r0, r0, #16
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ad6:	bf04      	itt	eq
 8007ad8:	0200      	lsleq	r0, r0, #8
 8007ada:	3308      	addeq	r3, #8
 8007adc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ae0:	bf04      	itt	eq
 8007ae2:	0100      	lsleq	r0, r0, #4
 8007ae4:	3304      	addeq	r3, #4
 8007ae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007aea:	bf04      	itt	eq
 8007aec:	0080      	lsleq	r0, r0, #2
 8007aee:	3302      	addeq	r3, #2
 8007af0:	2800      	cmp	r0, #0
 8007af2:	db05      	blt.n	8007b00 <__hi0bits+0x38>
 8007af4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007af8:	f103 0301 	add.w	r3, r3, #1
 8007afc:	bf08      	it	eq
 8007afe:	2320      	moveq	r3, #32
 8007b00:	4618      	mov	r0, r3
 8007b02:	4770      	bx	lr
 8007b04:	2300      	movs	r3, #0
 8007b06:	e7e4      	b.n	8007ad2 <__hi0bits+0xa>

08007b08 <__lo0bits>:
 8007b08:	6803      	ldr	r3, [r0, #0]
 8007b0a:	f013 0207 	ands.w	r2, r3, #7
 8007b0e:	4601      	mov	r1, r0
 8007b10:	d00b      	beq.n	8007b2a <__lo0bits+0x22>
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d423      	bmi.n	8007b5e <__lo0bits+0x56>
 8007b16:	0798      	lsls	r0, r3, #30
 8007b18:	bf49      	itett	mi
 8007b1a:	085b      	lsrmi	r3, r3, #1
 8007b1c:	089b      	lsrpl	r3, r3, #2
 8007b1e:	2001      	movmi	r0, #1
 8007b20:	600b      	strmi	r3, [r1, #0]
 8007b22:	bf5c      	itt	pl
 8007b24:	600b      	strpl	r3, [r1, #0]
 8007b26:	2002      	movpl	r0, #2
 8007b28:	4770      	bx	lr
 8007b2a:	b298      	uxth	r0, r3
 8007b2c:	b9a8      	cbnz	r0, 8007b5a <__lo0bits+0x52>
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	2010      	movs	r0, #16
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	b90a      	cbnz	r2, 8007b3a <__lo0bits+0x32>
 8007b36:	3008      	adds	r0, #8
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	071a      	lsls	r2, r3, #28
 8007b3c:	bf04      	itt	eq
 8007b3e:	091b      	lsreq	r3, r3, #4
 8007b40:	3004      	addeq	r0, #4
 8007b42:	079a      	lsls	r2, r3, #30
 8007b44:	bf04      	itt	eq
 8007b46:	089b      	lsreq	r3, r3, #2
 8007b48:	3002      	addeq	r0, #2
 8007b4a:	07da      	lsls	r2, r3, #31
 8007b4c:	d403      	bmi.n	8007b56 <__lo0bits+0x4e>
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	f100 0001 	add.w	r0, r0, #1
 8007b54:	d005      	beq.n	8007b62 <__lo0bits+0x5a>
 8007b56:	600b      	str	r3, [r1, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	e7e9      	b.n	8007b32 <__lo0bits+0x2a>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	4770      	bx	lr
 8007b62:	2020      	movs	r0, #32
 8007b64:	4770      	bx	lr
	...

08007b68 <__i2b>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	f7ff ff03 	bl	8007978 <_Balloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__i2b+0x1a>
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <__i2b+0x24>)
 8007b78:	4805      	ldr	r0, [pc, #20]	; (8007b90 <__i2b+0x28>)
 8007b7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b7e:	f000 fce1 	bl	8008544 <__assert_func>
 8007b82:	2301      	movs	r3, #1
 8007b84:	6144      	str	r4, [r0, #20]
 8007b86:	6103      	str	r3, [r0, #16]
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08009314 	.word	0x08009314
 8007b90:	08009325 	.word	0x08009325

08007b94 <__multiply>:
 8007b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	4691      	mov	r9, r2
 8007b9a:	690a      	ldr	r2, [r1, #16]
 8007b9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	bfb8      	it	lt
 8007ba4:	460b      	movlt	r3, r1
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	bfbc      	itt	lt
 8007baa:	464c      	movlt	r4, r9
 8007bac:	4699      	movlt	r9, r3
 8007bae:	6927      	ldr	r7, [r4, #16]
 8007bb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bb4:	68a3      	ldr	r3, [r4, #8]
 8007bb6:	6861      	ldr	r1, [r4, #4]
 8007bb8:	eb07 060a 	add.w	r6, r7, sl
 8007bbc:	42b3      	cmp	r3, r6
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	bfb8      	it	lt
 8007bc2:	3101      	addlt	r1, #1
 8007bc4:	f7ff fed8 	bl	8007978 <_Balloc>
 8007bc8:	b930      	cbnz	r0, 8007bd8 <__multiply+0x44>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b44      	ldr	r3, [pc, #272]	; (8007ce0 <__multiply+0x14c>)
 8007bce:	4845      	ldr	r0, [pc, #276]	; (8007ce4 <__multiply+0x150>)
 8007bd0:	f240 115d 	movw	r1, #349	; 0x15d
 8007bd4:	f000 fcb6 	bl	8008544 <__assert_func>
 8007bd8:	f100 0514 	add.w	r5, r0, #20
 8007bdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007be0:	462b      	mov	r3, r5
 8007be2:	2200      	movs	r2, #0
 8007be4:	4543      	cmp	r3, r8
 8007be6:	d321      	bcc.n	8007c2c <__multiply+0x98>
 8007be8:	f104 0314 	add.w	r3, r4, #20
 8007bec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bf0:	f109 0314 	add.w	r3, r9, #20
 8007bf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bf8:	9202      	str	r2, [sp, #8]
 8007bfa:	1b3a      	subs	r2, r7, r4
 8007bfc:	3a15      	subs	r2, #21
 8007bfe:	f022 0203 	bic.w	r2, r2, #3
 8007c02:	3204      	adds	r2, #4
 8007c04:	f104 0115 	add.w	r1, r4, #21
 8007c08:	428f      	cmp	r7, r1
 8007c0a:	bf38      	it	cc
 8007c0c:	2204      	movcc	r2, #4
 8007c0e:	9201      	str	r2, [sp, #4]
 8007c10:	9a02      	ldr	r2, [sp, #8]
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d80c      	bhi.n	8007c32 <__multiply+0x9e>
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	dd03      	ble.n	8007c24 <__multiply+0x90>
 8007c1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d05a      	beq.n	8007cda <__multiply+0x146>
 8007c24:	6106      	str	r6, [r0, #16]
 8007c26:	b005      	add	sp, #20
 8007c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2c:	f843 2b04 	str.w	r2, [r3], #4
 8007c30:	e7d8      	b.n	8007be4 <__multiply+0x50>
 8007c32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c36:	f1ba 0f00 	cmp.w	sl, #0
 8007c3a:	d024      	beq.n	8007c86 <__multiply+0xf2>
 8007c3c:	f104 0e14 	add.w	lr, r4, #20
 8007c40:	46a9      	mov	r9, r5
 8007c42:	f04f 0c00 	mov.w	ip, #0
 8007c46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c4a:	f8d9 1000 	ldr.w	r1, [r9]
 8007c4e:	fa1f fb82 	uxth.w	fp, r2
 8007c52:	b289      	uxth	r1, r1
 8007c54:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007c60:	4461      	add	r1, ip
 8007c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c66:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c6e:	b289      	uxth	r1, r1
 8007c70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c74:	4577      	cmp	r7, lr
 8007c76:	f849 1b04 	str.w	r1, [r9], #4
 8007c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c7e:	d8e2      	bhi.n	8007c46 <__multiply+0xb2>
 8007c80:	9a01      	ldr	r2, [sp, #4]
 8007c82:	f845 c002 	str.w	ip, [r5, r2]
 8007c86:	9a03      	ldr	r2, [sp, #12]
 8007c88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	d020      	beq.n	8007cd6 <__multiply+0x142>
 8007c94:	6829      	ldr	r1, [r5, #0]
 8007c96:	f104 0c14 	add.w	ip, r4, #20
 8007c9a:	46ae      	mov	lr, r5
 8007c9c:	f04f 0a00 	mov.w	sl, #0
 8007ca0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ca4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ca8:	fb09 220b 	mla	r2, r9, fp, r2
 8007cac:	4492      	add	sl, r2
 8007cae:	b289      	uxth	r1, r1
 8007cb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007cb4:	f84e 1b04 	str.w	r1, [lr], #4
 8007cb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cbc:	f8be 1000 	ldrh.w	r1, [lr]
 8007cc0:	0c12      	lsrs	r2, r2, #16
 8007cc2:	fb09 1102 	mla	r1, r9, r2, r1
 8007cc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007cca:	4567      	cmp	r7, ip
 8007ccc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cd0:	d8e6      	bhi.n	8007ca0 <__multiply+0x10c>
 8007cd2:	9a01      	ldr	r2, [sp, #4]
 8007cd4:	50a9      	str	r1, [r5, r2]
 8007cd6:	3504      	adds	r5, #4
 8007cd8:	e79a      	b.n	8007c10 <__multiply+0x7c>
 8007cda:	3e01      	subs	r6, #1
 8007cdc:	e79c      	b.n	8007c18 <__multiply+0x84>
 8007cde:	bf00      	nop
 8007ce0:	08009314 	.word	0x08009314
 8007ce4:	08009325 	.word	0x08009325

08007ce8 <__pow5mult>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4615      	mov	r5, r2
 8007cee:	f012 0203 	ands.w	r2, r2, #3
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	d007      	beq.n	8007d08 <__pow5mult+0x20>
 8007cf8:	4c25      	ldr	r4, [pc, #148]	; (8007d90 <__pow5mult+0xa8>)
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d02:	f7ff fe9b 	bl	8007a3c <__multadd>
 8007d06:	4607      	mov	r7, r0
 8007d08:	10ad      	asrs	r5, r5, #2
 8007d0a:	d03d      	beq.n	8007d88 <__pow5mult+0xa0>
 8007d0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d0e:	b97c      	cbnz	r4, 8007d30 <__pow5mult+0x48>
 8007d10:	2010      	movs	r0, #16
 8007d12:	f7ff fe1b 	bl	800794c <malloc>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6270      	str	r0, [r6, #36]	; 0x24
 8007d1a:	b928      	cbnz	r0, 8007d28 <__pow5mult+0x40>
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	; (8007d94 <__pow5mult+0xac>)
 8007d1e:	481e      	ldr	r0, [pc, #120]	; (8007d98 <__pow5mult+0xb0>)
 8007d20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d24:	f000 fc0e 	bl	8008544 <__assert_func>
 8007d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d2c:	6004      	str	r4, [r0, #0]
 8007d2e:	60c4      	str	r4, [r0, #12]
 8007d30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d38:	b94c      	cbnz	r4, 8007d4e <__pow5mult+0x66>
 8007d3a:	f240 2171 	movw	r1, #625	; 0x271
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff12 	bl	8007b68 <__i2b>
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	07eb      	lsls	r3, r5, #31
 8007d54:	d50a      	bpl.n	8007d6c <__pow5mult+0x84>
 8007d56:	4639      	mov	r1, r7
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff1a 	bl	8007b94 <__multiply>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4680      	mov	r8, r0
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff fe47 	bl	80079f8 <_Bfree>
 8007d6a:	4647      	mov	r7, r8
 8007d6c:	106d      	asrs	r5, r5, #1
 8007d6e:	d00b      	beq.n	8007d88 <__pow5mult+0xa0>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	b938      	cbnz	r0, 8007d84 <__pow5mult+0x9c>
 8007d74:	4622      	mov	r2, r4
 8007d76:	4621      	mov	r1, r4
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7ff ff0b 	bl	8007b94 <__multiply>
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f8c0 9000 	str.w	r9, [r0]
 8007d84:	4604      	mov	r4, r0
 8007d86:	e7e4      	b.n	8007d52 <__pow5mult+0x6a>
 8007d88:	4638      	mov	r0, r7
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8e:	bf00      	nop
 8007d90:	08009478 	.word	0x08009478
 8007d94:	080092a2 	.word	0x080092a2
 8007d98:	08009325 	.word	0x08009325

08007d9c <__lshift>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	6849      	ldr	r1, [r1, #4]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	4607      	mov	r7, r0
 8007dae:	4691      	mov	r9, r2
 8007db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007db4:	f108 0601 	add.w	r6, r8, #1
 8007db8:	42b3      	cmp	r3, r6
 8007dba:	db0b      	blt.n	8007dd4 <__lshift+0x38>
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff fddb 	bl	8007978 <_Balloc>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	b948      	cbnz	r0, 8007dda <__lshift+0x3e>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	4b2a      	ldr	r3, [pc, #168]	; (8007e74 <__lshift+0xd8>)
 8007dca:	482b      	ldr	r0, [pc, #172]	; (8007e78 <__lshift+0xdc>)
 8007dcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dd0:	f000 fbb8 	bl	8008544 <__assert_func>
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	e7ee      	b.n	8007db8 <__lshift+0x1c>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f100 0114 	add.w	r1, r0, #20
 8007de0:	f100 0210 	add.w	r2, r0, #16
 8007de4:	4618      	mov	r0, r3
 8007de6:	4553      	cmp	r3, sl
 8007de8:	db37      	blt.n	8007e5a <__lshift+0xbe>
 8007dea:	6920      	ldr	r0, [r4, #16]
 8007dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007df0:	f104 0314 	add.w	r3, r4, #20
 8007df4:	f019 091f 	ands.w	r9, r9, #31
 8007df8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e00:	d02f      	beq.n	8007e62 <__lshift+0xc6>
 8007e02:	f1c9 0e20 	rsb	lr, r9, #32
 8007e06:	468a      	mov	sl, r1
 8007e08:	f04f 0c00 	mov.w	ip, #0
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	fa02 f209 	lsl.w	r2, r2, r9
 8007e12:	ea42 020c 	orr.w	r2, r2, ip
 8007e16:	f84a 2b04 	str.w	r2, [sl], #4
 8007e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1e:	4298      	cmp	r0, r3
 8007e20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e24:	d8f2      	bhi.n	8007e0c <__lshift+0x70>
 8007e26:	1b03      	subs	r3, r0, r4
 8007e28:	3b15      	subs	r3, #21
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	3304      	adds	r3, #4
 8007e30:	f104 0215 	add.w	r2, r4, #21
 8007e34:	4290      	cmp	r0, r2
 8007e36:	bf38      	it	cc
 8007e38:	2304      	movcc	r3, #4
 8007e3a:	f841 c003 	str.w	ip, [r1, r3]
 8007e3e:	f1bc 0f00 	cmp.w	ip, #0
 8007e42:	d001      	beq.n	8007e48 <__lshift+0xac>
 8007e44:	f108 0602 	add.w	r6, r8, #2
 8007e48:	3e01      	subs	r6, #1
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	612e      	str	r6, [r5, #16]
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f7ff fdd2 	bl	80079f8 <_Bfree>
 8007e54:	4628      	mov	r0, r5
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e5e:	3301      	adds	r3, #1
 8007e60:	e7c1      	b.n	8007de6 <__lshift+0x4a>
 8007e62:	3904      	subs	r1, #4
 8007e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e6c:	4298      	cmp	r0, r3
 8007e6e:	d8f9      	bhi.n	8007e64 <__lshift+0xc8>
 8007e70:	e7ea      	b.n	8007e48 <__lshift+0xac>
 8007e72:	bf00      	nop
 8007e74:	08009314 	.word	0x08009314
 8007e78:	08009325 	.word	0x08009325

08007e7c <__mcmp>:
 8007e7c:	b530      	push	{r4, r5, lr}
 8007e7e:	6902      	ldr	r2, [r0, #16]
 8007e80:	690c      	ldr	r4, [r1, #16]
 8007e82:	1b12      	subs	r2, r2, r4
 8007e84:	d10e      	bne.n	8007ea4 <__mcmp+0x28>
 8007e86:	f100 0314 	add.w	r3, r0, #20
 8007e8a:	3114      	adds	r1, #20
 8007e8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e9c:	42a5      	cmp	r5, r4
 8007e9e:	d003      	beq.n	8007ea8 <__mcmp+0x2c>
 8007ea0:	d305      	bcc.n	8007eae <__mcmp+0x32>
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	bd30      	pop	{r4, r5, pc}
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	d3f3      	bcc.n	8007e94 <__mcmp+0x18>
 8007eac:	e7fa      	b.n	8007ea4 <__mcmp+0x28>
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	e7f7      	b.n	8007ea4 <__mcmp+0x28>

08007eb4 <__mdiff>:
 8007eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	460c      	mov	r4, r1
 8007eba:	4606      	mov	r6, r0
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4690      	mov	r8, r2
 8007ec2:	f7ff ffdb 	bl	8007e7c <__mcmp>
 8007ec6:	1e05      	subs	r5, r0, #0
 8007ec8:	d110      	bne.n	8007eec <__mdiff+0x38>
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff fd53 	bl	8007978 <_Balloc>
 8007ed2:	b930      	cbnz	r0, 8007ee2 <__mdiff+0x2e>
 8007ed4:	4b3a      	ldr	r3, [pc, #232]	; (8007fc0 <__mdiff+0x10c>)
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	f240 2132 	movw	r1, #562	; 0x232
 8007edc:	4839      	ldr	r0, [pc, #228]	; (8007fc4 <__mdiff+0x110>)
 8007ede:	f000 fb31 	bl	8008544 <__assert_func>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	bfa4      	itt	ge
 8007eee:	4643      	movge	r3, r8
 8007ef0:	46a0      	movge	r8, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ef8:	bfa6      	itte	ge
 8007efa:	461c      	movge	r4, r3
 8007efc:	2500      	movge	r5, #0
 8007efe:	2501      	movlt	r5, #1
 8007f00:	f7ff fd3a 	bl	8007978 <_Balloc>
 8007f04:	b920      	cbnz	r0, 8007f10 <__mdiff+0x5c>
 8007f06:	4b2e      	ldr	r3, [pc, #184]	; (8007fc0 <__mdiff+0x10c>)
 8007f08:	4602      	mov	r2, r0
 8007f0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f0e:	e7e5      	b.n	8007edc <__mdiff+0x28>
 8007f10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f14:	6926      	ldr	r6, [r4, #16]
 8007f16:	60c5      	str	r5, [r0, #12]
 8007f18:	f104 0914 	add.w	r9, r4, #20
 8007f1c:	f108 0514 	add.w	r5, r8, #20
 8007f20:	f100 0e14 	add.w	lr, r0, #20
 8007f24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f2c:	f108 0210 	add.w	r2, r8, #16
 8007f30:	46f2      	mov	sl, lr
 8007f32:	2100      	movs	r1, #0
 8007f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f3c:	fa1f f883 	uxth.w	r8, r3
 8007f40:	fa11 f18b 	uxtah	r1, r1, fp
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	eba1 0808 	sub.w	r8, r1, r8
 8007f4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f52:	fa1f f888 	uxth.w	r8, r8
 8007f56:	1419      	asrs	r1, r3, #16
 8007f58:	454e      	cmp	r6, r9
 8007f5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f5e:	f84a 3b04 	str.w	r3, [sl], #4
 8007f62:	d8e7      	bhi.n	8007f34 <__mdiff+0x80>
 8007f64:	1b33      	subs	r3, r6, r4
 8007f66:	3b15      	subs	r3, #21
 8007f68:	f023 0303 	bic.w	r3, r3, #3
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	3415      	adds	r4, #21
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	bf38      	it	cc
 8007f74:	2304      	movcc	r3, #4
 8007f76:	441d      	add	r5, r3
 8007f78:	4473      	add	r3, lr
 8007f7a:	469e      	mov	lr, r3
 8007f7c:	462e      	mov	r6, r5
 8007f7e:	4566      	cmp	r6, ip
 8007f80:	d30e      	bcc.n	8007fa0 <__mdiff+0xec>
 8007f82:	f10c 0203 	add.w	r2, ip, #3
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	f022 0203 	bic.w	r2, r2, #3
 8007f8c:	3d03      	subs	r5, #3
 8007f8e:	45ac      	cmp	ip, r5
 8007f90:	bf38      	it	cc
 8007f92:	2200      	movcc	r2, #0
 8007f94:	441a      	add	r2, r3
 8007f96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f9a:	b17b      	cbz	r3, 8007fbc <__mdiff+0x108>
 8007f9c:	6107      	str	r7, [r0, #16]
 8007f9e:	e7a3      	b.n	8007ee8 <__mdiff+0x34>
 8007fa0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007fa4:	fa11 f288 	uxtah	r2, r1, r8
 8007fa8:	1414      	asrs	r4, r2, #16
 8007faa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fb4:	f84e 2b04 	str.w	r2, [lr], #4
 8007fb8:	1421      	asrs	r1, r4, #16
 8007fba:	e7e0      	b.n	8007f7e <__mdiff+0xca>
 8007fbc:	3f01      	subs	r7, #1
 8007fbe:	e7ea      	b.n	8007f96 <__mdiff+0xe2>
 8007fc0:	08009314 	.word	0x08009314
 8007fc4:	08009325 	.word	0x08009325

08007fc8 <__d2b>:
 8007fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4689      	mov	r9, r1
 8007fce:	2101      	movs	r1, #1
 8007fd0:	ec57 6b10 	vmov	r6, r7, d0
 8007fd4:	4690      	mov	r8, r2
 8007fd6:	f7ff fccf 	bl	8007978 <_Balloc>
 8007fda:	4604      	mov	r4, r0
 8007fdc:	b930      	cbnz	r0, 8007fec <__d2b+0x24>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <__d2b+0xb0>)
 8007fe2:	4826      	ldr	r0, [pc, #152]	; (800807c <__d2b+0xb4>)
 8007fe4:	f240 310a 	movw	r1, #778	; 0x30a
 8007fe8:	f000 faac 	bl	8008544 <__assert_func>
 8007fec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ff4:	bb35      	cbnz	r5, 8008044 <__d2b+0x7c>
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	d028      	beq.n	800804e <__d2b+0x86>
 8007ffc:	4668      	mov	r0, sp
 8007ffe:	9600      	str	r6, [sp, #0]
 8008000:	f7ff fd82 	bl	8007b08 <__lo0bits>
 8008004:	9900      	ldr	r1, [sp, #0]
 8008006:	b300      	cbz	r0, 800804a <__d2b+0x82>
 8008008:	9a01      	ldr	r2, [sp, #4]
 800800a:	f1c0 0320 	rsb	r3, r0, #32
 800800e:	fa02 f303 	lsl.w	r3, r2, r3
 8008012:	430b      	orrs	r3, r1
 8008014:	40c2      	lsrs	r2, r0
 8008016:	6163      	str	r3, [r4, #20]
 8008018:	9201      	str	r2, [sp, #4]
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	61a3      	str	r3, [r4, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	bf14      	ite	ne
 8008022:	2202      	movne	r2, #2
 8008024:	2201      	moveq	r2, #1
 8008026:	6122      	str	r2, [r4, #16]
 8008028:	b1d5      	cbz	r5, 8008060 <__d2b+0x98>
 800802a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800802e:	4405      	add	r5, r0
 8008030:	f8c9 5000 	str.w	r5, [r9]
 8008034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008038:	f8c8 0000 	str.w	r0, [r8]
 800803c:	4620      	mov	r0, r4
 800803e:	b003      	add	sp, #12
 8008040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008048:	e7d5      	b.n	8007ff6 <__d2b+0x2e>
 800804a:	6161      	str	r1, [r4, #20]
 800804c:	e7e5      	b.n	800801a <__d2b+0x52>
 800804e:	a801      	add	r0, sp, #4
 8008050:	f7ff fd5a 	bl	8007b08 <__lo0bits>
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	2201      	movs	r2, #1
 800805a:	6122      	str	r2, [r4, #16]
 800805c:	3020      	adds	r0, #32
 800805e:	e7e3      	b.n	8008028 <__d2b+0x60>
 8008060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008068:	f8c9 0000 	str.w	r0, [r9]
 800806c:	6918      	ldr	r0, [r3, #16]
 800806e:	f7ff fd2b 	bl	8007ac8 <__hi0bits>
 8008072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008076:	e7df      	b.n	8008038 <__d2b+0x70>
 8008078:	08009314 	.word	0x08009314
 800807c:	08009325 	.word	0x08009325

08008080 <_calloc_r>:
 8008080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008082:	fba1 2402 	umull	r2, r4, r1, r2
 8008086:	b94c      	cbnz	r4, 800809c <_calloc_r+0x1c>
 8008088:	4611      	mov	r1, r2
 800808a:	9201      	str	r2, [sp, #4]
 800808c:	f000 f87a 	bl	8008184 <_malloc_r>
 8008090:	9a01      	ldr	r2, [sp, #4]
 8008092:	4605      	mov	r5, r0
 8008094:	b930      	cbnz	r0, 80080a4 <_calloc_r+0x24>
 8008096:	4628      	mov	r0, r5
 8008098:	b003      	add	sp, #12
 800809a:	bd30      	pop	{r4, r5, pc}
 800809c:	220c      	movs	r2, #12
 800809e:	6002      	str	r2, [r0, #0]
 80080a0:	2500      	movs	r5, #0
 80080a2:	e7f8      	b.n	8008096 <_calloc_r+0x16>
 80080a4:	4621      	mov	r1, r4
 80080a6:	f7fe f95b 	bl	8006360 <memset>
 80080aa:	e7f4      	b.n	8008096 <_calloc_r+0x16>

080080ac <_free_r>:
 80080ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d044      	beq.n	800813c <_free_r+0x90>
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	9001      	str	r0, [sp, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f1a1 0404 	sub.w	r4, r1, #4
 80080be:	bfb8      	it	lt
 80080c0:	18e4      	addlt	r4, r4, r3
 80080c2:	f000 fa9b 	bl	80085fc <__malloc_lock>
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <_free_r+0x94>)
 80080c8:	9801      	ldr	r0, [sp, #4]
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	b933      	cbnz	r3, 80080dc <_free_r+0x30>
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	6014      	str	r4, [r2, #0]
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d8:	f000 ba96 	b.w	8008608 <__malloc_unlock>
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d908      	bls.n	80080f2 <_free_r+0x46>
 80080e0:	6825      	ldr	r5, [r4, #0]
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	428b      	cmp	r3, r1
 80080e6:	bf01      	itttt	eq
 80080e8:	6819      	ldreq	r1, [r3, #0]
 80080ea:	685b      	ldreq	r3, [r3, #4]
 80080ec:	1949      	addeq	r1, r1, r5
 80080ee:	6021      	streq	r1, [r4, #0]
 80080f0:	e7ed      	b.n	80080ce <_free_r+0x22>
 80080f2:	461a      	mov	r2, r3
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	b10b      	cbz	r3, 80080fc <_free_r+0x50>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d9fa      	bls.n	80080f2 <_free_r+0x46>
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	1855      	adds	r5, r2, r1
 8008100:	42a5      	cmp	r5, r4
 8008102:	d10b      	bne.n	800811c <_free_r+0x70>
 8008104:	6824      	ldr	r4, [r4, #0]
 8008106:	4421      	add	r1, r4
 8008108:	1854      	adds	r4, r2, r1
 800810a:	42a3      	cmp	r3, r4
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	d1e0      	bne.n	80080d2 <_free_r+0x26>
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	6053      	str	r3, [r2, #4]
 8008116:	4421      	add	r1, r4
 8008118:	6011      	str	r1, [r2, #0]
 800811a:	e7da      	b.n	80080d2 <_free_r+0x26>
 800811c:	d902      	bls.n	8008124 <_free_r+0x78>
 800811e:	230c      	movs	r3, #12
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	e7d6      	b.n	80080d2 <_free_r+0x26>
 8008124:	6825      	ldr	r5, [r4, #0]
 8008126:	1961      	adds	r1, r4, r5
 8008128:	428b      	cmp	r3, r1
 800812a:	bf04      	itt	eq
 800812c:	6819      	ldreq	r1, [r3, #0]
 800812e:	685b      	ldreq	r3, [r3, #4]
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	bf04      	itt	eq
 8008134:	1949      	addeq	r1, r1, r5
 8008136:	6021      	streq	r1, [r4, #0]
 8008138:	6054      	str	r4, [r2, #4]
 800813a:	e7ca      	b.n	80080d2 <_free_r+0x26>
 800813c:	b003      	add	sp, #12
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	200013a4 	.word	0x200013a4

08008144 <sbrk_aligned>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0e      	ldr	r6, [pc, #56]	; (8008180 <sbrk_aligned+0x3c>)
 8008148:	460c      	mov	r4, r1
 800814a:	6831      	ldr	r1, [r6, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	b911      	cbnz	r1, 8008156 <sbrk_aligned+0x12>
 8008150:	f000 f9e8 	bl	8008524 <_sbrk_r>
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 f9e3 	bl	8008524 <_sbrk_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	d00a      	beq.n	8008178 <sbrk_aligned+0x34>
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d007      	beq.n	800817c <sbrk_aligned+0x38>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f9d8 	bl	8008524 <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d101      	bne.n	800817c <sbrk_aligned+0x38>
 8008178:	f04f 34ff 	mov.w	r4, #4294967295
 800817c:	4620      	mov	r0, r4
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	200013a8 	.word	0x200013a8

08008184 <_malloc_r>:
 8008184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	1ccd      	adds	r5, r1, #3
 800818a:	f025 0503 	bic.w	r5, r5, #3
 800818e:	3508      	adds	r5, #8
 8008190:	2d0c      	cmp	r5, #12
 8008192:	bf38      	it	cc
 8008194:	250c      	movcc	r5, #12
 8008196:	2d00      	cmp	r5, #0
 8008198:	4607      	mov	r7, r0
 800819a:	db01      	blt.n	80081a0 <_malloc_r+0x1c>
 800819c:	42a9      	cmp	r1, r5
 800819e:	d905      	bls.n	80081ac <_malloc_r+0x28>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	2600      	movs	r6, #0
 80081a6:	4630      	mov	r0, r6
 80081a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ac:	4e2e      	ldr	r6, [pc, #184]	; (8008268 <_malloc_r+0xe4>)
 80081ae:	f000 fa25 	bl	80085fc <__malloc_lock>
 80081b2:	6833      	ldr	r3, [r6, #0]
 80081b4:	461c      	mov	r4, r3
 80081b6:	bb34      	cbnz	r4, 8008206 <_malloc_r+0x82>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4638      	mov	r0, r7
 80081bc:	f7ff ffc2 	bl	8008144 <sbrk_aligned>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	4604      	mov	r4, r0
 80081c4:	d14d      	bne.n	8008262 <_malloc_r+0xde>
 80081c6:	6834      	ldr	r4, [r6, #0]
 80081c8:	4626      	mov	r6, r4
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d140      	bne.n	8008250 <_malloc_r+0xcc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	4631      	mov	r1, r6
 80081d2:	4638      	mov	r0, r7
 80081d4:	eb04 0803 	add.w	r8, r4, r3
 80081d8:	f000 f9a4 	bl	8008524 <_sbrk_r>
 80081dc:	4580      	cmp	r8, r0
 80081de:	d13a      	bne.n	8008256 <_malloc_r+0xd2>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	3503      	adds	r5, #3
 80081e4:	1a6d      	subs	r5, r5, r1
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	4629      	mov	r1, r5
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ffa5 	bl	8008144 <sbrk_aligned>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d02b      	beq.n	8008256 <_malloc_r+0xd2>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	442b      	add	r3, r5
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	e00e      	b.n	8008224 <_malloc_r+0xa0>
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	1b52      	subs	r2, r2, r5
 800820a:	d41e      	bmi.n	800824a <_malloc_r+0xc6>
 800820c:	2a0b      	cmp	r2, #11
 800820e:	d916      	bls.n	800823e <_malloc_r+0xba>
 8008210:	1961      	adds	r1, r4, r5
 8008212:	42a3      	cmp	r3, r4
 8008214:	6025      	str	r5, [r4, #0]
 8008216:	bf18      	it	ne
 8008218:	6059      	strne	r1, [r3, #4]
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	bf08      	it	eq
 800821e:	6031      	streq	r1, [r6, #0]
 8008220:	5162      	str	r2, [r4, r5]
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	4638      	mov	r0, r7
 8008226:	f104 060b 	add.w	r6, r4, #11
 800822a:	f000 f9ed 	bl	8008608 <__malloc_unlock>
 800822e:	f026 0607 	bic.w	r6, r6, #7
 8008232:	1d23      	adds	r3, r4, #4
 8008234:	1af2      	subs	r2, r6, r3
 8008236:	d0b6      	beq.n	80081a6 <_malloc_r+0x22>
 8008238:	1b9b      	subs	r3, r3, r6
 800823a:	50a3      	str	r3, [r4, r2]
 800823c:	e7b3      	b.n	80081a6 <_malloc_r+0x22>
 800823e:	6862      	ldr	r2, [r4, #4]
 8008240:	42a3      	cmp	r3, r4
 8008242:	bf0c      	ite	eq
 8008244:	6032      	streq	r2, [r6, #0]
 8008246:	605a      	strne	r2, [r3, #4]
 8008248:	e7ec      	b.n	8008224 <_malloc_r+0xa0>
 800824a:	4623      	mov	r3, r4
 800824c:	6864      	ldr	r4, [r4, #4]
 800824e:	e7b2      	b.n	80081b6 <_malloc_r+0x32>
 8008250:	4634      	mov	r4, r6
 8008252:	6876      	ldr	r6, [r6, #4]
 8008254:	e7b9      	b.n	80081ca <_malloc_r+0x46>
 8008256:	230c      	movs	r3, #12
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	4638      	mov	r0, r7
 800825c:	f000 f9d4 	bl	8008608 <__malloc_unlock>
 8008260:	e7a1      	b.n	80081a6 <_malloc_r+0x22>
 8008262:	6025      	str	r5, [r4, #0]
 8008264:	e7de      	b.n	8008224 <_malloc_r+0xa0>
 8008266:	bf00      	nop
 8008268:	200013a4 	.word	0x200013a4

0800826c <__ssputs_r>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	688e      	ldr	r6, [r1, #8]
 8008272:	429e      	cmp	r6, r3
 8008274:	4682      	mov	sl, r0
 8008276:	460c      	mov	r4, r1
 8008278:	4690      	mov	r8, r2
 800827a:	461f      	mov	r7, r3
 800827c:	d838      	bhi.n	80082f0 <__ssputs_r+0x84>
 800827e:	898a      	ldrh	r2, [r1, #12]
 8008280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008284:	d032      	beq.n	80082ec <__ssputs_r+0x80>
 8008286:	6825      	ldr	r5, [r4, #0]
 8008288:	6909      	ldr	r1, [r1, #16]
 800828a:	eba5 0901 	sub.w	r9, r5, r1
 800828e:	6965      	ldr	r5, [r4, #20]
 8008290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008298:	3301      	adds	r3, #1
 800829a:	444b      	add	r3, r9
 800829c:	106d      	asrs	r5, r5, #1
 800829e:	429d      	cmp	r5, r3
 80082a0:	bf38      	it	cc
 80082a2:	461d      	movcc	r5, r3
 80082a4:	0553      	lsls	r3, r2, #21
 80082a6:	d531      	bpl.n	800830c <__ssputs_r+0xa0>
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7ff ff6b 	bl	8008184 <_malloc_r>
 80082ae:	4606      	mov	r6, r0
 80082b0:	b950      	cbnz	r0, 80082c8 <__ssputs_r+0x5c>
 80082b2:	230c      	movs	r3, #12
 80082b4:	f8ca 3000 	str.w	r3, [sl]
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c8:	6921      	ldr	r1, [r4, #16]
 80082ca:	464a      	mov	r2, r9
 80082cc:	f7ff fb46 	bl	800795c <memcpy>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	6126      	str	r6, [r4, #16]
 80082de:	6165      	str	r5, [r4, #20]
 80082e0:	444e      	add	r6, r9
 80082e2:	eba5 0509 	sub.w	r5, r5, r9
 80082e6:	6026      	str	r6, [r4, #0]
 80082e8:	60a5      	str	r5, [r4, #8]
 80082ea:	463e      	mov	r6, r7
 80082ec:	42be      	cmp	r6, r7
 80082ee:	d900      	bls.n	80082f2 <__ssputs_r+0x86>
 80082f0:	463e      	mov	r6, r7
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	4632      	mov	r2, r6
 80082f6:	4641      	mov	r1, r8
 80082f8:	f000 f966 	bl	80085c8 <memmove>
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	1b9b      	subs	r3, r3, r6
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	4433      	add	r3, r6
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	2000      	movs	r0, #0
 800830a:	e7db      	b.n	80082c4 <__ssputs_r+0x58>
 800830c:	462a      	mov	r2, r5
 800830e:	f000 f981 	bl	8008614 <_realloc_r>
 8008312:	4606      	mov	r6, r0
 8008314:	2800      	cmp	r0, #0
 8008316:	d1e1      	bne.n	80082dc <__ssputs_r+0x70>
 8008318:	6921      	ldr	r1, [r4, #16]
 800831a:	4650      	mov	r0, sl
 800831c:	f7ff fec6 	bl	80080ac <_free_r>
 8008320:	e7c7      	b.n	80082b2 <__ssputs_r+0x46>
	...

08008324 <_svfiprintf_r>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	4698      	mov	r8, r3
 800832a:	898b      	ldrh	r3, [r1, #12]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	b09d      	sub	sp, #116	; 0x74
 8008330:	4607      	mov	r7, r0
 8008332:	460d      	mov	r5, r1
 8008334:	4614      	mov	r4, r2
 8008336:	d50e      	bpl.n	8008356 <_svfiprintf_r+0x32>
 8008338:	690b      	ldr	r3, [r1, #16]
 800833a:	b963      	cbnz	r3, 8008356 <_svfiprintf_r+0x32>
 800833c:	2140      	movs	r1, #64	; 0x40
 800833e:	f7ff ff21 	bl	8008184 <_malloc_r>
 8008342:	6028      	str	r0, [r5, #0]
 8008344:	6128      	str	r0, [r5, #16]
 8008346:	b920      	cbnz	r0, 8008352 <_svfiprintf_r+0x2e>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e0d1      	b.n	80084f6 <_svfiprintf_r+0x1d2>
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	616b      	str	r3, [r5, #20]
 8008356:	2300      	movs	r3, #0
 8008358:	9309      	str	r3, [sp, #36]	; 0x24
 800835a:	2320      	movs	r3, #32
 800835c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008360:	f8cd 800c 	str.w	r8, [sp, #12]
 8008364:	2330      	movs	r3, #48	; 0x30
 8008366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008510 <_svfiprintf_r+0x1ec>
 800836a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800836e:	f04f 0901 	mov.w	r9, #1
 8008372:	4623      	mov	r3, r4
 8008374:	469a      	mov	sl, r3
 8008376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837a:	b10a      	cbz	r2, 8008380 <_svfiprintf_r+0x5c>
 800837c:	2a25      	cmp	r2, #37	; 0x25
 800837e:	d1f9      	bne.n	8008374 <_svfiprintf_r+0x50>
 8008380:	ebba 0b04 	subs.w	fp, sl, r4
 8008384:	d00b      	beq.n	800839e <_svfiprintf_r+0x7a>
 8008386:	465b      	mov	r3, fp
 8008388:	4622      	mov	r2, r4
 800838a:	4629      	mov	r1, r5
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ff6d 	bl	800826c <__ssputs_r>
 8008392:	3001      	adds	r0, #1
 8008394:	f000 80aa 	beq.w	80084ec <_svfiprintf_r+0x1c8>
 8008398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800839a:	445a      	add	r2, fp
 800839c:	9209      	str	r2, [sp, #36]	; 0x24
 800839e:	f89a 3000 	ldrb.w	r3, [sl]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 80a2 	beq.w	80084ec <_svfiprintf_r+0x1c8>
 80083a8:	2300      	movs	r3, #0
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b2:	f10a 0a01 	add.w	sl, sl, #1
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	9307      	str	r3, [sp, #28]
 80083ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083be:	931a      	str	r3, [sp, #104]	; 0x68
 80083c0:	4654      	mov	r4, sl
 80083c2:	2205      	movs	r2, #5
 80083c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c8:	4851      	ldr	r0, [pc, #324]	; (8008510 <_svfiprintf_r+0x1ec>)
 80083ca:	f7f7 ff41 	bl	8000250 <memchr>
 80083ce:	9a04      	ldr	r2, [sp, #16]
 80083d0:	b9d8      	cbnz	r0, 800840a <_svfiprintf_r+0xe6>
 80083d2:	06d0      	lsls	r0, r2, #27
 80083d4:	bf44      	itt	mi
 80083d6:	2320      	movmi	r3, #32
 80083d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083dc:	0711      	lsls	r1, r2, #28
 80083de:	bf44      	itt	mi
 80083e0:	232b      	movmi	r3, #43	; 0x2b
 80083e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ea:	2b2a      	cmp	r3, #42	; 0x2a
 80083ec:	d015      	beq.n	800841a <_svfiprintf_r+0xf6>
 80083ee:	9a07      	ldr	r2, [sp, #28]
 80083f0:	4654      	mov	r4, sl
 80083f2:	2000      	movs	r0, #0
 80083f4:	f04f 0c0a 	mov.w	ip, #10
 80083f8:	4621      	mov	r1, r4
 80083fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fe:	3b30      	subs	r3, #48	; 0x30
 8008400:	2b09      	cmp	r3, #9
 8008402:	d94e      	bls.n	80084a2 <_svfiprintf_r+0x17e>
 8008404:	b1b0      	cbz	r0, 8008434 <_svfiprintf_r+0x110>
 8008406:	9207      	str	r2, [sp, #28]
 8008408:	e014      	b.n	8008434 <_svfiprintf_r+0x110>
 800840a:	eba0 0308 	sub.w	r3, r0, r8
 800840e:	fa09 f303 	lsl.w	r3, r9, r3
 8008412:	4313      	orrs	r3, r2
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	46a2      	mov	sl, r4
 8008418:	e7d2      	b.n	80083c0 <_svfiprintf_r+0x9c>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	1d19      	adds	r1, r3, #4
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	9103      	str	r1, [sp, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	bfbb      	ittet	lt
 8008426:	425b      	neglt	r3, r3
 8008428:	f042 0202 	orrlt.w	r2, r2, #2
 800842c:	9307      	strge	r3, [sp, #28]
 800842e:	9307      	strlt	r3, [sp, #28]
 8008430:	bfb8      	it	lt
 8008432:	9204      	strlt	r2, [sp, #16]
 8008434:	7823      	ldrb	r3, [r4, #0]
 8008436:	2b2e      	cmp	r3, #46	; 0x2e
 8008438:	d10c      	bne.n	8008454 <_svfiprintf_r+0x130>
 800843a:	7863      	ldrb	r3, [r4, #1]
 800843c:	2b2a      	cmp	r3, #42	; 0x2a
 800843e:	d135      	bne.n	80084ac <_svfiprintf_r+0x188>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9203      	str	r2, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfb8      	it	lt
 800844c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008450:	3402      	adds	r4, #2
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008520 <_svfiprintf_r+0x1fc>
 8008458:	7821      	ldrb	r1, [r4, #0]
 800845a:	2203      	movs	r2, #3
 800845c:	4650      	mov	r0, sl
 800845e:	f7f7 fef7 	bl	8000250 <memchr>
 8008462:	b140      	cbz	r0, 8008476 <_svfiprintf_r+0x152>
 8008464:	2340      	movs	r3, #64	; 0x40
 8008466:	eba0 000a 	sub.w	r0, r0, sl
 800846a:	fa03 f000 	lsl.w	r0, r3, r0
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	4303      	orrs	r3, r0
 8008472:	3401      	adds	r4, #1
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847a:	4826      	ldr	r0, [pc, #152]	; (8008514 <_svfiprintf_r+0x1f0>)
 800847c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008480:	2206      	movs	r2, #6
 8008482:	f7f7 fee5 	bl	8000250 <memchr>
 8008486:	2800      	cmp	r0, #0
 8008488:	d038      	beq.n	80084fc <_svfiprintf_r+0x1d8>
 800848a:	4b23      	ldr	r3, [pc, #140]	; (8008518 <_svfiprintf_r+0x1f4>)
 800848c:	bb1b      	cbnz	r3, 80084d6 <_svfiprintf_r+0x1b2>
 800848e:	9b03      	ldr	r3, [sp, #12]
 8008490:	3307      	adds	r3, #7
 8008492:	f023 0307 	bic.w	r3, r3, #7
 8008496:	3308      	adds	r3, #8
 8008498:	9303      	str	r3, [sp, #12]
 800849a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849c:	4433      	add	r3, r6
 800849e:	9309      	str	r3, [sp, #36]	; 0x24
 80084a0:	e767      	b.n	8008372 <_svfiprintf_r+0x4e>
 80084a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a6:	460c      	mov	r4, r1
 80084a8:	2001      	movs	r0, #1
 80084aa:	e7a5      	b.n	80083f8 <_svfiprintf_r+0xd4>
 80084ac:	2300      	movs	r3, #0
 80084ae:	3401      	adds	r4, #1
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	4619      	mov	r1, r3
 80084b4:	f04f 0c0a 	mov.w	ip, #10
 80084b8:	4620      	mov	r0, r4
 80084ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084be:	3a30      	subs	r2, #48	; 0x30
 80084c0:	2a09      	cmp	r2, #9
 80084c2:	d903      	bls.n	80084cc <_svfiprintf_r+0x1a8>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0c5      	beq.n	8008454 <_svfiprintf_r+0x130>
 80084c8:	9105      	str	r1, [sp, #20]
 80084ca:	e7c3      	b.n	8008454 <_svfiprintf_r+0x130>
 80084cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d0:	4604      	mov	r4, r0
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7f0      	b.n	80084b8 <_svfiprintf_r+0x194>
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	462a      	mov	r2, r5
 80084dc:	4b0f      	ldr	r3, [pc, #60]	; (800851c <_svfiprintf_r+0x1f8>)
 80084de:	a904      	add	r1, sp, #16
 80084e0:	4638      	mov	r0, r7
 80084e2:	f7fd ffd5 	bl	8006490 <_printf_float>
 80084e6:	1c42      	adds	r2, r0, #1
 80084e8:	4606      	mov	r6, r0
 80084ea:	d1d6      	bne.n	800849a <_svfiprintf_r+0x176>
 80084ec:	89ab      	ldrh	r3, [r5, #12]
 80084ee:	065b      	lsls	r3, r3, #25
 80084f0:	f53f af2c 	bmi.w	800834c <_svfiprintf_r+0x28>
 80084f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f6:	b01d      	add	sp, #116	; 0x74
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	ab03      	add	r3, sp, #12
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	462a      	mov	r2, r5
 8008502:	4b06      	ldr	r3, [pc, #24]	; (800851c <_svfiprintf_r+0x1f8>)
 8008504:	a904      	add	r1, sp, #16
 8008506:	4638      	mov	r0, r7
 8008508:	f7fe fa4e 	bl	80069a8 <_printf_i>
 800850c:	e7eb      	b.n	80084e6 <_svfiprintf_r+0x1c2>
 800850e:	bf00      	nop
 8008510:	08009484 	.word	0x08009484
 8008514:	0800948e 	.word	0x0800948e
 8008518:	08006491 	.word	0x08006491
 800851c:	0800826d 	.word	0x0800826d
 8008520:	0800948a 	.word	0x0800948a

08008524 <_sbrk_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d06      	ldr	r5, [pc, #24]	; (8008540 <_sbrk_r+0x1c>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	f7f8 fc4e 	bl	8000dd0 <_sbrk>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_sbrk_r+0x1a>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_sbrk_r+0x1a>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	200013ac 	.word	0x200013ac

08008544 <__assert_func>:
 8008544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008546:	4614      	mov	r4, r2
 8008548:	461a      	mov	r2, r3
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <__assert_func+0x2c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4605      	mov	r5, r0
 8008550:	68d8      	ldr	r0, [r3, #12]
 8008552:	b14c      	cbz	r4, 8008568 <__assert_func+0x24>
 8008554:	4b07      	ldr	r3, [pc, #28]	; (8008574 <__assert_func+0x30>)
 8008556:	9100      	str	r1, [sp, #0]
 8008558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800855c:	4906      	ldr	r1, [pc, #24]	; (8008578 <__assert_func+0x34>)
 800855e:	462b      	mov	r3, r5
 8008560:	f000 f80e 	bl	8008580 <fiprintf>
 8008564:	f000 faac 	bl	8008ac0 <abort>
 8008568:	4b04      	ldr	r3, [pc, #16]	; (800857c <__assert_func+0x38>)
 800856a:	461c      	mov	r4, r3
 800856c:	e7f3      	b.n	8008556 <__assert_func+0x12>
 800856e:	bf00      	nop
 8008570:	20000b00 	.word	0x20000b00
 8008574:	08009495 	.word	0x08009495
 8008578:	080094a2 	.word	0x080094a2
 800857c:	080094d0 	.word	0x080094d0

08008580 <fiprintf>:
 8008580:	b40e      	push	{r1, r2, r3}
 8008582:	b503      	push	{r0, r1, lr}
 8008584:	4601      	mov	r1, r0
 8008586:	ab03      	add	r3, sp, #12
 8008588:	4805      	ldr	r0, [pc, #20]	; (80085a0 <fiprintf+0x20>)
 800858a:	f853 2b04 	ldr.w	r2, [r3], #4
 800858e:	6800      	ldr	r0, [r0, #0]
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	f000 f897 	bl	80086c4 <_vfiprintf_r>
 8008596:	b002      	add	sp, #8
 8008598:	f85d eb04 	ldr.w	lr, [sp], #4
 800859c:	b003      	add	sp, #12
 800859e:	4770      	bx	lr
 80085a0:	20000b00 	.word	0x20000b00

080085a4 <__ascii_mbtowc>:
 80085a4:	b082      	sub	sp, #8
 80085a6:	b901      	cbnz	r1, 80085aa <__ascii_mbtowc+0x6>
 80085a8:	a901      	add	r1, sp, #4
 80085aa:	b142      	cbz	r2, 80085be <__ascii_mbtowc+0x1a>
 80085ac:	b14b      	cbz	r3, 80085c2 <__ascii_mbtowc+0x1e>
 80085ae:	7813      	ldrb	r3, [r2, #0]
 80085b0:	600b      	str	r3, [r1, #0]
 80085b2:	7812      	ldrb	r2, [r2, #0]
 80085b4:	1e10      	subs	r0, r2, #0
 80085b6:	bf18      	it	ne
 80085b8:	2001      	movne	r0, #1
 80085ba:	b002      	add	sp, #8
 80085bc:	4770      	bx	lr
 80085be:	4610      	mov	r0, r2
 80085c0:	e7fb      	b.n	80085ba <__ascii_mbtowc+0x16>
 80085c2:	f06f 0001 	mvn.w	r0, #1
 80085c6:	e7f8      	b.n	80085ba <__ascii_mbtowc+0x16>

080085c8 <memmove>:
 80085c8:	4288      	cmp	r0, r1
 80085ca:	b510      	push	{r4, lr}
 80085cc:	eb01 0402 	add.w	r4, r1, r2
 80085d0:	d902      	bls.n	80085d8 <memmove+0x10>
 80085d2:	4284      	cmp	r4, r0
 80085d4:	4623      	mov	r3, r4
 80085d6:	d807      	bhi.n	80085e8 <memmove+0x20>
 80085d8:	1e43      	subs	r3, r0, #1
 80085da:	42a1      	cmp	r1, r4
 80085dc:	d008      	beq.n	80085f0 <memmove+0x28>
 80085de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085e6:	e7f8      	b.n	80085da <memmove+0x12>
 80085e8:	4402      	add	r2, r0
 80085ea:	4601      	mov	r1, r0
 80085ec:	428a      	cmp	r2, r1
 80085ee:	d100      	bne.n	80085f2 <memmove+0x2a>
 80085f0:	bd10      	pop	{r4, pc}
 80085f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085fa:	e7f7      	b.n	80085ec <memmove+0x24>

080085fc <__malloc_lock>:
 80085fc:	4801      	ldr	r0, [pc, #4]	; (8008604 <__malloc_lock+0x8>)
 80085fe:	f000 bc1f 	b.w	8008e40 <__retarget_lock_acquire_recursive>
 8008602:	bf00      	nop
 8008604:	200013b0 	.word	0x200013b0

08008608 <__malloc_unlock>:
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <__malloc_unlock+0x8>)
 800860a:	f000 bc1a 	b.w	8008e42 <__retarget_lock_release_recursive>
 800860e:	bf00      	nop
 8008610:	200013b0 	.word	0x200013b0

08008614 <_realloc_r>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	4680      	mov	r8, r0
 800861a:	4614      	mov	r4, r2
 800861c:	460e      	mov	r6, r1
 800861e:	b921      	cbnz	r1, 800862a <_realloc_r+0x16>
 8008620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	4611      	mov	r1, r2
 8008626:	f7ff bdad 	b.w	8008184 <_malloc_r>
 800862a:	b92a      	cbnz	r2, 8008638 <_realloc_r+0x24>
 800862c:	f7ff fd3e 	bl	80080ac <_free_r>
 8008630:	4625      	mov	r5, r4
 8008632:	4628      	mov	r0, r5
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	f000 fc6a 	bl	8008f10 <_malloc_usable_size_r>
 800863c:	4284      	cmp	r4, r0
 800863e:	4607      	mov	r7, r0
 8008640:	d802      	bhi.n	8008648 <_realloc_r+0x34>
 8008642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008646:	d812      	bhi.n	800866e <_realloc_r+0x5a>
 8008648:	4621      	mov	r1, r4
 800864a:	4640      	mov	r0, r8
 800864c:	f7ff fd9a 	bl	8008184 <_malloc_r>
 8008650:	4605      	mov	r5, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	d0ed      	beq.n	8008632 <_realloc_r+0x1e>
 8008656:	42bc      	cmp	r4, r7
 8008658:	4622      	mov	r2, r4
 800865a:	4631      	mov	r1, r6
 800865c:	bf28      	it	cs
 800865e:	463a      	movcs	r2, r7
 8008660:	f7ff f97c 	bl	800795c <memcpy>
 8008664:	4631      	mov	r1, r6
 8008666:	4640      	mov	r0, r8
 8008668:	f7ff fd20 	bl	80080ac <_free_r>
 800866c:	e7e1      	b.n	8008632 <_realloc_r+0x1e>
 800866e:	4635      	mov	r5, r6
 8008670:	e7df      	b.n	8008632 <_realloc_r+0x1e>

08008672 <__sfputc_r>:
 8008672:	6893      	ldr	r3, [r2, #8]
 8008674:	3b01      	subs	r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	b410      	push	{r4}
 800867a:	6093      	str	r3, [r2, #8]
 800867c:	da08      	bge.n	8008690 <__sfputc_r+0x1e>
 800867e:	6994      	ldr	r4, [r2, #24]
 8008680:	42a3      	cmp	r3, r4
 8008682:	db01      	blt.n	8008688 <__sfputc_r+0x16>
 8008684:	290a      	cmp	r1, #10
 8008686:	d103      	bne.n	8008690 <__sfputc_r+0x1e>
 8008688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800868c:	f000 b94a 	b.w	8008924 <__swbuf_r>
 8008690:	6813      	ldr	r3, [r2, #0]
 8008692:	1c58      	adds	r0, r3, #1
 8008694:	6010      	str	r0, [r2, #0]
 8008696:	7019      	strb	r1, [r3, #0]
 8008698:	4608      	mov	r0, r1
 800869a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <__sfputs_r>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	4606      	mov	r6, r0
 80086a4:	460f      	mov	r7, r1
 80086a6:	4614      	mov	r4, r2
 80086a8:	18d5      	adds	r5, r2, r3
 80086aa:	42ac      	cmp	r4, r5
 80086ac:	d101      	bne.n	80086b2 <__sfputs_r+0x12>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e007      	b.n	80086c2 <__sfputs_r+0x22>
 80086b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b6:	463a      	mov	r2, r7
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff ffda 	bl	8008672 <__sfputc_r>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d1f3      	bne.n	80086aa <__sfputs_r+0xa>
 80086c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086c4 <_vfiprintf_r>:
 80086c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c8:	460d      	mov	r5, r1
 80086ca:	b09d      	sub	sp, #116	; 0x74
 80086cc:	4614      	mov	r4, r2
 80086ce:	4698      	mov	r8, r3
 80086d0:	4606      	mov	r6, r0
 80086d2:	b118      	cbz	r0, 80086dc <_vfiprintf_r+0x18>
 80086d4:	6983      	ldr	r3, [r0, #24]
 80086d6:	b90b      	cbnz	r3, 80086dc <_vfiprintf_r+0x18>
 80086d8:	f000 fb14 	bl	8008d04 <__sinit>
 80086dc:	4b89      	ldr	r3, [pc, #548]	; (8008904 <_vfiprintf_r+0x240>)
 80086de:	429d      	cmp	r5, r3
 80086e0:	d11b      	bne.n	800871a <_vfiprintf_r+0x56>
 80086e2:	6875      	ldr	r5, [r6, #4]
 80086e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	d405      	bmi.n	80086f6 <_vfiprintf_r+0x32>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	059a      	lsls	r2, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_vfiprintf_r+0x32>
 80086f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f2:	f000 fba5 	bl	8008e40 <__retarget_lock_acquire_recursive>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	071b      	lsls	r3, r3, #28
 80086fa:	d501      	bpl.n	8008700 <_vfiprintf_r+0x3c>
 80086fc:	692b      	ldr	r3, [r5, #16]
 80086fe:	b9eb      	cbnz	r3, 800873c <_vfiprintf_r+0x78>
 8008700:	4629      	mov	r1, r5
 8008702:	4630      	mov	r0, r6
 8008704:	f000 f96e 	bl	80089e4 <__swsetup_r>
 8008708:	b1c0      	cbz	r0, 800873c <_vfiprintf_r+0x78>
 800870a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800870c:	07dc      	lsls	r4, r3, #31
 800870e:	d50e      	bpl.n	800872e <_vfiprintf_r+0x6a>
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	b01d      	add	sp, #116	; 0x74
 8008716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871a:	4b7b      	ldr	r3, [pc, #492]	; (8008908 <_vfiprintf_r+0x244>)
 800871c:	429d      	cmp	r5, r3
 800871e:	d101      	bne.n	8008724 <_vfiprintf_r+0x60>
 8008720:	68b5      	ldr	r5, [r6, #8]
 8008722:	e7df      	b.n	80086e4 <_vfiprintf_r+0x20>
 8008724:	4b79      	ldr	r3, [pc, #484]	; (800890c <_vfiprintf_r+0x248>)
 8008726:	429d      	cmp	r5, r3
 8008728:	bf08      	it	eq
 800872a:	68f5      	ldreq	r5, [r6, #12]
 800872c:	e7da      	b.n	80086e4 <_vfiprintf_r+0x20>
 800872e:	89ab      	ldrh	r3, [r5, #12]
 8008730:	0598      	lsls	r0, r3, #22
 8008732:	d4ed      	bmi.n	8008710 <_vfiprintf_r+0x4c>
 8008734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008736:	f000 fb84 	bl	8008e42 <__retarget_lock_release_recursive>
 800873a:	e7e9      	b.n	8008710 <_vfiprintf_r+0x4c>
 800873c:	2300      	movs	r3, #0
 800873e:	9309      	str	r3, [sp, #36]	; 0x24
 8008740:	2320      	movs	r3, #32
 8008742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008746:	f8cd 800c 	str.w	r8, [sp, #12]
 800874a:	2330      	movs	r3, #48	; 0x30
 800874c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008910 <_vfiprintf_r+0x24c>
 8008750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008754:	f04f 0901 	mov.w	r9, #1
 8008758:	4623      	mov	r3, r4
 800875a:	469a      	mov	sl, r3
 800875c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008760:	b10a      	cbz	r2, 8008766 <_vfiprintf_r+0xa2>
 8008762:	2a25      	cmp	r2, #37	; 0x25
 8008764:	d1f9      	bne.n	800875a <_vfiprintf_r+0x96>
 8008766:	ebba 0b04 	subs.w	fp, sl, r4
 800876a:	d00b      	beq.n	8008784 <_vfiprintf_r+0xc0>
 800876c:	465b      	mov	r3, fp
 800876e:	4622      	mov	r2, r4
 8008770:	4629      	mov	r1, r5
 8008772:	4630      	mov	r0, r6
 8008774:	f7ff ff94 	bl	80086a0 <__sfputs_r>
 8008778:	3001      	adds	r0, #1
 800877a:	f000 80aa 	beq.w	80088d2 <_vfiprintf_r+0x20e>
 800877e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008780:	445a      	add	r2, fp
 8008782:	9209      	str	r2, [sp, #36]	; 0x24
 8008784:	f89a 3000 	ldrb.w	r3, [sl]
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 80a2 	beq.w	80088d2 <_vfiprintf_r+0x20e>
 800878e:	2300      	movs	r3, #0
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008798:	f10a 0a01 	add.w	sl, sl, #1
 800879c:	9304      	str	r3, [sp, #16]
 800879e:	9307      	str	r3, [sp, #28]
 80087a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087a4:	931a      	str	r3, [sp, #104]	; 0x68
 80087a6:	4654      	mov	r4, sl
 80087a8:	2205      	movs	r2, #5
 80087aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ae:	4858      	ldr	r0, [pc, #352]	; (8008910 <_vfiprintf_r+0x24c>)
 80087b0:	f7f7 fd4e 	bl	8000250 <memchr>
 80087b4:	9a04      	ldr	r2, [sp, #16]
 80087b6:	b9d8      	cbnz	r0, 80087f0 <_vfiprintf_r+0x12c>
 80087b8:	06d1      	lsls	r1, r2, #27
 80087ba:	bf44      	itt	mi
 80087bc:	2320      	movmi	r3, #32
 80087be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c2:	0713      	lsls	r3, r2, #28
 80087c4:	bf44      	itt	mi
 80087c6:	232b      	movmi	r3, #43	; 0x2b
 80087c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087cc:	f89a 3000 	ldrb.w	r3, [sl]
 80087d0:	2b2a      	cmp	r3, #42	; 0x2a
 80087d2:	d015      	beq.n	8008800 <_vfiprintf_r+0x13c>
 80087d4:	9a07      	ldr	r2, [sp, #28]
 80087d6:	4654      	mov	r4, sl
 80087d8:	2000      	movs	r0, #0
 80087da:	f04f 0c0a 	mov.w	ip, #10
 80087de:	4621      	mov	r1, r4
 80087e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e4:	3b30      	subs	r3, #48	; 0x30
 80087e6:	2b09      	cmp	r3, #9
 80087e8:	d94e      	bls.n	8008888 <_vfiprintf_r+0x1c4>
 80087ea:	b1b0      	cbz	r0, 800881a <_vfiprintf_r+0x156>
 80087ec:	9207      	str	r2, [sp, #28]
 80087ee:	e014      	b.n	800881a <_vfiprintf_r+0x156>
 80087f0:	eba0 0308 	sub.w	r3, r0, r8
 80087f4:	fa09 f303 	lsl.w	r3, r9, r3
 80087f8:	4313      	orrs	r3, r2
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	46a2      	mov	sl, r4
 80087fe:	e7d2      	b.n	80087a6 <_vfiprintf_r+0xe2>
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	1d19      	adds	r1, r3, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	9103      	str	r1, [sp, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfbb      	ittet	lt
 800880c:	425b      	neglt	r3, r3
 800880e:	f042 0202 	orrlt.w	r2, r2, #2
 8008812:	9307      	strge	r3, [sp, #28]
 8008814:	9307      	strlt	r3, [sp, #28]
 8008816:	bfb8      	it	lt
 8008818:	9204      	strlt	r2, [sp, #16]
 800881a:	7823      	ldrb	r3, [r4, #0]
 800881c:	2b2e      	cmp	r3, #46	; 0x2e
 800881e:	d10c      	bne.n	800883a <_vfiprintf_r+0x176>
 8008820:	7863      	ldrb	r3, [r4, #1]
 8008822:	2b2a      	cmp	r3, #42	; 0x2a
 8008824:	d135      	bne.n	8008892 <_vfiprintf_r+0x1ce>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	1d1a      	adds	r2, r3, #4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	9203      	str	r2, [sp, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfb8      	it	lt
 8008832:	f04f 33ff 	movlt.w	r3, #4294967295
 8008836:	3402      	adds	r4, #2
 8008838:	9305      	str	r3, [sp, #20]
 800883a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008920 <_vfiprintf_r+0x25c>
 800883e:	7821      	ldrb	r1, [r4, #0]
 8008840:	2203      	movs	r2, #3
 8008842:	4650      	mov	r0, sl
 8008844:	f7f7 fd04 	bl	8000250 <memchr>
 8008848:	b140      	cbz	r0, 800885c <_vfiprintf_r+0x198>
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	eba0 000a 	sub.w	r0, r0, sl
 8008850:	fa03 f000 	lsl.w	r0, r3, r0
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	4303      	orrs	r3, r0
 8008858:	3401      	adds	r4, #1
 800885a:	9304      	str	r3, [sp, #16]
 800885c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008860:	482c      	ldr	r0, [pc, #176]	; (8008914 <_vfiprintf_r+0x250>)
 8008862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008866:	2206      	movs	r2, #6
 8008868:	f7f7 fcf2 	bl	8000250 <memchr>
 800886c:	2800      	cmp	r0, #0
 800886e:	d03f      	beq.n	80088f0 <_vfiprintf_r+0x22c>
 8008870:	4b29      	ldr	r3, [pc, #164]	; (8008918 <_vfiprintf_r+0x254>)
 8008872:	bb1b      	cbnz	r3, 80088bc <_vfiprintf_r+0x1f8>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	3307      	adds	r3, #7
 8008878:	f023 0307 	bic.w	r3, r3, #7
 800887c:	3308      	adds	r3, #8
 800887e:	9303      	str	r3, [sp, #12]
 8008880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008882:	443b      	add	r3, r7
 8008884:	9309      	str	r3, [sp, #36]	; 0x24
 8008886:	e767      	b.n	8008758 <_vfiprintf_r+0x94>
 8008888:	fb0c 3202 	mla	r2, ip, r2, r3
 800888c:	460c      	mov	r4, r1
 800888e:	2001      	movs	r0, #1
 8008890:	e7a5      	b.n	80087de <_vfiprintf_r+0x11a>
 8008892:	2300      	movs	r3, #0
 8008894:	3401      	adds	r4, #1
 8008896:	9305      	str	r3, [sp, #20]
 8008898:	4619      	mov	r1, r3
 800889a:	f04f 0c0a 	mov.w	ip, #10
 800889e:	4620      	mov	r0, r4
 80088a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a4:	3a30      	subs	r2, #48	; 0x30
 80088a6:	2a09      	cmp	r2, #9
 80088a8:	d903      	bls.n	80088b2 <_vfiprintf_r+0x1ee>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0c5      	beq.n	800883a <_vfiprintf_r+0x176>
 80088ae:	9105      	str	r1, [sp, #20]
 80088b0:	e7c3      	b.n	800883a <_vfiprintf_r+0x176>
 80088b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b6:	4604      	mov	r4, r0
 80088b8:	2301      	movs	r3, #1
 80088ba:	e7f0      	b.n	800889e <_vfiprintf_r+0x1da>
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	462a      	mov	r2, r5
 80088c2:	4b16      	ldr	r3, [pc, #88]	; (800891c <_vfiprintf_r+0x258>)
 80088c4:	a904      	add	r1, sp, #16
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7fd fde2 	bl	8006490 <_printf_float>
 80088cc:	4607      	mov	r7, r0
 80088ce:	1c78      	adds	r0, r7, #1
 80088d0:	d1d6      	bne.n	8008880 <_vfiprintf_r+0x1bc>
 80088d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d4:	07d9      	lsls	r1, r3, #31
 80088d6:	d405      	bmi.n	80088e4 <_vfiprintf_r+0x220>
 80088d8:	89ab      	ldrh	r3, [r5, #12]
 80088da:	059a      	lsls	r2, r3, #22
 80088dc:	d402      	bmi.n	80088e4 <_vfiprintf_r+0x220>
 80088de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e0:	f000 faaf 	bl	8008e42 <__retarget_lock_release_recursive>
 80088e4:	89ab      	ldrh	r3, [r5, #12]
 80088e6:	065b      	lsls	r3, r3, #25
 80088e8:	f53f af12 	bmi.w	8008710 <_vfiprintf_r+0x4c>
 80088ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ee:	e711      	b.n	8008714 <_vfiprintf_r+0x50>
 80088f0:	ab03      	add	r3, sp, #12
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	462a      	mov	r2, r5
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <_vfiprintf_r+0x258>)
 80088f8:	a904      	add	r1, sp, #16
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7fe f854 	bl	80069a8 <_printf_i>
 8008900:	e7e4      	b.n	80088cc <_vfiprintf_r+0x208>
 8008902:	bf00      	nop
 8008904:	080094fc 	.word	0x080094fc
 8008908:	0800951c 	.word	0x0800951c
 800890c:	080094dc 	.word	0x080094dc
 8008910:	08009484 	.word	0x08009484
 8008914:	0800948e 	.word	0x0800948e
 8008918:	08006491 	.word	0x08006491
 800891c:	080086a1 	.word	0x080086a1
 8008920:	0800948a 	.word	0x0800948a

08008924 <__swbuf_r>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	460e      	mov	r6, r1
 8008928:	4614      	mov	r4, r2
 800892a:	4605      	mov	r5, r0
 800892c:	b118      	cbz	r0, 8008936 <__swbuf_r+0x12>
 800892e:	6983      	ldr	r3, [r0, #24]
 8008930:	b90b      	cbnz	r3, 8008936 <__swbuf_r+0x12>
 8008932:	f000 f9e7 	bl	8008d04 <__sinit>
 8008936:	4b21      	ldr	r3, [pc, #132]	; (80089bc <__swbuf_r+0x98>)
 8008938:	429c      	cmp	r4, r3
 800893a:	d12b      	bne.n	8008994 <__swbuf_r+0x70>
 800893c:	686c      	ldr	r4, [r5, #4]
 800893e:	69a3      	ldr	r3, [r4, #24]
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	071a      	lsls	r2, r3, #28
 8008946:	d52f      	bpl.n	80089a8 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	b36b      	cbz	r3, 80089a8 <__swbuf_r+0x84>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	6820      	ldr	r0, [r4, #0]
 8008950:	1ac0      	subs	r0, r0, r3
 8008952:	6963      	ldr	r3, [r4, #20]
 8008954:	b2f6      	uxtb	r6, r6
 8008956:	4283      	cmp	r3, r0
 8008958:	4637      	mov	r7, r6
 800895a:	dc04      	bgt.n	8008966 <__swbuf_r+0x42>
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f93c 	bl	8008bdc <_fflush_r>
 8008964:	bb30      	cbnz	r0, 80089b4 <__swbuf_r+0x90>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	6022      	str	r2, [r4, #0]
 8008972:	701e      	strb	r6, [r3, #0]
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	3001      	adds	r0, #1
 8008978:	4283      	cmp	r3, r0
 800897a:	d004      	beq.n	8008986 <__swbuf_r+0x62>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	07db      	lsls	r3, r3, #31
 8008980:	d506      	bpl.n	8008990 <__swbuf_r+0x6c>
 8008982:	2e0a      	cmp	r6, #10
 8008984:	d104      	bne.n	8008990 <__swbuf_r+0x6c>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f000 f927 	bl	8008bdc <_fflush_r>
 800898e:	b988      	cbnz	r0, 80089b4 <__swbuf_r+0x90>
 8008990:	4638      	mov	r0, r7
 8008992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <__swbuf_r+0x9c>)
 8008996:	429c      	cmp	r4, r3
 8008998:	d101      	bne.n	800899e <__swbuf_r+0x7a>
 800899a:	68ac      	ldr	r4, [r5, #8]
 800899c:	e7cf      	b.n	800893e <__swbuf_r+0x1a>
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <__swbuf_r+0xa0>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	bf08      	it	eq
 80089a4:	68ec      	ldreq	r4, [r5, #12]
 80089a6:	e7ca      	b.n	800893e <__swbuf_r+0x1a>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f81a 	bl	80089e4 <__swsetup_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0cb      	beq.n	800894c <__swbuf_r+0x28>
 80089b4:	f04f 37ff 	mov.w	r7, #4294967295
 80089b8:	e7ea      	b.n	8008990 <__swbuf_r+0x6c>
 80089ba:	bf00      	nop
 80089bc:	080094fc 	.word	0x080094fc
 80089c0:	0800951c 	.word	0x0800951c
 80089c4:	080094dc 	.word	0x080094dc

080089c8 <__ascii_wctomb>:
 80089c8:	b149      	cbz	r1, 80089de <__ascii_wctomb+0x16>
 80089ca:	2aff      	cmp	r2, #255	; 0xff
 80089cc:	bf85      	ittet	hi
 80089ce:	238a      	movhi	r3, #138	; 0x8a
 80089d0:	6003      	strhi	r3, [r0, #0]
 80089d2:	700a      	strbls	r2, [r1, #0]
 80089d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089d8:	bf98      	it	ls
 80089da:	2001      	movls	r0, #1
 80089dc:	4770      	bx	lr
 80089de:	4608      	mov	r0, r1
 80089e0:	4770      	bx	lr
	...

080089e4 <__swsetup_r>:
 80089e4:	4b32      	ldr	r3, [pc, #200]	; (8008ab0 <__swsetup_r+0xcc>)
 80089e6:	b570      	push	{r4, r5, r6, lr}
 80089e8:	681d      	ldr	r5, [r3, #0]
 80089ea:	4606      	mov	r6, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	b125      	cbz	r5, 80089fa <__swsetup_r+0x16>
 80089f0:	69ab      	ldr	r3, [r5, #24]
 80089f2:	b913      	cbnz	r3, 80089fa <__swsetup_r+0x16>
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 f985 	bl	8008d04 <__sinit>
 80089fa:	4b2e      	ldr	r3, [pc, #184]	; (8008ab4 <__swsetup_r+0xd0>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d10f      	bne.n	8008a20 <__swsetup_r+0x3c>
 8008a00:	686c      	ldr	r4, [r5, #4]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a08:	0719      	lsls	r1, r3, #28
 8008a0a:	d42c      	bmi.n	8008a66 <__swsetup_r+0x82>
 8008a0c:	06dd      	lsls	r5, r3, #27
 8008a0e:	d411      	bmi.n	8008a34 <__swsetup_r+0x50>
 8008a10:	2309      	movs	r3, #9
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1e:	e03e      	b.n	8008a9e <__swsetup_r+0xba>
 8008a20:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <__swsetup_r+0xd4>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d101      	bne.n	8008a2a <__swsetup_r+0x46>
 8008a26:	68ac      	ldr	r4, [r5, #8]
 8008a28:	e7eb      	b.n	8008a02 <__swsetup_r+0x1e>
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <__swsetup_r+0xd8>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	bf08      	it	eq
 8008a30:	68ec      	ldreq	r4, [r5, #12]
 8008a32:	e7e6      	b.n	8008a02 <__swsetup_r+0x1e>
 8008a34:	0758      	lsls	r0, r3, #29
 8008a36:	d512      	bpl.n	8008a5e <__swsetup_r+0x7a>
 8008a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a3a:	b141      	cbz	r1, 8008a4e <__swsetup_r+0x6a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__swsetup_r+0x66>
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff fb31 	bl	80080ac <_free_r>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f043 0308 	orr.w	r3, r3, #8
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	b94b      	cbnz	r3, 8008a7e <__swsetup_r+0x9a>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a74:	d003      	beq.n	8008a7e <__swsetup_r+0x9a>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 fa09 	bl	8008e90 <__smakebuf_r>
 8008a7e:	89a0      	ldrh	r0, [r4, #12]
 8008a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a84:	f010 0301 	ands.w	r3, r0, #1
 8008a88:	d00a      	beq.n	8008aa0 <__swsetup_r+0xbc>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6963      	ldr	r3, [r4, #20]
 8008a90:	425b      	negs	r3, r3
 8008a92:	61a3      	str	r3, [r4, #24]
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	b943      	cbnz	r3, 8008aaa <__swsetup_r+0xc6>
 8008a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a9c:	d1ba      	bne.n	8008a14 <__swsetup_r+0x30>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	0781      	lsls	r1, r0, #30
 8008aa2:	bf58      	it	pl
 8008aa4:	6963      	ldrpl	r3, [r4, #20]
 8008aa6:	60a3      	str	r3, [r4, #8]
 8008aa8:	e7f4      	b.n	8008a94 <__swsetup_r+0xb0>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e7f7      	b.n	8008a9e <__swsetup_r+0xba>
 8008aae:	bf00      	nop
 8008ab0:	20000b00 	.word	0x20000b00
 8008ab4:	080094fc 	.word	0x080094fc
 8008ab8:	0800951c 	.word	0x0800951c
 8008abc:	080094dc 	.word	0x080094dc

08008ac0 <abort>:
 8008ac0:	b508      	push	{r3, lr}
 8008ac2:	2006      	movs	r0, #6
 8008ac4:	f000 fa54 	bl	8008f70 <raise>
 8008ac8:	2001      	movs	r0, #1
 8008aca:	f7f8 f909 	bl	8000ce0 <_exit>
	...

08008ad0 <__sflush_r>:
 8008ad0:	898a      	ldrh	r2, [r1, #12]
 8008ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	0710      	lsls	r0, r2, #28
 8008ada:	460c      	mov	r4, r1
 8008adc:	d458      	bmi.n	8008b90 <__sflush_r+0xc0>
 8008ade:	684b      	ldr	r3, [r1, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	dc05      	bgt.n	8008af0 <__sflush_r+0x20>
 8008ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dc02      	bgt.n	8008af0 <__sflush_r+0x20>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d0f9      	beq.n	8008aea <__sflush_r+0x1a>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008afc:	682f      	ldr	r7, [r5, #0]
 8008afe:	602b      	str	r3, [r5, #0]
 8008b00:	d032      	beq.n	8008b68 <__sflush_r+0x98>
 8008b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	075a      	lsls	r2, r3, #29
 8008b08:	d505      	bpl.n	8008b16 <__sflush_r+0x46>
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	1ac0      	subs	r0, r0, r3
 8008b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b10:	b10b      	cbz	r3, 8008b16 <__sflush_r+0x46>
 8008b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b14:	1ac0      	subs	r0, r0, r3
 8008b16:	2300      	movs	r3, #0
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1c:	6a21      	ldr	r1, [r4, #32]
 8008b1e:	4628      	mov	r0, r5
 8008b20:	47b0      	blx	r6
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	d106      	bne.n	8008b36 <__sflush_r+0x66>
 8008b28:	6829      	ldr	r1, [r5, #0]
 8008b2a:	291d      	cmp	r1, #29
 8008b2c:	d82c      	bhi.n	8008b88 <__sflush_r+0xb8>
 8008b2e:	4a2a      	ldr	r2, [pc, #168]	; (8008bd8 <__sflush_r+0x108>)
 8008b30:	40ca      	lsrs	r2, r1
 8008b32:	07d6      	lsls	r6, r2, #31
 8008b34:	d528      	bpl.n	8008b88 <__sflush_r+0xb8>
 8008b36:	2200      	movs	r2, #0
 8008b38:	6062      	str	r2, [r4, #4]
 8008b3a:	04d9      	lsls	r1, r3, #19
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	d504      	bpl.n	8008b4c <__sflush_r+0x7c>
 8008b42:	1c42      	adds	r2, r0, #1
 8008b44:	d101      	bne.n	8008b4a <__sflush_r+0x7a>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b903      	cbnz	r3, 8008b4c <__sflush_r+0x7c>
 8008b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b4e:	602f      	str	r7, [r5, #0]
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d0ca      	beq.n	8008aea <__sflush_r+0x1a>
 8008b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <__sflush_r+0x92>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f7ff faa5 	bl	80080ac <_free_r>
 8008b62:	2000      	movs	r0, #0
 8008b64:	6360      	str	r0, [r4, #52]	; 0x34
 8008b66:	e7c1      	b.n	8008aec <__sflush_r+0x1c>
 8008b68:	6a21      	ldr	r1, [r4, #32]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	1c41      	adds	r1, r0, #1
 8008b72:	d1c7      	bne.n	8008b04 <__sflush_r+0x34>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0c4      	beq.n	8008b04 <__sflush_r+0x34>
 8008b7a:	2b1d      	cmp	r3, #29
 8008b7c:	d001      	beq.n	8008b82 <__sflush_r+0xb2>
 8008b7e:	2b16      	cmp	r3, #22
 8008b80:	d101      	bne.n	8008b86 <__sflush_r+0xb6>
 8008b82:	602f      	str	r7, [r5, #0]
 8008b84:	e7b1      	b.n	8008aea <__sflush_r+0x1a>
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	e7ad      	b.n	8008aec <__sflush_r+0x1c>
 8008b90:	690f      	ldr	r7, [r1, #16]
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	d0a9      	beq.n	8008aea <__sflush_r+0x1a>
 8008b96:	0793      	lsls	r3, r2, #30
 8008b98:	680e      	ldr	r6, [r1, #0]
 8008b9a:	bf08      	it	eq
 8008b9c:	694b      	ldreq	r3, [r1, #20]
 8008b9e:	600f      	str	r7, [r1, #0]
 8008ba0:	bf18      	it	ne
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	eba6 0807 	sub.w	r8, r6, r7
 8008ba8:	608b      	str	r3, [r1, #8]
 8008baa:	f1b8 0f00 	cmp.w	r8, #0
 8008bae:	dd9c      	ble.n	8008aea <__sflush_r+0x1a>
 8008bb0:	6a21      	ldr	r1, [r4, #32]
 8008bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bb4:	4643      	mov	r3, r8
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b0      	blx	r6
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dc06      	bgt.n	8008bce <__sflush_r+0xfe>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	e78e      	b.n	8008aec <__sflush_r+0x1c>
 8008bce:	4407      	add	r7, r0
 8008bd0:	eba8 0800 	sub.w	r8, r8, r0
 8008bd4:	e7e9      	b.n	8008baa <__sflush_r+0xda>
 8008bd6:	bf00      	nop
 8008bd8:	20400001 	.word	0x20400001

08008bdc <_fflush_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	690b      	ldr	r3, [r1, #16]
 8008be0:	4605      	mov	r5, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b913      	cbnz	r3, 8008bec <_fflush_r+0x10>
 8008be6:	2500      	movs	r5, #0
 8008be8:	4628      	mov	r0, r5
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	b118      	cbz	r0, 8008bf6 <_fflush_r+0x1a>
 8008bee:	6983      	ldr	r3, [r0, #24]
 8008bf0:	b90b      	cbnz	r3, 8008bf6 <_fflush_r+0x1a>
 8008bf2:	f000 f887 	bl	8008d04 <__sinit>
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <_fflush_r+0x6c>)
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	d11b      	bne.n	8008c34 <_fflush_r+0x58>
 8008bfc:	686c      	ldr	r4, [r5, #4]
 8008bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0ef      	beq.n	8008be6 <_fflush_r+0xa>
 8008c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c08:	07d0      	lsls	r0, r2, #31
 8008c0a:	d404      	bmi.n	8008c16 <_fflush_r+0x3a>
 8008c0c:	0599      	lsls	r1, r3, #22
 8008c0e:	d402      	bmi.n	8008c16 <_fflush_r+0x3a>
 8008c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c12:	f000 f915 	bl	8008e40 <__retarget_lock_acquire_recursive>
 8008c16:	4628      	mov	r0, r5
 8008c18:	4621      	mov	r1, r4
 8008c1a:	f7ff ff59 	bl	8008ad0 <__sflush_r>
 8008c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c20:	07da      	lsls	r2, r3, #31
 8008c22:	4605      	mov	r5, r0
 8008c24:	d4e0      	bmi.n	8008be8 <_fflush_r+0xc>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	059b      	lsls	r3, r3, #22
 8008c2a:	d4dd      	bmi.n	8008be8 <_fflush_r+0xc>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c2e:	f000 f908 	bl	8008e42 <__retarget_lock_release_recursive>
 8008c32:	e7d9      	b.n	8008be8 <_fflush_r+0xc>
 8008c34:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <_fflush_r+0x70>)
 8008c36:	429c      	cmp	r4, r3
 8008c38:	d101      	bne.n	8008c3e <_fflush_r+0x62>
 8008c3a:	68ac      	ldr	r4, [r5, #8]
 8008c3c:	e7df      	b.n	8008bfe <_fflush_r+0x22>
 8008c3e:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <_fflush_r+0x74>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	bf08      	it	eq
 8008c44:	68ec      	ldreq	r4, [r5, #12]
 8008c46:	e7da      	b.n	8008bfe <_fflush_r+0x22>
 8008c48:	080094fc 	.word	0x080094fc
 8008c4c:	0800951c 	.word	0x0800951c
 8008c50:	080094dc 	.word	0x080094dc

08008c54 <std>:
 8008c54:	2300      	movs	r3, #0
 8008c56:	b510      	push	{r4, lr}
 8008c58:	4604      	mov	r4, r0
 8008c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c62:	6083      	str	r3, [r0, #8]
 8008c64:	8181      	strh	r1, [r0, #12]
 8008c66:	6643      	str	r3, [r0, #100]	; 0x64
 8008c68:	81c2      	strh	r2, [r0, #14]
 8008c6a:	6183      	str	r3, [r0, #24]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	2208      	movs	r2, #8
 8008c70:	305c      	adds	r0, #92	; 0x5c
 8008c72:	f7fd fb75 	bl	8006360 <memset>
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <std+0x38>)
 8008c78:	6263      	str	r3, [r4, #36]	; 0x24
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <std+0x3c>)
 8008c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c7e:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <std+0x40>)
 8008c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <std+0x44>)
 8008c84:	6224      	str	r4, [r4, #32]
 8008c86:	6323      	str	r3, [r4, #48]	; 0x30
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	bf00      	nop
 8008c8c:	08008fa9 	.word	0x08008fa9
 8008c90:	08008fcb 	.word	0x08008fcb
 8008c94:	08009003 	.word	0x08009003
 8008c98:	08009027 	.word	0x08009027

08008c9c <_cleanup_r>:
 8008c9c:	4901      	ldr	r1, [pc, #4]	; (8008ca4 <_cleanup_r+0x8>)
 8008c9e:	f000 b8af 	b.w	8008e00 <_fwalk_reent>
 8008ca2:	bf00      	nop
 8008ca4:	08008bdd 	.word	0x08008bdd

08008ca8 <__sfmoreglue>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	2268      	movs	r2, #104	; 0x68
 8008cac:	1e4d      	subs	r5, r1, #1
 8008cae:	4355      	muls	r5, r2
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cb6:	f7ff fa65 	bl	8008184 <_malloc_r>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	b140      	cbz	r0, 8008cd0 <__sfmoreglue+0x28>
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8008cc4:	300c      	adds	r0, #12
 8008cc6:	60a0      	str	r0, [r4, #8]
 8008cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ccc:	f7fd fb48 	bl	8006360 <memset>
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}

08008cd4 <__sfp_lock_acquire>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sfp_lock_acquire+0x8>)
 8008cd6:	f000 b8b3 	b.w	8008e40 <__retarget_lock_acquire_recursive>
 8008cda:	bf00      	nop
 8008cdc:	200013b1 	.word	0x200013b1

08008ce0 <__sfp_lock_release>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sfp_lock_release+0x8>)
 8008ce2:	f000 b8ae 	b.w	8008e42 <__retarget_lock_release_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	200013b1 	.word	0x200013b1

08008cec <__sinit_lock_acquire>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sinit_lock_acquire+0x8>)
 8008cee:	f000 b8a7 	b.w	8008e40 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	200013b2 	.word	0x200013b2

08008cf8 <__sinit_lock_release>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__sinit_lock_release+0x8>)
 8008cfa:	f000 b8a2 	b.w	8008e42 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	200013b2 	.word	0x200013b2

08008d04 <__sinit>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	f7ff fff0 	bl	8008cec <__sinit_lock_acquire>
 8008d0c:	69a3      	ldr	r3, [r4, #24]
 8008d0e:	b11b      	cbz	r3, 8008d18 <__sinit+0x14>
 8008d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d14:	f7ff bff0 	b.w	8008cf8 <__sinit_lock_release>
 8008d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8008d1e:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <__sinit+0x68>)
 8008d20:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <__sinit+0x6c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d26:	42a3      	cmp	r3, r4
 8008d28:	bf04      	itt	eq
 8008d2a:	2301      	moveq	r3, #1
 8008d2c:	61a3      	streq	r3, [r4, #24]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 f820 	bl	8008d74 <__sfp>
 8008d34:	6060      	str	r0, [r4, #4]
 8008d36:	4620      	mov	r0, r4
 8008d38:	f000 f81c 	bl	8008d74 <__sfp>
 8008d3c:	60a0      	str	r0, [r4, #8]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 f818 	bl	8008d74 <__sfp>
 8008d44:	2200      	movs	r2, #0
 8008d46:	60e0      	str	r0, [r4, #12]
 8008d48:	2104      	movs	r1, #4
 8008d4a:	6860      	ldr	r0, [r4, #4]
 8008d4c:	f7ff ff82 	bl	8008c54 <std>
 8008d50:	68a0      	ldr	r0, [r4, #8]
 8008d52:	2201      	movs	r2, #1
 8008d54:	2109      	movs	r1, #9
 8008d56:	f7ff ff7d 	bl	8008c54 <std>
 8008d5a:	68e0      	ldr	r0, [r4, #12]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	2112      	movs	r1, #18
 8008d60:	f7ff ff78 	bl	8008c54 <std>
 8008d64:	2301      	movs	r3, #1
 8008d66:	61a3      	str	r3, [r4, #24]
 8008d68:	e7d2      	b.n	8008d10 <__sinit+0xc>
 8008d6a:	bf00      	nop
 8008d6c:	0800915c 	.word	0x0800915c
 8008d70:	08008c9d 	.word	0x08008c9d

08008d74 <__sfp>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	4607      	mov	r7, r0
 8008d78:	f7ff ffac 	bl	8008cd4 <__sfp_lock_acquire>
 8008d7c:	4b1e      	ldr	r3, [pc, #120]	; (8008df8 <__sfp+0x84>)
 8008d7e:	681e      	ldr	r6, [r3, #0]
 8008d80:	69b3      	ldr	r3, [r6, #24]
 8008d82:	b913      	cbnz	r3, 8008d8a <__sfp+0x16>
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff ffbd 	bl	8008d04 <__sinit>
 8008d8a:	3648      	adds	r6, #72	; 0x48
 8008d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	d503      	bpl.n	8008d9c <__sfp+0x28>
 8008d94:	6833      	ldr	r3, [r6, #0]
 8008d96:	b30b      	cbz	r3, 8008ddc <__sfp+0x68>
 8008d98:	6836      	ldr	r6, [r6, #0]
 8008d9a:	e7f7      	b.n	8008d8c <__sfp+0x18>
 8008d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008da0:	b9d5      	cbnz	r5, 8008dd8 <__sfp+0x64>
 8008da2:	4b16      	ldr	r3, [pc, #88]	; (8008dfc <__sfp+0x88>)
 8008da4:	60e3      	str	r3, [r4, #12]
 8008da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008daa:	6665      	str	r5, [r4, #100]	; 0x64
 8008dac:	f000 f847 	bl	8008e3e <__retarget_lock_init_recursive>
 8008db0:	f7ff ff96 	bl	8008ce0 <__sfp_lock_release>
 8008db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dbc:	6025      	str	r5, [r4, #0]
 8008dbe:	61a5      	str	r5, [r4, #24]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dc8:	f7fd faca 	bl	8006360 <memset>
 8008dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd8:	3468      	adds	r4, #104	; 0x68
 8008dda:	e7d9      	b.n	8008d90 <__sfp+0x1c>
 8008ddc:	2104      	movs	r1, #4
 8008dde:	4638      	mov	r0, r7
 8008de0:	f7ff ff62 	bl	8008ca8 <__sfmoreglue>
 8008de4:	4604      	mov	r4, r0
 8008de6:	6030      	str	r0, [r6, #0]
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d1d5      	bne.n	8008d98 <__sfp+0x24>
 8008dec:	f7ff ff78 	bl	8008ce0 <__sfp_lock_release>
 8008df0:	230c      	movs	r3, #12
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	e7ee      	b.n	8008dd4 <__sfp+0x60>
 8008df6:	bf00      	nop
 8008df8:	0800915c 	.word	0x0800915c
 8008dfc:	ffff0001 	.word	0xffff0001

08008e00 <_fwalk_reent>:
 8008e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	4606      	mov	r6, r0
 8008e06:	4688      	mov	r8, r1
 8008e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e0c:	2700      	movs	r7, #0
 8008e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e12:	f1b9 0901 	subs.w	r9, r9, #1
 8008e16:	d505      	bpl.n	8008e24 <_fwalk_reent+0x24>
 8008e18:	6824      	ldr	r4, [r4, #0]
 8008e1a:	2c00      	cmp	r4, #0
 8008e1c:	d1f7      	bne.n	8008e0e <_fwalk_reent+0xe>
 8008e1e:	4638      	mov	r0, r7
 8008e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e24:	89ab      	ldrh	r3, [r5, #12]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d907      	bls.n	8008e3a <_fwalk_reent+0x3a>
 8008e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	d003      	beq.n	8008e3a <_fwalk_reent+0x3a>
 8008e32:	4629      	mov	r1, r5
 8008e34:	4630      	mov	r0, r6
 8008e36:	47c0      	blx	r8
 8008e38:	4307      	orrs	r7, r0
 8008e3a:	3568      	adds	r5, #104	; 0x68
 8008e3c:	e7e9      	b.n	8008e12 <_fwalk_reent+0x12>

08008e3e <__retarget_lock_init_recursive>:
 8008e3e:	4770      	bx	lr

08008e40 <__retarget_lock_acquire_recursive>:
 8008e40:	4770      	bx	lr

08008e42 <__retarget_lock_release_recursive>:
 8008e42:	4770      	bx	lr

08008e44 <__swhatbuf_r>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	460e      	mov	r6, r1
 8008e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	b096      	sub	sp, #88	; 0x58
 8008e50:	4614      	mov	r4, r2
 8008e52:	461d      	mov	r5, r3
 8008e54:	da08      	bge.n	8008e68 <__swhatbuf_r+0x24>
 8008e56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	602a      	str	r2, [r5, #0]
 8008e5e:	061a      	lsls	r2, r3, #24
 8008e60:	d410      	bmi.n	8008e84 <__swhatbuf_r+0x40>
 8008e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e66:	e00e      	b.n	8008e86 <__swhatbuf_r+0x42>
 8008e68:	466a      	mov	r2, sp
 8008e6a:	f000 f903 	bl	8009074 <_fstat_r>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	dbf1      	blt.n	8008e56 <__swhatbuf_r+0x12>
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e7c:	425a      	negs	r2, r3
 8008e7e:	415a      	adcs	r2, r3
 8008e80:	602a      	str	r2, [r5, #0]
 8008e82:	e7ee      	b.n	8008e62 <__swhatbuf_r+0x1e>
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	2000      	movs	r0, #0
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	b016      	add	sp, #88	; 0x58
 8008e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e90 <__smakebuf_r>:
 8008e90:	898b      	ldrh	r3, [r1, #12]
 8008e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e94:	079d      	lsls	r5, r3, #30
 8008e96:	4606      	mov	r6, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	d507      	bpl.n	8008eac <__smakebuf_r+0x1c>
 8008e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	6123      	str	r3, [r4, #16]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	6163      	str	r3, [r4, #20]
 8008ea8:	b002      	add	sp, #8
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	ab01      	add	r3, sp, #4
 8008eae:	466a      	mov	r2, sp
 8008eb0:	f7ff ffc8 	bl	8008e44 <__swhatbuf_r>
 8008eb4:	9900      	ldr	r1, [sp, #0]
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff f963 	bl	8008184 <_malloc_r>
 8008ebe:	b948      	cbnz	r0, 8008ed4 <__smakebuf_r+0x44>
 8008ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d4ef      	bmi.n	8008ea8 <__smakebuf_r+0x18>
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	f043 0302 	orr.w	r3, r3, #2
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	e7e3      	b.n	8008e9c <__smakebuf_r+0xc>
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <__smakebuf_r+0x7c>)
 8008ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	6020      	str	r0, [r4, #0]
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	9b00      	ldr	r3, [sp, #0]
 8008ee4:	6163      	str	r3, [r4, #20]
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	6120      	str	r0, [r4, #16]
 8008eea:	b15b      	cbz	r3, 8008f04 <__smakebuf_r+0x74>
 8008eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f8d1 	bl	8009098 <_isatty_r>
 8008ef6:	b128      	cbz	r0, 8008f04 <__smakebuf_r+0x74>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	81a3      	strh	r3, [r4, #12]
 8008f04:	89a0      	ldrh	r0, [r4, #12]
 8008f06:	4305      	orrs	r5, r0
 8008f08:	81a5      	strh	r5, [r4, #12]
 8008f0a:	e7cd      	b.n	8008ea8 <__smakebuf_r+0x18>
 8008f0c:	08008c9d 	.word	0x08008c9d

08008f10 <_malloc_usable_size_r>:
 8008f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f14:	1f18      	subs	r0, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfbc      	itt	lt
 8008f1a:	580b      	ldrlt	r3, [r1, r0]
 8008f1c:	18c0      	addlt	r0, r0, r3
 8008f1e:	4770      	bx	lr

08008f20 <_raise_r>:
 8008f20:	291f      	cmp	r1, #31
 8008f22:	b538      	push	{r3, r4, r5, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	d904      	bls.n	8008f34 <_raise_r+0x14>
 8008f2a:	2316      	movs	r3, #22
 8008f2c:	6003      	str	r3, [r0, #0]
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f36:	b112      	cbz	r2, 8008f3e <_raise_r+0x1e>
 8008f38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f3c:	b94b      	cbnz	r3, 8008f52 <_raise_r+0x32>
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 f830 	bl	8008fa4 <_getpid_r>
 8008f44:	462a      	mov	r2, r5
 8008f46:	4601      	mov	r1, r0
 8008f48:	4620      	mov	r0, r4
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f000 b817 	b.w	8008f80 <_kill_r>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d00a      	beq.n	8008f6c <_raise_r+0x4c>
 8008f56:	1c59      	adds	r1, r3, #1
 8008f58:	d103      	bne.n	8008f62 <_raise_r+0x42>
 8008f5a:	2316      	movs	r3, #22
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	2001      	movs	r0, #1
 8008f60:	e7e7      	b.n	8008f32 <_raise_r+0x12>
 8008f62:	2400      	movs	r4, #0
 8008f64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f68:	4628      	mov	r0, r5
 8008f6a:	4798      	blx	r3
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7e0      	b.n	8008f32 <_raise_r+0x12>

08008f70 <raise>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <raise+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f7ff bfd3 	b.w	8008f20 <_raise_r>
 8008f7a:	bf00      	nop
 8008f7c:	20000b00 	.word	0x20000b00

08008f80 <_kill_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d07      	ldr	r5, [pc, #28]	; (8008fa0 <_kill_r+0x20>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7f7 fe97 	bl	8000cc0 <_kill>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d102      	bne.n	8008f9c <_kill_r+0x1c>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	b103      	cbz	r3, 8008f9c <_kill_r+0x1c>
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	200013ac 	.word	0x200013ac

08008fa4 <_getpid_r>:
 8008fa4:	f7f7 be84 	b.w	8000cb0 <_getpid>

08008fa8 <__sread>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	f000 f894 	bl	80090dc <_read_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	bfab      	itete	ge
 8008fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fba:	89a3      	ldrhlt	r3, [r4, #12]
 8008fbc:	181b      	addge	r3, r3, r0
 8008fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fc2:	bfac      	ite	ge
 8008fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fc6:	81a3      	strhlt	r3, [r4, #12]
 8008fc8:	bd10      	pop	{r4, pc}

08008fca <__swrite>:
 8008fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fce:	461f      	mov	r7, r3
 8008fd0:	898b      	ldrh	r3, [r1, #12]
 8008fd2:	05db      	lsls	r3, r3, #23
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	4616      	mov	r6, r2
 8008fda:	d505      	bpl.n	8008fe8 <__swrite+0x1e>
 8008fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f000 f868 	bl	80090b8 <_lseek_r>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	f000 b817 	b.w	8009030 <_write_r>

08009002 <__sseek>:
 8009002:	b510      	push	{r4, lr}
 8009004:	460c      	mov	r4, r1
 8009006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900a:	f000 f855 	bl	80090b8 <_lseek_r>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	bf15      	itete	ne
 8009014:	6560      	strne	r0, [r4, #84]	; 0x54
 8009016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800901a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800901e:	81a3      	strheq	r3, [r4, #12]
 8009020:	bf18      	it	ne
 8009022:	81a3      	strhne	r3, [r4, #12]
 8009024:	bd10      	pop	{r4, pc}

08009026 <__sclose>:
 8009026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902a:	f000 b813 	b.w	8009054 <_close_r>
	...

08009030 <_write_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d07      	ldr	r5, [pc, #28]	; (8009050 <_write_r+0x20>)
 8009034:	4604      	mov	r4, r0
 8009036:	4608      	mov	r0, r1
 8009038:	4611      	mov	r1, r2
 800903a:	2200      	movs	r2, #0
 800903c:	602a      	str	r2, [r5, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	f7f7 fe75 	bl	8000d2e <_write>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_write_r+0x1e>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_write_r+0x1e>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	200013ac 	.word	0x200013ac

08009054 <_close_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d06      	ldr	r5, [pc, #24]	; (8009070 <_close_r+0x1c>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7f7 fe81 	bl	8000d66 <_close>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_close_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_close_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	200013ac 	.word	0x200013ac

08009074 <_fstat_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_fstat_r+0x20>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f7f7 fe7c 	bl	8000d7e <_fstat>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d102      	bne.n	8009090 <_fstat_r+0x1c>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b103      	cbz	r3, 8009090 <_fstat_r+0x1c>
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	200013ac 	.word	0x200013ac

08009098 <_isatty_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d06      	ldr	r5, [pc, #24]	; (80090b4 <_isatty_r+0x1c>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	f7f7 fe7b 	bl	8000d9e <_isatty>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_isatty_r+0x1a>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_isatty_r+0x1a>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	200013ac 	.word	0x200013ac

080090b8 <_lseek_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d07      	ldr	r5, [pc, #28]	; (80090d8 <_lseek_r+0x20>)
 80090bc:	4604      	mov	r4, r0
 80090be:	4608      	mov	r0, r1
 80090c0:	4611      	mov	r1, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	602a      	str	r2, [r5, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f7f7 fe74 	bl	8000db4 <_lseek>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_lseek_r+0x1e>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_lseek_r+0x1e>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200013ac 	.word	0x200013ac

080090dc <_read_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_read_r+0x20>)
 80090e0:	4604      	mov	r4, r0
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7f7 fe02 	bl	8000cf4 <_read>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_read_r+0x1e>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_read_r+0x1e>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	200013ac 	.word	0x200013ac

08009100 <_init>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr

0800910c <_fini>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr
