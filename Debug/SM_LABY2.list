
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d1c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08007f20  08007f20  00017f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  200001dc  08008508  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08008508  00020910  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b2  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000390b  00000000  00000000  0003a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005195  00000000  00000000  00040a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcd6  00000000  00000000  00045c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103d56  00000000  00000000  000618db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006830  00000000  00000000  00165684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f04 	.word	0x08007f04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08007f04 	.word	0x08007f04

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_DAC_Init+0x4c>)
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_DAC_Init+0x50>)
 8000606:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_DAC_Init+0x4c>)
 800060a:	f000 fffa 	bl	8001602 <HAL_DAC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000614:	f000 fa58 	bl	8000ac8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000618:	2304      	movs	r3, #4
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_DAC_Init+0x4c>)
 8000628:	f001 f85f 	bl	80016ea <HAL_DAC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000632:	f000 fa49 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200001f8 	.word	0x200001f8
 8000644:	40007400 	.word	0x40007400

08000648 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2d      	ldr	r2, [pc, #180]	; (800071c <HAL_DAC_MspInit+0xd4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d154      	bne.n	8000714 <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <HAL_DAC_MspInit+0xd8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800069a:	2310      	movs	r3, #16
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <HAL_DAC_MspInit+0xdc>)
 80006ae:	f001 fbe7 	bl	8001e80 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_DAC_MspInit+0xe4>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80006be:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006c2:	2240      	movs	r2, #64	; 0x40
 80006c4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006da:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ea:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 80006fa:	f001 f845 	bl	8001788 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000704:	f000 f9e0 	bl	8000ac8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_DAC_MspInit+0xe0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40007400 	.word	0x40007400
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	2000020c 	.word	0x2000020c
 800072c:	40026088 	.word	0x40026088

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_DMA_Init+0x38>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <MX_DMA_Init+0x38>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_DMA_Init+0x38>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2010      	movs	r0, #16
 8000754:	f000 ff1f 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000758:	2010      	movs	r0, #16
 800075a:	f000 ff38 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	4b7b      	ldr	r3, [pc, #492]	; (8000970 <MX_GPIO_Init+0x204>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <MX_GPIO_Init+0x204>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b78      	ldr	r3, [pc, #480]	; (8000970 <MX_GPIO_Init+0x204>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b75      	ldr	r3, [pc, #468]	; (8000970 <MX_GPIO_Init+0x204>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a74      	ldr	r2, [pc, #464]	; (8000970 <MX_GPIO_Init+0x204>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b72      	ldr	r3, [pc, #456]	; (8000970 <MX_GPIO_Init+0x204>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b6f      	ldr	r3, [pc, #444]	; (8000970 <MX_GPIO_Init+0x204>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a6e      	ldr	r2, [pc, #440]	; (8000970 <MX_GPIO_Init+0x204>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b6c      	ldr	r3, [pc, #432]	; (8000970 <MX_GPIO_Init+0x204>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b69      	ldr	r3, [pc, #420]	; (8000970 <MX_GPIO_Init+0x204>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a68      	ldr	r2, [pc, #416]	; (8000970 <MX_GPIO_Init+0x204>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b66      	ldr	r3, [pc, #408]	; (8000970 <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <MX_GPIO_Init+0x204>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a62      	ldr	r2, [pc, #392]	; (8000970 <MX_GPIO_Init+0x204>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <MX_GPIO_Init+0x204>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <MX_GPIO_Init+0x204>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <MX_GPIO_Init+0x204>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <MX_GPIO_Init+0x204>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4b57      	ldr	r3, [pc, #348]	; (8000970 <MX_GPIO_Init+0x204>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a56      	ldr	r2, [pc, #344]	; (8000970 <MX_GPIO_Init+0x204>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b54      	ldr	r3, [pc, #336]	; (8000970 <MX_GPIO_Init+0x204>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2110      	movs	r1, #16
 800082e:	4851      	ldr	r0, [pc, #324]	; (8000974 <MX_GPIO_Init+0x208>)
 8000830:	f001 fcd2 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f244 0181 	movw	r1, #16513	; 0x4081
 800083a:	484f      	ldr	r0, [pc, #316]	; (8000978 <MX_GPIO_Init+0x20c>)
 800083c:	f001 fccc 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	484d      	ldr	r0, [pc, #308]	; (800097c <MX_GPIO_Init+0x210>)
 8000846:	f001 fcc7 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800084a:	2310      	movs	r3, #16
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4844      	ldr	r0, [pc, #272]	; (8000974 <MX_GPIO_Init+0x208>)
 8000862:	f001 fb0d 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4840      	ldr	r0, [pc, #256]	; (8000980 <MX_GPIO_Init+0x214>)
 800087e:	f001 faff 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000882:	2332      	movs	r3, #50	; 0x32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000892:	230b      	movs	r3, #11
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4838      	ldr	r0, [pc, #224]	; (8000980 <MX_GPIO_Init+0x214>)
 800089e:	f001 faef 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008a2:	2386      	movs	r3, #134	; 0x86
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4831      	ldr	r0, [pc, #196]	; (8000984 <MX_GPIO_Init+0x218>)
 80008be:	f001 fadf 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4827      	ldr	r0, [pc, #156]	; (8000978 <MX_GPIO_Init+0x20c>)
 80008dc:	f001 fad0 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f2:	230b      	movs	r3, #11
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481e      	ldr	r0, [pc, #120]	; (8000978 <MX_GPIO_Init+0x20c>)
 80008fe:	f001 fabf 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0x210>)
 800091a:	f001 fab1 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <MX_GPIO_Init+0x210>)
 8000932:	f001 faa5 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_GPIO_Init+0x210>)
 8000954:	f001 fa94 	bl	8001e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f000 fe1a 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f000 fe33 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 8000968:	bf00      	nop
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020400 	.word	0x40020400
 800097c:	40021800 	.word	0x40021800
 8000980:	40020800 	.word	0x40020800
 8000984:	40020000 	.word	0x40020000

08000988 <HAL_GPIO_EXTI_Callback>:
	}
}

// GPIO callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]

}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a4:	f000 fc9b 	bl	80012de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a8:	f000 f81c 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ac:	f7ff fede 	bl	800076c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009b0:	f000 fb2c 	bl	800100c <MX_USART3_UART_Init>
  MX_DMA_Init();
 80009b4:	f7ff febc 	bl	8000730 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009b8:	f000 fbc0 	bl	800113c <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 80009bc:	f7ff fe1a 	bl	80005f4 <MX_DAC_Init>
  MX_SPI1_Init();
 80009c0:	f000 f888 	bl	8000ad4 <MX_SPI1_Init>
  MX_TIM4_Init();
 80009c4:	f000 fa68 	bl	8000e98 <MX_TIM4_Init>
  MX_TIM6_Init();
 80009c8:	f000 fab4 	bl	8000f34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80009cc:	2100      	movs	r1, #0
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <main+0x3c>)
 80009d0:	f000 fe39 	bl	8001646 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <main+0x40>)
 80009d6:	f002 ffd7 	bl	8003988 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x3a>
 80009dc:	200001f8 	.word	0x200001f8
 80009e0:	200002d4 	.word	0x200002d4

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 fe1c 	bl	8005630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a08:	f001 fd60 	bl	80024cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a2b      	ldr	r2, [pc, #172]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <SystemClock_Config+0xe0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <SystemClock_Config+0xe0>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <SystemClock_Config+0xe0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a58:	2360      	movs	r3, #96	; 0x60
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fd8d 	bl	800258c <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a78:	f000 f826 	bl	8000ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a7c:	f001 fd36 	bl	80024ec <HAL_PWREx_EnableOverDrive>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a86:	f000 f81f 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 f81e 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ab2:	f000 f809 	bl	8000ac8 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3750      	adds	r7, #80	; 0x50
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_SPI1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000af2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b34:	f002 fe26 	bl	8003784 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f7ff ffc3 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000026c 	.word	0x2000026c
 8000b4c:	40013000 	.word	0x40013000

08000b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a25      	ldr	r2, [pc, #148]	; (8000c04 <HAL_SPI_MspInit+0xb4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d143      	bne.n	8000bfa <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a24      	ldr	r2, [pc, #144]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_SPI_MspInit+0xb8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bba:	2360      	movs	r3, #96	; 0x60
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <HAL_SPI_MspInit+0xbc>)
 8000bd6:	f001 f953 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <HAL_SPI_MspInit+0xc0>)
 8000bf6:	f001 f943 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 fb56 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Stream5_IRQHandler+0x10>)
 8000cb6:	f000 fea7 	bl	8001a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000020c 	.word	0x2000020c

08000cc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART3_IRQHandler+0x10>)
 8000cca:	f003 f9b5 	bl	8004038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000036c 	.word	0x2000036c

08000cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000cdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce0:	f001 fa94 	bl	800220c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_kill>:

int _kill(int pid, int sig)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d02:	f004 fc5d 	bl	80055c0 <__errno>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2216      	movs	r2, #22
 8000d0a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_exit>:

void _exit (int status)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ffe7 	bl	8000cf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d2a:	e7fe      	b.n	8000d2a <_exit+0x12>

08000d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
	}

return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
	}
	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_isatty>:

int _isatty(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f004 fbc2 	bl	80055c0 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20080000 	.word	0x20080000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200002d0 	.word	0x200002d0
 8000e70:	20000910 	.word	0x20000910

08000e74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <MX_TIM4_Init+0x98>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9599;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000ebe:	f242 527f 	movw	r2, #9599	; 0x257f
 8000ec2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000ecc:	2263      	movs	r2, #99	; 0x63
 8000ece:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000ede:	f002 fcfc 	bl	80038da <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f7ff fdee 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000efa:	f002 fdbd 	bl	8003a78 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f04:	f7ff fde0 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM4_Init+0x94>)
 8000f16:	f002 ffb3 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f7ff fdd2 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200002d4 	.word	0x200002d4
 8000f30:	40000800 	.word	0x40000800

08000f34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f46:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <MX_TIM6_Init+0x6c>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f4c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000f50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f68:	f002 fcb7 	bl	80038da <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f72:	f7ff fda9 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f76:	2320      	movs	r3, #32
 8000f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f84:	f002 ff7c 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000f8e:	f7ff fd9b 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000320 	.word	0x20000320
 8000fa0:	40001000 	.word	0x40001000

08000fa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a13      	ldr	r2, [pc, #76]	; (8001000 <HAL_TIM_Base_MspInit+0x5c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_TIM_Base_MspInit+0x60>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <HAL_TIM_Base_MspInit+0x60>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_TIM_Base_MspInit+0x60>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000fce:	e010      	b.n	8000ff2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM6)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_TIM_Base_MspInit+0x64>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_TIM_Base_MspInit+0x60>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_TIM_Base_MspInit+0x60>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_TIM_Base_MspInit+0x60>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40000800 	.word	0x40000800
 8001004:	40023800 	.word	0x40023800
 8001008:	40001000 	.word	0x40001000

0800100c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_USART3_UART_Init+0x5c>)
 8001014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001018:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800101c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART3_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART3_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART3_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART3_UART_Init+0x58>)
 8001050:	f002 ffa4 	bl	8003f9c <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f7ff fd35 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000036c 	.word	0x2000036c
 8001068:	40004800 	.word	0x40004800

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ae      	sub	sp, #184	; 0xb8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2290      	movs	r2, #144	; 0x90
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f004 facf 	bl	8005630 <memset>
  if(uartHandle->Instance==USART3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_UART_MspInit+0xc4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d144      	bne.n	8001126 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 ff42 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010b6:	f7ff fd07 	bl	8000ac8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_UART_MspInit+0xc8>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_UART_MspInit+0xc8>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_UART_MspInit+0xc8>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_UART_MspInit+0xc8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_UART_MspInit+0xc8>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0xc8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_UART_MspInit+0xcc>)
 8001112:	f000 feb5 	bl	8001e80 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2027      	movs	r0, #39	; 0x27
 800111c:	f000 fa3b 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001120:	2027      	movs	r0, #39	; 0x27
 8001122:	f000 fa54 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	37b8      	adds	r7, #184	; 0xb8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004800 	.word	0x40004800
 8001134:	40023800 	.word	0x40023800
 8001138:	40020c00 	.word	0x40020c00

0800113c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114a:	2206      	movs	r2, #6
 800114c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001150:	2202      	movs	r2, #2
 8001152:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115c:	2202      	movs	r2, #2
 800115e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001174:	2201      	movs	r2, #1
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001180:	f001 f85c 	bl	800223c <HAL_PCD_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800118a:	f7ff fc9d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200003f4 	.word	0x200003f4

08001198 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ae      	sub	sp, #184	; 0xb8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2290      	movs	r2, #144	; 0x90
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fa39 	bl	8005630 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c6:	d159      	bne.n	800127c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 feab 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011e4:	f7ff fc70 	bl	8000ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_PCD_MspInit+0xec>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_PCD_MspInit+0xec>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_PCD_MspInit+0xec>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001200:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800121a:	230a      	movs	r3, #10
 800121c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001224:	4619      	mov	r1, r3
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <HAL_PCD_MspInit+0xf0>)
 8001228:	f000 fe2a 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001244:	4619      	mov	r1, r3
 8001246:	4810      	ldr	r0, [pc, #64]	; (8001288 <HAL_PCD_MspInit+0xf0>)
 8001248:	f000 fe1a 	bl	8001e80 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_PCD_MspInit+0xec>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_PCD_MspInit+0xec>)
 8001252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001256:	6353      	str	r3, [r2, #52]	; 0x34
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_PCD_MspInit+0xec>)
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_PCD_MspInit+0xec>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_PCD_MspInit+0xec>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6453      	str	r3, [r2, #68]	; 0x44
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_PCD_MspInit+0xec>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	37b8      	adds	r7, #184	; 0xb8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b6:	f7ff fddd 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f004 f987 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff fb6f 	bl	80009a0 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80012d0:	0800832c 	.word	0x0800832c
  ldr r2, =_sbss
 80012d4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80012d8:	20000910 	.word	0x20000910

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>

080012de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f000 f94c 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 f805 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fc91 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f967 	bl	80015ea <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f92f 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000008 	.word	0x20000008
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	200008fc 	.word	0x200008fc

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200008fc 	.word	0x200008fc

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	05fa0000 	.word	0x05fa0000

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e014      	b.n	800163e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	791b      	ldrb	r3, [r3, #4]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff f80f 	bl	8000648 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2202      	movs	r2, #2
 800162e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	795b      	ldrb	r3, [r3, #5]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_DAC_Start+0x16>
 8001658:	2302      	movs	r3, #2
 800165a:	e040      	b.n	80016de <HAL_DAC_Start+0x98>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10f      	bne.n	80016a6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001690:	2b3c      	cmp	r3, #60	; 0x3c
 8001692:	d11d      	bne.n	80016d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	e014      	b.n	80016d0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	213c      	movs	r1, #60	; 0x3c
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0202 	orr.w	r2, r2, #2
 80016ce:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_DAC_ConfigChannel+0x18>
 80016fe:	2302      	movs	r3, #2
 8001700:	e03c      	b.n	800177c <HAL_DAC_ConfigChannel+0x92>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	22c0      	movs	r2, #192	; 0xc0
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fdf4 	bl	8001380 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e099      	b.n	80018d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c4:	e00f      	b.n	80017e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c6:	f7ff fddb 	bl	8001380 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d908      	bls.n	80017e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e078      	b.n	80018d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e8      	bne.n	80017c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_DMA_Init+0x158>)
 8001800:	4013      	ands	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4313      	orrs	r3, r2
 8001836:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b04      	cmp	r3, #4
 800183e:	d107      	bne.n	8001850 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4313      	orrs	r3, r2
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b04      	cmp	r3, #4
 8001878:	d117      	bne.n	80018aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fa7b 	bl	8001d88 <DMA_CheckFifoParam>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018a6:	2301      	movs	r3, #1
 80018a8:	e016      	b.n	80018d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fa32 	bl	8001d1c <DMA_CalcBaseAndBitshift>
 80018b8:	4603      	mov	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	223f      	movs	r2, #63	; 0x3f
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	e010803f 	.word	0xe010803f

080018e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018f2:	f7ff fd45 	bl	8001380 <HAL_GetTick>
 80018f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d008      	beq.n	8001916 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e052      	b.n	80019bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0216 	bic.w	r2, r2, #22
 8001924:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001934:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <HAL_DMA_Abort+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0208 	bic.w	r2, r2, #8
 8001954:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001966:	e013      	b.n	8001990 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001968:	f7ff fd0a 	bl	8001380 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b05      	cmp	r3, #5
 8001974:	d90c      	bls.n	8001990 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2220      	movs	r2, #32
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e015      	b.n	80019bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1e4      	bne.n	8001968 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	223f      	movs	r2, #63	; 0x3f
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d004      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00c      	b.n	80019fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2205      	movs	r2, #5
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a14:	4b8e      	ldr	r3, [pc, #568]	; (8001c50 <HAL_DMA_IRQHandler+0x248>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a8e      	ldr	r2, [pc, #568]	; (8001c54 <HAL_DMA_IRQHandler+0x24c>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0a9b      	lsrs	r3, r3, #10
 8001a20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2208      	movs	r2, #8
 8001a34:	409a      	lsls	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01a      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0204 	bic.w	r2, r2, #4
 8001a5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2208      	movs	r2, #8
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2201      	movs	r2, #1
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d012      	beq.n	8001aaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2204      	movs	r2, #4
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00b      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	2204      	movs	r2, #4
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f043 0204 	orr.w	r2, r3, #4
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d043      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d03c      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2210      	movs	r2, #16
 8001b04:	409a      	lsls	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d018      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d108      	bne.n	8001b38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d024      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
 8001b36:	e01f      	b.n	8001b78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
 8001b48:	e016      	b.n	8001b78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d107      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0208 	bic.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 808f 	beq.w	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8087 	beq.w	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d136      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0216 	bic.w	r2, r2, #22
 8001bc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x1da>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	223f      	movs	r2, #63	; 0x3f
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d07e      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
        }
        return;
 8001c1e:	e079      	b.n	8001d14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01d      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10d      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d031      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
 8001c4c:	e02c      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000
 8001c54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
 8001c68:	e01e      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10f      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0210 	bic.w	r2, r2, #16
 8001c86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d032      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d022      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2205      	movs	r2, #5
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d307      	bcc.n	8001cf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f2      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x2cc>
 8001cee:	e000      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
 8001d12:	e000      	b.n	8001d16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d14:	bf00      	nop
    }
  }
}
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3b10      	subs	r3, #16
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <DMA_CalcBaseAndBitshift+0x60>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <DMA_CalcBaseAndBitshift+0x64>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d908      	bls.n	8001d5c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <DMA_CalcBaseAndBitshift+0x68>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	1d1a      	adds	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
 8001d5a:	e006      	b.n	8001d6a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <DMA_CalcBaseAndBitshift+0x68>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	aaaaaaab 	.word	0xaaaaaaab
 8001d80:	08007f38 	.word	0x08007f38
 8001d84:	fffffc00 	.word	0xfffffc00

08001d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11f      	bne.n	8001de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d856      	bhi.n	8001e56 <DMA_CheckFifoParam+0xce>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <DMA_CheckFifoParam+0x28>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dd3 	.word	0x08001dd3
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001e57 	.word	0x08001e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d046      	beq.n	8001e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd0:	e043      	b.n	8001e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dda:	d140      	bne.n	8001e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de0:	e03d      	b.n	8001e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dea:	d121      	bne.n	8001e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d837      	bhi.n	8001e62 <DMA_CheckFifoParam+0xda>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <DMA_CheckFifoParam+0x70>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e09 	.word	0x08001e09
 8001dfc:	08001e0f 	.word	0x08001e0f
 8001e00:	08001e09 	.word	0x08001e09
 8001e04:	08001e21 	.word	0x08001e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0c:	e030      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1e:	e022      	b.n	8001e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e28:	d11f      	bne.n	8001e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e2e:	e01c      	b.n	8001e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d903      	bls.n	8001e3e <DMA_CheckFifoParam+0xb6>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d003      	beq.n	8001e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e3c:	e018      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      break;
 8001e42:	e015      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
      break;
 8001e54:	e00b      	b.n	8001e6e <DMA_CheckFifoParam+0xe6>
      break;
 8001e56:	bf00      	nop
 8001e58:	e00a      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e008      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e006      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
 8001e64:	e004      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e66:	bf00      	nop
 8001e68:	e002      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e6a:	bf00      	nop
 8001e6c:	e000      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e175      	b.n	800218c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8164 	bne.w	8002186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x56>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80be 	beq.w	8002186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_GPIO_Init+0x324>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002022:	4a61      	ldr	r2, [pc, #388]	; (80021a8 <HAL_GPIO_Init+0x328>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_GPIO_Init+0x32c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d037      	beq.n	80020be <HAL_GPIO_Init+0x23e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_GPIO_Init+0x330>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_GPIO_Init+0x23a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a56      	ldr	r2, [pc, #344]	; (80021b4 <HAL_GPIO_Init+0x334>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <HAL_GPIO_Init+0x236>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_GPIO_Init+0x338>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d025      	beq.n	80020b2 <HAL_GPIO_Init+0x232>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_GPIO_Init+0x33c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_Init+0x22e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_GPIO_Init+0x340>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0x22a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x344>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x348>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_Init+0x222>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_GPIO_Init+0x34c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x21e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x350>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_Init+0x21a>
 8002096:	2309      	movs	r3, #9
 8002098:	e012      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 800209a:	230a      	movs	r3, #10
 800209c:	e010      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00e      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x328>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_GPIO_Init+0x354>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f ae86 	bls.w	8001ea0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40022400 	.word	0x40022400
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fbac 	bl	8000988 <HAL_GPIO_EXTI_Callback>
  }
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	b08f      	sub	sp, #60	; 0x3c
 8002240:	af0a      	add	r7, sp, #40	; 0x28
 8002242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e116      	b.n	800247c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe ff95 	bl	8001198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fefb 	bl	8005088 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	687e      	ldr	r6, [r7, #4]
 800229a:	466d      	mov	r5, sp
 800229c:	f106 0410 	add.w	r4, r6, #16
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b0:	1d33      	adds	r3, r6, #4
 80022b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f002 fe8f 	bl	8004fd8 <USB_CoreInit>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d7      	b.n	800247c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fee9 	bl	80050aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e04a      	b.n	8002374 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	333d      	adds	r3, #61	; 0x3d
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	333c      	adds	r3, #60	; 0x3c
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	b298      	uxth	r0, r3
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	4602      	mov	r2, r0
 800231c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3340      	adds	r3, #64	; 0x40
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3348      	adds	r3, #72	; 0x48
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	334c      	adds	r3, #76	; 0x4c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3354      	adds	r3, #84	; 0x54
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3af      	bcc.n	80022de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e044      	b.n	800240e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3b5      	bcc.n	8002384 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	687e      	ldr	r6, [r7, #4]
 8002420:	466d      	mov	r5, sp
 8002422:	f106 0410 	add.w	r4, r6, #16
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002432:	e885 0003 	stmia.w	r5, {r0, r1}
 8002436:	1d33      	adds	r3, r6, #4
 8002438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243a:	6838      	ldr	r0, [r7, #0]
 800243c:	f002 fe82 	bl	8005144 <USB_DevInit>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e014      	b.n	800247c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f80a 	bl	8002484 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 f840 	bl	80054fa <USB_DevDisconnect>

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002484 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	10000003 	.word	0x10000003

080024cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40007000 	.word	0x40007000

080024ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251a:	f7fe ff31 	bl	8001380 <HAL_GetTick>
 800251e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002520:	e009      	b.n	8002536 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002522:	f7fe ff2d 	bl	8001380 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002530:	d901      	bls.n	8002536 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e022      	b.n	800257c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d1ee      	bne.n	8002522 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002550:	f7fe ff16 	bl	8001380 <HAL_GetTick>
 8002554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002556:	e009      	b.n	800256c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002558:	f7fe ff12 	bl	8001380 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002566:	d901      	bls.n	800256c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e007      	b.n	800257c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002578:	d1ee      	bne.n	8002558 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000

0800258c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e29b      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8087 	beq.w	80026be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b0:	4b96      	ldr	r3, [pc, #600]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025bc:	4b93      	ldr	r3, [pc, #588]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b8d      	ldr	r3, [pc, #564]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06c      	beq.n	80026bc <HAL_RCC_OscConfig+0x130>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d168      	bne.n	80026bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e275      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x7a>
 80025f8:	4b84      	ldr	r3, [pc, #528]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a83      	ldr	r2, [pc, #524]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x9c>
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b7c      	ldr	r3, [pc, #496]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7b      	ldr	r2, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xc0>
 8002632:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a72      	ldr	r2, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fe88 	bl	8001380 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fe84 	bl	8001380 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e229      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fe74 	bl	8001380 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fe70 	bl	8001380 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e215      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	4b57      	ldr	r3, [pc, #348]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x110>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d069      	beq.n	800279e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ca:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x190>
 80026e2:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x17a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1e9      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	493d      	ldr	r1, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	e040      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d023      	beq.n	800276c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fe26 	bl	8001380 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fe22 	bl	8001380 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4929      	ldr	r1, [pc, #164]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
 800276a:	e018      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a26      	ldr	r2, [pc, #152]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fe02 	bl	8001380 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe fdfe 	bl	8001380 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1a3      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d038      	beq.n	800281c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fddf 	bl	8001380 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fddb 	bl	8001380 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e180      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x23a>
 80027e4:	e01a      	b.n	800281c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	4a08      	ldr	r2, [pc, #32]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fdc5 	bl	8001380 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe fdc1 	bl	8001380 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d903      	bls.n	8002810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e166      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
 800280c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ee      	bne.n	80027fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a4 	beq.w	8002972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b8c      	ldr	r3, [pc, #560]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b89      	ldr	r3, [pc, #548]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a88      	ldr	r2, [pc, #544]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b86      	ldr	r3, [pc, #536]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_RCC_OscConfig+0x4d4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800285e:	4b80      	ldr	r3, [pc, #512]	; (8002a60 <HAL_RCC_OscConfig+0x4d4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7f      	ldr	r2, [pc, #508]	; (8002a60 <HAL_RCC_OscConfig+0x4d4>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe fd89 	bl	8001380 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe fd85 	bl	8001380 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e12a      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002884:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_OscConfig+0x4d4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x31a>
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a6f      	ldr	r2, [pc, #444]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e02d      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x33c>
 80028ae:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a6a      	ldr	r2, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a67      	ldr	r2, [pc, #412]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x35e>
 80028d0:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a61      	ldr	r2, [pc, #388]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a5e      	ldr	r2, [pc, #376]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5b      	ldr	r2, [pc, #364]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fd39 	bl	8001380 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fd35 	bl	8001380 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0d8      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x386>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe fd23 	bl	8001380 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fd1f 	bl	8001380 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0c2      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a3c      	ldr	r2, [pc, #240]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80ae 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d06d      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d14b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fcf0 	bl	8001380 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fcec 	bl	8001380 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e091      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	3b01      	subs	r3, #1
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	491b      	ldr	r1, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fcbe 	bl	8001380 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe fcba 	bl	8001380 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e05f      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x47c>
 8002a26:	e057      	b.n	8002ad8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fca4 	bl	8001380 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fca0 	bl	8001380 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4b0>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x54c>
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_RCC_OscConfig+0x558>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d030      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d129      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d122      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d119      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0d0      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d910      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b67      	ldr	r3, [pc, #412]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020f 	bic.w	r2, r3, #15
 8002b16:	4965      	ldr	r1, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	494d      	ldr	r1, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d040      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d115      	bne.n	8002bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e073      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4936      	ldr	r1, [pc, #216]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fbd0 	bl	8001380 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe fbcc 	bl	8001380 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e053      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d210      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 020f 	bic.w	r2, r3, #15
 8002c22:	4922      	ldr	r1, [pc, #136]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e032      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c7a:	f000 f821 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8002c8c:	5ccb      	ldrb	r3, [r1, r3]
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1d4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fb2c 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023c00 	.word	0x40023c00
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08007f20 	.word	0x08007f20
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc4:	b094      	sub	sp, #80	; 0x50
 8002cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ccc:	2300      	movs	r3, #0
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd8:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d00d      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	f200 80e1 	bhi.w	8002eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf2:	e0db      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf8:	e0db      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfe:	e0d8      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d00:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	099b      	lsrs	r3, r3, #6
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d32:	4622      	mov	r2, r4
 8002d34:	462b      	mov	r3, r5
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	0159      	lsls	r1, r3, #5
 8002d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d44:	0150      	lsls	r0, r2, #5
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	1a51      	subs	r1, r2, r1
 8002d4e:	6139      	str	r1, [r7, #16]
 8002d50:	4629      	mov	r1, r5
 8002d52:	eb63 0301 	sbc.w	r3, r3, r1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d64:	4659      	mov	r1, fp
 8002d66:	018b      	lsls	r3, r1, #6
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6e:	4651      	mov	r1, sl
 8002d70:	018a      	lsls	r2, r1, #6
 8002d72:	4651      	mov	r1, sl
 8002d74:	ebb2 0801 	subs.w	r8, r2, r1
 8002d78:	4659      	mov	r1, fp
 8002d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d92:	4690      	mov	r8, r2
 8002d94:	4699      	mov	r9, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	eb18 0303 	adds.w	r3, r8, r3
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	462b      	mov	r3, r5
 8002da0:	eb49 0303 	adc.w	r3, r9, r3
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002db2:	4629      	mov	r1, r5
 8002db4:	024b      	lsls	r3, r1, #9
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	024a      	lsls	r2, r1, #9
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd0:	f7fd fa8e 	bl	80002f0 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ddc:	e058      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	2200      	movs	r2, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	4611      	mov	r1, r2
 8002dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dee:	623b      	str	r3, [r7, #32]
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0159      	lsls	r1, r3, #5
 8002e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0a:	0150      	lsls	r0, r2, #5
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4641      	mov	r1, r8
 8002e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e16:	4649      	mov	r1, r9
 8002e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e30:	ebb2 040a 	subs.w	r4, r2, sl
 8002e34:	eb63 050b 	sbc.w	r5, r3, fp
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	00eb      	lsls	r3, r5, #3
 8002e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e46:	00e2      	lsls	r2, r4, #3
 8002e48:	4614      	mov	r4, r2
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	18e3      	adds	r3, r4, r3
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	464b      	mov	r3, r9
 8002e54:	eb45 0303 	adc.w	r3, r5, r3
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e66:	4629      	mov	r1, r5
 8002e68:	028b      	lsls	r3, r1, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e70:	4621      	mov	r1, r4
 8002e72:	028a      	lsls	r2, r1, #10
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	61fa      	str	r2, [r7, #28]
 8002e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e84:	f7fd fa34 	bl	80002f0 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3750      	adds	r7, #80	; 0x50
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	007a1200 	.word	0x007a1200

08002ecc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee8:	f7ff fff0 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0a9b      	lsrs	r3, r3, #10
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	08007f30 	.word	0x08007f30

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f10:	f7ff ffdc 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0b5b      	lsrs	r3, r3, #13
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	08007f30 	.word	0x08007f30

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d012      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f5c:	4b69      	ldr	r3, [pc, #420]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a68      	ldr	r2, [pc, #416]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	4964      	ldr	r1, [pc, #400]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d017      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f8e:	4b5d      	ldr	r3, [pc, #372]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	4959      	ldr	r1, [pc, #356]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d017      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fca:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	494a      	ldr	r1, [pc, #296]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe8:	d101      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003006:	2301      	movs	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 808b 	beq.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4a39      	ldr	r2, [pc, #228]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6413      	str	r3, [r2, #64]	; 0x40
 8003024:	4b37      	ldr	r3, [pc, #220]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003030:	4b35      	ldr	r3, [pc, #212]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a34      	ldr	r2, [pc, #208]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303c:	f7fe f9a0 	bl	8001380 <HAL_GetTick>
 8003040:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fe f99c 	bl	8001380 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e38f      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d035      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	d02e      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003088:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d114      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f964 	bl	8001380 <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe f960 	bl	8001380 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e351      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ea:	d111      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030fa:	400b      	ands	r3, r1
 80030fc:	4901      	ldr	r1, [pc, #4]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
 8003102:	e00b      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003104:	40023800 	.word	0x40023800
 8003108:	40007000 	.word	0x40007000
 800310c:	0ffffcff 	.word	0x0ffffcff
 8003110:	4bac      	ldr	r3, [pc, #688]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4aab      	ldr	r2, [pc, #684]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003116:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	4ba9      	ldr	r3, [pc, #676]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003128:	49a6      	ldr	r1, [pc, #664]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	4313      	orrs	r3, r2
 800312c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800313a:	4ba2      	ldr	r3, [pc, #648]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	4aa0      	ldr	r2, [pc, #640]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800314a:	4b9e      	ldr	r3, [pc, #632]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	499b      	ldr	r1, [pc, #620]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003168:	4b96      	ldr	r3, [pc, #600]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003176:	4993      	ldr	r1, [pc, #588]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800318a:	4b8e      	ldr	r3, [pc, #568]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003198:	498a      	ldr	r1, [pc, #552]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ac:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ba:	4982      	ldr	r1, [pc, #520]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ce:	4b7d      	ldr	r3, [pc, #500]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4979      	ldr	r1, [pc, #484]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f0:	4b74      	ldr	r3, [pc, #464]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4971      	ldr	r1, [pc, #452]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003212:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f023 020c 	bic.w	r2, r3, #12
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003220:	4968      	ldr	r1, [pc, #416]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003234:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	4960      	ldr	r1, [pc, #384]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003256:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003264:	4957      	ldr	r1, [pc, #348]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003278:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	494f      	ldr	r1, [pc, #316]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4946      	ldr	r1, [pc, #280]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	493e      	ldr	r1, [pc, #248]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330e:	492d      	ldr	r1, [pc, #180]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d011      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003330:	4924      	ldr	r1, [pc, #144]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003352:	2301      	movs	r3, #1
 8003354:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	4914      	ldr	r1, [pc, #80]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003394:	490b      	ldr	r1, [pc, #44]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	4902      	ldr	r1, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033d4:	4b8a      	ldr	r3, [pc, #552]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	4986      	ldr	r1, [pc, #536]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	497d      	ldr	r1, [pc, #500]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d006      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80d6 	beq.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003424:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800342e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003430:	f7fd ffa6 	bl	8001380 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003438:	f7fd ffa2 	bl	8001380 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e195      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800344a:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d021      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11d      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003478:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347e:	0e1b      	lsrs	r3, r3, #24
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	019a      	lsls	r2, r3, #6
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	431a      	orrs	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	4958      	ldr	r1, [pc, #352]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02e      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d0:	d129      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034d2:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034e0:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e6:	0f1b      	lsrs	r3, r3, #28
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	019a      	lsls	r2, r3, #6
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	071b      	lsls	r3, r3, #28
 8003506:	493e      	ldr	r1, [pc, #248]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003514:	f023 021f 	bic.w	r2, r3, #31
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	3b01      	subs	r3, #1
 800351e:	4938      	ldr	r1, [pc, #224]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01d      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003532:	4b33      	ldr	r3, [pc, #204]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003538:	0e1b      	lsrs	r3, r3, #24
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003546:	0f1b      	lsrs	r3, r3, #28
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	019a      	lsls	r2, r3, #6
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	4926      	ldr	r1, [pc, #152]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	071b      	lsls	r3, r3, #28
 8003596:	491a      	ldr	r1, [pc, #104]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fd fee9 	bl	8001380 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035b2:	f7fd fee5 	bl	8001380 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d901      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0d8      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f040 80ce 	bne.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e4:	f7fd fecc 	bl	8001380 <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035ea:	e00b      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035ec:	f7fd fec8 	bl	8001380 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d904      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0bb      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003604:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003610:	d0ec      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02e      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d12a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800363a:	4b51      	ldr	r3, [pc, #324]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003648:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	0f1b      	lsrs	r3, r3, #28
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	019a      	lsls	r2, r3, #6
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	061b      	lsls	r3, r3, #24
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	4944      	ldr	r1, [pc, #272]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	493d      	ldr	r1, [pc, #244]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d022      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a4:	d11d      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	0e1b      	lsrs	r3, r3, #24
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036b4:	4b32      	ldr	r3, [pc, #200]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	0f1b      	lsrs	r3, r3, #28
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	019a      	lsls	r2, r3, #6
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	071b      	lsls	r3, r3, #28
 80036da:	4929      	ldr	r1, [pc, #164]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d028      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	0e1b      	lsrs	r3, r3, #24
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	019a      	lsls	r2, r3, #6
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	071b      	lsls	r3, r3, #28
 8003722:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800372c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	4911      	ldr	r1, [pc, #68]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fd fe18 	bl	8001380 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003754:	f7fd fe14 	bl	8001380 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e007      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003772:	d1ef      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800

08003784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e09d      	b.n	80038d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a6:	d009      	beq.n	80037bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
 80037ae:	e005      	b.n	80037bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd f9ba 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037fc:	d902      	bls.n	8003804 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e002      	b.n	800380a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003808:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003812:	d007      	beq.n	8003824 <HAL_SPI_Init+0xa0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	ea42 0103 	orr.w	r1, r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	f003 0204 	and.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038a0:	ea42 0103 	orr.w	r1, r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e049      	b.n	8003980 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fd fb4f 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f000 f977 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e054      	b.n	8003a4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d01d      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_TIM_Base_Start_IT+0xdc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_TIM_Base_Start_IT+0xe0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_TIM_Base_Start_IT+0xe4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d115      	bne.n	8003a34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_TIM_Base_Start_IT+0xec>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d015      	beq.n	8003a46 <HAL_TIM_Base_Start_IT+0xbe>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d011      	beq.n	8003a46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	e008      	b.n	8003a46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e000      	b.n	8003a48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40001800 	.word	0x40001800
 8003a74:	00010007 	.word	0x00010007

08003a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e0b4      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x186>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_TIM_ConfigClockSource+0x190>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003acc:	d03e      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0xd4>
 8003ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad2:	f200 8087 	bhi.w	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	f000 8086 	beq.w	8003bea <HAL_TIM_ConfigClockSource+0x172>
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae2:	d87f      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d01a      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0xa6>
 8003ae8:	2b70      	cmp	r3, #112	; 0x70
 8003aea:	d87b      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d050      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x11a>
 8003af0:	2b60      	cmp	r3, #96	; 0x60
 8003af2:	d877      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d03c      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xfa>
 8003af8:	2b50      	cmp	r3, #80	; 0x50
 8003afa:	d873      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d058      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d86f      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d064      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b30      	cmp	r3, #48	; 0x30
 8003b0a:	d86b      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d060      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d867      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d05c      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d05a      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b1c:	e062      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f000 f987 	bl	8003e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	609a      	str	r2, [r3, #8]
      break;
 8003b4a:	e04f      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 f970 	bl	8003e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6e:	609a      	str	r2, [r3, #8]
      break;
 8003b70:	e03c      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 f8e4 	bl	8003d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2150      	movs	r1, #80	; 0x50
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f93d 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003b90:	e02c      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 f903 	bl	8003daa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2160      	movs	r1, #96	; 0x60
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f92d 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e01c      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 f8c4 	bl	8003d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2140      	movs	r1, #64	; 0x40
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f91d 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e00c      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f000 f914 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003be2:	e003      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      break;
 8003be8:	e000      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	fffeff88 	.word	0xfffeff88

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a40      	ldr	r2, [pc, #256]	; (8003d20 <TIM_Base_SetConfig+0x114>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2a:	d00f      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3d      	ldr	r2, [pc, #244]	; (8003d24 <TIM_Base_SetConfig+0x118>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3c      	ldr	r2, [pc, #240]	; (8003d28 <TIM_Base_SetConfig+0x11c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <TIM_Base_SetConfig+0x120>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3a      	ldr	r2, [pc, #232]	; (8003d30 <TIM_Base_SetConfig+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <TIM_Base_SetConfig+0x114>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d027      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2c      	ldr	r2, [pc, #176]	; (8003d24 <TIM_Base_SetConfig+0x118>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d023      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <TIM_Base_SetConfig+0x11c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01f      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <TIM_Base_SetConfig+0x120>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <TIM_Base_SetConfig+0x124>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <TIM_Base_SetConfig+0x128>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <TIM_Base_SetConfig+0x130>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <TIM_Base_SetConfig+0x134>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <TIM_Base_SetConfig+0x138>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <TIM_Base_SetConfig+0x114>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <TIM_Base_SetConfig+0x124>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d103      	bne.n	8003d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	615a      	str	r2, [r3, #20]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40014800 	.word	0x40014800
 8003d40:	40001800 	.word	0x40001800
 8003d44:	40001c00 	.word	0x40001c00
 8003d48:	40002000 	.word	0x40002000

08003d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0201 	bic.w	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 030a 	bic.w	r3, r3, #10
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b087      	sub	sp, #28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0210 	bic.w	r2, r3, #16
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	031b      	lsls	r3, r3, #12
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003de6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f043 0307 	orr.w	r3, r3, #7
 8003e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	609a      	str	r2, [r3, #8]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e06d      	b.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ed2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d022      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d01d      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10c      	bne.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40001800 	.word	0x40001800

08003f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e040      	b.n	8004030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd f854 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fb3e 	bl	800465c <UART_SetConfig>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e022      	b.n	8004030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fd96 	bl	8004b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fe1d 	bl	8004c68 <UART_CheckIdleState>
 800402e:	4603      	mov	r3, r0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b0ba      	sub	sp, #232	; 0xe8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800405e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004062:	f640 030f 	movw	r3, #2063	; 0x80f
 8004066:	4013      	ands	r3, r2
 8004068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800406c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d115      	bne.n	80040a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00f      	beq.n	80040a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 82ac 	beq.w	80045ee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
      }
      return;
 800409e:	e2a6      	b.n	80045ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8117 	beq.w	80042d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040ba:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <HAL_UART_IRQHandler+0x298>)
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 810a 	beq.w	80042d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d011      	beq.n	80040f4 <HAL_UART_IRQHandler+0xbc>
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	f043 0201 	orr.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d011      	beq.n	8004124 <HAL_UART_IRQHandler+0xec>
 8004100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2202      	movs	r2, #2
 8004112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <HAL_UART_IRQHandler+0x11c>
 8004130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2204      	movs	r2, #4
 8004142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414a:	f043 0202 	orr.w	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800416c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004170:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2208      	movs	r2, #8
 800417e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004186:	f043 0208 	orr.w	r2, r3, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <HAL_UART_IRQHandler+0x18a>
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8212 	beq.w	80045f2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d005      	beq.n	800421a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800420e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004212:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04f      	beq.n	80042ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fe37 	bl	8004e8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d141      	bne.n	80042b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800425a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800425e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1d9      	bne.n	800422e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427e:	2b00      	cmp	r3, #0
 8004280:	d013      	beq.n	80042aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <HAL_UART_IRQHandler+0x29c>)
 8004288:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd fb98 	bl	80019c4 <HAL_DMA_Abort_IT>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042a4:	4610      	mov	r0, r2
 80042a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	e00f      	b.n	80042ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9b6 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	e00b      	b.n	80042ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9b2 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	e007      	b.n	80042ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9ae 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80042c8:	e193      	b.n	80045f2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ca:	bf00      	nop
    return;
 80042cc:	e191      	b.n	80045f2 <HAL_UART_IRQHandler+0x5ba>
 80042ce:	bf00      	nop
 80042d0:	04000120 	.word	0x04000120
 80042d4:	08004f57 	.word	0x08004f57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 814c 	bne.w	800457a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8145 	beq.w	800457a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 813e 	beq.w	800457a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	f040 80b6 	bne.w	8004482 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004322:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8165 	beq.w	80045f6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004336:	429a      	cmp	r2, r3
 8004338:	f080 815d 	bcs.w	80045f6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004350:	f000 8086 	beq.w	8004460 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800436c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800437e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004382:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800438a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1da      	bne.n	8004354 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e1      	bne.n	800439e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800440c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e3      	bne.n	80043da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004430:	f023 0310 	bic.w	r3, r3, #16
 8004434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004442:	65bb      	str	r3, [r7, #88]	; 0x58
 8004444:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e4      	bne.n	8004420 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fa42 	bl	80018e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004472:	b29b      	uxth	r3, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8d8 	bl	8004630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004480:	e0b9      	b.n	80045f6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800448e:	b29b      	uxth	r3, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80ab 	beq.w	80045fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80044a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80a6 	beq.w	80045fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044d0:	647b      	str	r3, [r7, #68]	; 0x44
 80044d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e4      	bne.n	80044ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	623b      	str	r3, [r7, #32]
   return(result);
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3308      	adds	r3, #8
 8004504:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004508:	633a      	str	r2, [r7, #48]	; 0x30
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800450e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e3      	bne.n	80044e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	60fb      	str	r3, [r7, #12]
   return(result);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f023 0310 	bic.w	r3, r3, #16
 8004544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	69b9      	ldr	r1, [r7, #24]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	617b      	str	r3, [r7, #20]
   return(result);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800456c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004570:	4619      	mov	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f85c 	bl	8004630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004578:	e03f      	b.n	80045fa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <HAL_UART_IRQHandler+0x56c>
 8004586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800459a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f853 	bl	8004648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045a2:	e02d      	b.n	8004600 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01c      	beq.n	80045fe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
    }
    return;
 80045cc:	e017      	b.n	80045fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_UART_IRQHandler+0x5c8>
 80045da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fccb 	bl	8004f82 <UART_EndTransmit_IT>
    return;
 80045ec:	e008      	b.n	8004600 <HAL_UART_IRQHandler+0x5c8>
      return;
 80045ee:	bf00      	nop
 80045f0:	e006      	b.n	8004600 <HAL_UART_IRQHandler+0x5c8>
    return;
 80045f2:	bf00      	nop
 80045f4:	e004      	b.n	8004600 <HAL_UART_IRQHandler+0x5c8>
      return;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <HAL_UART_IRQHandler+0x5c8>
      return;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_UART_IRQHandler+0x5c8>
    return;
 80045fe:	bf00      	nop
  }

}
 8004600:	37e8      	adds	r7, #232	; 0xe8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4ba6      	ldr	r3, [pc, #664]	; (8004920 <UART_SetConfig+0x2c4>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	6979      	ldr	r1, [r7, #20]
 8004690:	430b      	orrs	r3, r1
 8004692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a94      	ldr	r2, [pc, #592]	; (8004924 <UART_SetConfig+0x2c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d120      	bne.n	800471a <UART_SetConfig+0xbe>
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <UART_SetConfig+0x2cc>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d816      	bhi.n	8004714 <UART_SetConfig+0xb8>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x90>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004709 	.word	0x08004709
 80046f4:	08004703 	.word	0x08004703
 80046f8:	0800470f 	.word	0x0800470f
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e150      	b.n	80049a4 <UART_SetConfig+0x348>
 8004702:	2302      	movs	r3, #2
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e14d      	b.n	80049a4 <UART_SetConfig+0x348>
 8004708:	2304      	movs	r3, #4
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e14a      	b.n	80049a4 <UART_SetConfig+0x348>
 800470e:	2308      	movs	r3, #8
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e147      	b.n	80049a4 <UART_SetConfig+0x348>
 8004714:	2310      	movs	r3, #16
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e144      	b.n	80049a4 <UART_SetConfig+0x348>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a83      	ldr	r2, [pc, #524]	; (800492c <UART_SetConfig+0x2d0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d132      	bne.n	800478a <UART_SetConfig+0x12e>
 8004724:	4b80      	ldr	r3, [pc, #512]	; (8004928 <UART_SetConfig+0x2cc>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d828      	bhi.n	8004784 <UART_SetConfig+0x128>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0xdc>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	08004785 	.word	0x08004785
 8004740:	08004785 	.word	0x08004785
 8004744:	08004785 	.word	0x08004785
 8004748:	08004779 	.word	0x08004779
 800474c:	08004785 	.word	0x08004785
 8004750:	08004785 	.word	0x08004785
 8004754:	08004785 	.word	0x08004785
 8004758:	08004773 	.word	0x08004773
 800475c:	08004785 	.word	0x08004785
 8004760:	08004785 	.word	0x08004785
 8004764:	08004785 	.word	0x08004785
 8004768:	0800477f 	.word	0x0800477f
 800476c:	2300      	movs	r3, #0
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e118      	b.n	80049a4 <UART_SetConfig+0x348>
 8004772:	2302      	movs	r3, #2
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e115      	b.n	80049a4 <UART_SetConfig+0x348>
 8004778:	2304      	movs	r3, #4
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e112      	b.n	80049a4 <UART_SetConfig+0x348>
 800477e:	2308      	movs	r3, #8
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e10f      	b.n	80049a4 <UART_SetConfig+0x348>
 8004784:	2310      	movs	r3, #16
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e10c      	b.n	80049a4 <UART_SetConfig+0x348>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a68      	ldr	r2, [pc, #416]	; (8004930 <UART_SetConfig+0x2d4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d120      	bne.n	80047d6 <UART_SetConfig+0x17a>
 8004794:	4b64      	ldr	r3, [pc, #400]	; (8004928 <UART_SetConfig+0x2cc>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d013      	beq.n	80047ca <UART_SetConfig+0x16e>
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d814      	bhi.n	80047d0 <UART_SetConfig+0x174>
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d009      	beq.n	80047be <UART_SetConfig+0x162>
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d810      	bhi.n	80047d0 <UART_SetConfig+0x174>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <UART_SetConfig+0x15c>
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d006      	beq.n	80047c4 <UART_SetConfig+0x168>
 80047b6:	e00b      	b.n	80047d0 <UART_SetConfig+0x174>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e0f2      	b.n	80049a4 <UART_SetConfig+0x348>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e0ef      	b.n	80049a4 <UART_SetConfig+0x348>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e0ec      	b.n	80049a4 <UART_SetConfig+0x348>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e0e9      	b.n	80049a4 <UART_SetConfig+0x348>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e0e6      	b.n	80049a4 <UART_SetConfig+0x348>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a56      	ldr	r2, [pc, #344]	; (8004934 <UART_SetConfig+0x2d8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d120      	bne.n	8004822 <UART_SetConfig+0x1c6>
 80047e0:	4b51      	ldr	r3, [pc, #324]	; (8004928 <UART_SetConfig+0x2cc>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ea:	2bc0      	cmp	r3, #192	; 0xc0
 80047ec:	d013      	beq.n	8004816 <UART_SetConfig+0x1ba>
 80047ee:	2bc0      	cmp	r3, #192	; 0xc0
 80047f0:	d814      	bhi.n	800481c <UART_SetConfig+0x1c0>
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d009      	beq.n	800480a <UART_SetConfig+0x1ae>
 80047f6:	2b80      	cmp	r3, #128	; 0x80
 80047f8:	d810      	bhi.n	800481c <UART_SetConfig+0x1c0>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <UART_SetConfig+0x1a8>
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d006      	beq.n	8004810 <UART_SetConfig+0x1b4>
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x1c0>
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0cc      	b.n	80049a4 <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0c9      	b.n	80049a4 <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0c6      	b.n	80049a4 <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e0c3      	b.n	80049a4 <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e0c0      	b.n	80049a4 <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a44      	ldr	r2, [pc, #272]	; (8004938 <UART_SetConfig+0x2dc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d125      	bne.n	8004878 <UART_SetConfig+0x21c>
 800482c:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483a:	d017      	beq.n	800486c <UART_SetConfig+0x210>
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d817      	bhi.n	8004872 <UART_SetConfig+0x216>
 8004842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004846:	d00b      	beq.n	8004860 <UART_SetConfig+0x204>
 8004848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484c:	d811      	bhi.n	8004872 <UART_SetConfig+0x216>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <UART_SetConfig+0x1fe>
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	d006      	beq.n	8004866 <UART_SetConfig+0x20a>
 8004858:	e00b      	b.n	8004872 <UART_SetConfig+0x216>
 800485a:	2300      	movs	r3, #0
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e0a1      	b.n	80049a4 <UART_SetConfig+0x348>
 8004860:	2302      	movs	r3, #2
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e09e      	b.n	80049a4 <UART_SetConfig+0x348>
 8004866:	2304      	movs	r3, #4
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e09b      	b.n	80049a4 <UART_SetConfig+0x348>
 800486c:	2308      	movs	r3, #8
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e098      	b.n	80049a4 <UART_SetConfig+0x348>
 8004872:	2310      	movs	r3, #16
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e095      	b.n	80049a4 <UART_SetConfig+0x348>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <UART_SetConfig+0x2e0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d125      	bne.n	80048ce <UART_SetConfig+0x272>
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <UART_SetConfig+0x2cc>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800488c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004890:	d017      	beq.n	80048c2 <UART_SetConfig+0x266>
 8004892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004896:	d817      	bhi.n	80048c8 <UART_SetConfig+0x26c>
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489c:	d00b      	beq.n	80048b6 <UART_SetConfig+0x25a>
 800489e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a2:	d811      	bhi.n	80048c8 <UART_SetConfig+0x26c>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <UART_SetConfig+0x254>
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	d006      	beq.n	80048bc <UART_SetConfig+0x260>
 80048ae:	e00b      	b.n	80048c8 <UART_SetConfig+0x26c>
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e076      	b.n	80049a4 <UART_SetConfig+0x348>
 80048b6:	2302      	movs	r3, #2
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e073      	b.n	80049a4 <UART_SetConfig+0x348>
 80048bc:	2304      	movs	r3, #4
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e070      	b.n	80049a4 <UART_SetConfig+0x348>
 80048c2:	2308      	movs	r3, #8
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e06d      	b.n	80049a4 <UART_SetConfig+0x348>
 80048c8:	2310      	movs	r3, #16
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e06a      	b.n	80049a4 <UART_SetConfig+0x348>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <UART_SetConfig+0x2e4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d138      	bne.n	800494a <UART_SetConfig+0x2ee>
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <UART_SetConfig+0x2cc>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e6:	d017      	beq.n	8004918 <UART_SetConfig+0x2bc>
 80048e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048ec:	d82a      	bhi.n	8004944 <UART_SetConfig+0x2e8>
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	d00b      	beq.n	800490c <UART_SetConfig+0x2b0>
 80048f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f8:	d824      	bhi.n	8004944 <UART_SetConfig+0x2e8>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <UART_SetConfig+0x2aa>
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d006      	beq.n	8004912 <UART_SetConfig+0x2b6>
 8004904:	e01e      	b.n	8004944 <UART_SetConfig+0x2e8>
 8004906:	2300      	movs	r3, #0
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e04b      	b.n	80049a4 <UART_SetConfig+0x348>
 800490c:	2302      	movs	r3, #2
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e048      	b.n	80049a4 <UART_SetConfig+0x348>
 8004912:	2304      	movs	r3, #4
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e045      	b.n	80049a4 <UART_SetConfig+0x348>
 8004918:	2308      	movs	r3, #8
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e042      	b.n	80049a4 <UART_SetConfig+0x348>
 800491e:	bf00      	nop
 8004920:	efff69f3 	.word	0xefff69f3
 8004924:	40011000 	.word	0x40011000
 8004928:	40023800 	.word	0x40023800
 800492c:	40004400 	.word	0x40004400
 8004930:	40004800 	.word	0x40004800
 8004934:	40004c00 	.word	0x40004c00
 8004938:	40005000 	.word	0x40005000
 800493c:	40011400 	.word	0x40011400
 8004940:	40007800 	.word	0x40007800
 8004944:	2310      	movs	r3, #16
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e02c      	b.n	80049a4 <UART_SetConfig+0x348>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <UART_SetConfig+0x4bc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d125      	bne.n	80049a0 <UART_SetConfig+0x344>
 8004954:	4b71      	ldr	r3, [pc, #452]	; (8004b1c <UART_SetConfig+0x4c0>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800495e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004962:	d017      	beq.n	8004994 <UART_SetConfig+0x338>
 8004964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004968:	d817      	bhi.n	800499a <UART_SetConfig+0x33e>
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d00b      	beq.n	8004988 <UART_SetConfig+0x32c>
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d811      	bhi.n	800499a <UART_SetConfig+0x33e>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <UART_SetConfig+0x326>
 800497a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497e:	d006      	beq.n	800498e <UART_SetConfig+0x332>
 8004980:	e00b      	b.n	800499a <UART_SetConfig+0x33e>
 8004982:	2300      	movs	r3, #0
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e00d      	b.n	80049a4 <UART_SetConfig+0x348>
 8004988:	2302      	movs	r3, #2
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e00a      	b.n	80049a4 <UART_SetConfig+0x348>
 800498e:	2304      	movs	r3, #4
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e007      	b.n	80049a4 <UART_SetConfig+0x348>
 8004994:	2308      	movs	r3, #8
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e004      	b.n	80049a4 <UART_SetConfig+0x348>
 800499a:	2310      	movs	r3, #16
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e001      	b.n	80049a4 <UART_SetConfig+0x348>
 80049a0:	2310      	movs	r3, #16
 80049a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	d15b      	bne.n	8004a66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049ae:	7ffb      	ldrb	r3, [r7, #31]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d828      	bhi.n	8004a06 <UART_SetConfig+0x3aa>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x360>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a07 	.word	0x08004a07
 80049cc:	080049f7 	.word	0x080049f7
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a07 	.word	0x08004a07
 80049d8:	08004a07 	.word	0x08004a07
 80049dc:	080049ff 	.word	0x080049ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe fa80 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61b8      	str	r0, [r7, #24]
        break;
 80049e6:	e013      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fe fa90 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e00f      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f0:	4b4b      	ldr	r3, [pc, #300]	; (8004b20 <UART_SetConfig+0x4c4>)
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fe f963 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 80049fa:	61b8      	str	r0, [r7, #24]
        break;
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	61bb      	str	r3, [r7, #24]
        break;
 8004a04:	e004      	b.n	8004a10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d074      	beq.n	8004b00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	005a      	lsls	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	d916      	bls.n	8004a60 <UART_SetConfig+0x404>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d212      	bcs.n	8004a60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f023 030f 	bic.w	r3, r3, #15
 8004a42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	89fb      	ldrh	r3, [r7, #14]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	89fa      	ldrh	r2, [r7, #14]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e04f      	b.n	8004b00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	77bb      	strb	r3, [r7, #30]
 8004a64:	e04c      	b.n	8004b00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d828      	bhi.n	8004abe <UART_SetConfig+0x462>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x418>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe fa24 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	61b8      	str	r0, [r7, #24]
        break;
 8004a9e:	e013      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fe fa34 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8004aa4:	61b8      	str	r0, [r7, #24]
        break;
 8004aa6:	e00f      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <UART_SetConfig+0x4c4>)
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e00c      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fe f907 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8004ab2:	61b8      	str	r0, [r7, #24]
        break;
 8004ab4:	e008      	b.n	8004ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	61bb      	str	r3, [r7, #24]
        break;
 8004abc:	e004      	b.n	8004ac8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	085a      	lsrs	r2, r3, #1
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d909      	bls.n	8004afc <UART_SetConfig+0x4a0>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aee:	d205      	bcs.n	8004afc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e001      	b.n	8004b00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40007c00 	.word	0x40007c00
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	00f42400 	.word	0x00f42400

08004b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c22:	d10a      	bne.n	8004c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c78:	f7fc fb82 	bl	8001380 <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d10e      	bne.n	8004caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f831 	bl	8004d02 <UART_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e027      	b.n	8004cfa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d10e      	bne.n	8004cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f81b 	bl	8004d02 <UART_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e011      	b.n	8004cfa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b09c      	sub	sp, #112	; 0x70
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d12:	e0a7      	b.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	f000 80a3 	beq.w	8004e64 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1e:	f7fc fb2f 	bl	8001380 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d302      	bcc.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d13f      	bne.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d48:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e5      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e068      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d050      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd0:	d148      	bne.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e2e:	623a      	str	r2, [r7, #32]
 8004e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e010      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	f43f af48 	beq.w	8004d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3770      	adds	r7, #112	; 0x70
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b095      	sub	sp, #84	; 0x54
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d118      	bne.n	8004f36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f4a:	bf00      	nop
 8004f4c:	3754      	adds	r7, #84	; 0x54
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fb51 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b088      	sub	sp, #32
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6979      	ldr	r1, [r7, #20]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fb1d 	bl	8004608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fce:	bf00      	nop
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd8:	b084      	sub	sp, #16
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	f107 001c 	add.w	r0, r7, #28
 8004fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d120      	bne.n	8005032 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <USB_CoreInit+0xac>)
 8005002:	4013      	ands	r3, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d105      	bne.n	8005026 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa96 	bl	8005558 <USB_CoreReset>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
 8005030:	e010      	b.n	8005054 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa8a 	bl	8005558 <USB_CoreReset>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	2b01      	cmp	r3, #1
 8005058:	d10b      	bne.n	8005072 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f043 0206 	orr.w	r2, r3, #6
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800507e:	b004      	add	sp, #16
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	ffbdffbf 	.word	0xffbdffbf

08005088 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 0201 	bic.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	460b      	mov	r3, r1
 80050b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d115      	bne.n	80050f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050d8:	2001      	movs	r0, #1
 80050da:	f7fc f95d 	bl	8001398 <HAL_Delay>
      ms++;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fa29 	bl	800553c <USB_GetMode>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d01e      	beq.n	800512e <USB_SetCurrentMode+0x84>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b31      	cmp	r3, #49	; 0x31
 80050f4:	d9f0      	bls.n	80050d8 <USB_SetCurrentMode+0x2e>
 80050f6:	e01a      	b.n	800512e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d115      	bne.n	800512a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800510a:	2001      	movs	r0, #1
 800510c:	f7fc f944 	bl	8001398 <HAL_Delay>
      ms++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3301      	adds	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa10 	bl	800553c <USB_GetMode>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <USB_SetCurrentMode+0x84>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b31      	cmp	r3, #49	; 0x31
 8005126:	d9f0      	bls.n	800510a <USB_SetCurrentMode+0x60>
 8005128:	e001      	b.n	800512e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e005      	b.n	800513a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b32      	cmp	r3, #50	; 0x32
 8005132:	d101      	bne.n	8005138 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005144:	b084      	sub	sp, #16
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e009      	b.n	8005178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3340      	adds	r3, #64	; 0x40
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	2200      	movs	r2, #0
 8005170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3301      	adds	r3, #1
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b0e      	cmp	r3, #14
 800517c:	d9f2      	bls.n	8005164 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11c      	bne.n	80051be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e005      	b.n	80051ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051dc:	4619      	mov	r1, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	461a      	mov	r2, r3
 80051e6:	680b      	ldr	r3, [r1, #0]
 80051e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051f6:	2100      	movs	r1, #0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f965 	bl	80054c8 <USB_SetDevSpeed>
 80051fe:	e008      	b.n	8005212 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f960 	bl	80054c8 <USB_SetDevSpeed>
 8005208:	e003      	b.n	8005212 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800520a:	2103      	movs	r1, #3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f95b 	bl	80054c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005212:	2110      	movs	r1, #16
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8f3 	bl	8005400 <USB_FlushTxFifo>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f91f 	bl	8005468 <USB_FlushRxFifo>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e043      	b.n	80052e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d118      	bne.n	80052a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e013      	b.n	80052ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e008      	b.n	80052ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3301      	adds	r3, #1
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3b7      	bcc.n	800525e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e043      	b.n	800537c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530a:	d118      	bne.n	800533e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e013      	b.n	8005350 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e008      	b.n	8005350 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3b7      	bcc.n	80052f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f043 0210 	orr.w	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <USB_DevInit+0x2b4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f043 0208 	orr.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <USB_DevInit+0x2b8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f4:	b004      	add	sp, #16
 80053f6:	4770      	bx	lr
 80053f8:	803c3800 	.word	0x803c3800
 80053fc:	40000004 	.word	0x40000004

08005400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <USB_FlushTxFifo+0x64>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e01b      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	daf2      	bge.n	800540e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <USB_FlushTxFifo+0x64>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e006      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d0f0      	beq.n	8005438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	00030d40 	.word	0x00030d40

08005468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <USB_FlushRxFifo+0x5c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e018      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2210      	movs	r2, #16
 8005496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <USB_FlushRxFifo+0x5c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d0f0      	beq.n	8005498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005514:	f023 0303 	bic.w	r3, r3, #3
 8005518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0301 	and.w	r3, r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <USB_CoreReset+0x64>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e01b      	b.n	80055ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	daf2      	bge.n	8005564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <USB_CoreReset+0x64>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e006      	b.n	80055ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d0f0      	beq.n	800558e <USB_CoreReset+0x36>

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	00030d40 	.word	0x00030d40

080055c0 <__errno>:
 80055c0:	4b01      	ldr	r3, [pc, #4]	; (80055c8 <__errno+0x8>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	2000000c 	.word	0x2000000c

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4d0d      	ldr	r5, [pc, #52]	; (8005604 <__libc_init_array+0x38>)
 80055d0:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <__libc_init_array+0x3c>)
 80055d2:	1b64      	subs	r4, r4, r5
 80055d4:	10a4      	asrs	r4, r4, #2
 80055d6:	2600      	movs	r6, #0
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	4d0b      	ldr	r5, [pc, #44]	; (800560c <__libc_init_array+0x40>)
 80055de:	4c0c      	ldr	r4, [pc, #48]	; (8005610 <__libc_init_array+0x44>)
 80055e0:	f002 fc90 	bl	8007f04 <_init>
 80055e4:	1b64      	subs	r4, r4, r5
 80055e6:	10a4      	asrs	r4, r4, #2
 80055e8:	2600      	movs	r6, #0
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	08008324 	.word	0x08008324
 8005608:	08008324 	.word	0x08008324
 800560c:	08008324 	.word	0x08008324
 8005610:	08008328 	.word	0x08008328

08005614 <memcpy>:
 8005614:	440a      	add	r2, r1
 8005616:	4291      	cmp	r1, r2
 8005618:	f100 33ff 	add.w	r3, r0, #4294967295
 800561c:	d100      	bne.n	8005620 <memcpy+0xc>
 800561e:	4770      	bx	lr
 8005620:	b510      	push	{r4, lr}
 8005622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562a:	4291      	cmp	r1, r2
 800562c:	d1f9      	bne.n	8005622 <memcpy+0xe>
 800562e:	bd10      	pop	{r4, pc}

08005630 <memset>:
 8005630:	4402      	add	r2, r0
 8005632:	4603      	mov	r3, r0
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	f803 1b01 	strb.w	r1, [r3], #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <__cvt>:
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	ed2d 8b02 	vpush	{d8}
 8005646:	eeb0 8b40 	vmov.f64	d8, d0
 800564a:	b085      	sub	sp, #20
 800564c:	4617      	mov	r7, r2
 800564e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005650:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005652:	ee18 2a90 	vmov	r2, s17
 8005656:	f025 0520 	bic.w	r5, r5, #32
 800565a:	2a00      	cmp	r2, #0
 800565c:	bfb6      	itet	lt
 800565e:	222d      	movlt	r2, #45	; 0x2d
 8005660:	2200      	movge	r2, #0
 8005662:	eeb1 8b40 	vneglt.f64	d8, d0
 8005666:	2d46      	cmp	r5, #70	; 0x46
 8005668:	460c      	mov	r4, r1
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	d004      	beq.n	8005678 <__cvt+0x38>
 800566e:	2d45      	cmp	r5, #69	; 0x45
 8005670:	d100      	bne.n	8005674 <__cvt+0x34>
 8005672:	3401      	adds	r4, #1
 8005674:	2102      	movs	r1, #2
 8005676:	e000      	b.n	800567a <__cvt+0x3a>
 8005678:	2103      	movs	r1, #3
 800567a:	ab03      	add	r3, sp, #12
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	ab02      	add	r3, sp, #8
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	4622      	mov	r2, r4
 8005684:	4633      	mov	r3, r6
 8005686:	eeb0 0b48 	vmov.f64	d0, d8
 800568a:	f000 fca9 	bl	8005fe0 <_dtoa_r>
 800568e:	2d47      	cmp	r5, #71	; 0x47
 8005690:	d101      	bne.n	8005696 <__cvt+0x56>
 8005692:	07fb      	lsls	r3, r7, #31
 8005694:	d51a      	bpl.n	80056cc <__cvt+0x8c>
 8005696:	2d46      	cmp	r5, #70	; 0x46
 8005698:	eb00 0204 	add.w	r2, r0, r4
 800569c:	d10c      	bne.n	80056b8 <__cvt+0x78>
 800569e:	7803      	ldrb	r3, [r0, #0]
 80056a0:	2b30      	cmp	r3, #48	; 0x30
 80056a2:	d107      	bne.n	80056b4 <__cvt+0x74>
 80056a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	bf1c      	itt	ne
 80056ae:	f1c4 0401 	rsbne	r4, r4, #1
 80056b2:	6034      	strne	r4, [r6, #0]
 80056b4:	6833      	ldr	r3, [r6, #0]
 80056b6:	441a      	add	r2, r3
 80056b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80056bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c0:	bf08      	it	eq
 80056c2:	9203      	streq	r2, [sp, #12]
 80056c4:	2130      	movs	r1, #48	; 0x30
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d307      	bcc.n	80056dc <__cvt+0x9c>
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056d0:	1a1b      	subs	r3, r3, r0
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	b005      	add	sp, #20
 80056d6:	ecbd 8b02 	vpop	{d8}
 80056da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056dc:	1c5c      	adds	r4, r3, #1
 80056de:	9403      	str	r4, [sp, #12]
 80056e0:	7019      	strb	r1, [r3, #0]
 80056e2:	e7f0      	b.n	80056c6 <__cvt+0x86>

080056e4 <__exponent>:
 80056e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056e6:	4603      	mov	r3, r0
 80056e8:	2900      	cmp	r1, #0
 80056ea:	bfb8      	it	lt
 80056ec:	4249      	neglt	r1, r1
 80056ee:	f803 2b02 	strb.w	r2, [r3], #2
 80056f2:	bfb4      	ite	lt
 80056f4:	222d      	movlt	r2, #45	; 0x2d
 80056f6:	222b      	movge	r2, #43	; 0x2b
 80056f8:	2909      	cmp	r1, #9
 80056fa:	7042      	strb	r2, [r0, #1]
 80056fc:	dd2a      	ble.n	8005754 <__exponent+0x70>
 80056fe:	f10d 0407 	add.w	r4, sp, #7
 8005702:	46a4      	mov	ip, r4
 8005704:	270a      	movs	r7, #10
 8005706:	46a6      	mov	lr, r4
 8005708:	460a      	mov	r2, r1
 800570a:	fb91 f6f7 	sdiv	r6, r1, r7
 800570e:	fb07 1516 	mls	r5, r7, r6, r1
 8005712:	3530      	adds	r5, #48	; 0x30
 8005714:	2a63      	cmp	r2, #99	; 0x63
 8005716:	f104 34ff 	add.w	r4, r4, #4294967295
 800571a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800571e:	4631      	mov	r1, r6
 8005720:	dcf1      	bgt.n	8005706 <__exponent+0x22>
 8005722:	3130      	adds	r1, #48	; 0x30
 8005724:	f1ae 0502 	sub.w	r5, lr, #2
 8005728:	f804 1c01 	strb.w	r1, [r4, #-1]
 800572c:	1c44      	adds	r4, r0, #1
 800572e:	4629      	mov	r1, r5
 8005730:	4561      	cmp	r1, ip
 8005732:	d30a      	bcc.n	800574a <__exponent+0x66>
 8005734:	f10d 0209 	add.w	r2, sp, #9
 8005738:	eba2 020e 	sub.w	r2, r2, lr
 800573c:	4565      	cmp	r5, ip
 800573e:	bf88      	it	hi
 8005740:	2200      	movhi	r2, #0
 8005742:	4413      	add	r3, r2
 8005744:	1a18      	subs	r0, r3, r0
 8005746:	b003      	add	sp, #12
 8005748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800574a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800574e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005752:	e7ed      	b.n	8005730 <__exponent+0x4c>
 8005754:	2330      	movs	r3, #48	; 0x30
 8005756:	3130      	adds	r1, #48	; 0x30
 8005758:	7083      	strb	r3, [r0, #2]
 800575a:	70c1      	strb	r1, [r0, #3]
 800575c:	1d03      	adds	r3, r0, #4
 800575e:	e7f1      	b.n	8005744 <__exponent+0x60>

08005760 <_printf_float>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	b08b      	sub	sp, #44	; 0x2c
 8005766:	460c      	mov	r4, r1
 8005768:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800576c:	4616      	mov	r6, r2
 800576e:	461f      	mov	r7, r3
 8005770:	4605      	mov	r5, r0
 8005772:	f001 f9a3 	bl	8006abc <_localeconv_r>
 8005776:	f8d0 b000 	ldr.w	fp, [r0]
 800577a:	4658      	mov	r0, fp
 800577c:	f7fa fd60 	bl	8000240 <strlen>
 8005780:	2300      	movs	r3, #0
 8005782:	9308      	str	r3, [sp, #32]
 8005784:	f8d8 3000 	ldr.w	r3, [r8]
 8005788:	f894 9018 	ldrb.w	r9, [r4, #24]
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	3307      	adds	r3, #7
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	f103 0108 	add.w	r1, r3, #8
 8005798:	f8c8 1000 	str.w	r1, [r8]
 800579c:	4682      	mov	sl, r0
 800579e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80057a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005a08 <_printf_float+0x2a8>
 80057aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80057ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80057b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80057b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ba:	dd24      	ble.n	8005806 <_printf_float+0xa6>
 80057bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80057c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c4:	d502      	bpl.n	80057cc <_printf_float+0x6c>
 80057c6:	232d      	movs	r3, #45	; 0x2d
 80057c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057cc:	4b90      	ldr	r3, [pc, #576]	; (8005a10 <_printf_float+0x2b0>)
 80057ce:	4891      	ldr	r0, [pc, #580]	; (8005a14 <_printf_float+0x2b4>)
 80057d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80057d4:	bf94      	ite	ls
 80057d6:	4698      	movls	r8, r3
 80057d8:	4680      	movhi	r8, r0
 80057da:	2303      	movs	r3, #3
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	2300      	movs	r3, #0
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	9700      	str	r7, [sp, #0]
 80057ea:	4633      	mov	r3, r6
 80057ec:	aa09      	add	r2, sp, #36	; 0x24
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f9d3 	bl	8005b9c <_printf_common>
 80057f6:	3001      	adds	r0, #1
 80057f8:	f040 808a 	bne.w	8005910 <_printf_float+0x1b0>
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	b00b      	add	sp, #44	; 0x2c
 8005802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005806:	eeb4 0b40 	vcmp.f64	d0, d0
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	d709      	bvc.n	8005824 <_printf_float+0xc4>
 8005810:	ee10 3a90 	vmov	r3, s1
 8005814:	2b00      	cmp	r3, #0
 8005816:	bfbc      	itt	lt
 8005818:	232d      	movlt	r3, #45	; 0x2d
 800581a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800581e:	487e      	ldr	r0, [pc, #504]	; (8005a18 <_printf_float+0x2b8>)
 8005820:	4b7e      	ldr	r3, [pc, #504]	; (8005a1c <_printf_float+0x2bc>)
 8005822:	e7d5      	b.n	80057d0 <_printf_float+0x70>
 8005824:	6863      	ldr	r3, [r4, #4]
 8005826:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800582a:	9104      	str	r1, [sp, #16]
 800582c:	1c59      	adds	r1, r3, #1
 800582e:	d13c      	bne.n	80058aa <_printf_float+0x14a>
 8005830:	2306      	movs	r3, #6
 8005832:	6063      	str	r3, [r4, #4]
 8005834:	2300      	movs	r3, #0
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	ab08      	add	r3, sp, #32
 800583a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800583e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005842:	ab07      	add	r3, sp, #28
 8005844:	6861      	ldr	r1, [r4, #4]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	f10d 031b 	add.w	r3, sp, #27
 800584e:	4628      	mov	r0, r5
 8005850:	f7ff fef6 	bl	8005640 <__cvt>
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	9907      	ldr	r1, [sp, #28]
 8005858:	2b47      	cmp	r3, #71	; 0x47
 800585a:	4680      	mov	r8, r0
 800585c:	d108      	bne.n	8005870 <_printf_float+0x110>
 800585e:	1cc8      	adds	r0, r1, #3
 8005860:	db02      	blt.n	8005868 <_printf_float+0x108>
 8005862:	6863      	ldr	r3, [r4, #4]
 8005864:	4299      	cmp	r1, r3
 8005866:	dd41      	ble.n	80058ec <_printf_float+0x18c>
 8005868:	f1a9 0902 	sub.w	r9, r9, #2
 800586c:	fa5f f989 	uxtb.w	r9, r9
 8005870:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005874:	d820      	bhi.n	80058b8 <_printf_float+0x158>
 8005876:	3901      	subs	r1, #1
 8005878:	464a      	mov	r2, r9
 800587a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800587e:	9107      	str	r1, [sp, #28]
 8005880:	f7ff ff30 	bl	80056e4 <__exponent>
 8005884:	9a08      	ldr	r2, [sp, #32]
 8005886:	9004      	str	r0, [sp, #16]
 8005888:	1813      	adds	r3, r2, r0
 800588a:	2a01      	cmp	r2, #1
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	dc02      	bgt.n	8005896 <_printf_float+0x136>
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	07d2      	lsls	r2, r2, #31
 8005894:	d501      	bpl.n	800589a <_printf_float+0x13a>
 8005896:	3301      	adds	r3, #1
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0a2      	beq.n	80057e8 <_printf_float+0x88>
 80058a2:	232d      	movs	r3, #45	; 0x2d
 80058a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a8:	e79e      	b.n	80057e8 <_printf_float+0x88>
 80058aa:	9904      	ldr	r1, [sp, #16]
 80058ac:	2947      	cmp	r1, #71	; 0x47
 80058ae:	d1c1      	bne.n	8005834 <_printf_float+0xd4>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1bf      	bne.n	8005834 <_printf_float+0xd4>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e7bc      	b.n	8005832 <_printf_float+0xd2>
 80058b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80058bc:	d118      	bne.n	80058f0 <_printf_float+0x190>
 80058be:	2900      	cmp	r1, #0
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	dd0b      	ble.n	80058dc <_printf_float+0x17c>
 80058c4:	6121      	str	r1, [r4, #16]
 80058c6:	b913      	cbnz	r3, 80058ce <_printf_float+0x16e>
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	07d0      	lsls	r0, r2, #31
 80058cc:	d502      	bpl.n	80058d4 <_printf_float+0x174>
 80058ce:	3301      	adds	r3, #1
 80058d0:	440b      	add	r3, r1
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	2300      	movs	r3, #0
 80058d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	e7de      	b.n	800589a <_printf_float+0x13a>
 80058dc:	b913      	cbnz	r3, 80058e4 <_printf_float+0x184>
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	07d2      	lsls	r2, r2, #31
 80058e2:	d501      	bpl.n	80058e8 <_printf_float+0x188>
 80058e4:	3302      	adds	r3, #2
 80058e6:	e7f4      	b.n	80058d2 <_printf_float+0x172>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e7f2      	b.n	80058d2 <_printf_float+0x172>
 80058ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	4299      	cmp	r1, r3
 80058f4:	db05      	blt.n	8005902 <_printf_float+0x1a2>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	6121      	str	r1, [r4, #16]
 80058fa:	07d8      	lsls	r0, r3, #31
 80058fc:	d5ea      	bpl.n	80058d4 <_printf_float+0x174>
 80058fe:	1c4b      	adds	r3, r1, #1
 8005900:	e7e7      	b.n	80058d2 <_printf_float+0x172>
 8005902:	2900      	cmp	r1, #0
 8005904:	bfd4      	ite	le
 8005906:	f1c1 0202 	rsble	r2, r1, #2
 800590a:	2201      	movgt	r2, #1
 800590c:	4413      	add	r3, r2
 800590e:	e7e0      	b.n	80058d2 <_printf_float+0x172>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	055a      	lsls	r2, r3, #21
 8005914:	d407      	bmi.n	8005926 <_printf_float+0x1c6>
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	4642      	mov	r2, r8
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	47b8      	blx	r7
 8005920:	3001      	adds	r0, #1
 8005922:	d12a      	bne.n	800597a <_printf_float+0x21a>
 8005924:	e76a      	b.n	80057fc <_printf_float+0x9c>
 8005926:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800592a:	f240 80e2 	bls.w	8005af2 <_printf_float+0x392>
 800592e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593a:	d133      	bne.n	80059a4 <_printf_float+0x244>
 800593c:	4a38      	ldr	r2, [pc, #224]	; (8005a20 <_printf_float+0x2c0>)
 800593e:	2301      	movs	r3, #1
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	f43f af58 	beq.w	80057fc <_printf_float+0x9c>
 800594c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	db02      	blt.n	800595a <_printf_float+0x1fa>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07d8      	lsls	r0, r3, #31
 8005958:	d50f      	bpl.n	800597a <_printf_float+0x21a>
 800595a:	4653      	mov	r3, sl
 800595c:	465a      	mov	r2, fp
 800595e:	4631      	mov	r1, r6
 8005960:	4628      	mov	r0, r5
 8005962:	47b8      	blx	r7
 8005964:	3001      	adds	r0, #1
 8005966:	f43f af49 	beq.w	80057fc <_printf_float+0x9c>
 800596a:	f04f 0800 	mov.w	r8, #0
 800596e:	f104 091a 	add.w	r9, r4, #26
 8005972:	9b08      	ldr	r3, [sp, #32]
 8005974:	3b01      	subs	r3, #1
 8005976:	4543      	cmp	r3, r8
 8005978:	dc09      	bgt.n	800598e <_printf_float+0x22e>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	079b      	lsls	r3, r3, #30
 800597e:	f100 8108 	bmi.w	8005b92 <_printf_float+0x432>
 8005982:	68e0      	ldr	r0, [r4, #12]
 8005984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005986:	4298      	cmp	r0, r3
 8005988:	bfb8      	it	lt
 800598a:	4618      	movlt	r0, r3
 800598c:	e738      	b.n	8005800 <_printf_float+0xa0>
 800598e:	2301      	movs	r3, #1
 8005990:	464a      	mov	r2, r9
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	47b8      	blx	r7
 8005998:	3001      	adds	r0, #1
 800599a:	f43f af2f 	beq.w	80057fc <_printf_float+0x9c>
 800599e:	f108 0801 	add.w	r8, r8, #1
 80059a2:	e7e6      	b.n	8005972 <_printf_float+0x212>
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dc3c      	bgt.n	8005a24 <_printf_float+0x2c4>
 80059aa:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <_printf_float+0x2c0>)
 80059ac:	2301      	movs	r3, #1
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	f43f af21 	beq.w	80057fc <_printf_float+0x9c>
 80059ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80059be:	4313      	orrs	r3, r2
 80059c0:	d102      	bne.n	80059c8 <_printf_float+0x268>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	07d9      	lsls	r1, r3, #31
 80059c6:	d5d8      	bpl.n	800597a <_printf_float+0x21a>
 80059c8:	4653      	mov	r3, sl
 80059ca:	465a      	mov	r2, fp
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f af12 	beq.w	80057fc <_printf_float+0x9c>
 80059d8:	f04f 0900 	mov.w	r9, #0
 80059dc:	f104 0a1a 	add.w	sl, r4, #26
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	425b      	negs	r3, r3
 80059e4:	454b      	cmp	r3, r9
 80059e6:	dc01      	bgt.n	80059ec <_printf_float+0x28c>
 80059e8:	9b08      	ldr	r3, [sp, #32]
 80059ea:	e795      	b.n	8005918 <_printf_float+0x1b8>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4652      	mov	r2, sl
 80059f0:	4631      	mov	r1, r6
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	f43f af00 	beq.w	80057fc <_printf_float+0x9c>
 80059fc:	f109 0901 	add.w	r9, r9, #1
 8005a00:	e7ee      	b.n	80059e0 <_printf_float+0x280>
 8005a02:	bf00      	nop
 8005a04:	f3af 8000 	nop.w
 8005a08:	ffffffff 	.word	0xffffffff
 8005a0c:	7fefffff 	.word	0x7fefffff
 8005a10:	08007f44 	.word	0x08007f44
 8005a14:	08007f48 	.word	0x08007f48
 8005a18:	08007f50 	.word	0x08007f50
 8005a1c:	08007f4c 	.word	0x08007f4c
 8005a20:	08007f54 	.word	0x08007f54
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	bfa8      	it	ge
 8005a2c:	461a      	movge	r2, r3
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	4691      	mov	r9, r2
 8005a32:	dc38      	bgt.n	8005aa6 <_printf_float+0x346>
 8005a34:	2300      	movs	r3, #0
 8005a36:	9305      	str	r3, [sp, #20]
 8005a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a3c:	f104 021a 	add.w	r2, r4, #26
 8005a40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a42:	9905      	ldr	r1, [sp, #20]
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	eba3 0309 	sub.w	r3, r3, r9
 8005a4a:	428b      	cmp	r3, r1
 8005a4c:	dc33      	bgt.n	8005ab6 <_printf_float+0x356>
 8005a4e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	db3c      	blt.n	8005ad0 <_printf_float+0x370>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	07da      	lsls	r2, r3, #31
 8005a5a:	d439      	bmi.n	8005ad0 <_printf_float+0x370>
 8005a5c:	9b08      	ldr	r3, [sp, #32]
 8005a5e:	9a04      	ldr	r2, [sp, #16]
 8005a60:	9907      	ldr	r1, [sp, #28]
 8005a62:	1a9a      	subs	r2, r3, r2
 8005a64:	eba3 0901 	sub.w	r9, r3, r1
 8005a68:	4591      	cmp	r9, r2
 8005a6a:	bfa8      	it	ge
 8005a6c:	4691      	movge	r9, r2
 8005a6e:	f1b9 0f00 	cmp.w	r9, #0
 8005a72:	dc35      	bgt.n	8005ae0 <_printf_float+0x380>
 8005a74:	f04f 0800 	mov.w	r8, #0
 8005a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a7c:	f104 0a1a 	add.w	sl, r4, #26
 8005a80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	eba3 0309 	sub.w	r3, r3, r9
 8005a8a:	4543      	cmp	r3, r8
 8005a8c:	f77f af75 	ble.w	800597a <_printf_float+0x21a>
 8005a90:	2301      	movs	r3, #1
 8005a92:	4652      	mov	r2, sl
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f aeae 	beq.w	80057fc <_printf_float+0x9c>
 8005aa0:	f108 0801 	add.w	r8, r8, #1
 8005aa4:	e7ec      	b.n	8005a80 <_printf_float+0x320>
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4642      	mov	r2, r8
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d1bf      	bne.n	8005a34 <_printf_float+0x2d4>
 8005ab4:	e6a2      	b.n	80057fc <_printf_float+0x9c>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	9204      	str	r2, [sp, #16]
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f ae9b 	beq.w	80057fc <_printf_float+0x9c>
 8005ac6:	9b05      	ldr	r3, [sp, #20]
 8005ac8:	9a04      	ldr	r2, [sp, #16]
 8005aca:	3301      	adds	r3, #1
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	e7b7      	b.n	8005a40 <_printf_float+0x2e0>
 8005ad0:	4653      	mov	r3, sl
 8005ad2:	465a      	mov	r2, fp
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	d1be      	bne.n	8005a5c <_printf_float+0x2fc>
 8005ade:	e68d      	b.n	80057fc <_printf_float+0x9c>
 8005ae0:	9a04      	ldr	r2, [sp, #16]
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	4442      	add	r2, r8
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	d1c1      	bne.n	8005a74 <_printf_float+0x314>
 8005af0:	e684      	b.n	80057fc <_printf_float+0x9c>
 8005af2:	9a08      	ldr	r2, [sp, #32]
 8005af4:	2a01      	cmp	r2, #1
 8005af6:	dc01      	bgt.n	8005afc <_printf_float+0x39c>
 8005af8:	07db      	lsls	r3, r3, #31
 8005afa:	d537      	bpl.n	8005b6c <_printf_float+0x40c>
 8005afc:	2301      	movs	r3, #1
 8005afe:	4642      	mov	r2, r8
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	f43f ae78 	beq.w	80057fc <_printf_float+0x9c>
 8005b0c:	4653      	mov	r3, sl
 8005b0e:	465a      	mov	r2, fp
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f ae70 	beq.w	80057fc <_printf_float+0x9c>
 8005b1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005b20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b28:	d01b      	beq.n	8005b62 <_printf_float+0x402>
 8005b2a:	9b08      	ldr	r3, [sp, #32]
 8005b2c:	f108 0201 	add.w	r2, r8, #1
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d10e      	bne.n	8005b5a <_printf_float+0x3fa>
 8005b3c:	e65e      	b.n	80057fc <_printf_float+0x9c>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	464a      	mov	r2, r9
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f ae57 	beq.w	80057fc <_printf_float+0x9c>
 8005b4e:	f108 0801 	add.w	r8, r8, #1
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	4543      	cmp	r3, r8
 8005b58:	dcf1      	bgt.n	8005b3e <_printf_float+0x3de>
 8005b5a:	9b04      	ldr	r3, [sp, #16]
 8005b5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b60:	e6db      	b.n	800591a <_printf_float+0x1ba>
 8005b62:	f04f 0800 	mov.w	r8, #0
 8005b66:	f104 091a 	add.w	r9, r4, #26
 8005b6a:	e7f2      	b.n	8005b52 <_printf_float+0x3f2>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4642      	mov	r2, r8
 8005b70:	e7df      	b.n	8005b32 <_printf_float+0x3d2>
 8005b72:	2301      	movs	r3, #1
 8005b74:	464a      	mov	r2, r9
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b8      	blx	r7
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	f43f ae3d 	beq.w	80057fc <_printf_float+0x9c>
 8005b82:	f108 0801 	add.w	r8, r8, #1
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b8a:	1a5b      	subs	r3, r3, r1
 8005b8c:	4543      	cmp	r3, r8
 8005b8e:	dcf0      	bgt.n	8005b72 <_printf_float+0x412>
 8005b90:	e6f7      	b.n	8005982 <_printf_float+0x222>
 8005b92:	f04f 0800 	mov.w	r8, #0
 8005b96:	f104 0919 	add.w	r9, r4, #25
 8005b9a:	e7f4      	b.n	8005b86 <_printf_float+0x426>

08005b9c <_printf_common>:
 8005b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	4616      	mov	r6, r2
 8005ba2:	4699      	mov	r9, r3
 8005ba4:	688a      	ldr	r2, [r1, #8]
 8005ba6:	690b      	ldr	r3, [r1, #16]
 8005ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bfb8      	it	lt
 8005bb0:	4613      	movlt	r3, r2
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb8:	4607      	mov	r7, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	b10a      	cbz	r2, 8005bc2 <_printf_common+0x26>
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	0699      	lsls	r1, r3, #26
 8005bc6:	bf42      	ittt	mi
 8005bc8:	6833      	ldrmi	r3, [r6, #0]
 8005bca:	3302      	addmi	r3, #2
 8005bcc:	6033      	strmi	r3, [r6, #0]
 8005bce:	6825      	ldr	r5, [r4, #0]
 8005bd0:	f015 0506 	ands.w	r5, r5, #6
 8005bd4:	d106      	bne.n	8005be4 <_printf_common+0x48>
 8005bd6:	f104 0a19 	add.w	sl, r4, #25
 8005bda:	68e3      	ldr	r3, [r4, #12]
 8005bdc:	6832      	ldr	r2, [r6, #0]
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	dc26      	bgt.n	8005c32 <_printf_common+0x96>
 8005be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be8:	1e13      	subs	r3, r2, #0
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	bf18      	it	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	0692      	lsls	r2, r2, #26
 8005bf2:	d42b      	bmi.n	8005c4c <_printf_common+0xb0>
 8005bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	47c0      	blx	r8
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d01e      	beq.n	8005c40 <_printf_common+0xa4>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	68e5      	ldr	r5, [r4, #12]
 8005c06:	6832      	ldr	r2, [r6, #0]
 8005c08:	f003 0306 	and.w	r3, r3, #6
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	bf08      	it	eq
 8005c10:	1aad      	subeq	r5, r5, r2
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	bf0c      	ite	eq
 8005c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c1c:	2500      	movne	r5, #0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bfc4      	itt	gt
 8005c22:	1a9b      	subgt	r3, r3, r2
 8005c24:	18ed      	addgt	r5, r5, r3
 8005c26:	2600      	movs	r6, #0
 8005c28:	341a      	adds	r4, #26
 8005c2a:	42b5      	cmp	r5, r6
 8005c2c:	d11a      	bne.n	8005c64 <_printf_common+0xc8>
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e008      	b.n	8005c44 <_printf_common+0xa8>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4652      	mov	r2, sl
 8005c36:	4649      	mov	r1, r9
 8005c38:	4638      	mov	r0, r7
 8005c3a:	47c0      	blx	r8
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d103      	bne.n	8005c48 <_printf_common+0xac>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c48:	3501      	adds	r5, #1
 8005c4a:	e7c6      	b.n	8005bda <_printf_common+0x3e>
 8005c4c:	18e1      	adds	r1, r4, r3
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	2030      	movs	r0, #48	; 0x30
 8005c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c56:	4422      	add	r2, r4
 8005c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c60:	3302      	adds	r3, #2
 8005c62:	e7c7      	b.n	8005bf4 <_printf_common+0x58>
 8005c64:	2301      	movs	r3, #1
 8005c66:	4622      	mov	r2, r4
 8005c68:	4649      	mov	r1, r9
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	47c0      	blx	r8
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d0e6      	beq.n	8005c40 <_printf_common+0xa4>
 8005c72:	3601      	adds	r6, #1
 8005c74:	e7d9      	b.n	8005c2a <_printf_common+0x8e>
	...

08005c78 <_printf_i>:
 8005c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	7e0f      	ldrb	r7, [r1, #24]
 8005c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c80:	2f78      	cmp	r7, #120	; 0x78
 8005c82:	4691      	mov	r9, r2
 8005c84:	4680      	mov	r8, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	469a      	mov	sl, r3
 8005c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c8e:	d807      	bhi.n	8005ca0 <_printf_i+0x28>
 8005c90:	2f62      	cmp	r7, #98	; 0x62
 8005c92:	d80a      	bhi.n	8005caa <_printf_i+0x32>
 8005c94:	2f00      	cmp	r7, #0
 8005c96:	f000 80d8 	beq.w	8005e4a <_printf_i+0x1d2>
 8005c9a:	2f58      	cmp	r7, #88	; 0x58
 8005c9c:	f000 80a3 	beq.w	8005de6 <_printf_i+0x16e>
 8005ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca8:	e03a      	b.n	8005d20 <_printf_i+0xa8>
 8005caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cae:	2b15      	cmp	r3, #21
 8005cb0:	d8f6      	bhi.n	8005ca0 <_printf_i+0x28>
 8005cb2:	a101      	add	r1, pc, #4	; (adr r1, 8005cb8 <_printf_i+0x40>)
 8005cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb8:	08005d11 	.word	0x08005d11
 8005cbc:	08005d25 	.word	0x08005d25
 8005cc0:	08005ca1 	.word	0x08005ca1
 8005cc4:	08005ca1 	.word	0x08005ca1
 8005cc8:	08005ca1 	.word	0x08005ca1
 8005ccc:	08005ca1 	.word	0x08005ca1
 8005cd0:	08005d25 	.word	0x08005d25
 8005cd4:	08005ca1 	.word	0x08005ca1
 8005cd8:	08005ca1 	.word	0x08005ca1
 8005cdc:	08005ca1 	.word	0x08005ca1
 8005ce0:	08005ca1 	.word	0x08005ca1
 8005ce4:	08005e31 	.word	0x08005e31
 8005ce8:	08005d55 	.word	0x08005d55
 8005cec:	08005e13 	.word	0x08005e13
 8005cf0:	08005ca1 	.word	0x08005ca1
 8005cf4:	08005ca1 	.word	0x08005ca1
 8005cf8:	08005e53 	.word	0x08005e53
 8005cfc:	08005ca1 	.word	0x08005ca1
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005ca1 	.word	0x08005ca1
 8005d08:	08005ca1 	.word	0x08005ca1
 8005d0c:	08005e1b 	.word	0x08005e1b
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	1d1a      	adds	r2, r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0a3      	b.n	8005e6c <_printf_i+0x1f4>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	6829      	ldr	r1, [r5, #0]
 8005d28:	0606      	lsls	r6, r0, #24
 8005d2a:	f101 0304 	add.w	r3, r1, #4
 8005d2e:	d50a      	bpl.n	8005d46 <_printf_i+0xce>
 8005d30:	680e      	ldr	r6, [r1, #0]
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	da03      	bge.n	8005d40 <_printf_i+0xc8>
 8005d38:	232d      	movs	r3, #45	; 0x2d
 8005d3a:	4276      	negs	r6, r6
 8005d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d40:	485e      	ldr	r0, [pc, #376]	; (8005ebc <_printf_i+0x244>)
 8005d42:	230a      	movs	r3, #10
 8005d44:	e019      	b.n	8005d7a <_printf_i+0x102>
 8005d46:	680e      	ldr	r6, [r1, #0]
 8005d48:	602b      	str	r3, [r5, #0]
 8005d4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d4e:	bf18      	it	ne
 8005d50:	b236      	sxthne	r6, r6
 8005d52:	e7ef      	b.n	8005d34 <_printf_i+0xbc>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	6029      	str	r1, [r5, #0]
 8005d5c:	0601      	lsls	r1, r0, #24
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0xec>
 8005d60:	681e      	ldr	r6, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <_printf_i+0xf2>
 8005d64:	0646      	lsls	r6, r0, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0xe8>
 8005d68:	881e      	ldrh	r6, [r3, #0]
 8005d6a:	4854      	ldr	r0, [pc, #336]	; (8005ebc <_printf_i+0x244>)
 8005d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d6e:	bf0c      	ite	eq
 8005d70:	2308      	moveq	r3, #8
 8005d72:	230a      	movne	r3, #10
 8005d74:	2100      	movs	r1, #0
 8005d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d7a:	6865      	ldr	r5, [r4, #4]
 8005d7c:	60a5      	str	r5, [r4, #8]
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	bfa2      	ittt	ge
 8005d82:	6821      	ldrge	r1, [r4, #0]
 8005d84:	f021 0104 	bicge.w	r1, r1, #4
 8005d88:	6021      	strge	r1, [r4, #0]
 8005d8a:	b90e      	cbnz	r6, 8005d90 <_printf_i+0x118>
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	d04d      	beq.n	8005e2c <_printf_i+0x1b4>
 8005d90:	4615      	mov	r5, r2
 8005d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d96:	fb03 6711 	mls	r7, r3, r1, r6
 8005d9a:	5dc7      	ldrb	r7, [r0, r7]
 8005d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005da0:	4637      	mov	r7, r6
 8005da2:	42bb      	cmp	r3, r7
 8005da4:	460e      	mov	r6, r1
 8005da6:	d9f4      	bls.n	8005d92 <_printf_i+0x11a>
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d10b      	bne.n	8005dc4 <_printf_i+0x14c>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	07de      	lsls	r6, r3, #31
 8005db0:	d508      	bpl.n	8005dc4 <_printf_i+0x14c>
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	6861      	ldr	r1, [r4, #4]
 8005db6:	4299      	cmp	r1, r3
 8005db8:	bfde      	ittt	le
 8005dba:	2330      	movle	r3, #48	; 0x30
 8005dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dc4:	1b52      	subs	r2, r2, r5
 8005dc6:	6122      	str	r2, [r4, #16]
 8005dc8:	f8cd a000 	str.w	sl, [sp]
 8005dcc:	464b      	mov	r3, r9
 8005dce:	aa03      	add	r2, sp, #12
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	f7ff fee2 	bl	8005b9c <_printf_common>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d14c      	bne.n	8005e76 <_printf_i+0x1fe>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	b004      	add	sp, #16
 8005de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de6:	4835      	ldr	r0, [pc, #212]	; (8005ebc <_printf_i+0x244>)
 8005de8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dec:	6829      	ldr	r1, [r5, #0]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005df4:	6029      	str	r1, [r5, #0]
 8005df6:	061d      	lsls	r5, r3, #24
 8005df8:	d514      	bpl.n	8005e24 <_printf_i+0x1ac>
 8005dfa:	07df      	lsls	r7, r3, #31
 8005dfc:	bf44      	itt	mi
 8005dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005e02:	6023      	strmi	r3, [r4, #0]
 8005e04:	b91e      	cbnz	r6, 8005e0e <_printf_i+0x196>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	f023 0320 	bic.w	r3, r3, #32
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	2310      	movs	r3, #16
 8005e10:	e7b0      	b.n	8005d74 <_printf_i+0xfc>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	f043 0320 	orr.w	r3, r3, #32
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	2378      	movs	r3, #120	; 0x78
 8005e1c:	4828      	ldr	r0, [pc, #160]	; (8005ec0 <_printf_i+0x248>)
 8005e1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e22:	e7e3      	b.n	8005dec <_printf_i+0x174>
 8005e24:	0659      	lsls	r1, r3, #25
 8005e26:	bf48      	it	mi
 8005e28:	b2b6      	uxthmi	r6, r6
 8005e2a:	e7e6      	b.n	8005dfa <_printf_i+0x182>
 8005e2c:	4615      	mov	r5, r2
 8005e2e:	e7bb      	b.n	8005da8 <_printf_i+0x130>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	6826      	ldr	r6, [r4, #0]
 8005e34:	6961      	ldr	r1, [r4, #20]
 8005e36:	1d18      	adds	r0, r3, #4
 8005e38:	6028      	str	r0, [r5, #0]
 8005e3a:	0635      	lsls	r5, r6, #24
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0x1cc>
 8005e40:	6019      	str	r1, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0x1d2>
 8005e44:	0670      	lsls	r0, r6, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0x1c8>
 8005e48:	8019      	strh	r1, [r3, #0]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	4615      	mov	r5, r2
 8005e50:	e7ba      	b.n	8005dc8 <_printf_i+0x150>
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	1d1a      	adds	r2, r3, #4
 8005e56:	602a      	str	r2, [r5, #0]
 8005e58:	681d      	ldr	r5, [r3, #0]
 8005e5a:	6862      	ldr	r2, [r4, #4]
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f7fa f9f6 	bl	8000250 <memchr>
 8005e64:	b108      	cbz	r0, 8005e6a <_printf_i+0x1f2>
 8005e66:	1b40      	subs	r0, r0, r5
 8005e68:	6060      	str	r0, [r4, #4]
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e74:	e7a8      	b.n	8005dc8 <_printf_i+0x150>
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	462a      	mov	r2, r5
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	47d0      	blx	sl
 8005e80:	3001      	adds	r0, #1
 8005e82:	d0ab      	beq.n	8005ddc <_printf_i+0x164>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	079b      	lsls	r3, r3, #30
 8005e88:	d413      	bmi.n	8005eb2 <_printf_i+0x23a>
 8005e8a:	68e0      	ldr	r0, [r4, #12]
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	bfb8      	it	lt
 8005e92:	4618      	movlt	r0, r3
 8005e94:	e7a4      	b.n	8005de0 <_printf_i+0x168>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4632      	mov	r2, r6
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	47d0      	blx	sl
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d09b      	beq.n	8005ddc <_printf_i+0x164>
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	9903      	ldr	r1, [sp, #12]
 8005eaa:	1a5b      	subs	r3, r3, r1
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dcf2      	bgt.n	8005e96 <_printf_i+0x21e>
 8005eb0:	e7eb      	b.n	8005e8a <_printf_i+0x212>
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	f104 0619 	add.w	r6, r4, #25
 8005eb8:	e7f5      	b.n	8005ea6 <_printf_i+0x22e>
 8005eba:	bf00      	nop
 8005ebc:	08007f56 	.word	0x08007f56
 8005ec0:	08007f67 	.word	0x08007f67

08005ec4 <quorem>:
 8005ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	6903      	ldr	r3, [r0, #16]
 8005eca:	690c      	ldr	r4, [r1, #16]
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	4607      	mov	r7, r0
 8005ed0:	f2c0 8081 	blt.w	8005fd6 <quorem+0x112>
 8005ed4:	3c01      	subs	r4, #1
 8005ed6:	f101 0814 	add.w	r8, r1, #20
 8005eda:	f100 0514 	add.w	r5, r0, #20
 8005ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eec:	3301      	adds	r3, #1
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005efc:	d331      	bcc.n	8005f62 <quorem+0x9e>
 8005efe:	f04f 0e00 	mov.w	lr, #0
 8005f02:	4640      	mov	r0, r8
 8005f04:	46ac      	mov	ip, r5
 8005f06:	46f2      	mov	sl, lr
 8005f08:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f0c:	b293      	uxth	r3, r2
 8005f0e:	fb06 e303 	mla	r3, r6, r3, lr
 8005f12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	ebaa 0303 	sub.w	r3, sl, r3
 8005f1c:	f8dc a000 	ldr.w	sl, [ip]
 8005f20:	0c12      	lsrs	r2, r2, #16
 8005f22:	fa13 f38a 	uxtah	r3, r3, sl
 8005f26:	fb06 e202 	mla	r2, r6, r2, lr
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f32:	b292      	uxth	r2, r2
 8005f34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f40:	4581      	cmp	r9, r0
 8005f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f46:	f84c 3b04 	str.w	r3, [ip], #4
 8005f4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f4e:	d2db      	bcs.n	8005f08 <quorem+0x44>
 8005f50:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f54:	b92b      	cbnz	r3, 8005f62 <quorem+0x9e>
 8005f56:	9b01      	ldr	r3, [sp, #4]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	429d      	cmp	r5, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	d32e      	bcc.n	8005fbe <quorem+0xfa>
 8005f60:	613c      	str	r4, [r7, #16]
 8005f62:	4638      	mov	r0, r7
 8005f64:	f001 f838 	bl	8006fd8 <__mcmp>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	db24      	blt.n	8005fb6 <quorem+0xf2>
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f04f 0c00 	mov.w	ip, #0
 8005f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f78:	f8d0 e000 	ldr.w	lr, [r0]
 8005f7c:	b293      	uxth	r3, r2
 8005f7e:	ebac 0303 	sub.w	r3, ip, r3
 8005f82:	0c12      	lsrs	r2, r2, #16
 8005f84:	fa13 f38e 	uxtah	r3, r3, lr
 8005f88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f96:	45c1      	cmp	r9, r8
 8005f98:	f840 3b04 	str.w	r3, [r0], #4
 8005f9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fa0:	d2e8      	bcs.n	8005f74 <quorem+0xb0>
 8005fa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005faa:	b922      	cbnz	r2, 8005fb6 <quorem+0xf2>
 8005fac:	3b04      	subs	r3, #4
 8005fae:	429d      	cmp	r5, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	d30a      	bcc.n	8005fca <quorem+0x106>
 8005fb4:	613c      	str	r4, [r7, #16]
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	b003      	add	sp, #12
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	d1cc      	bne.n	8005f60 <quorem+0x9c>
 8005fc6:	3c01      	subs	r4, #1
 8005fc8:	e7c7      	b.n	8005f5a <quorem+0x96>
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	3b04      	subs	r3, #4
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <quorem+0xf0>
 8005fd2:	3c01      	subs	r4, #1
 8005fd4:	e7eb      	b.n	8005fae <quorem+0xea>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	e7ee      	b.n	8005fb8 <quorem+0xf4>
 8005fda:	0000      	movs	r0, r0
 8005fdc:	0000      	movs	r0, r0
	...

08005fe0 <_dtoa_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	ed2d 8b02 	vpush	{d8}
 8005fe8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fea:	b091      	sub	sp, #68	; 0x44
 8005fec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ff0:	ec59 8b10 	vmov	r8, r9, d0
 8005ff4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005ff6:	9106      	str	r1, [sp, #24]
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	9208      	str	r2, [sp, #32]
 8005ffc:	930c      	str	r3, [sp, #48]	; 0x30
 8005ffe:	b975      	cbnz	r5, 800601e <_dtoa_r+0x3e>
 8006000:	2010      	movs	r0, #16
 8006002:	f000 fd5f 	bl	8006ac4 <malloc>
 8006006:	4602      	mov	r2, r0
 8006008:	6270      	str	r0, [r6, #36]	; 0x24
 800600a:	b920      	cbnz	r0, 8006016 <_dtoa_r+0x36>
 800600c:	4baa      	ldr	r3, [pc, #680]	; (80062b8 <_dtoa_r+0x2d8>)
 800600e:	21ea      	movs	r1, #234	; 0xea
 8006010:	48aa      	ldr	r0, [pc, #680]	; (80062bc <_dtoa_r+0x2dc>)
 8006012:	f001 f9e9 	bl	80073e8 <__assert_func>
 8006016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800601a:	6005      	str	r5, [r0, #0]
 800601c:	60c5      	str	r5, [r0, #12]
 800601e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	b151      	cbz	r1, 800603a <_dtoa_r+0x5a>
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	604a      	str	r2, [r1, #4]
 8006028:	2301      	movs	r3, #1
 800602a:	4093      	lsls	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
 800602e:	4630      	mov	r0, r6
 8006030:	f000 fd90 	bl	8006b54 <_Bfree>
 8006034:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f1b9 0300 	subs.w	r3, r9, #0
 800603e:	bfbb      	ittet	lt
 8006040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006044:	9303      	strlt	r3, [sp, #12]
 8006046:	2300      	movge	r3, #0
 8006048:	2201      	movlt	r2, #1
 800604a:	bfac      	ite	ge
 800604c:	6023      	strge	r3, [r4, #0]
 800604e:	6022      	strlt	r2, [r4, #0]
 8006050:	4b9b      	ldr	r3, [pc, #620]	; (80062c0 <_dtoa_r+0x2e0>)
 8006052:	9c03      	ldr	r4, [sp, #12]
 8006054:	43a3      	bics	r3, r4
 8006056:	d11c      	bne.n	8006092 <_dtoa_r+0xb2>
 8006058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800605a:	f242 730f 	movw	r3, #9999	; 0x270f
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006064:	ea53 0308 	orrs.w	r3, r3, r8
 8006068:	f000 84fd 	beq.w	8006a66 <_dtoa_r+0xa86>
 800606c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800606e:	b963      	cbnz	r3, 800608a <_dtoa_r+0xaa>
 8006070:	4b94      	ldr	r3, [pc, #592]	; (80062c4 <_dtoa_r+0x2e4>)
 8006072:	e01f      	b.n	80060b4 <_dtoa_r+0xd4>
 8006074:	4b94      	ldr	r3, [pc, #592]	; (80062c8 <_dtoa_r+0x2e8>)
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	3308      	adds	r3, #8
 800607a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	9801      	ldr	r0, [sp, #4]
 8006080:	b011      	add	sp, #68	; 0x44
 8006082:	ecbd 8b02 	vpop	{d8}
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	4b8e      	ldr	r3, [pc, #568]	; (80062c4 <_dtoa_r+0x2e4>)
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	3303      	adds	r3, #3
 8006090:	e7f3      	b.n	800607a <_dtoa_r+0x9a>
 8006092:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006096:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	d10b      	bne.n	80060b8 <_dtoa_r+0xd8>
 80060a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a2:	2301      	movs	r3, #1
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 84d9 	beq.w	8006a60 <_dtoa_r+0xa80>
 80060ae:	4887      	ldr	r0, [pc, #540]	; (80062cc <_dtoa_r+0x2ec>)
 80060b0:	6018      	str	r0, [r3, #0]
 80060b2:	1e43      	subs	r3, r0, #1
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	e7e2      	b.n	800607e <_dtoa_r+0x9e>
 80060b8:	a90f      	add	r1, sp, #60	; 0x3c
 80060ba:	aa0e      	add	r2, sp, #56	; 0x38
 80060bc:	4630      	mov	r0, r6
 80060be:	eeb0 0b48 	vmov.f64	d0, d8
 80060c2:	f001 f82f 	bl	8007124 <__d2b>
 80060c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80060ca:	4605      	mov	r5, r0
 80060cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d046      	beq.n	8006160 <_dtoa_r+0x180>
 80060d2:	ee18 4a90 	vmov	r4, s17
 80060d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80060da:	ec53 2b18 	vmov	r2, r3, d8
 80060de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80060e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80060ea:	2400      	movs	r4, #0
 80060ec:	ec43 2b16 	vmov	d6, r2, r3
 80060f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80060f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80062a0 <_dtoa_r+0x2c0>
 80060f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80062a8 <_dtoa_r+0x2c8>
 8006100:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006104:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80062b0 <_dtoa_r+0x2d0>
 8006108:	ee07 1a90 	vmov	s15, r1
 800610c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006110:	eeb0 7b46 	vmov.f64	d7, d6
 8006114:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006118:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800611c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	ee16 ba90 	vmov	fp, s13
 8006128:	940a      	str	r4, [sp, #40]	; 0x28
 800612a:	d508      	bpl.n	800613e <_dtoa_r+0x15e>
 800612c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006130:	eeb4 6b47 	vcmp.f64	d6, d7
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	bf18      	it	ne
 800613a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800613e:	f1bb 0f16 	cmp.w	fp, #22
 8006142:	d82f      	bhi.n	80061a4 <_dtoa_r+0x1c4>
 8006144:	4b62      	ldr	r3, [pc, #392]	; (80062d0 <_dtoa_r+0x2f0>)
 8006146:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800614a:	ed93 7b00 	vldr	d7, [r3]
 800614e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	d501      	bpl.n	800615c <_dtoa_r+0x17c>
 8006158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800615c:	2300      	movs	r3, #0
 800615e:	e022      	b.n	80061a6 <_dtoa_r+0x1c6>
 8006160:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006162:	4401      	add	r1, r0
 8006164:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006168:	2b20      	cmp	r3, #32
 800616a:	bfc1      	itttt	gt
 800616c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006170:	fa04 f303 	lslgt.w	r3, r4, r3
 8006174:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006178:	fa28 f804 	lsrgt.w	r8, r8, r4
 800617c:	bfd6      	itet	le
 800617e:	f1c3 0320 	rsble	r3, r3, #32
 8006182:	ea43 0808 	orrgt.w	r8, r3, r8
 8006186:	fa08 f803 	lslle.w	r8, r8, r3
 800618a:	ee07 8a90 	vmov	s15, r8
 800618e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006192:	3901      	subs	r1, #1
 8006194:	ee17 4a90 	vmov	r4, s15
 8006198:	ec53 2b17 	vmov	r2, r3, d7
 800619c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80061a0:	2401      	movs	r4, #1
 80061a2:	e7a3      	b.n	80060ec <_dtoa_r+0x10c>
 80061a4:	2301      	movs	r3, #1
 80061a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a8:	1a43      	subs	r3, r0, r1
 80061aa:	1e5a      	subs	r2, r3, #1
 80061ac:	bf45      	ittet	mi
 80061ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80061b2:	9304      	strmi	r3, [sp, #16]
 80061b4:	2300      	movpl	r3, #0
 80061b6:	2300      	movmi	r3, #0
 80061b8:	9205      	str	r2, [sp, #20]
 80061ba:	bf54      	ite	pl
 80061bc:	9304      	strpl	r3, [sp, #16]
 80061be:	9305      	strmi	r3, [sp, #20]
 80061c0:	f1bb 0f00 	cmp.w	fp, #0
 80061c4:	db18      	blt.n	80061f8 <_dtoa_r+0x218>
 80061c6:	9b05      	ldr	r3, [sp, #20]
 80061c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80061cc:	445b      	add	r3, fp
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	2300      	movs	r3, #0
 80061d2:	9a06      	ldr	r2, [sp, #24]
 80061d4:	2a09      	cmp	r2, #9
 80061d6:	d849      	bhi.n	800626c <_dtoa_r+0x28c>
 80061d8:	2a05      	cmp	r2, #5
 80061da:	bfc4      	itt	gt
 80061dc:	3a04      	subgt	r2, #4
 80061de:	9206      	strgt	r2, [sp, #24]
 80061e0:	9a06      	ldr	r2, [sp, #24]
 80061e2:	f1a2 0202 	sub.w	r2, r2, #2
 80061e6:	bfcc      	ite	gt
 80061e8:	2400      	movgt	r4, #0
 80061ea:	2401      	movle	r4, #1
 80061ec:	2a03      	cmp	r2, #3
 80061ee:	d848      	bhi.n	8006282 <_dtoa_r+0x2a2>
 80061f0:	e8df f002 	tbb	[pc, r2]
 80061f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80061f8:	9b04      	ldr	r3, [sp, #16]
 80061fa:	2200      	movs	r2, #0
 80061fc:	eba3 030b 	sub.w	r3, r3, fp
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	9209      	str	r2, [sp, #36]	; 0x24
 8006204:	f1cb 0300 	rsb	r3, fp, #0
 8006208:	e7e3      	b.n	80061d2 <_dtoa_r+0x1f2>
 800620a:	2200      	movs	r2, #0
 800620c:	9207      	str	r2, [sp, #28]
 800620e:	9a08      	ldr	r2, [sp, #32]
 8006210:	2a00      	cmp	r2, #0
 8006212:	dc39      	bgt.n	8006288 <_dtoa_r+0x2a8>
 8006214:	f04f 0a01 	mov.w	sl, #1
 8006218:	46d1      	mov	r9, sl
 800621a:	4652      	mov	r2, sl
 800621c:	f8cd a020 	str.w	sl, [sp, #32]
 8006220:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006222:	2100      	movs	r1, #0
 8006224:	6079      	str	r1, [r7, #4]
 8006226:	2004      	movs	r0, #4
 8006228:	f100 0c14 	add.w	ip, r0, #20
 800622c:	4594      	cmp	ip, r2
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	d92f      	bls.n	8006292 <_dtoa_r+0x2b2>
 8006232:	4630      	mov	r0, r6
 8006234:	930d      	str	r3, [sp, #52]	; 0x34
 8006236:	f000 fc4d 	bl	8006ad4 <_Balloc>
 800623a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800623c:	9001      	str	r0, [sp, #4]
 800623e:	4602      	mov	r2, r0
 8006240:	2800      	cmp	r0, #0
 8006242:	d149      	bne.n	80062d8 <_dtoa_r+0x2f8>
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <_dtoa_r+0x2f4>)
 8006246:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800624a:	e6e1      	b.n	8006010 <_dtoa_r+0x30>
 800624c:	2201      	movs	r2, #1
 800624e:	e7dd      	b.n	800620c <_dtoa_r+0x22c>
 8006250:	2200      	movs	r2, #0
 8006252:	9207      	str	r2, [sp, #28]
 8006254:	9a08      	ldr	r2, [sp, #32]
 8006256:	eb0b 0a02 	add.w	sl, fp, r2
 800625a:	f10a 0901 	add.w	r9, sl, #1
 800625e:	464a      	mov	r2, r9
 8006260:	2a01      	cmp	r2, #1
 8006262:	bfb8      	it	lt
 8006264:	2201      	movlt	r2, #1
 8006266:	e7db      	b.n	8006220 <_dtoa_r+0x240>
 8006268:	2201      	movs	r2, #1
 800626a:	e7f2      	b.n	8006252 <_dtoa_r+0x272>
 800626c:	2401      	movs	r4, #1
 800626e:	2200      	movs	r2, #0
 8006270:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006274:	f04f 3aff 	mov.w	sl, #4294967295
 8006278:	2100      	movs	r1, #0
 800627a:	46d1      	mov	r9, sl
 800627c:	2212      	movs	r2, #18
 800627e:	9108      	str	r1, [sp, #32]
 8006280:	e7ce      	b.n	8006220 <_dtoa_r+0x240>
 8006282:	2201      	movs	r2, #1
 8006284:	9207      	str	r2, [sp, #28]
 8006286:	e7f5      	b.n	8006274 <_dtoa_r+0x294>
 8006288:	f8dd a020 	ldr.w	sl, [sp, #32]
 800628c:	46d1      	mov	r9, sl
 800628e:	4652      	mov	r2, sl
 8006290:	e7c6      	b.n	8006220 <_dtoa_r+0x240>
 8006292:	3101      	adds	r1, #1
 8006294:	6079      	str	r1, [r7, #4]
 8006296:	0040      	lsls	r0, r0, #1
 8006298:	e7c6      	b.n	8006228 <_dtoa_r+0x248>
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w
 80062a0:	636f4361 	.word	0x636f4361
 80062a4:	3fd287a7 	.word	0x3fd287a7
 80062a8:	8b60c8b3 	.word	0x8b60c8b3
 80062ac:	3fc68a28 	.word	0x3fc68a28
 80062b0:	509f79fb 	.word	0x509f79fb
 80062b4:	3fd34413 	.word	0x3fd34413
 80062b8:	08007f85 	.word	0x08007f85
 80062bc:	08007f9c 	.word	0x08007f9c
 80062c0:	7ff00000 	.word	0x7ff00000
 80062c4:	08007f81 	.word	0x08007f81
 80062c8:	08007f78 	.word	0x08007f78
 80062cc:	08007f55 	.word	0x08007f55
 80062d0:	08008090 	.word	0x08008090
 80062d4:	08007ff7 	.word	0x08007ff7
 80062d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80062da:	9901      	ldr	r1, [sp, #4]
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	f1b9 0f0e 	cmp.w	r9, #14
 80062e2:	d86c      	bhi.n	80063be <_dtoa_r+0x3de>
 80062e4:	2c00      	cmp	r4, #0
 80062e6:	d06a      	beq.n	80063be <_dtoa_r+0x3de>
 80062e8:	f1bb 0f00 	cmp.w	fp, #0
 80062ec:	f340 80a0 	ble.w	8006430 <_dtoa_r+0x450>
 80062f0:	49c1      	ldr	r1, [pc, #772]	; (80065f8 <_dtoa_r+0x618>)
 80062f2:	f00b 020f 	and.w	r2, fp, #15
 80062f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80062fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062fe:	ed92 7b00 	vldr	d7, [r2]
 8006302:	ea4f 112b 	mov.w	r1, fp, asr #4
 8006306:	f000 8087 	beq.w	8006418 <_dtoa_r+0x438>
 800630a:	4abc      	ldr	r2, [pc, #752]	; (80065fc <_dtoa_r+0x61c>)
 800630c:	ed92 6b08 	vldr	d6, [r2, #32]
 8006310:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006314:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006318:	f001 010f 	and.w	r1, r1, #15
 800631c:	2203      	movs	r2, #3
 800631e:	48b7      	ldr	r0, [pc, #732]	; (80065fc <_dtoa_r+0x61c>)
 8006320:	2900      	cmp	r1, #0
 8006322:	d17b      	bne.n	800641c <_dtoa_r+0x43c>
 8006324:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006328:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800632c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006332:	2900      	cmp	r1, #0
 8006334:	f000 80a2 	beq.w	800647c <_dtoa_r+0x49c>
 8006338:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800633c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006340:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	f140 8098 	bpl.w	800647c <_dtoa_r+0x49c>
 800634c:	f1b9 0f00 	cmp.w	r9, #0
 8006350:	f000 8094 	beq.w	800647c <_dtoa_r+0x49c>
 8006354:	f1ba 0f00 	cmp.w	sl, #0
 8006358:	dd2f      	ble.n	80063ba <_dtoa_r+0x3da>
 800635a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800635e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006362:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006366:	f10b 37ff 	add.w	r7, fp, #4294967295
 800636a:	3201      	adds	r2, #1
 800636c:	4650      	mov	r0, sl
 800636e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006372:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006376:	ee07 2a90 	vmov	s15, r2
 800637a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800637e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006382:	ee15 4a90 	vmov	r4, s11
 8006386:	ec52 1b15 	vmov	r1, r2, d5
 800638a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800638e:	2800      	cmp	r0, #0
 8006390:	d177      	bne.n	8006482 <_dtoa_r+0x4a2>
 8006392:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006396:	ee36 6b47 	vsub.f64	d6, d6, d7
 800639a:	ec42 1b17 	vmov	d7, r1, r2
 800639e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a6:	f300 8263 	bgt.w	8006870 <_dtoa_r+0x890>
 80063aa:	eeb1 7b47 	vneg.f64	d7, d7
 80063ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	f100 8258 	bmi.w	800686a <_dtoa_r+0x88a>
 80063ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80063be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	f2c0 811d 	blt.w	8006600 <_dtoa_r+0x620>
 80063c6:	f1bb 0f0e 	cmp.w	fp, #14
 80063ca:	f300 8119 	bgt.w	8006600 <_dtoa_r+0x620>
 80063ce:	4b8a      	ldr	r3, [pc, #552]	; (80065f8 <_dtoa_r+0x618>)
 80063d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063d4:	ed93 6b00 	vldr	d6, [r3]
 80063d8:	9b08      	ldr	r3, [sp, #32]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f280 80b7 	bge.w	800654e <_dtoa_r+0x56e>
 80063e0:	f1b9 0f00 	cmp.w	r9, #0
 80063e4:	f300 80b3 	bgt.w	800654e <_dtoa_r+0x56e>
 80063e8:	f040 823f 	bne.w	800686a <_dtoa_r+0x88a>
 80063ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80063f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80063f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	464c      	mov	r4, r9
 8006402:	464f      	mov	r7, r9
 8006404:	f280 8215 	bge.w	8006832 <_dtoa_r+0x852>
 8006408:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800640c:	2331      	movs	r3, #49	; 0x31
 800640e:	f808 3b01 	strb.w	r3, [r8], #1
 8006412:	f10b 0b01 	add.w	fp, fp, #1
 8006416:	e211      	b.n	800683c <_dtoa_r+0x85c>
 8006418:	2202      	movs	r2, #2
 800641a:	e780      	b.n	800631e <_dtoa_r+0x33e>
 800641c:	07cc      	lsls	r4, r1, #31
 800641e:	d504      	bpl.n	800642a <_dtoa_r+0x44a>
 8006420:	ed90 6b00 	vldr	d6, [r0]
 8006424:	3201      	adds	r2, #1
 8006426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800642a:	1049      	asrs	r1, r1, #1
 800642c:	3008      	adds	r0, #8
 800642e:	e777      	b.n	8006320 <_dtoa_r+0x340>
 8006430:	d022      	beq.n	8006478 <_dtoa_r+0x498>
 8006432:	f1cb 0100 	rsb	r1, fp, #0
 8006436:	4a70      	ldr	r2, [pc, #448]	; (80065f8 <_dtoa_r+0x618>)
 8006438:	f001 000f 	and.w	r0, r1, #15
 800643c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006440:	ed92 7b00 	vldr	d7, [r2]
 8006444:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800644c:	486b      	ldr	r0, [pc, #428]	; (80065fc <_dtoa_r+0x61c>)
 800644e:	1109      	asrs	r1, r1, #4
 8006450:	2400      	movs	r4, #0
 8006452:	2202      	movs	r2, #2
 8006454:	b929      	cbnz	r1, 8006462 <_dtoa_r+0x482>
 8006456:	2c00      	cmp	r4, #0
 8006458:	f43f af6a 	beq.w	8006330 <_dtoa_r+0x350>
 800645c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006460:	e766      	b.n	8006330 <_dtoa_r+0x350>
 8006462:	07cf      	lsls	r7, r1, #31
 8006464:	d505      	bpl.n	8006472 <_dtoa_r+0x492>
 8006466:	ed90 6b00 	vldr	d6, [r0]
 800646a:	3201      	adds	r2, #1
 800646c:	2401      	movs	r4, #1
 800646e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006472:	1049      	asrs	r1, r1, #1
 8006474:	3008      	adds	r0, #8
 8006476:	e7ed      	b.n	8006454 <_dtoa_r+0x474>
 8006478:	2202      	movs	r2, #2
 800647a:	e759      	b.n	8006330 <_dtoa_r+0x350>
 800647c:	465f      	mov	r7, fp
 800647e:	4648      	mov	r0, r9
 8006480:	e775      	b.n	800636e <_dtoa_r+0x38e>
 8006482:	ec42 1b17 	vmov	d7, r1, r2
 8006486:	4a5c      	ldr	r2, [pc, #368]	; (80065f8 <_dtoa_r+0x618>)
 8006488:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800648c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	1814      	adds	r4, r2, r0
 8006494:	9a07      	ldr	r2, [sp, #28]
 8006496:	b352      	cbz	r2, 80064ee <_dtoa_r+0x50e>
 8006498:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800649c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80064a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80064a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80064ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80064b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80064b4:	ee14 2a90 	vmov	r2, s9
 80064b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80064bc:	3230      	adds	r2, #48	; 0x30
 80064be:	ee36 6b45 	vsub.f64	d6, d6, d5
 80064c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	f808 2b01 	strb.w	r2, [r8], #1
 80064ce:	d439      	bmi.n	8006544 <_dtoa_r+0x564>
 80064d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80064d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	d472      	bmi.n	80065c4 <_dtoa_r+0x5e4>
 80064de:	45a0      	cmp	r8, r4
 80064e0:	f43f af6b 	beq.w	80063ba <_dtoa_r+0x3da>
 80064e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80064e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80064ec:	e7e0      	b.n	80064b0 <_dtoa_r+0x4d0>
 80064ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80064f6:	4621      	mov	r1, r4
 80064f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80064fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006500:	ee14 2a90 	vmov	r2, s9
 8006504:	3230      	adds	r2, #48	; 0x30
 8006506:	f808 2b01 	strb.w	r2, [r8], #1
 800650a:	45a0      	cmp	r8, r4
 800650c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006510:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006514:	d118      	bne.n	8006548 <_dtoa_r+0x568>
 8006516:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800651a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800651e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006526:	dc4d      	bgt.n	80065c4 <_dtoa_r+0x5e4>
 8006528:	ee35 7b47 	vsub.f64	d7, d5, d7
 800652c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006534:	f57f af41 	bpl.w	80063ba <_dtoa_r+0x3da>
 8006538:	4688      	mov	r8, r1
 800653a:	3901      	subs	r1, #1
 800653c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d0f9      	beq.n	8006538 <_dtoa_r+0x558>
 8006544:	46bb      	mov	fp, r7
 8006546:	e02a      	b.n	800659e <_dtoa_r+0x5be>
 8006548:	ee26 6b03 	vmul.f64	d6, d6, d3
 800654c:	e7d6      	b.n	80064fc <_dtoa_r+0x51c>
 800654e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006552:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006556:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800655a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800655e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006562:	ee15 3a10 	vmov	r3, s10
 8006566:	3330      	adds	r3, #48	; 0x30
 8006568:	f808 3b01 	strb.w	r3, [r8], #1
 800656c:	9b01      	ldr	r3, [sp, #4]
 800656e:	eba8 0303 	sub.w	r3, r8, r3
 8006572:	4599      	cmp	r9, r3
 8006574:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006578:	eea3 7b46 	vfms.f64	d7, d3, d6
 800657c:	d133      	bne.n	80065e6 <_dtoa_r+0x606>
 800657e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658a:	dc1a      	bgt.n	80065c2 <_dtoa_r+0x5e2>
 800658c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	d103      	bne.n	800659e <_dtoa_r+0x5be>
 8006596:	ee15 3a10 	vmov	r3, s10
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d411      	bmi.n	80065c2 <_dtoa_r+0x5e2>
 800659e:	4629      	mov	r1, r5
 80065a0:	4630      	mov	r0, r6
 80065a2:	f000 fad7 	bl	8006b54 <_Bfree>
 80065a6:	2300      	movs	r3, #0
 80065a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065aa:	f888 3000 	strb.w	r3, [r8]
 80065ae:	f10b 0301 	add.w	r3, fp, #1
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f43f ad61 	beq.w	800607e <_dtoa_r+0x9e>
 80065bc:	f8c3 8000 	str.w	r8, [r3]
 80065c0:	e55d      	b.n	800607e <_dtoa_r+0x9e>
 80065c2:	465f      	mov	r7, fp
 80065c4:	4643      	mov	r3, r8
 80065c6:	4698      	mov	r8, r3
 80065c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065cc:	2a39      	cmp	r2, #57	; 0x39
 80065ce:	d106      	bne.n	80065de <_dtoa_r+0x5fe>
 80065d0:	9a01      	ldr	r2, [sp, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d1f7      	bne.n	80065c6 <_dtoa_r+0x5e6>
 80065d6:	9901      	ldr	r1, [sp, #4]
 80065d8:	2230      	movs	r2, #48	; 0x30
 80065da:	3701      	adds	r7, #1
 80065dc:	700a      	strb	r2, [r1, #0]
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	3201      	adds	r2, #1
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	e7ae      	b.n	8006544 <_dtoa_r+0x564>
 80065e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80065ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80065ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f2:	d1b2      	bne.n	800655a <_dtoa_r+0x57a>
 80065f4:	e7d3      	b.n	800659e <_dtoa_r+0x5be>
 80065f6:	bf00      	nop
 80065f8:	08008090 	.word	0x08008090
 80065fc:	08008068 	.word	0x08008068
 8006600:	9907      	ldr	r1, [sp, #28]
 8006602:	2900      	cmp	r1, #0
 8006604:	f000 80d0 	beq.w	80067a8 <_dtoa_r+0x7c8>
 8006608:	9906      	ldr	r1, [sp, #24]
 800660a:	2901      	cmp	r1, #1
 800660c:	f300 80b4 	bgt.w	8006778 <_dtoa_r+0x798>
 8006610:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006612:	2900      	cmp	r1, #0
 8006614:	f000 80ac 	beq.w	8006770 <_dtoa_r+0x790>
 8006618:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800661c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006620:	461c      	mov	r4, r3
 8006622:	930a      	str	r3, [sp, #40]	; 0x28
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	4413      	add	r3, r2
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	9b05      	ldr	r3, [sp, #20]
 800662c:	2101      	movs	r1, #1
 800662e:	4413      	add	r3, r2
 8006630:	4630      	mov	r0, r6
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	f000 fb46 	bl	8006cc4 <__i2b>
 8006638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663a:	4607      	mov	r7, r0
 800663c:	f1b8 0f00 	cmp.w	r8, #0
 8006640:	dd0d      	ble.n	800665e <_dtoa_r+0x67e>
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	2a00      	cmp	r2, #0
 8006646:	dd0a      	ble.n	800665e <_dtoa_r+0x67e>
 8006648:	4542      	cmp	r2, r8
 800664a:	9904      	ldr	r1, [sp, #16]
 800664c:	bfa8      	it	ge
 800664e:	4642      	movge	r2, r8
 8006650:	1a89      	subs	r1, r1, r2
 8006652:	9104      	str	r1, [sp, #16]
 8006654:	9905      	ldr	r1, [sp, #20]
 8006656:	eba8 0802 	sub.w	r8, r8, r2
 800665a:	1a8a      	subs	r2, r1, r2
 800665c:	9205      	str	r2, [sp, #20]
 800665e:	b303      	cbz	r3, 80066a2 <_dtoa_r+0x6c2>
 8006660:	9a07      	ldr	r2, [sp, #28]
 8006662:	2a00      	cmp	r2, #0
 8006664:	f000 80a5 	beq.w	80067b2 <_dtoa_r+0x7d2>
 8006668:	2c00      	cmp	r4, #0
 800666a:	dd13      	ble.n	8006694 <_dtoa_r+0x6b4>
 800666c:	4639      	mov	r1, r7
 800666e:	4622      	mov	r2, r4
 8006670:	4630      	mov	r0, r6
 8006672:	930d      	str	r3, [sp, #52]	; 0x34
 8006674:	f000 fbe6 	bl	8006e44 <__pow5mult>
 8006678:	462a      	mov	r2, r5
 800667a:	4601      	mov	r1, r0
 800667c:	4607      	mov	r7, r0
 800667e:	4630      	mov	r0, r6
 8006680:	f000 fb36 	bl	8006cf0 <__multiply>
 8006684:	4629      	mov	r1, r5
 8006686:	900a      	str	r0, [sp, #40]	; 0x28
 8006688:	4630      	mov	r0, r6
 800668a:	f000 fa63 	bl	8006b54 <_Bfree>
 800668e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006692:	4615      	mov	r5, r2
 8006694:	1b1a      	subs	r2, r3, r4
 8006696:	d004      	beq.n	80066a2 <_dtoa_r+0x6c2>
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f000 fbd2 	bl	8006e44 <__pow5mult>
 80066a0:	4605      	mov	r5, r0
 80066a2:	2101      	movs	r1, #1
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 fb0d 	bl	8006cc4 <__i2b>
 80066aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	f340 8081 	ble.w	80067b6 <_dtoa_r+0x7d6>
 80066b4:	461a      	mov	r2, r3
 80066b6:	4601      	mov	r1, r0
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 fbc3 	bl	8006e44 <__pow5mult>
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	4604      	mov	r4, r0
 80066c4:	dd7a      	ble.n	80067bc <_dtoa_r+0x7dc>
 80066c6:	2300      	movs	r3, #0
 80066c8:	930a      	str	r3, [sp, #40]	; 0x28
 80066ca:	6922      	ldr	r2, [r4, #16]
 80066cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80066d0:	6910      	ldr	r0, [r2, #16]
 80066d2:	f000 faa7 	bl	8006c24 <__hi0bits>
 80066d6:	f1c0 0020 	rsb	r0, r0, #32
 80066da:	9b05      	ldr	r3, [sp, #20]
 80066dc:	4418      	add	r0, r3
 80066de:	f010 001f 	ands.w	r0, r0, #31
 80066e2:	f000 808c 	beq.w	80067fe <_dtoa_r+0x81e>
 80066e6:	f1c0 0220 	rsb	r2, r0, #32
 80066ea:	2a04      	cmp	r2, #4
 80066ec:	f340 8085 	ble.w	80067fa <_dtoa_r+0x81a>
 80066f0:	f1c0 001c 	rsb	r0, r0, #28
 80066f4:	9b04      	ldr	r3, [sp, #16]
 80066f6:	4403      	add	r3, r0
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	9b05      	ldr	r3, [sp, #20]
 80066fc:	4403      	add	r3, r0
 80066fe:	4480      	add	r8, r0
 8006700:	9305      	str	r3, [sp, #20]
 8006702:	9b04      	ldr	r3, [sp, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dd05      	ble.n	8006714 <_dtoa_r+0x734>
 8006708:	4629      	mov	r1, r5
 800670a:	461a      	mov	r2, r3
 800670c:	4630      	mov	r0, r6
 800670e:	f000 fbf3 	bl	8006ef8 <__lshift>
 8006712:	4605      	mov	r5, r0
 8006714:	9b05      	ldr	r3, [sp, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	dd05      	ble.n	8006726 <_dtoa_r+0x746>
 800671a:	4621      	mov	r1, r4
 800671c:	461a      	mov	r2, r3
 800671e:	4630      	mov	r0, r6
 8006720:	f000 fbea 	bl	8006ef8 <__lshift>
 8006724:	4604      	mov	r4, r0
 8006726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d06a      	beq.n	8006802 <_dtoa_r+0x822>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 fc52 	bl	8006fd8 <__mcmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	da64      	bge.n	8006802 <_dtoa_r+0x822>
 8006738:	2300      	movs	r3, #0
 800673a:	4629      	mov	r1, r5
 800673c:	220a      	movs	r2, #10
 800673e:	4630      	mov	r0, r6
 8006740:	f000 fa2a 	bl	8006b98 <__multadd>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	f10b 3bff 	add.w	fp, fp, #4294967295
 800674a:	4605      	mov	r5, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8191 	beq.w	8006a74 <_dtoa_r+0xa94>
 8006752:	4639      	mov	r1, r7
 8006754:	2300      	movs	r3, #0
 8006756:	220a      	movs	r2, #10
 8006758:	4630      	mov	r0, r6
 800675a:	f000 fa1d 	bl	8006b98 <__multadd>
 800675e:	f1ba 0f00 	cmp.w	sl, #0
 8006762:	4607      	mov	r7, r0
 8006764:	f300 808d 	bgt.w	8006882 <_dtoa_r+0x8a2>
 8006768:	9b06      	ldr	r3, [sp, #24]
 800676a:	2b02      	cmp	r3, #2
 800676c:	dc50      	bgt.n	8006810 <_dtoa_r+0x830>
 800676e:	e088      	b.n	8006882 <_dtoa_r+0x8a2>
 8006770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006772:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006776:	e751      	b.n	800661c <_dtoa_r+0x63c>
 8006778:	f109 34ff 	add.w	r4, r9, #4294967295
 800677c:	42a3      	cmp	r3, r4
 800677e:	bfbf      	itttt	lt
 8006780:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006782:	1ae3      	sublt	r3, r4, r3
 8006784:	18d2      	addlt	r2, r2, r3
 8006786:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006788:	bfb6      	itet	lt
 800678a:	4623      	movlt	r3, r4
 800678c:	1b1c      	subge	r4, r3, r4
 800678e:	2400      	movlt	r4, #0
 8006790:	f1b9 0f00 	cmp.w	r9, #0
 8006794:	bfb5      	itete	lt
 8006796:	9a04      	ldrlt	r2, [sp, #16]
 8006798:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800679c:	eba2 0809 	sublt.w	r8, r2, r9
 80067a0:	464a      	movge	r2, r9
 80067a2:	bfb8      	it	lt
 80067a4:	2200      	movlt	r2, #0
 80067a6:	e73c      	b.n	8006622 <_dtoa_r+0x642>
 80067a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80067ac:	9f07      	ldr	r7, [sp, #28]
 80067ae:	461c      	mov	r4, r3
 80067b0:	e744      	b.n	800663c <_dtoa_r+0x65c>
 80067b2:	461a      	mov	r2, r3
 80067b4:	e770      	b.n	8006698 <_dtoa_r+0x6b8>
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	dc18      	bgt.n	80067ee <_dtoa_r+0x80e>
 80067bc:	9b02      	ldr	r3, [sp, #8]
 80067be:	b9b3      	cbnz	r3, 80067ee <_dtoa_r+0x80e>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80067c6:	b9a2      	cbnz	r2, 80067f2 <_dtoa_r+0x812>
 80067c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067cc:	0d12      	lsrs	r2, r2, #20
 80067ce:	0512      	lsls	r2, r2, #20
 80067d0:	b18a      	cbz	r2, 80067f6 <_dtoa_r+0x816>
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	9304      	str	r3, [sp, #16]
 80067d8:	9b05      	ldr	r3, [sp, #20]
 80067da:	3301      	adds	r3, #1
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	2301      	movs	r3, #1
 80067e0:	930a      	str	r3, [sp, #40]	; 0x28
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f47f af70 	bne.w	80066ca <_dtoa_r+0x6ea>
 80067ea:	2001      	movs	r0, #1
 80067ec:	e775      	b.n	80066da <_dtoa_r+0x6fa>
 80067ee:	2300      	movs	r3, #0
 80067f0:	e7f6      	b.n	80067e0 <_dtoa_r+0x800>
 80067f2:	9b02      	ldr	r3, [sp, #8]
 80067f4:	e7f4      	b.n	80067e0 <_dtoa_r+0x800>
 80067f6:	920a      	str	r2, [sp, #40]	; 0x28
 80067f8:	e7f3      	b.n	80067e2 <_dtoa_r+0x802>
 80067fa:	d082      	beq.n	8006702 <_dtoa_r+0x722>
 80067fc:	4610      	mov	r0, r2
 80067fe:	301c      	adds	r0, #28
 8006800:	e778      	b.n	80066f4 <_dtoa_r+0x714>
 8006802:	f1b9 0f00 	cmp.w	r9, #0
 8006806:	dc37      	bgt.n	8006878 <_dtoa_r+0x898>
 8006808:	9b06      	ldr	r3, [sp, #24]
 800680a:	2b02      	cmp	r3, #2
 800680c:	dd34      	ble.n	8006878 <_dtoa_r+0x898>
 800680e:	46ca      	mov	sl, r9
 8006810:	f1ba 0f00 	cmp.w	sl, #0
 8006814:	d10d      	bne.n	8006832 <_dtoa_r+0x852>
 8006816:	4621      	mov	r1, r4
 8006818:	4653      	mov	r3, sl
 800681a:	2205      	movs	r2, #5
 800681c:	4630      	mov	r0, r6
 800681e:	f000 f9bb 	bl	8006b98 <__multadd>
 8006822:	4601      	mov	r1, r0
 8006824:	4604      	mov	r4, r0
 8006826:	4628      	mov	r0, r5
 8006828:	f000 fbd6 	bl	8006fd8 <__mcmp>
 800682c:	2800      	cmp	r0, #0
 800682e:	f73f adeb 	bgt.w	8006408 <_dtoa_r+0x428>
 8006832:	9b08      	ldr	r3, [sp, #32]
 8006834:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006838:	ea6f 0b03 	mvn.w	fp, r3
 800683c:	f04f 0900 	mov.w	r9, #0
 8006840:	4621      	mov	r1, r4
 8006842:	4630      	mov	r0, r6
 8006844:	f000 f986 	bl	8006b54 <_Bfree>
 8006848:	2f00      	cmp	r7, #0
 800684a:	f43f aea8 	beq.w	800659e <_dtoa_r+0x5be>
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	d005      	beq.n	8006860 <_dtoa_r+0x880>
 8006854:	45b9      	cmp	r9, r7
 8006856:	d003      	beq.n	8006860 <_dtoa_r+0x880>
 8006858:	4649      	mov	r1, r9
 800685a:	4630      	mov	r0, r6
 800685c:	f000 f97a 	bl	8006b54 <_Bfree>
 8006860:	4639      	mov	r1, r7
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f976 	bl	8006b54 <_Bfree>
 8006868:	e699      	b.n	800659e <_dtoa_r+0x5be>
 800686a:	2400      	movs	r4, #0
 800686c:	4627      	mov	r7, r4
 800686e:	e7e0      	b.n	8006832 <_dtoa_r+0x852>
 8006870:	46bb      	mov	fp, r7
 8006872:	4604      	mov	r4, r0
 8006874:	4607      	mov	r7, r0
 8006876:	e5c7      	b.n	8006408 <_dtoa_r+0x428>
 8006878:	9b07      	ldr	r3, [sp, #28]
 800687a:	46ca      	mov	sl, r9
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8100 	beq.w	8006a82 <_dtoa_r+0xaa2>
 8006882:	f1b8 0f00 	cmp.w	r8, #0
 8006886:	dd05      	ble.n	8006894 <_dtoa_r+0x8b4>
 8006888:	4639      	mov	r1, r7
 800688a:	4642      	mov	r2, r8
 800688c:	4630      	mov	r0, r6
 800688e:	f000 fb33 	bl	8006ef8 <__lshift>
 8006892:	4607      	mov	r7, r0
 8006894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d05d      	beq.n	8006956 <_dtoa_r+0x976>
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	4630      	mov	r0, r6
 800689e:	f000 f919 	bl	8006ad4 <_Balloc>
 80068a2:	4680      	mov	r8, r0
 80068a4:	b928      	cbnz	r0, 80068b2 <_dtoa_r+0x8d2>
 80068a6:	4b82      	ldr	r3, [pc, #520]	; (8006ab0 <_dtoa_r+0xad0>)
 80068a8:	4602      	mov	r2, r0
 80068aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068ae:	f7ff bbaf 	b.w	8006010 <_dtoa_r+0x30>
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	3202      	adds	r2, #2
 80068b6:	0092      	lsls	r2, r2, #2
 80068b8:	f107 010c 	add.w	r1, r7, #12
 80068bc:	300c      	adds	r0, #12
 80068be:	f7fe fea9 	bl	8005614 <memcpy>
 80068c2:	2201      	movs	r2, #1
 80068c4:	4641      	mov	r1, r8
 80068c6:	4630      	mov	r0, r6
 80068c8:	f000 fb16 	bl	8006ef8 <__lshift>
 80068cc:	9b01      	ldr	r3, [sp, #4]
 80068ce:	3301      	adds	r3, #1
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	4453      	add	r3, sl
 80068d6:	9308      	str	r3, [sp, #32]
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	46b9      	mov	r9, r7
 80068e0:	9307      	str	r3, [sp, #28]
 80068e2:	4607      	mov	r7, r0
 80068e4:	9b04      	ldr	r3, [sp, #16]
 80068e6:	4621      	mov	r1, r4
 80068e8:	3b01      	subs	r3, #1
 80068ea:	4628      	mov	r0, r5
 80068ec:	9302      	str	r3, [sp, #8]
 80068ee:	f7ff fae9 	bl	8005ec4 <quorem>
 80068f2:	4603      	mov	r3, r0
 80068f4:	3330      	adds	r3, #48	; 0x30
 80068f6:	9005      	str	r0, [sp, #20]
 80068f8:	4649      	mov	r1, r9
 80068fa:	4628      	mov	r0, r5
 80068fc:	9309      	str	r3, [sp, #36]	; 0x24
 80068fe:	f000 fb6b 	bl	8006fd8 <__mcmp>
 8006902:	463a      	mov	r2, r7
 8006904:	4682      	mov	sl, r0
 8006906:	4621      	mov	r1, r4
 8006908:	4630      	mov	r0, r6
 800690a:	f000 fb81 	bl	8007010 <__mdiff>
 800690e:	68c2      	ldr	r2, [r0, #12]
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	4680      	mov	r8, r0
 8006914:	bb0a      	cbnz	r2, 800695a <_dtoa_r+0x97a>
 8006916:	4601      	mov	r1, r0
 8006918:	4628      	mov	r0, r5
 800691a:	f000 fb5d 	bl	8006fd8 <__mcmp>
 800691e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006920:	4602      	mov	r2, r0
 8006922:	4641      	mov	r1, r8
 8006924:	4630      	mov	r0, r6
 8006926:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800692a:	f000 f913 	bl	8006b54 <_Bfree>
 800692e:	9b06      	ldr	r3, [sp, #24]
 8006930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006932:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006936:	ea43 0102 	orr.w	r1, r3, r2
 800693a:	9b07      	ldr	r3, [sp, #28]
 800693c:	430b      	orrs	r3, r1
 800693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006940:	d10d      	bne.n	800695e <_dtoa_r+0x97e>
 8006942:	2b39      	cmp	r3, #57	; 0x39
 8006944:	d029      	beq.n	800699a <_dtoa_r+0x9ba>
 8006946:	f1ba 0f00 	cmp.w	sl, #0
 800694a:	dd01      	ble.n	8006950 <_dtoa_r+0x970>
 800694c:	9b05      	ldr	r3, [sp, #20]
 800694e:	3331      	adds	r3, #49	; 0x31
 8006950:	9a02      	ldr	r2, [sp, #8]
 8006952:	7013      	strb	r3, [r2, #0]
 8006954:	e774      	b.n	8006840 <_dtoa_r+0x860>
 8006956:	4638      	mov	r0, r7
 8006958:	e7b8      	b.n	80068cc <_dtoa_r+0x8ec>
 800695a:	2201      	movs	r2, #1
 800695c:	e7e1      	b.n	8006922 <_dtoa_r+0x942>
 800695e:	f1ba 0f00 	cmp.w	sl, #0
 8006962:	db06      	blt.n	8006972 <_dtoa_r+0x992>
 8006964:	9906      	ldr	r1, [sp, #24]
 8006966:	ea41 0a0a 	orr.w	sl, r1, sl
 800696a:	9907      	ldr	r1, [sp, #28]
 800696c:	ea5a 0101 	orrs.w	r1, sl, r1
 8006970:	d120      	bne.n	80069b4 <_dtoa_r+0x9d4>
 8006972:	2a00      	cmp	r2, #0
 8006974:	ddec      	ble.n	8006950 <_dtoa_r+0x970>
 8006976:	4629      	mov	r1, r5
 8006978:	2201      	movs	r2, #1
 800697a:	4630      	mov	r0, r6
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	f000 fabb 	bl	8006ef8 <__lshift>
 8006982:	4621      	mov	r1, r4
 8006984:	4605      	mov	r5, r0
 8006986:	f000 fb27 	bl	8006fd8 <__mcmp>
 800698a:	2800      	cmp	r0, #0
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	dc02      	bgt.n	8006996 <_dtoa_r+0x9b6>
 8006990:	d1de      	bne.n	8006950 <_dtoa_r+0x970>
 8006992:	07da      	lsls	r2, r3, #31
 8006994:	d5dc      	bpl.n	8006950 <_dtoa_r+0x970>
 8006996:	2b39      	cmp	r3, #57	; 0x39
 8006998:	d1d8      	bne.n	800694c <_dtoa_r+0x96c>
 800699a:	9a02      	ldr	r2, [sp, #8]
 800699c:	2339      	movs	r3, #57	; 0x39
 800699e:	7013      	strb	r3, [r2, #0]
 80069a0:	4643      	mov	r3, r8
 80069a2:	4698      	mov	r8, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80069aa:	2a39      	cmp	r2, #57	; 0x39
 80069ac:	d051      	beq.n	8006a52 <_dtoa_r+0xa72>
 80069ae:	3201      	adds	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e745      	b.n	8006840 <_dtoa_r+0x860>
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	dd03      	ble.n	80069c0 <_dtoa_r+0x9e0>
 80069b8:	2b39      	cmp	r3, #57	; 0x39
 80069ba:	d0ee      	beq.n	800699a <_dtoa_r+0x9ba>
 80069bc:	3301      	adds	r3, #1
 80069be:	e7c7      	b.n	8006950 <_dtoa_r+0x970>
 80069c0:	9a04      	ldr	r2, [sp, #16]
 80069c2:	9908      	ldr	r1, [sp, #32]
 80069c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80069c8:	428a      	cmp	r2, r1
 80069ca:	d02b      	beq.n	8006a24 <_dtoa_r+0xa44>
 80069cc:	4629      	mov	r1, r5
 80069ce:	2300      	movs	r3, #0
 80069d0:	220a      	movs	r2, #10
 80069d2:	4630      	mov	r0, r6
 80069d4:	f000 f8e0 	bl	8006b98 <__multadd>
 80069d8:	45b9      	cmp	r9, r7
 80069da:	4605      	mov	r5, r0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	f04f 020a 	mov.w	r2, #10
 80069e4:	4649      	mov	r1, r9
 80069e6:	4630      	mov	r0, r6
 80069e8:	d107      	bne.n	80069fa <_dtoa_r+0xa1a>
 80069ea:	f000 f8d5 	bl	8006b98 <__multadd>
 80069ee:	4681      	mov	r9, r0
 80069f0:	4607      	mov	r7, r0
 80069f2:	9b04      	ldr	r3, [sp, #16]
 80069f4:	3301      	adds	r3, #1
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	e774      	b.n	80068e4 <_dtoa_r+0x904>
 80069fa:	f000 f8cd 	bl	8006b98 <__multadd>
 80069fe:	4639      	mov	r1, r7
 8006a00:	4681      	mov	r9, r0
 8006a02:	2300      	movs	r3, #0
 8006a04:	220a      	movs	r2, #10
 8006a06:	4630      	mov	r0, r6
 8006a08:	f000 f8c6 	bl	8006b98 <__multadd>
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	e7f0      	b.n	80069f2 <_dtoa_r+0xa12>
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	9a01      	ldr	r2, [sp, #4]
 8006a16:	bfcc      	ite	gt
 8006a18:	46d0      	movgt	r8, sl
 8006a1a:	f04f 0801 	movle.w	r8, #1
 8006a1e:	4490      	add	r8, r2
 8006a20:	f04f 0900 	mov.w	r9, #0
 8006a24:	4629      	mov	r1, r5
 8006a26:	2201      	movs	r2, #1
 8006a28:	4630      	mov	r0, r6
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	f000 fa64 	bl	8006ef8 <__lshift>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4605      	mov	r5, r0
 8006a34:	f000 fad0 	bl	8006fd8 <__mcmp>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dcb1      	bgt.n	80069a0 <_dtoa_r+0x9c0>
 8006a3c:	d102      	bne.n	8006a44 <_dtoa_r+0xa64>
 8006a3e:	9b02      	ldr	r3, [sp, #8]
 8006a40:	07db      	lsls	r3, r3, #31
 8006a42:	d4ad      	bmi.n	80069a0 <_dtoa_r+0x9c0>
 8006a44:	4643      	mov	r3, r8
 8006a46:	4698      	mov	r8, r3
 8006a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a4c:	2a30      	cmp	r2, #48	; 0x30
 8006a4e:	d0fa      	beq.n	8006a46 <_dtoa_r+0xa66>
 8006a50:	e6f6      	b.n	8006840 <_dtoa_r+0x860>
 8006a52:	9a01      	ldr	r2, [sp, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d1a4      	bne.n	80069a2 <_dtoa_r+0x9c2>
 8006a58:	f10b 0b01 	add.w	fp, fp, #1
 8006a5c:	2331      	movs	r3, #49	; 0x31
 8006a5e:	e778      	b.n	8006952 <_dtoa_r+0x972>
 8006a60:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <_dtoa_r+0xad4>)
 8006a62:	f7ff bb27 	b.w	80060b4 <_dtoa_r+0xd4>
 8006a66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f47f ab03 	bne.w	8006074 <_dtoa_r+0x94>
 8006a6e:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <_dtoa_r+0xad8>)
 8006a70:	f7ff bb20 	b.w	80060b4 <_dtoa_r+0xd4>
 8006a74:	f1ba 0f00 	cmp.w	sl, #0
 8006a78:	dc03      	bgt.n	8006a82 <_dtoa_r+0xaa2>
 8006a7a:	9b06      	ldr	r3, [sp, #24]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	f73f aec7 	bgt.w	8006810 <_dtoa_r+0x830>
 8006a82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a86:	4621      	mov	r1, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f7ff fa1b 	bl	8005ec4 <quorem>
 8006a8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006a92:	f808 3b01 	strb.w	r3, [r8], #1
 8006a96:	9a01      	ldr	r2, [sp, #4]
 8006a98:	eba8 0202 	sub.w	r2, r8, r2
 8006a9c:	4592      	cmp	sl, r2
 8006a9e:	ddb7      	ble.n	8006a10 <_dtoa_r+0xa30>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 f876 	bl	8006b98 <__multadd>
 8006aac:	4605      	mov	r5, r0
 8006aae:	e7ea      	b.n	8006a86 <_dtoa_r+0xaa6>
 8006ab0:	08007ff7 	.word	0x08007ff7
 8006ab4:	08007f54 	.word	0x08007f54
 8006ab8:	08007f78 	.word	0x08007f78

08006abc <_localeconv_r>:
 8006abc:	4800      	ldr	r0, [pc, #0]	; (8006ac0 <_localeconv_r+0x4>)
 8006abe:	4770      	bx	lr
 8006ac0:	20000160 	.word	0x20000160

08006ac4 <malloc>:
 8006ac4:	4b02      	ldr	r3, [pc, #8]	; (8006ad0 <malloc+0xc>)
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	f000 bc09 	b.w	80072e0 <_malloc_r>
 8006ace:	bf00      	nop
 8006ad0:	2000000c 	.word	0x2000000c

08006ad4 <_Balloc>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ad8:	4604      	mov	r4, r0
 8006ada:	460d      	mov	r5, r1
 8006adc:	b976      	cbnz	r6, 8006afc <_Balloc+0x28>
 8006ade:	2010      	movs	r0, #16
 8006ae0:	f7ff fff0 	bl	8006ac4 <malloc>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae8:	b920      	cbnz	r0, 8006af4 <_Balloc+0x20>
 8006aea:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <_Balloc+0x78>)
 8006aec:	4818      	ldr	r0, [pc, #96]	; (8006b50 <_Balloc+0x7c>)
 8006aee:	2166      	movs	r1, #102	; 0x66
 8006af0:	f000 fc7a 	bl	80073e8 <__assert_func>
 8006af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af8:	6006      	str	r6, [r0, #0]
 8006afa:	60c6      	str	r6, [r0, #12]
 8006afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006afe:	68f3      	ldr	r3, [r6, #12]
 8006b00:	b183      	cbz	r3, 8006b24 <_Balloc+0x50>
 8006b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b0a:	b9b8      	cbnz	r0, 8006b3c <_Balloc+0x68>
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b12:	1d72      	adds	r2, r6, #5
 8006b14:	0092      	lsls	r2, r2, #2
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fb60 	bl	80071dc <_calloc_r>
 8006b1c:	b160      	cbz	r0, 8006b38 <_Balloc+0x64>
 8006b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b22:	e00e      	b.n	8006b42 <_Balloc+0x6e>
 8006b24:	2221      	movs	r2, #33	; 0x21
 8006b26:	2104      	movs	r1, #4
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fb57 	bl	80071dc <_calloc_r>
 8006b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b30:	60f0      	str	r0, [r6, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e4      	bne.n	8006b02 <_Balloc+0x2e>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	6802      	ldr	r2, [r0, #0]
 8006b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b42:	2300      	movs	r3, #0
 8006b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b48:	e7f7      	b.n	8006b3a <_Balloc+0x66>
 8006b4a:	bf00      	nop
 8006b4c:	08007f85 	.word	0x08007f85
 8006b50:	08008008 	.word	0x08008008

08006b54 <_Bfree>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b976      	cbnz	r6, 8006b7c <_Bfree+0x28>
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7ff ffb0 	bl	8006ac4 <malloc>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6268      	str	r0, [r5, #36]	; 0x24
 8006b68:	b920      	cbnz	r0, 8006b74 <_Bfree+0x20>
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <_Bfree+0x3c>)
 8006b6c:	4809      	ldr	r0, [pc, #36]	; (8006b94 <_Bfree+0x40>)
 8006b6e:	218a      	movs	r1, #138	; 0x8a
 8006b70:	f000 fc3a 	bl	80073e8 <__assert_func>
 8006b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b78:	6006      	str	r6, [r0, #0]
 8006b7a:	60c6      	str	r6, [r0, #12]
 8006b7c:	b13c      	cbz	r4, 8006b8e <_Bfree+0x3a>
 8006b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b80:	6862      	ldr	r2, [r4, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b88:	6021      	str	r1, [r4, #0]
 8006b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	08007f85 	.word	0x08007f85
 8006b94:	08008008 	.word	0x08008008

08006b98 <__multadd>:
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	690d      	ldr	r5, [r1, #16]
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	461e      	mov	r6, r3
 8006ba4:	f101 0c14 	add.w	ip, r1, #20
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f8dc 3000 	ldr.w	r3, [ip]
 8006bae:	b299      	uxth	r1, r3
 8006bb0:	fb02 6101 	mla	r1, r2, r1, r6
 8006bb4:	0c1e      	lsrs	r6, r3, #16
 8006bb6:	0c0b      	lsrs	r3, r1, #16
 8006bb8:	fb02 3306 	mla	r3, r2, r6, r3
 8006bbc:	b289      	uxth	r1, r1
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bc4:	4285      	cmp	r5, r0
 8006bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8006bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bce:	dcec      	bgt.n	8006baa <__multadd+0x12>
 8006bd0:	b30e      	cbz	r6, 8006c16 <__multadd+0x7e>
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc19      	bgt.n	8006c0c <__multadd+0x74>
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4638      	mov	r0, r7
 8006bdc:	3101      	adds	r1, #1
 8006bde:	f7ff ff79 	bl	8006ad4 <_Balloc>
 8006be2:	4680      	mov	r8, r0
 8006be4:	b928      	cbnz	r0, 8006bf2 <__multadd+0x5a>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <__multadd+0x84>)
 8006bea:	480d      	ldr	r0, [pc, #52]	; (8006c20 <__multadd+0x88>)
 8006bec:	21b5      	movs	r1, #181	; 0xb5
 8006bee:	f000 fbfb 	bl	80073e8 <__assert_func>
 8006bf2:	6922      	ldr	r2, [r4, #16]
 8006bf4:	3202      	adds	r2, #2
 8006bf6:	f104 010c 	add.w	r1, r4, #12
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	300c      	adds	r0, #12
 8006bfe:	f7fe fd09 	bl	8005614 <memcpy>
 8006c02:	4621      	mov	r1, r4
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff ffa5 	bl	8006b54 <_Bfree>
 8006c0a:	4644      	mov	r4, r8
 8006c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c10:	3501      	adds	r5, #1
 8006c12:	615e      	str	r6, [r3, #20]
 8006c14:	6125      	str	r5, [r4, #16]
 8006c16:	4620      	mov	r0, r4
 8006c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1c:	08007ff7 	.word	0x08007ff7
 8006c20:	08008008 	.word	0x08008008

08006c24 <__hi0bits>:
 8006c24:	0c03      	lsrs	r3, r0, #16
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	b9d3      	cbnz	r3, 8006c60 <__hi0bits+0x3c>
 8006c2a:	0400      	lsls	r0, r0, #16
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c32:	bf04      	itt	eq
 8006c34:	0200      	lsleq	r0, r0, #8
 8006c36:	3308      	addeq	r3, #8
 8006c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c3c:	bf04      	itt	eq
 8006c3e:	0100      	lsleq	r0, r0, #4
 8006c40:	3304      	addeq	r3, #4
 8006c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c46:	bf04      	itt	eq
 8006c48:	0080      	lsleq	r0, r0, #2
 8006c4a:	3302      	addeq	r3, #2
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	db05      	blt.n	8006c5c <__hi0bits+0x38>
 8006c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c54:	f103 0301 	add.w	r3, r3, #1
 8006c58:	bf08      	it	eq
 8006c5a:	2320      	moveq	r3, #32
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	4770      	bx	lr
 8006c60:	2300      	movs	r3, #0
 8006c62:	e7e4      	b.n	8006c2e <__hi0bits+0xa>

08006c64 <__lo0bits>:
 8006c64:	6803      	ldr	r3, [r0, #0]
 8006c66:	f013 0207 	ands.w	r2, r3, #7
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	d00b      	beq.n	8006c86 <__lo0bits+0x22>
 8006c6e:	07da      	lsls	r2, r3, #31
 8006c70:	d423      	bmi.n	8006cba <__lo0bits+0x56>
 8006c72:	0798      	lsls	r0, r3, #30
 8006c74:	bf49      	itett	mi
 8006c76:	085b      	lsrmi	r3, r3, #1
 8006c78:	089b      	lsrpl	r3, r3, #2
 8006c7a:	2001      	movmi	r0, #1
 8006c7c:	600b      	strmi	r3, [r1, #0]
 8006c7e:	bf5c      	itt	pl
 8006c80:	600b      	strpl	r3, [r1, #0]
 8006c82:	2002      	movpl	r0, #2
 8006c84:	4770      	bx	lr
 8006c86:	b298      	uxth	r0, r3
 8006c88:	b9a8      	cbnz	r0, 8006cb6 <__lo0bits+0x52>
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	2010      	movs	r0, #16
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	b90a      	cbnz	r2, 8006c96 <__lo0bits+0x32>
 8006c92:	3008      	adds	r0, #8
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	071a      	lsls	r2, r3, #28
 8006c98:	bf04      	itt	eq
 8006c9a:	091b      	lsreq	r3, r3, #4
 8006c9c:	3004      	addeq	r0, #4
 8006c9e:	079a      	lsls	r2, r3, #30
 8006ca0:	bf04      	itt	eq
 8006ca2:	089b      	lsreq	r3, r3, #2
 8006ca4:	3002      	addeq	r0, #2
 8006ca6:	07da      	lsls	r2, r3, #31
 8006ca8:	d403      	bmi.n	8006cb2 <__lo0bits+0x4e>
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	f100 0001 	add.w	r0, r0, #1
 8006cb0:	d005      	beq.n	8006cbe <__lo0bits+0x5a>
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	e7e9      	b.n	8006c8e <__lo0bits+0x2a>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	4770      	bx	lr
 8006cbe:	2020      	movs	r0, #32
 8006cc0:	4770      	bx	lr
	...

08006cc4 <__i2b>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	2101      	movs	r1, #1
 8006cca:	f7ff ff03 	bl	8006ad4 <_Balloc>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	b928      	cbnz	r0, 8006cde <__i2b+0x1a>
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <__i2b+0x24>)
 8006cd4:	4805      	ldr	r0, [pc, #20]	; (8006cec <__i2b+0x28>)
 8006cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cda:	f000 fb85 	bl	80073e8 <__assert_func>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	6144      	str	r4, [r0, #20]
 8006ce2:	6103      	str	r3, [r0, #16]
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08007ff7 	.word	0x08007ff7
 8006cec:	08008008 	.word	0x08008008

08006cf0 <__multiply>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	4691      	mov	r9, r2
 8006cf6:	690a      	ldr	r2, [r1, #16]
 8006cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	bfb8      	it	lt
 8006d00:	460b      	movlt	r3, r1
 8006d02:	460c      	mov	r4, r1
 8006d04:	bfbc      	itt	lt
 8006d06:	464c      	movlt	r4, r9
 8006d08:	4699      	movlt	r9, r3
 8006d0a:	6927      	ldr	r7, [r4, #16]
 8006d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d10:	68a3      	ldr	r3, [r4, #8]
 8006d12:	6861      	ldr	r1, [r4, #4]
 8006d14:	eb07 060a 	add.w	r6, r7, sl
 8006d18:	42b3      	cmp	r3, r6
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	bfb8      	it	lt
 8006d1e:	3101      	addlt	r1, #1
 8006d20:	f7ff fed8 	bl	8006ad4 <_Balloc>
 8006d24:	b930      	cbnz	r0, 8006d34 <__multiply+0x44>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b44      	ldr	r3, [pc, #272]	; (8006e3c <__multiply+0x14c>)
 8006d2a:	4845      	ldr	r0, [pc, #276]	; (8006e40 <__multiply+0x150>)
 8006d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8006d30:	f000 fb5a 	bl	80073e8 <__assert_func>
 8006d34:	f100 0514 	add.w	r5, r0, #20
 8006d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4543      	cmp	r3, r8
 8006d42:	d321      	bcc.n	8006d88 <__multiply+0x98>
 8006d44:	f104 0314 	add.w	r3, r4, #20
 8006d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d4c:	f109 0314 	add.w	r3, r9, #20
 8006d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	1b3a      	subs	r2, r7, r4
 8006d58:	3a15      	subs	r2, #21
 8006d5a:	f022 0203 	bic.w	r2, r2, #3
 8006d5e:	3204      	adds	r2, #4
 8006d60:	f104 0115 	add.w	r1, r4, #21
 8006d64:	428f      	cmp	r7, r1
 8006d66:	bf38      	it	cc
 8006d68:	2204      	movcc	r2, #4
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9a02      	ldr	r2, [sp, #8]
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d80c      	bhi.n	8006d8e <__multiply+0x9e>
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	dd03      	ble.n	8006d80 <__multiply+0x90>
 8006d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d05a      	beq.n	8006e36 <__multiply+0x146>
 8006d80:	6106      	str	r6, [r0, #16]
 8006d82:	b005      	add	sp, #20
 8006d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	f843 2b04 	str.w	r2, [r3], #4
 8006d8c:	e7d8      	b.n	8006d40 <__multiply+0x50>
 8006d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d92:	f1ba 0f00 	cmp.w	sl, #0
 8006d96:	d024      	beq.n	8006de2 <__multiply+0xf2>
 8006d98:	f104 0e14 	add.w	lr, r4, #20
 8006d9c:	46a9      	mov	r9, r5
 8006d9e:	f04f 0c00 	mov.w	ip, #0
 8006da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006da6:	f8d9 1000 	ldr.w	r1, [r9]
 8006daa:	fa1f fb82 	uxth.w	fp, r2
 8006dae:	b289      	uxth	r1, r1
 8006db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006db8:	f8d9 2000 	ldr.w	r2, [r9]
 8006dbc:	4461      	add	r1, ip
 8006dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006dca:	b289      	uxth	r1, r1
 8006dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dd0:	4577      	cmp	r7, lr
 8006dd2:	f849 1b04 	str.w	r1, [r9], #4
 8006dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dda:	d8e2      	bhi.n	8006da2 <__multiply+0xb2>
 8006ddc:	9a01      	ldr	r2, [sp, #4]
 8006dde:	f845 c002 	str.w	ip, [r5, r2]
 8006de2:	9a03      	ldr	r2, [sp, #12]
 8006de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006de8:	3304      	adds	r3, #4
 8006dea:	f1b9 0f00 	cmp.w	r9, #0
 8006dee:	d020      	beq.n	8006e32 <__multiply+0x142>
 8006df0:	6829      	ldr	r1, [r5, #0]
 8006df2:	f104 0c14 	add.w	ip, r4, #20
 8006df6:	46ae      	mov	lr, r5
 8006df8:	f04f 0a00 	mov.w	sl, #0
 8006dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8006e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e04:	fb09 220b 	mla	r2, r9, fp, r2
 8006e08:	4492      	add	sl, r2
 8006e0a:	b289      	uxth	r1, r1
 8006e0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e10:	f84e 1b04 	str.w	r1, [lr], #4
 8006e14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e18:	f8be 1000 	ldrh.w	r1, [lr]
 8006e1c:	0c12      	lsrs	r2, r2, #16
 8006e1e:	fb09 1102 	mla	r1, r9, r2, r1
 8006e22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e26:	4567      	cmp	r7, ip
 8006e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e2c:	d8e6      	bhi.n	8006dfc <__multiply+0x10c>
 8006e2e:	9a01      	ldr	r2, [sp, #4]
 8006e30:	50a9      	str	r1, [r5, r2]
 8006e32:	3504      	adds	r5, #4
 8006e34:	e79a      	b.n	8006d6c <__multiply+0x7c>
 8006e36:	3e01      	subs	r6, #1
 8006e38:	e79c      	b.n	8006d74 <__multiply+0x84>
 8006e3a:	bf00      	nop
 8006e3c:	08007ff7 	.word	0x08007ff7
 8006e40:	08008008 	.word	0x08008008

08006e44 <__pow5mult>:
 8006e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e48:	4615      	mov	r5, r2
 8006e4a:	f012 0203 	ands.w	r2, r2, #3
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460f      	mov	r7, r1
 8006e52:	d007      	beq.n	8006e64 <__pow5mult+0x20>
 8006e54:	4c25      	ldr	r4, [pc, #148]	; (8006eec <__pow5mult+0xa8>)
 8006e56:	3a01      	subs	r2, #1
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e5e:	f7ff fe9b 	bl	8006b98 <__multadd>
 8006e62:	4607      	mov	r7, r0
 8006e64:	10ad      	asrs	r5, r5, #2
 8006e66:	d03d      	beq.n	8006ee4 <__pow5mult+0xa0>
 8006e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e6a:	b97c      	cbnz	r4, 8006e8c <__pow5mult+0x48>
 8006e6c:	2010      	movs	r0, #16
 8006e6e:	f7ff fe29 	bl	8006ac4 <malloc>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6270      	str	r0, [r6, #36]	; 0x24
 8006e76:	b928      	cbnz	r0, 8006e84 <__pow5mult+0x40>
 8006e78:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <__pow5mult+0xac>)
 8006e7a:	481e      	ldr	r0, [pc, #120]	; (8006ef4 <__pow5mult+0xb0>)
 8006e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e80:	f000 fab2 	bl	80073e8 <__assert_func>
 8006e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e88:	6004      	str	r4, [r0, #0]
 8006e8a:	60c4      	str	r4, [r0, #12]
 8006e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e94:	b94c      	cbnz	r4, 8006eaa <__pow5mult+0x66>
 8006e96:	f240 2171 	movw	r1, #625	; 0x271
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ff12 	bl	8006cc4 <__i2b>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	6003      	str	r3, [r0, #0]
 8006eaa:	f04f 0900 	mov.w	r9, #0
 8006eae:	07eb      	lsls	r3, r5, #31
 8006eb0:	d50a      	bpl.n	8006ec8 <__pow5mult+0x84>
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff1a 	bl	8006cf0 <__multiply>
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7ff fe47 	bl	8006b54 <_Bfree>
 8006ec6:	4647      	mov	r7, r8
 8006ec8:	106d      	asrs	r5, r5, #1
 8006eca:	d00b      	beq.n	8006ee4 <__pow5mult+0xa0>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	b938      	cbnz	r0, 8006ee0 <__pow5mult+0x9c>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff ff0b 	bl	8006cf0 <__multiply>
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	f8c0 9000 	str.w	r9, [r0]
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	e7e4      	b.n	8006eae <__pow5mult+0x6a>
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eea:	bf00      	nop
 8006eec:	08008158 	.word	0x08008158
 8006ef0:	08007f85 	.word	0x08007f85
 8006ef4:	08008008 	.word	0x08008008

08006ef8 <__lshift>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	460c      	mov	r4, r1
 8006efe:	6849      	ldr	r1, [r1, #4]
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f06:	68a3      	ldr	r3, [r4, #8]
 8006f08:	4607      	mov	r7, r0
 8006f0a:	4691      	mov	r9, r2
 8006f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f10:	f108 0601 	add.w	r6, r8, #1
 8006f14:	42b3      	cmp	r3, r6
 8006f16:	db0b      	blt.n	8006f30 <__lshift+0x38>
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff fddb 	bl	8006ad4 <_Balloc>
 8006f1e:	4605      	mov	r5, r0
 8006f20:	b948      	cbnz	r0, 8006f36 <__lshift+0x3e>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <__lshift+0xd8>)
 8006f26:	482b      	ldr	r0, [pc, #172]	; (8006fd4 <__lshift+0xdc>)
 8006f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f2c:	f000 fa5c 	bl	80073e8 <__assert_func>
 8006f30:	3101      	adds	r1, #1
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	e7ee      	b.n	8006f14 <__lshift+0x1c>
 8006f36:	2300      	movs	r3, #0
 8006f38:	f100 0114 	add.w	r1, r0, #20
 8006f3c:	f100 0210 	add.w	r2, r0, #16
 8006f40:	4618      	mov	r0, r3
 8006f42:	4553      	cmp	r3, sl
 8006f44:	db37      	blt.n	8006fb6 <__lshift+0xbe>
 8006f46:	6920      	ldr	r0, [r4, #16]
 8006f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f4c:	f104 0314 	add.w	r3, r4, #20
 8006f50:	f019 091f 	ands.w	r9, r9, #31
 8006f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f5c:	d02f      	beq.n	8006fbe <__lshift+0xc6>
 8006f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8006f62:	468a      	mov	sl, r1
 8006f64:	f04f 0c00 	mov.w	ip, #0
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	fa02 f209 	lsl.w	r2, r2, r9
 8006f6e:	ea42 020c 	orr.w	r2, r2, ip
 8006f72:	f84a 2b04 	str.w	r2, [sl], #4
 8006f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f7a:	4298      	cmp	r0, r3
 8006f7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f80:	d8f2      	bhi.n	8006f68 <__lshift+0x70>
 8006f82:	1b03      	subs	r3, r0, r4
 8006f84:	3b15      	subs	r3, #21
 8006f86:	f023 0303 	bic.w	r3, r3, #3
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	f104 0215 	add.w	r2, r4, #21
 8006f90:	4290      	cmp	r0, r2
 8006f92:	bf38      	it	cc
 8006f94:	2304      	movcc	r3, #4
 8006f96:	f841 c003 	str.w	ip, [r1, r3]
 8006f9a:	f1bc 0f00 	cmp.w	ip, #0
 8006f9e:	d001      	beq.n	8006fa4 <__lshift+0xac>
 8006fa0:	f108 0602 	add.w	r6, r8, #2
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	612e      	str	r6, [r5, #16]
 8006faa:	4621      	mov	r1, r4
 8006fac:	f7ff fdd2 	bl	8006b54 <_Bfree>
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fba:	3301      	adds	r3, #1
 8006fbc:	e7c1      	b.n	8006f42 <__lshift+0x4a>
 8006fbe:	3904      	subs	r1, #4
 8006fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fc8:	4298      	cmp	r0, r3
 8006fca:	d8f9      	bhi.n	8006fc0 <__lshift+0xc8>
 8006fcc:	e7ea      	b.n	8006fa4 <__lshift+0xac>
 8006fce:	bf00      	nop
 8006fd0:	08007ff7 	.word	0x08007ff7
 8006fd4:	08008008 	.word	0x08008008

08006fd8 <__mcmp>:
 8006fd8:	b530      	push	{r4, r5, lr}
 8006fda:	6902      	ldr	r2, [r0, #16]
 8006fdc:	690c      	ldr	r4, [r1, #16]
 8006fde:	1b12      	subs	r2, r2, r4
 8006fe0:	d10e      	bne.n	8007000 <__mcmp+0x28>
 8006fe2:	f100 0314 	add.w	r3, r0, #20
 8006fe6:	3114      	adds	r1, #20
 8006fe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d003      	beq.n	8007004 <__mcmp+0x2c>
 8006ffc:	d305      	bcc.n	800700a <__mcmp+0x32>
 8006ffe:	2201      	movs	r2, #1
 8007000:	4610      	mov	r0, r2
 8007002:	bd30      	pop	{r4, r5, pc}
 8007004:	4283      	cmp	r3, r0
 8007006:	d3f3      	bcc.n	8006ff0 <__mcmp+0x18>
 8007008:	e7fa      	b.n	8007000 <__mcmp+0x28>
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	e7f7      	b.n	8007000 <__mcmp+0x28>

08007010 <__mdiff>:
 8007010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	460c      	mov	r4, r1
 8007016:	4606      	mov	r6, r0
 8007018:	4611      	mov	r1, r2
 800701a:	4620      	mov	r0, r4
 800701c:	4690      	mov	r8, r2
 800701e:	f7ff ffdb 	bl	8006fd8 <__mcmp>
 8007022:	1e05      	subs	r5, r0, #0
 8007024:	d110      	bne.n	8007048 <__mdiff+0x38>
 8007026:	4629      	mov	r1, r5
 8007028:	4630      	mov	r0, r6
 800702a:	f7ff fd53 	bl	8006ad4 <_Balloc>
 800702e:	b930      	cbnz	r0, 800703e <__mdiff+0x2e>
 8007030:	4b3a      	ldr	r3, [pc, #232]	; (800711c <__mdiff+0x10c>)
 8007032:	4602      	mov	r2, r0
 8007034:	f240 2132 	movw	r1, #562	; 0x232
 8007038:	4839      	ldr	r0, [pc, #228]	; (8007120 <__mdiff+0x110>)
 800703a:	f000 f9d5 	bl	80073e8 <__assert_func>
 800703e:	2301      	movs	r3, #1
 8007040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	bfa4      	itt	ge
 800704a:	4643      	movge	r3, r8
 800704c:	46a0      	movge	r8, r4
 800704e:	4630      	mov	r0, r6
 8007050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007054:	bfa6      	itte	ge
 8007056:	461c      	movge	r4, r3
 8007058:	2500      	movge	r5, #0
 800705a:	2501      	movlt	r5, #1
 800705c:	f7ff fd3a 	bl	8006ad4 <_Balloc>
 8007060:	b920      	cbnz	r0, 800706c <__mdiff+0x5c>
 8007062:	4b2e      	ldr	r3, [pc, #184]	; (800711c <__mdiff+0x10c>)
 8007064:	4602      	mov	r2, r0
 8007066:	f44f 7110 	mov.w	r1, #576	; 0x240
 800706a:	e7e5      	b.n	8007038 <__mdiff+0x28>
 800706c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007070:	6926      	ldr	r6, [r4, #16]
 8007072:	60c5      	str	r5, [r0, #12]
 8007074:	f104 0914 	add.w	r9, r4, #20
 8007078:	f108 0514 	add.w	r5, r8, #20
 800707c:	f100 0e14 	add.w	lr, r0, #20
 8007080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007088:	f108 0210 	add.w	r2, r8, #16
 800708c:	46f2      	mov	sl, lr
 800708e:	2100      	movs	r1, #0
 8007090:	f859 3b04 	ldr.w	r3, [r9], #4
 8007094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007098:	fa1f f883 	uxth.w	r8, r3
 800709c:	fa11 f18b 	uxtah	r1, r1, fp
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	eba1 0808 	sub.w	r8, r1, r8
 80070a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070ae:	fa1f f888 	uxth.w	r8, r8
 80070b2:	1419      	asrs	r1, r3, #16
 80070b4:	454e      	cmp	r6, r9
 80070b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070ba:	f84a 3b04 	str.w	r3, [sl], #4
 80070be:	d8e7      	bhi.n	8007090 <__mdiff+0x80>
 80070c0:	1b33      	subs	r3, r6, r4
 80070c2:	3b15      	subs	r3, #21
 80070c4:	f023 0303 	bic.w	r3, r3, #3
 80070c8:	3304      	adds	r3, #4
 80070ca:	3415      	adds	r4, #21
 80070cc:	42a6      	cmp	r6, r4
 80070ce:	bf38      	it	cc
 80070d0:	2304      	movcc	r3, #4
 80070d2:	441d      	add	r5, r3
 80070d4:	4473      	add	r3, lr
 80070d6:	469e      	mov	lr, r3
 80070d8:	462e      	mov	r6, r5
 80070da:	4566      	cmp	r6, ip
 80070dc:	d30e      	bcc.n	80070fc <__mdiff+0xec>
 80070de:	f10c 0203 	add.w	r2, ip, #3
 80070e2:	1b52      	subs	r2, r2, r5
 80070e4:	f022 0203 	bic.w	r2, r2, #3
 80070e8:	3d03      	subs	r5, #3
 80070ea:	45ac      	cmp	ip, r5
 80070ec:	bf38      	it	cc
 80070ee:	2200      	movcc	r2, #0
 80070f0:	441a      	add	r2, r3
 80070f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070f6:	b17b      	cbz	r3, 8007118 <__mdiff+0x108>
 80070f8:	6107      	str	r7, [r0, #16]
 80070fa:	e7a3      	b.n	8007044 <__mdiff+0x34>
 80070fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007100:	fa11 f288 	uxtah	r2, r1, r8
 8007104:	1414      	asrs	r4, r2, #16
 8007106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800710a:	b292      	uxth	r2, r2
 800710c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007110:	f84e 2b04 	str.w	r2, [lr], #4
 8007114:	1421      	asrs	r1, r4, #16
 8007116:	e7e0      	b.n	80070da <__mdiff+0xca>
 8007118:	3f01      	subs	r7, #1
 800711a:	e7ea      	b.n	80070f2 <__mdiff+0xe2>
 800711c:	08007ff7 	.word	0x08007ff7
 8007120:	08008008 	.word	0x08008008

08007124 <__d2b>:
 8007124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007128:	4689      	mov	r9, r1
 800712a:	2101      	movs	r1, #1
 800712c:	ec57 6b10 	vmov	r6, r7, d0
 8007130:	4690      	mov	r8, r2
 8007132:	f7ff fccf 	bl	8006ad4 <_Balloc>
 8007136:	4604      	mov	r4, r0
 8007138:	b930      	cbnz	r0, 8007148 <__d2b+0x24>
 800713a:	4602      	mov	r2, r0
 800713c:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <__d2b+0xb0>)
 800713e:	4826      	ldr	r0, [pc, #152]	; (80071d8 <__d2b+0xb4>)
 8007140:	f240 310a 	movw	r1, #778	; 0x30a
 8007144:	f000 f950 	bl	80073e8 <__assert_func>
 8007148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800714c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007150:	bb35      	cbnz	r5, 80071a0 <__d2b+0x7c>
 8007152:	2e00      	cmp	r6, #0
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	d028      	beq.n	80071aa <__d2b+0x86>
 8007158:	4668      	mov	r0, sp
 800715a:	9600      	str	r6, [sp, #0]
 800715c:	f7ff fd82 	bl	8006c64 <__lo0bits>
 8007160:	9900      	ldr	r1, [sp, #0]
 8007162:	b300      	cbz	r0, 80071a6 <__d2b+0x82>
 8007164:	9a01      	ldr	r2, [sp, #4]
 8007166:	f1c0 0320 	rsb	r3, r0, #32
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	430b      	orrs	r3, r1
 8007170:	40c2      	lsrs	r2, r0
 8007172:	6163      	str	r3, [r4, #20]
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	61a3      	str	r3, [r4, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	bf14      	ite	ne
 800717e:	2202      	movne	r2, #2
 8007180:	2201      	moveq	r2, #1
 8007182:	6122      	str	r2, [r4, #16]
 8007184:	b1d5      	cbz	r5, 80071bc <__d2b+0x98>
 8007186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800718a:	4405      	add	r5, r0
 800718c:	f8c9 5000 	str.w	r5, [r9]
 8007190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007194:	f8c8 0000 	str.w	r0, [r8]
 8007198:	4620      	mov	r0, r4
 800719a:	b003      	add	sp, #12
 800719c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a4:	e7d5      	b.n	8007152 <__d2b+0x2e>
 80071a6:	6161      	str	r1, [r4, #20]
 80071a8:	e7e5      	b.n	8007176 <__d2b+0x52>
 80071aa:	a801      	add	r0, sp, #4
 80071ac:	f7ff fd5a 	bl	8006c64 <__lo0bits>
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	6163      	str	r3, [r4, #20]
 80071b4:	2201      	movs	r2, #1
 80071b6:	6122      	str	r2, [r4, #16]
 80071b8:	3020      	adds	r0, #32
 80071ba:	e7e3      	b.n	8007184 <__d2b+0x60>
 80071bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071c4:	f8c9 0000 	str.w	r0, [r9]
 80071c8:	6918      	ldr	r0, [r3, #16]
 80071ca:	f7ff fd2b 	bl	8006c24 <__hi0bits>
 80071ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071d2:	e7df      	b.n	8007194 <__d2b+0x70>
 80071d4:	08007ff7 	.word	0x08007ff7
 80071d8:	08008008 	.word	0x08008008

080071dc <_calloc_r>:
 80071dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071de:	fba1 2402 	umull	r2, r4, r1, r2
 80071e2:	b94c      	cbnz	r4, 80071f8 <_calloc_r+0x1c>
 80071e4:	4611      	mov	r1, r2
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	f000 f87a 	bl	80072e0 <_malloc_r>
 80071ec:	9a01      	ldr	r2, [sp, #4]
 80071ee:	4605      	mov	r5, r0
 80071f0:	b930      	cbnz	r0, 8007200 <_calloc_r+0x24>
 80071f2:	4628      	mov	r0, r5
 80071f4:	b003      	add	sp, #12
 80071f6:	bd30      	pop	{r4, r5, pc}
 80071f8:	220c      	movs	r2, #12
 80071fa:	6002      	str	r2, [r0, #0]
 80071fc:	2500      	movs	r5, #0
 80071fe:	e7f8      	b.n	80071f2 <_calloc_r+0x16>
 8007200:	4621      	mov	r1, r4
 8007202:	f7fe fa15 	bl	8005630 <memset>
 8007206:	e7f4      	b.n	80071f2 <_calloc_r+0x16>

08007208 <_free_r>:
 8007208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800720a:	2900      	cmp	r1, #0
 800720c:	d044      	beq.n	8007298 <_free_r+0x90>
 800720e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007212:	9001      	str	r0, [sp, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f1a1 0404 	sub.w	r4, r1, #4
 800721a:	bfb8      	it	lt
 800721c:	18e4      	addlt	r4, r4, r3
 800721e:	f000 f925 	bl	800746c <__malloc_lock>
 8007222:	4a1e      	ldr	r2, [pc, #120]	; (800729c <_free_r+0x94>)
 8007224:	9801      	ldr	r0, [sp, #4]
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	b933      	cbnz	r3, 8007238 <_free_r+0x30>
 800722a:	6063      	str	r3, [r4, #4]
 800722c:	6014      	str	r4, [r2, #0]
 800722e:	b003      	add	sp, #12
 8007230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007234:	f000 b920 	b.w	8007478 <__malloc_unlock>
 8007238:	42a3      	cmp	r3, r4
 800723a:	d908      	bls.n	800724e <_free_r+0x46>
 800723c:	6825      	ldr	r5, [r4, #0]
 800723e:	1961      	adds	r1, r4, r5
 8007240:	428b      	cmp	r3, r1
 8007242:	bf01      	itttt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	1949      	addeq	r1, r1, r5
 800724a:	6021      	streq	r1, [r4, #0]
 800724c:	e7ed      	b.n	800722a <_free_r+0x22>
 800724e:	461a      	mov	r2, r3
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	b10b      	cbz	r3, 8007258 <_free_r+0x50>
 8007254:	42a3      	cmp	r3, r4
 8007256:	d9fa      	bls.n	800724e <_free_r+0x46>
 8007258:	6811      	ldr	r1, [r2, #0]
 800725a:	1855      	adds	r5, r2, r1
 800725c:	42a5      	cmp	r5, r4
 800725e:	d10b      	bne.n	8007278 <_free_r+0x70>
 8007260:	6824      	ldr	r4, [r4, #0]
 8007262:	4421      	add	r1, r4
 8007264:	1854      	adds	r4, r2, r1
 8007266:	42a3      	cmp	r3, r4
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	d1e0      	bne.n	800722e <_free_r+0x26>
 800726c:	681c      	ldr	r4, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	6053      	str	r3, [r2, #4]
 8007272:	4421      	add	r1, r4
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	e7da      	b.n	800722e <_free_r+0x26>
 8007278:	d902      	bls.n	8007280 <_free_r+0x78>
 800727a:	230c      	movs	r3, #12
 800727c:	6003      	str	r3, [r0, #0]
 800727e:	e7d6      	b.n	800722e <_free_r+0x26>
 8007280:	6825      	ldr	r5, [r4, #0]
 8007282:	1961      	adds	r1, r4, r5
 8007284:	428b      	cmp	r3, r1
 8007286:	bf04      	itt	eq
 8007288:	6819      	ldreq	r1, [r3, #0]
 800728a:	685b      	ldreq	r3, [r3, #4]
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	bf04      	itt	eq
 8007290:	1949      	addeq	r1, r1, r5
 8007292:	6021      	streq	r1, [r4, #0]
 8007294:	6054      	str	r4, [r2, #4]
 8007296:	e7ca      	b.n	800722e <_free_r+0x26>
 8007298:	b003      	add	sp, #12
 800729a:	bd30      	pop	{r4, r5, pc}
 800729c:	20000900 	.word	0x20000900

080072a0 <sbrk_aligned>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	4e0e      	ldr	r6, [pc, #56]	; (80072dc <sbrk_aligned+0x3c>)
 80072a4:	460c      	mov	r4, r1
 80072a6:	6831      	ldr	r1, [r6, #0]
 80072a8:	4605      	mov	r5, r0
 80072aa:	b911      	cbnz	r1, 80072b2 <sbrk_aligned+0x12>
 80072ac:	f000 f88c 	bl	80073c8 <_sbrk_r>
 80072b0:	6030      	str	r0, [r6, #0]
 80072b2:	4621      	mov	r1, r4
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 f887 	bl	80073c8 <_sbrk_r>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d00a      	beq.n	80072d4 <sbrk_aligned+0x34>
 80072be:	1cc4      	adds	r4, r0, #3
 80072c0:	f024 0403 	bic.w	r4, r4, #3
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d007      	beq.n	80072d8 <sbrk_aligned+0x38>
 80072c8:	1a21      	subs	r1, r4, r0
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 f87c 	bl	80073c8 <_sbrk_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d101      	bne.n	80072d8 <sbrk_aligned+0x38>
 80072d4:	f04f 34ff 	mov.w	r4, #4294967295
 80072d8:	4620      	mov	r0, r4
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	20000904 	.word	0x20000904

080072e0 <_malloc_r>:
 80072e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e4:	1ccd      	adds	r5, r1, #3
 80072e6:	f025 0503 	bic.w	r5, r5, #3
 80072ea:	3508      	adds	r5, #8
 80072ec:	2d0c      	cmp	r5, #12
 80072ee:	bf38      	it	cc
 80072f0:	250c      	movcc	r5, #12
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	4607      	mov	r7, r0
 80072f6:	db01      	blt.n	80072fc <_malloc_r+0x1c>
 80072f8:	42a9      	cmp	r1, r5
 80072fa:	d905      	bls.n	8007308 <_malloc_r+0x28>
 80072fc:	230c      	movs	r3, #12
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	2600      	movs	r6, #0
 8007302:	4630      	mov	r0, r6
 8007304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007308:	4e2e      	ldr	r6, [pc, #184]	; (80073c4 <_malloc_r+0xe4>)
 800730a:	f000 f8af 	bl	800746c <__malloc_lock>
 800730e:	6833      	ldr	r3, [r6, #0]
 8007310:	461c      	mov	r4, r3
 8007312:	bb34      	cbnz	r4, 8007362 <_malloc_r+0x82>
 8007314:	4629      	mov	r1, r5
 8007316:	4638      	mov	r0, r7
 8007318:	f7ff ffc2 	bl	80072a0 <sbrk_aligned>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	4604      	mov	r4, r0
 8007320:	d14d      	bne.n	80073be <_malloc_r+0xde>
 8007322:	6834      	ldr	r4, [r6, #0]
 8007324:	4626      	mov	r6, r4
 8007326:	2e00      	cmp	r6, #0
 8007328:	d140      	bne.n	80073ac <_malloc_r+0xcc>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	4631      	mov	r1, r6
 800732e:	4638      	mov	r0, r7
 8007330:	eb04 0803 	add.w	r8, r4, r3
 8007334:	f000 f848 	bl	80073c8 <_sbrk_r>
 8007338:	4580      	cmp	r8, r0
 800733a:	d13a      	bne.n	80073b2 <_malloc_r+0xd2>
 800733c:	6821      	ldr	r1, [r4, #0]
 800733e:	3503      	adds	r5, #3
 8007340:	1a6d      	subs	r5, r5, r1
 8007342:	f025 0503 	bic.w	r5, r5, #3
 8007346:	3508      	adds	r5, #8
 8007348:	2d0c      	cmp	r5, #12
 800734a:	bf38      	it	cc
 800734c:	250c      	movcc	r5, #12
 800734e:	4629      	mov	r1, r5
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ffa5 	bl	80072a0 <sbrk_aligned>
 8007356:	3001      	adds	r0, #1
 8007358:	d02b      	beq.n	80073b2 <_malloc_r+0xd2>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	442b      	add	r3, r5
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	e00e      	b.n	8007380 <_malloc_r+0xa0>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	1b52      	subs	r2, r2, r5
 8007366:	d41e      	bmi.n	80073a6 <_malloc_r+0xc6>
 8007368:	2a0b      	cmp	r2, #11
 800736a:	d916      	bls.n	800739a <_malloc_r+0xba>
 800736c:	1961      	adds	r1, r4, r5
 800736e:	42a3      	cmp	r3, r4
 8007370:	6025      	str	r5, [r4, #0]
 8007372:	bf18      	it	ne
 8007374:	6059      	strne	r1, [r3, #4]
 8007376:	6863      	ldr	r3, [r4, #4]
 8007378:	bf08      	it	eq
 800737a:	6031      	streq	r1, [r6, #0]
 800737c:	5162      	str	r2, [r4, r5]
 800737e:	604b      	str	r3, [r1, #4]
 8007380:	4638      	mov	r0, r7
 8007382:	f104 060b 	add.w	r6, r4, #11
 8007386:	f000 f877 	bl	8007478 <__malloc_unlock>
 800738a:	f026 0607 	bic.w	r6, r6, #7
 800738e:	1d23      	adds	r3, r4, #4
 8007390:	1af2      	subs	r2, r6, r3
 8007392:	d0b6      	beq.n	8007302 <_malloc_r+0x22>
 8007394:	1b9b      	subs	r3, r3, r6
 8007396:	50a3      	str	r3, [r4, r2]
 8007398:	e7b3      	b.n	8007302 <_malloc_r+0x22>
 800739a:	6862      	ldr	r2, [r4, #4]
 800739c:	42a3      	cmp	r3, r4
 800739e:	bf0c      	ite	eq
 80073a0:	6032      	streq	r2, [r6, #0]
 80073a2:	605a      	strne	r2, [r3, #4]
 80073a4:	e7ec      	b.n	8007380 <_malloc_r+0xa0>
 80073a6:	4623      	mov	r3, r4
 80073a8:	6864      	ldr	r4, [r4, #4]
 80073aa:	e7b2      	b.n	8007312 <_malloc_r+0x32>
 80073ac:	4634      	mov	r4, r6
 80073ae:	6876      	ldr	r6, [r6, #4]
 80073b0:	e7b9      	b.n	8007326 <_malloc_r+0x46>
 80073b2:	230c      	movs	r3, #12
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4638      	mov	r0, r7
 80073b8:	f000 f85e 	bl	8007478 <__malloc_unlock>
 80073bc:	e7a1      	b.n	8007302 <_malloc_r+0x22>
 80073be:	6025      	str	r5, [r4, #0]
 80073c0:	e7de      	b.n	8007380 <_malloc_r+0xa0>
 80073c2:	bf00      	nop
 80073c4:	20000900 	.word	0x20000900

080073c8 <_sbrk_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d06      	ldr	r5, [pc, #24]	; (80073e4 <_sbrk_r+0x1c>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7f9 fd18 	bl	8000e08 <_sbrk>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_sbrk_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_sbrk_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	20000908 	.word	0x20000908

080073e8 <__assert_func>:
 80073e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ea:	4614      	mov	r4, r2
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <__assert_func+0x2c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4605      	mov	r5, r0
 80073f4:	68d8      	ldr	r0, [r3, #12]
 80073f6:	b14c      	cbz	r4, 800740c <__assert_func+0x24>
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <__assert_func+0x30>)
 80073fa:	9100      	str	r1, [sp, #0]
 80073fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007400:	4906      	ldr	r1, [pc, #24]	; (800741c <__assert_func+0x34>)
 8007402:	462b      	mov	r3, r5
 8007404:	f000 f80e 	bl	8007424 <fiprintf>
 8007408:	f000 fa64 	bl	80078d4 <abort>
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__assert_func+0x38>)
 800740e:	461c      	mov	r4, r3
 8007410:	e7f3      	b.n	80073fa <__assert_func+0x12>
 8007412:	bf00      	nop
 8007414:	2000000c 	.word	0x2000000c
 8007418:	08008164 	.word	0x08008164
 800741c:	08008171 	.word	0x08008171
 8007420:	0800819f 	.word	0x0800819f

08007424 <fiprintf>:
 8007424:	b40e      	push	{r1, r2, r3}
 8007426:	b503      	push	{r0, r1, lr}
 8007428:	4601      	mov	r1, r0
 800742a:	ab03      	add	r3, sp, #12
 800742c:	4805      	ldr	r0, [pc, #20]	; (8007444 <fiprintf+0x20>)
 800742e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007432:	6800      	ldr	r0, [r0, #0]
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	f000 f84f 	bl	80074d8 <_vfiprintf_r>
 800743a:	b002      	add	sp, #8
 800743c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007440:	b003      	add	sp, #12
 8007442:	4770      	bx	lr
 8007444:	2000000c 	.word	0x2000000c

08007448 <__ascii_mbtowc>:
 8007448:	b082      	sub	sp, #8
 800744a:	b901      	cbnz	r1, 800744e <__ascii_mbtowc+0x6>
 800744c:	a901      	add	r1, sp, #4
 800744e:	b142      	cbz	r2, 8007462 <__ascii_mbtowc+0x1a>
 8007450:	b14b      	cbz	r3, 8007466 <__ascii_mbtowc+0x1e>
 8007452:	7813      	ldrb	r3, [r2, #0]
 8007454:	600b      	str	r3, [r1, #0]
 8007456:	7812      	ldrb	r2, [r2, #0]
 8007458:	1e10      	subs	r0, r2, #0
 800745a:	bf18      	it	ne
 800745c:	2001      	movne	r0, #1
 800745e:	b002      	add	sp, #8
 8007460:	4770      	bx	lr
 8007462:	4610      	mov	r0, r2
 8007464:	e7fb      	b.n	800745e <__ascii_mbtowc+0x16>
 8007466:	f06f 0001 	mvn.w	r0, #1
 800746a:	e7f8      	b.n	800745e <__ascii_mbtowc+0x16>

0800746c <__malloc_lock>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__malloc_lock+0x8>)
 800746e:	f000 bbf1 	b.w	8007c54 <__retarget_lock_acquire_recursive>
 8007472:	bf00      	nop
 8007474:	2000090c 	.word	0x2000090c

08007478 <__malloc_unlock>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__malloc_unlock+0x8>)
 800747a:	f000 bbec 	b.w	8007c56 <__retarget_lock_release_recursive>
 800747e:	bf00      	nop
 8007480:	2000090c 	.word	0x2000090c

08007484 <__sfputc_r>:
 8007484:	6893      	ldr	r3, [r2, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	b410      	push	{r4}
 800748c:	6093      	str	r3, [r2, #8]
 800748e:	da08      	bge.n	80074a2 <__sfputc_r+0x1e>
 8007490:	6994      	ldr	r4, [r2, #24]
 8007492:	42a3      	cmp	r3, r4
 8007494:	db01      	blt.n	800749a <__sfputc_r+0x16>
 8007496:	290a      	cmp	r1, #10
 8007498:	d103      	bne.n	80074a2 <__sfputc_r+0x1e>
 800749a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800749e:	f000 b94b 	b.w	8007738 <__swbuf_r>
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	1c58      	adds	r0, r3, #1
 80074a6:	6010      	str	r0, [r2, #0]
 80074a8:	7019      	strb	r1, [r3, #0]
 80074aa:	4608      	mov	r0, r1
 80074ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <__sfputs_r>:
 80074b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b4:	4606      	mov	r6, r0
 80074b6:	460f      	mov	r7, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	18d5      	adds	r5, r2, r3
 80074bc:	42ac      	cmp	r4, r5
 80074be:	d101      	bne.n	80074c4 <__sfputs_r+0x12>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e007      	b.n	80074d4 <__sfputs_r+0x22>
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	463a      	mov	r2, r7
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ffda 	bl	8007484 <__sfputc_r>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d1f3      	bne.n	80074bc <__sfputs_r+0xa>
 80074d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074d8 <_vfiprintf_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	460d      	mov	r5, r1
 80074de:	b09d      	sub	sp, #116	; 0x74
 80074e0:	4614      	mov	r4, r2
 80074e2:	4698      	mov	r8, r3
 80074e4:	4606      	mov	r6, r0
 80074e6:	b118      	cbz	r0, 80074f0 <_vfiprintf_r+0x18>
 80074e8:	6983      	ldr	r3, [r0, #24]
 80074ea:	b90b      	cbnz	r3, 80074f0 <_vfiprintf_r+0x18>
 80074ec:	f000 fb14 	bl	8007b18 <__sinit>
 80074f0:	4b89      	ldr	r3, [pc, #548]	; (8007718 <_vfiprintf_r+0x240>)
 80074f2:	429d      	cmp	r5, r3
 80074f4:	d11b      	bne.n	800752e <_vfiprintf_r+0x56>
 80074f6:	6875      	ldr	r5, [r6, #4]
 80074f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d405      	bmi.n	800750a <_vfiprintf_r+0x32>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	059a      	lsls	r2, r3, #22
 8007502:	d402      	bmi.n	800750a <_vfiprintf_r+0x32>
 8007504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007506:	f000 fba5 	bl	8007c54 <__retarget_lock_acquire_recursive>
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	d501      	bpl.n	8007514 <_vfiprintf_r+0x3c>
 8007510:	692b      	ldr	r3, [r5, #16]
 8007512:	b9eb      	cbnz	r3, 8007550 <_vfiprintf_r+0x78>
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f96e 	bl	80077f8 <__swsetup_r>
 800751c:	b1c0      	cbz	r0, 8007550 <_vfiprintf_r+0x78>
 800751e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007520:	07dc      	lsls	r4, r3, #31
 8007522:	d50e      	bpl.n	8007542 <_vfiprintf_r+0x6a>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b01d      	add	sp, #116	; 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	4b7b      	ldr	r3, [pc, #492]	; (800771c <_vfiprintf_r+0x244>)
 8007530:	429d      	cmp	r5, r3
 8007532:	d101      	bne.n	8007538 <_vfiprintf_r+0x60>
 8007534:	68b5      	ldr	r5, [r6, #8]
 8007536:	e7df      	b.n	80074f8 <_vfiprintf_r+0x20>
 8007538:	4b79      	ldr	r3, [pc, #484]	; (8007720 <_vfiprintf_r+0x248>)
 800753a:	429d      	cmp	r5, r3
 800753c:	bf08      	it	eq
 800753e:	68f5      	ldreq	r5, [r6, #12]
 8007540:	e7da      	b.n	80074f8 <_vfiprintf_r+0x20>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	0598      	lsls	r0, r3, #22
 8007546:	d4ed      	bmi.n	8007524 <_vfiprintf_r+0x4c>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f000 fb84 	bl	8007c56 <__retarget_lock_release_recursive>
 800754e:	e7e9      	b.n	8007524 <_vfiprintf_r+0x4c>
 8007550:	2300      	movs	r3, #0
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	2320      	movs	r3, #32
 8007556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800755a:	f8cd 800c 	str.w	r8, [sp, #12]
 800755e:	2330      	movs	r3, #48	; 0x30
 8007560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007724 <_vfiprintf_r+0x24c>
 8007564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007568:	f04f 0901 	mov.w	r9, #1
 800756c:	4623      	mov	r3, r4
 800756e:	469a      	mov	sl, r3
 8007570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007574:	b10a      	cbz	r2, 800757a <_vfiprintf_r+0xa2>
 8007576:	2a25      	cmp	r2, #37	; 0x25
 8007578:	d1f9      	bne.n	800756e <_vfiprintf_r+0x96>
 800757a:	ebba 0b04 	subs.w	fp, sl, r4
 800757e:	d00b      	beq.n	8007598 <_vfiprintf_r+0xc0>
 8007580:	465b      	mov	r3, fp
 8007582:	4622      	mov	r2, r4
 8007584:	4629      	mov	r1, r5
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff ff93 	bl	80074b2 <__sfputs_r>
 800758c:	3001      	adds	r0, #1
 800758e:	f000 80aa 	beq.w	80076e6 <_vfiprintf_r+0x20e>
 8007592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007594:	445a      	add	r2, fp
 8007596:	9209      	str	r2, [sp, #36]	; 0x24
 8007598:	f89a 3000 	ldrb.w	r3, [sl]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80a2 	beq.w	80076e6 <_vfiprintf_r+0x20e>
 80075a2:	2300      	movs	r3, #0
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ac:	f10a 0a01 	add.w	sl, sl, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	9307      	str	r3, [sp, #28]
 80075b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b8:	931a      	str	r3, [sp, #104]	; 0x68
 80075ba:	4654      	mov	r4, sl
 80075bc:	2205      	movs	r2, #5
 80075be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c2:	4858      	ldr	r0, [pc, #352]	; (8007724 <_vfiprintf_r+0x24c>)
 80075c4:	f7f8 fe44 	bl	8000250 <memchr>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	b9d8      	cbnz	r0, 8007604 <_vfiprintf_r+0x12c>
 80075cc:	06d1      	lsls	r1, r2, #27
 80075ce:	bf44      	itt	mi
 80075d0:	2320      	movmi	r3, #32
 80075d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d6:	0713      	lsls	r3, r2, #28
 80075d8:	bf44      	itt	mi
 80075da:	232b      	movmi	r3, #43	; 0x2b
 80075dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e0:	f89a 3000 	ldrb.w	r3, [sl]
 80075e4:	2b2a      	cmp	r3, #42	; 0x2a
 80075e6:	d015      	beq.n	8007614 <_vfiprintf_r+0x13c>
 80075e8:	9a07      	ldr	r2, [sp, #28]
 80075ea:	4654      	mov	r4, sl
 80075ec:	2000      	movs	r0, #0
 80075ee:	f04f 0c0a 	mov.w	ip, #10
 80075f2:	4621      	mov	r1, r4
 80075f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f8:	3b30      	subs	r3, #48	; 0x30
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d94e      	bls.n	800769c <_vfiprintf_r+0x1c4>
 80075fe:	b1b0      	cbz	r0, 800762e <_vfiprintf_r+0x156>
 8007600:	9207      	str	r2, [sp, #28]
 8007602:	e014      	b.n	800762e <_vfiprintf_r+0x156>
 8007604:	eba0 0308 	sub.w	r3, r0, r8
 8007608:	fa09 f303 	lsl.w	r3, r9, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	9304      	str	r3, [sp, #16]
 8007610:	46a2      	mov	sl, r4
 8007612:	e7d2      	b.n	80075ba <_vfiprintf_r+0xe2>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1d19      	adds	r1, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	9103      	str	r1, [sp, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfbb      	ittet	lt
 8007620:	425b      	neglt	r3, r3
 8007622:	f042 0202 	orrlt.w	r2, r2, #2
 8007626:	9307      	strge	r3, [sp, #28]
 8007628:	9307      	strlt	r3, [sp, #28]
 800762a:	bfb8      	it	lt
 800762c:	9204      	strlt	r2, [sp, #16]
 800762e:	7823      	ldrb	r3, [r4, #0]
 8007630:	2b2e      	cmp	r3, #46	; 0x2e
 8007632:	d10c      	bne.n	800764e <_vfiprintf_r+0x176>
 8007634:	7863      	ldrb	r3, [r4, #1]
 8007636:	2b2a      	cmp	r3, #42	; 0x2a
 8007638:	d135      	bne.n	80076a6 <_vfiprintf_r+0x1ce>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	1d1a      	adds	r2, r3, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	9203      	str	r2, [sp, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfb8      	it	lt
 8007646:	f04f 33ff 	movlt.w	r3, #4294967295
 800764a:	3402      	adds	r4, #2
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007734 <_vfiprintf_r+0x25c>
 8007652:	7821      	ldrb	r1, [r4, #0]
 8007654:	2203      	movs	r2, #3
 8007656:	4650      	mov	r0, sl
 8007658:	f7f8 fdfa 	bl	8000250 <memchr>
 800765c:	b140      	cbz	r0, 8007670 <_vfiprintf_r+0x198>
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	eba0 000a 	sub.w	r0, r0, sl
 8007664:	fa03 f000 	lsl.w	r0, r3, r0
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	4303      	orrs	r3, r0
 800766c:	3401      	adds	r4, #1
 800766e:	9304      	str	r3, [sp, #16]
 8007670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007674:	482c      	ldr	r0, [pc, #176]	; (8007728 <_vfiprintf_r+0x250>)
 8007676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800767a:	2206      	movs	r2, #6
 800767c:	f7f8 fde8 	bl	8000250 <memchr>
 8007680:	2800      	cmp	r0, #0
 8007682:	d03f      	beq.n	8007704 <_vfiprintf_r+0x22c>
 8007684:	4b29      	ldr	r3, [pc, #164]	; (800772c <_vfiprintf_r+0x254>)
 8007686:	bb1b      	cbnz	r3, 80076d0 <_vfiprintf_r+0x1f8>
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	3307      	adds	r3, #7
 800768c:	f023 0307 	bic.w	r3, r3, #7
 8007690:	3308      	adds	r3, #8
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007696:	443b      	add	r3, r7
 8007698:	9309      	str	r3, [sp, #36]	; 0x24
 800769a:	e767      	b.n	800756c <_vfiprintf_r+0x94>
 800769c:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a0:	460c      	mov	r4, r1
 80076a2:	2001      	movs	r0, #1
 80076a4:	e7a5      	b.n	80075f2 <_vfiprintf_r+0x11a>
 80076a6:	2300      	movs	r3, #0
 80076a8:	3401      	adds	r4, #1
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f04f 0c0a 	mov.w	ip, #10
 80076b2:	4620      	mov	r0, r4
 80076b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b8:	3a30      	subs	r2, #48	; 0x30
 80076ba:	2a09      	cmp	r2, #9
 80076bc:	d903      	bls.n	80076c6 <_vfiprintf_r+0x1ee>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c5      	beq.n	800764e <_vfiprintf_r+0x176>
 80076c2:	9105      	str	r1, [sp, #20]
 80076c4:	e7c3      	b.n	800764e <_vfiprintf_r+0x176>
 80076c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ca:	4604      	mov	r4, r0
 80076cc:	2301      	movs	r3, #1
 80076ce:	e7f0      	b.n	80076b2 <_vfiprintf_r+0x1da>
 80076d0:	ab03      	add	r3, sp, #12
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4b16      	ldr	r3, [pc, #88]	; (8007730 <_vfiprintf_r+0x258>)
 80076d8:	a904      	add	r1, sp, #16
 80076da:	4630      	mov	r0, r6
 80076dc:	f7fe f840 	bl	8005760 <_printf_float>
 80076e0:	4607      	mov	r7, r0
 80076e2:	1c78      	adds	r0, r7, #1
 80076e4:	d1d6      	bne.n	8007694 <_vfiprintf_r+0x1bc>
 80076e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e8:	07d9      	lsls	r1, r3, #31
 80076ea:	d405      	bmi.n	80076f8 <_vfiprintf_r+0x220>
 80076ec:	89ab      	ldrh	r3, [r5, #12]
 80076ee:	059a      	lsls	r2, r3, #22
 80076f0:	d402      	bmi.n	80076f8 <_vfiprintf_r+0x220>
 80076f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f4:	f000 faaf 	bl	8007c56 <__retarget_lock_release_recursive>
 80076f8:	89ab      	ldrh	r3, [r5, #12]
 80076fa:	065b      	lsls	r3, r3, #25
 80076fc:	f53f af12 	bmi.w	8007524 <_vfiprintf_r+0x4c>
 8007700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007702:	e711      	b.n	8007528 <_vfiprintf_r+0x50>
 8007704:	ab03      	add	r3, sp, #12
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	462a      	mov	r2, r5
 800770a:	4b09      	ldr	r3, [pc, #36]	; (8007730 <_vfiprintf_r+0x258>)
 800770c:	a904      	add	r1, sp, #16
 800770e:	4630      	mov	r0, r6
 8007710:	f7fe fab2 	bl	8005c78 <_printf_i>
 8007714:	e7e4      	b.n	80076e0 <_vfiprintf_r+0x208>
 8007716:	bf00      	nop
 8007718:	080082dc 	.word	0x080082dc
 800771c:	080082fc 	.word	0x080082fc
 8007720:	080082bc 	.word	0x080082bc
 8007724:	080081aa 	.word	0x080081aa
 8007728:	080081b4 	.word	0x080081b4
 800772c:	08005761 	.word	0x08005761
 8007730:	080074b3 	.word	0x080074b3
 8007734:	080081b0 	.word	0x080081b0

08007738 <__swbuf_r>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	460e      	mov	r6, r1
 800773c:	4614      	mov	r4, r2
 800773e:	4605      	mov	r5, r0
 8007740:	b118      	cbz	r0, 800774a <__swbuf_r+0x12>
 8007742:	6983      	ldr	r3, [r0, #24]
 8007744:	b90b      	cbnz	r3, 800774a <__swbuf_r+0x12>
 8007746:	f000 f9e7 	bl	8007b18 <__sinit>
 800774a:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <__swbuf_r+0x98>)
 800774c:	429c      	cmp	r4, r3
 800774e:	d12b      	bne.n	80077a8 <__swbuf_r+0x70>
 8007750:	686c      	ldr	r4, [r5, #4]
 8007752:	69a3      	ldr	r3, [r4, #24]
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	071a      	lsls	r2, r3, #28
 800775a:	d52f      	bpl.n	80077bc <__swbuf_r+0x84>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	b36b      	cbz	r3, 80077bc <__swbuf_r+0x84>
 8007760:	6923      	ldr	r3, [r4, #16]
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	1ac0      	subs	r0, r0, r3
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	b2f6      	uxtb	r6, r6
 800776a:	4283      	cmp	r3, r0
 800776c:	4637      	mov	r7, r6
 800776e:	dc04      	bgt.n	800777a <__swbuf_r+0x42>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f93c 	bl	80079f0 <_fflush_r>
 8007778:	bb30      	cbnz	r0, 80077c8 <__swbuf_r+0x90>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	3b01      	subs	r3, #1
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	701e      	strb	r6, [r3, #0]
 8007788:	6963      	ldr	r3, [r4, #20]
 800778a:	3001      	adds	r0, #1
 800778c:	4283      	cmp	r3, r0
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x62>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d506      	bpl.n	80077a4 <__swbuf_r+0x6c>
 8007796:	2e0a      	cmp	r6, #10
 8007798:	d104      	bne.n	80077a4 <__swbuf_r+0x6c>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f000 f927 	bl	80079f0 <_fflush_r>
 80077a2:	b988      	cbnz	r0, 80077c8 <__swbuf_r+0x90>
 80077a4:	4638      	mov	r0, r7
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <__swbuf_r+0x9c>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d101      	bne.n	80077b2 <__swbuf_r+0x7a>
 80077ae:	68ac      	ldr	r4, [r5, #8]
 80077b0:	e7cf      	b.n	8007752 <__swbuf_r+0x1a>
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <__swbuf_r+0xa0>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	bf08      	it	eq
 80077b8:	68ec      	ldreq	r4, [r5, #12]
 80077ba:	e7ca      	b.n	8007752 <__swbuf_r+0x1a>
 80077bc:	4621      	mov	r1, r4
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 f81a 	bl	80077f8 <__swsetup_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d0cb      	beq.n	8007760 <__swbuf_r+0x28>
 80077c8:	f04f 37ff 	mov.w	r7, #4294967295
 80077cc:	e7ea      	b.n	80077a4 <__swbuf_r+0x6c>
 80077ce:	bf00      	nop
 80077d0:	080082dc 	.word	0x080082dc
 80077d4:	080082fc 	.word	0x080082fc
 80077d8:	080082bc 	.word	0x080082bc

080077dc <__ascii_wctomb>:
 80077dc:	b149      	cbz	r1, 80077f2 <__ascii_wctomb+0x16>
 80077de:	2aff      	cmp	r2, #255	; 0xff
 80077e0:	bf85      	ittet	hi
 80077e2:	238a      	movhi	r3, #138	; 0x8a
 80077e4:	6003      	strhi	r3, [r0, #0]
 80077e6:	700a      	strbls	r2, [r1, #0]
 80077e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80077ec:	bf98      	it	ls
 80077ee:	2001      	movls	r0, #1
 80077f0:	4770      	bx	lr
 80077f2:	4608      	mov	r0, r1
 80077f4:	4770      	bx	lr
	...

080077f8 <__swsetup_r>:
 80077f8:	4b32      	ldr	r3, [pc, #200]	; (80078c4 <__swsetup_r+0xcc>)
 80077fa:	b570      	push	{r4, r5, r6, lr}
 80077fc:	681d      	ldr	r5, [r3, #0]
 80077fe:	4606      	mov	r6, r0
 8007800:	460c      	mov	r4, r1
 8007802:	b125      	cbz	r5, 800780e <__swsetup_r+0x16>
 8007804:	69ab      	ldr	r3, [r5, #24]
 8007806:	b913      	cbnz	r3, 800780e <__swsetup_r+0x16>
 8007808:	4628      	mov	r0, r5
 800780a:	f000 f985 	bl	8007b18 <__sinit>
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <__swsetup_r+0xd0>)
 8007810:	429c      	cmp	r4, r3
 8007812:	d10f      	bne.n	8007834 <__swsetup_r+0x3c>
 8007814:	686c      	ldr	r4, [r5, #4]
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800781c:	0719      	lsls	r1, r3, #28
 800781e:	d42c      	bmi.n	800787a <__swsetup_r+0x82>
 8007820:	06dd      	lsls	r5, r3, #27
 8007822:	d411      	bmi.n	8007848 <__swsetup_r+0x50>
 8007824:	2309      	movs	r3, #9
 8007826:	6033      	str	r3, [r6, #0]
 8007828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	e03e      	b.n	80078b2 <__swsetup_r+0xba>
 8007834:	4b25      	ldr	r3, [pc, #148]	; (80078cc <__swsetup_r+0xd4>)
 8007836:	429c      	cmp	r4, r3
 8007838:	d101      	bne.n	800783e <__swsetup_r+0x46>
 800783a:	68ac      	ldr	r4, [r5, #8]
 800783c:	e7eb      	b.n	8007816 <__swsetup_r+0x1e>
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <__swsetup_r+0xd8>)
 8007840:	429c      	cmp	r4, r3
 8007842:	bf08      	it	eq
 8007844:	68ec      	ldreq	r4, [r5, #12]
 8007846:	e7e6      	b.n	8007816 <__swsetup_r+0x1e>
 8007848:	0758      	lsls	r0, r3, #29
 800784a:	d512      	bpl.n	8007872 <__swsetup_r+0x7a>
 800784c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800784e:	b141      	cbz	r1, 8007862 <__swsetup_r+0x6a>
 8007850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007854:	4299      	cmp	r1, r3
 8007856:	d002      	beq.n	800785e <__swsetup_r+0x66>
 8007858:	4630      	mov	r0, r6
 800785a:	f7ff fcd5 	bl	8007208 <_free_r>
 800785e:	2300      	movs	r3, #0
 8007860:	6363      	str	r3, [r4, #52]	; 0x34
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	2300      	movs	r3, #0
 800786c:	6063      	str	r3, [r4, #4]
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f043 0308 	orr.w	r3, r3, #8
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	b94b      	cbnz	r3, 8007892 <__swsetup_r+0x9a>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d003      	beq.n	8007892 <__swsetup_r+0x9a>
 800788a:	4621      	mov	r1, r4
 800788c:	4630      	mov	r0, r6
 800788e:	f000 fa09 	bl	8007ca4 <__smakebuf_r>
 8007892:	89a0      	ldrh	r0, [r4, #12]
 8007894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007898:	f010 0301 	ands.w	r3, r0, #1
 800789c:	d00a      	beq.n	80078b4 <__swsetup_r+0xbc>
 800789e:	2300      	movs	r3, #0
 80078a0:	60a3      	str	r3, [r4, #8]
 80078a2:	6963      	ldr	r3, [r4, #20]
 80078a4:	425b      	negs	r3, r3
 80078a6:	61a3      	str	r3, [r4, #24]
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	b943      	cbnz	r3, 80078be <__swsetup_r+0xc6>
 80078ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078b0:	d1ba      	bne.n	8007828 <__swsetup_r+0x30>
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	0781      	lsls	r1, r0, #30
 80078b6:	bf58      	it	pl
 80078b8:	6963      	ldrpl	r3, [r4, #20]
 80078ba:	60a3      	str	r3, [r4, #8]
 80078bc:	e7f4      	b.n	80078a8 <__swsetup_r+0xb0>
 80078be:	2000      	movs	r0, #0
 80078c0:	e7f7      	b.n	80078b2 <__swsetup_r+0xba>
 80078c2:	bf00      	nop
 80078c4:	2000000c 	.word	0x2000000c
 80078c8:	080082dc 	.word	0x080082dc
 80078cc:	080082fc 	.word	0x080082fc
 80078d0:	080082bc 	.word	0x080082bc

080078d4 <abort>:
 80078d4:	b508      	push	{r3, lr}
 80078d6:	2006      	movs	r0, #6
 80078d8:	f000 fa4c 	bl	8007d74 <raise>
 80078dc:	2001      	movs	r0, #1
 80078de:	f7f9 fa1b 	bl	8000d18 <_exit>
	...

080078e4 <__sflush_r>:
 80078e4:	898a      	ldrh	r2, [r1, #12]
 80078e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ea:	4605      	mov	r5, r0
 80078ec:	0710      	lsls	r0, r2, #28
 80078ee:	460c      	mov	r4, r1
 80078f0:	d458      	bmi.n	80079a4 <__sflush_r+0xc0>
 80078f2:	684b      	ldr	r3, [r1, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dc05      	bgt.n	8007904 <__sflush_r+0x20>
 80078f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dc02      	bgt.n	8007904 <__sflush_r+0x20>
 80078fe:	2000      	movs	r0, #0
 8007900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007906:	2e00      	cmp	r6, #0
 8007908:	d0f9      	beq.n	80078fe <__sflush_r+0x1a>
 800790a:	2300      	movs	r3, #0
 800790c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007910:	682f      	ldr	r7, [r5, #0]
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	d032      	beq.n	800797c <__sflush_r+0x98>
 8007916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	075a      	lsls	r2, r3, #29
 800791c:	d505      	bpl.n	800792a <__sflush_r+0x46>
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	1ac0      	subs	r0, r0, r3
 8007922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007924:	b10b      	cbz	r3, 800792a <__sflush_r+0x46>
 8007926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007928:	1ac0      	subs	r0, r0, r3
 800792a:	2300      	movs	r3, #0
 800792c:	4602      	mov	r2, r0
 800792e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007930:	6a21      	ldr	r1, [r4, #32]
 8007932:	4628      	mov	r0, r5
 8007934:	47b0      	blx	r6
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	d106      	bne.n	800794a <__sflush_r+0x66>
 800793c:	6829      	ldr	r1, [r5, #0]
 800793e:	291d      	cmp	r1, #29
 8007940:	d82c      	bhi.n	800799c <__sflush_r+0xb8>
 8007942:	4a2a      	ldr	r2, [pc, #168]	; (80079ec <__sflush_r+0x108>)
 8007944:	40ca      	lsrs	r2, r1
 8007946:	07d6      	lsls	r6, r2, #31
 8007948:	d528      	bpl.n	800799c <__sflush_r+0xb8>
 800794a:	2200      	movs	r2, #0
 800794c:	6062      	str	r2, [r4, #4]
 800794e:	04d9      	lsls	r1, r3, #19
 8007950:	6922      	ldr	r2, [r4, #16]
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	d504      	bpl.n	8007960 <__sflush_r+0x7c>
 8007956:	1c42      	adds	r2, r0, #1
 8007958:	d101      	bne.n	800795e <__sflush_r+0x7a>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	b903      	cbnz	r3, 8007960 <__sflush_r+0x7c>
 800795e:	6560      	str	r0, [r4, #84]	; 0x54
 8007960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007962:	602f      	str	r7, [r5, #0]
 8007964:	2900      	cmp	r1, #0
 8007966:	d0ca      	beq.n	80078fe <__sflush_r+0x1a>
 8007968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800796c:	4299      	cmp	r1, r3
 800796e:	d002      	beq.n	8007976 <__sflush_r+0x92>
 8007970:	4628      	mov	r0, r5
 8007972:	f7ff fc49 	bl	8007208 <_free_r>
 8007976:	2000      	movs	r0, #0
 8007978:	6360      	str	r0, [r4, #52]	; 0x34
 800797a:	e7c1      	b.n	8007900 <__sflush_r+0x1c>
 800797c:	6a21      	ldr	r1, [r4, #32]
 800797e:	2301      	movs	r3, #1
 8007980:	4628      	mov	r0, r5
 8007982:	47b0      	blx	r6
 8007984:	1c41      	adds	r1, r0, #1
 8007986:	d1c7      	bne.n	8007918 <__sflush_r+0x34>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0c4      	beq.n	8007918 <__sflush_r+0x34>
 800798e:	2b1d      	cmp	r3, #29
 8007990:	d001      	beq.n	8007996 <__sflush_r+0xb2>
 8007992:	2b16      	cmp	r3, #22
 8007994:	d101      	bne.n	800799a <__sflush_r+0xb6>
 8007996:	602f      	str	r7, [r5, #0]
 8007998:	e7b1      	b.n	80078fe <__sflush_r+0x1a>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a0:	81a3      	strh	r3, [r4, #12]
 80079a2:	e7ad      	b.n	8007900 <__sflush_r+0x1c>
 80079a4:	690f      	ldr	r7, [r1, #16]
 80079a6:	2f00      	cmp	r7, #0
 80079a8:	d0a9      	beq.n	80078fe <__sflush_r+0x1a>
 80079aa:	0793      	lsls	r3, r2, #30
 80079ac:	680e      	ldr	r6, [r1, #0]
 80079ae:	bf08      	it	eq
 80079b0:	694b      	ldreq	r3, [r1, #20]
 80079b2:	600f      	str	r7, [r1, #0]
 80079b4:	bf18      	it	ne
 80079b6:	2300      	movne	r3, #0
 80079b8:	eba6 0807 	sub.w	r8, r6, r7
 80079bc:	608b      	str	r3, [r1, #8]
 80079be:	f1b8 0f00 	cmp.w	r8, #0
 80079c2:	dd9c      	ble.n	80078fe <__sflush_r+0x1a>
 80079c4:	6a21      	ldr	r1, [r4, #32]
 80079c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079c8:	4643      	mov	r3, r8
 80079ca:	463a      	mov	r2, r7
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b0      	blx	r6
 80079d0:	2800      	cmp	r0, #0
 80079d2:	dc06      	bgt.n	80079e2 <__sflush_r+0xfe>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	e78e      	b.n	8007900 <__sflush_r+0x1c>
 80079e2:	4407      	add	r7, r0
 80079e4:	eba8 0800 	sub.w	r8, r8, r0
 80079e8:	e7e9      	b.n	80079be <__sflush_r+0xda>
 80079ea:	bf00      	nop
 80079ec:	20400001 	.word	0x20400001

080079f0 <_fflush_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	690b      	ldr	r3, [r1, #16]
 80079f4:	4605      	mov	r5, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b913      	cbnz	r3, 8007a00 <_fflush_r+0x10>
 80079fa:	2500      	movs	r5, #0
 80079fc:	4628      	mov	r0, r5
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	b118      	cbz	r0, 8007a0a <_fflush_r+0x1a>
 8007a02:	6983      	ldr	r3, [r0, #24]
 8007a04:	b90b      	cbnz	r3, 8007a0a <_fflush_r+0x1a>
 8007a06:	f000 f887 	bl	8007b18 <__sinit>
 8007a0a:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <_fflush_r+0x6c>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d11b      	bne.n	8007a48 <_fflush_r+0x58>
 8007a10:	686c      	ldr	r4, [r5, #4]
 8007a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0ef      	beq.n	80079fa <_fflush_r+0xa>
 8007a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a1c:	07d0      	lsls	r0, r2, #31
 8007a1e:	d404      	bmi.n	8007a2a <_fflush_r+0x3a>
 8007a20:	0599      	lsls	r1, r3, #22
 8007a22:	d402      	bmi.n	8007a2a <_fflush_r+0x3a>
 8007a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a26:	f000 f915 	bl	8007c54 <__retarget_lock_acquire_recursive>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f7ff ff59 	bl	80078e4 <__sflush_r>
 8007a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a34:	07da      	lsls	r2, r3, #31
 8007a36:	4605      	mov	r5, r0
 8007a38:	d4e0      	bmi.n	80079fc <_fflush_r+0xc>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	059b      	lsls	r3, r3, #22
 8007a3e:	d4dd      	bmi.n	80079fc <_fflush_r+0xc>
 8007a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a42:	f000 f908 	bl	8007c56 <__retarget_lock_release_recursive>
 8007a46:	e7d9      	b.n	80079fc <_fflush_r+0xc>
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <_fflush_r+0x70>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d101      	bne.n	8007a52 <_fflush_r+0x62>
 8007a4e:	68ac      	ldr	r4, [r5, #8]
 8007a50:	e7df      	b.n	8007a12 <_fflush_r+0x22>
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <_fflush_r+0x74>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	bf08      	it	eq
 8007a58:	68ec      	ldreq	r4, [r5, #12]
 8007a5a:	e7da      	b.n	8007a12 <_fflush_r+0x22>
 8007a5c:	080082dc 	.word	0x080082dc
 8007a60:	080082fc 	.word	0x080082fc
 8007a64:	080082bc 	.word	0x080082bc

08007a68 <std>:
 8007a68:	2300      	movs	r3, #0
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a76:	6083      	str	r3, [r0, #8]
 8007a78:	8181      	strh	r1, [r0, #12]
 8007a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a7c:	81c2      	strh	r2, [r0, #14]
 8007a7e:	6183      	str	r3, [r0, #24]
 8007a80:	4619      	mov	r1, r3
 8007a82:	2208      	movs	r2, #8
 8007a84:	305c      	adds	r0, #92	; 0x5c
 8007a86:	f7fd fdd3 	bl	8005630 <memset>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <std+0x38>)
 8007a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a8e:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <std+0x3c>)
 8007a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <std+0x40>)
 8007a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <std+0x44>)
 8007a98:	6224      	str	r4, [r4, #32]
 8007a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08007dad 	.word	0x08007dad
 8007aa4:	08007dcf 	.word	0x08007dcf
 8007aa8:	08007e07 	.word	0x08007e07
 8007aac:	08007e2b 	.word	0x08007e2b

08007ab0 <_cleanup_r>:
 8007ab0:	4901      	ldr	r1, [pc, #4]	; (8007ab8 <_cleanup_r+0x8>)
 8007ab2:	f000 b8af 	b.w	8007c14 <_fwalk_reent>
 8007ab6:	bf00      	nop
 8007ab8:	080079f1 	.word	0x080079f1

08007abc <__sfmoreglue>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	2268      	movs	r2, #104	; 0x68
 8007ac0:	1e4d      	subs	r5, r1, #1
 8007ac2:	4355      	muls	r5, r2
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aca:	f7ff fc09 	bl	80072e0 <_malloc_r>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b140      	cbz	r0, 8007ae4 <__sfmoreglue+0x28>
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ad8:	300c      	adds	r0, #12
 8007ada:	60a0      	str	r0, [r4, #8]
 8007adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ae0:	f7fd fda6 	bl	8005630 <memset>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}

08007ae8 <__sfp_lock_acquire>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__sfp_lock_acquire+0x8>)
 8007aea:	f000 b8b3 	b.w	8007c54 <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	2000090d 	.word	0x2000090d

08007af4 <__sfp_lock_release>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__sfp_lock_release+0x8>)
 8007af6:	f000 b8ae 	b.w	8007c56 <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	2000090d 	.word	0x2000090d

08007b00 <__sinit_lock_acquire>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__sinit_lock_acquire+0x8>)
 8007b02:	f000 b8a7 	b.w	8007c54 <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	2000090e 	.word	0x2000090e

08007b0c <__sinit_lock_release>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__sinit_lock_release+0x8>)
 8007b0e:	f000 b8a2 	b.w	8007c56 <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	2000090e 	.word	0x2000090e

08007b18 <__sinit>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	f7ff fff0 	bl	8007b00 <__sinit_lock_acquire>
 8007b20:	69a3      	ldr	r3, [r4, #24]
 8007b22:	b11b      	cbz	r3, 8007b2c <__sinit+0x14>
 8007b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b28:	f7ff bff0 	b.w	8007b0c <__sinit_lock_release>
 8007b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b30:	6523      	str	r3, [r4, #80]	; 0x50
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <__sinit+0x68>)
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <__sinit+0x6c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	bf04      	itt	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	61a3      	streq	r3, [r4, #24]
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 f820 	bl	8007b88 <__sfp>
 8007b48:	6060      	str	r0, [r4, #4]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f81c 	bl	8007b88 <__sfp>
 8007b50:	60a0      	str	r0, [r4, #8]
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f818 	bl	8007b88 <__sfp>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	60e0      	str	r0, [r4, #12]
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	6860      	ldr	r0, [r4, #4]
 8007b60:	f7ff ff82 	bl	8007a68 <std>
 8007b64:	68a0      	ldr	r0, [r4, #8]
 8007b66:	2201      	movs	r2, #1
 8007b68:	2109      	movs	r1, #9
 8007b6a:	f7ff ff7d 	bl	8007a68 <std>
 8007b6e:	68e0      	ldr	r0, [r4, #12]
 8007b70:	2202      	movs	r2, #2
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff ff78 	bl	8007a68 <std>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	61a3      	str	r3, [r4, #24]
 8007b7c:	e7d2      	b.n	8007b24 <__sinit+0xc>
 8007b7e:	bf00      	nop
 8007b80:	08007f40 	.word	0x08007f40
 8007b84:	08007ab1 	.word	0x08007ab1

08007b88 <__sfp>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	f7ff ffac 	bl	8007ae8 <__sfp_lock_acquire>
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <__sfp+0x84>)
 8007b92:	681e      	ldr	r6, [r3, #0]
 8007b94:	69b3      	ldr	r3, [r6, #24]
 8007b96:	b913      	cbnz	r3, 8007b9e <__sfp+0x16>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ffbd 	bl	8007b18 <__sinit>
 8007b9e:	3648      	adds	r6, #72	; 0x48
 8007ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	d503      	bpl.n	8007bb0 <__sfp+0x28>
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	b30b      	cbz	r3, 8007bf0 <__sfp+0x68>
 8007bac:	6836      	ldr	r6, [r6, #0]
 8007bae:	e7f7      	b.n	8007ba0 <__sfp+0x18>
 8007bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bb4:	b9d5      	cbnz	r5, 8007bec <__sfp+0x64>
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <__sfp+0x88>)
 8007bb8:	60e3      	str	r3, [r4, #12]
 8007bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc0:	f000 f847 	bl	8007c52 <__retarget_lock_init_recursive>
 8007bc4:	f7ff ff96 	bl	8007af4 <__sfp_lock_release>
 8007bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bd0:	6025      	str	r5, [r4, #0]
 8007bd2:	61a5      	str	r5, [r4, #24]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bdc:	f7fd fd28 	bl	8005630 <memset>
 8007be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007be8:	4620      	mov	r0, r4
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	3468      	adds	r4, #104	; 0x68
 8007bee:	e7d9      	b.n	8007ba4 <__sfp+0x1c>
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7ff ff62 	bl	8007abc <__sfmoreglue>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	6030      	str	r0, [r6, #0]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1d5      	bne.n	8007bac <__sfp+0x24>
 8007c00:	f7ff ff78 	bl	8007af4 <__sfp_lock_release>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	e7ee      	b.n	8007be8 <__sfp+0x60>
 8007c0a:	bf00      	nop
 8007c0c:	08007f40 	.word	0x08007f40
 8007c10:	ffff0001 	.word	0xffff0001

08007c14 <_fwalk_reent>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4688      	mov	r8, r1
 8007c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c20:	2700      	movs	r7, #0
 8007c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c26:	f1b9 0901 	subs.w	r9, r9, #1
 8007c2a:	d505      	bpl.n	8007c38 <_fwalk_reent+0x24>
 8007c2c:	6824      	ldr	r4, [r4, #0]
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d1f7      	bne.n	8007c22 <_fwalk_reent+0xe>
 8007c32:	4638      	mov	r0, r7
 8007c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d907      	bls.n	8007c4e <_fwalk_reent+0x3a>
 8007c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c42:	3301      	adds	r3, #1
 8007c44:	d003      	beq.n	8007c4e <_fwalk_reent+0x3a>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	47c0      	blx	r8
 8007c4c:	4307      	orrs	r7, r0
 8007c4e:	3568      	adds	r5, #104	; 0x68
 8007c50:	e7e9      	b.n	8007c26 <_fwalk_reent+0x12>

08007c52 <__retarget_lock_init_recursive>:
 8007c52:	4770      	bx	lr

08007c54 <__retarget_lock_acquire_recursive>:
 8007c54:	4770      	bx	lr

08007c56 <__retarget_lock_release_recursive>:
 8007c56:	4770      	bx	lr

08007c58 <__swhatbuf_r>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c60:	2900      	cmp	r1, #0
 8007c62:	b096      	sub	sp, #88	; 0x58
 8007c64:	4614      	mov	r4, r2
 8007c66:	461d      	mov	r5, r3
 8007c68:	da08      	bge.n	8007c7c <__swhatbuf_r+0x24>
 8007c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	061a      	lsls	r2, r3, #24
 8007c74:	d410      	bmi.n	8007c98 <__swhatbuf_r+0x40>
 8007c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c7a:	e00e      	b.n	8007c9a <__swhatbuf_r+0x42>
 8007c7c:	466a      	mov	r2, sp
 8007c7e:	f000 f8fb 	bl	8007e78 <_fstat_r>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dbf1      	blt.n	8007c6a <__swhatbuf_r+0x12>
 8007c86:	9a01      	ldr	r2, [sp, #4]
 8007c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c90:	425a      	negs	r2, r3
 8007c92:	415a      	adcs	r2, r3
 8007c94:	602a      	str	r2, [r5, #0]
 8007c96:	e7ee      	b.n	8007c76 <__swhatbuf_r+0x1e>
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	b016      	add	sp, #88	; 0x58
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ca4 <__smakebuf_r>:
 8007ca4:	898b      	ldrh	r3, [r1, #12]
 8007ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ca8:	079d      	lsls	r5, r3, #30
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	d507      	bpl.n	8007cc0 <__smakebuf_r+0x1c>
 8007cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	6163      	str	r3, [r4, #20]
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	ab01      	add	r3, sp, #4
 8007cc2:	466a      	mov	r2, sp
 8007cc4:	f7ff ffc8 	bl	8007c58 <__swhatbuf_r>
 8007cc8:	9900      	ldr	r1, [sp, #0]
 8007cca:	4605      	mov	r5, r0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fb07 	bl	80072e0 <_malloc_r>
 8007cd2:	b948      	cbnz	r0, 8007ce8 <__smakebuf_r+0x44>
 8007cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd8:	059a      	lsls	r2, r3, #22
 8007cda:	d4ef      	bmi.n	8007cbc <__smakebuf_r+0x18>
 8007cdc:	f023 0303 	bic.w	r3, r3, #3
 8007ce0:	f043 0302 	orr.w	r3, r3, #2
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	e7e3      	b.n	8007cb0 <__smakebuf_r+0xc>
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <__smakebuf_r+0x7c>)
 8007cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	6020      	str	r0, [r4, #0]
 8007cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	6163      	str	r3, [r4, #20]
 8007cfa:	9b01      	ldr	r3, [sp, #4]
 8007cfc:	6120      	str	r0, [r4, #16]
 8007cfe:	b15b      	cbz	r3, 8007d18 <__smakebuf_r+0x74>
 8007d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d04:	4630      	mov	r0, r6
 8007d06:	f000 f8c9 	bl	8007e9c <_isatty_r>
 8007d0a:	b128      	cbz	r0, 8007d18 <__smakebuf_r+0x74>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	89a0      	ldrh	r0, [r4, #12]
 8007d1a:	4305      	orrs	r5, r0
 8007d1c:	81a5      	strh	r5, [r4, #12]
 8007d1e:	e7cd      	b.n	8007cbc <__smakebuf_r+0x18>
 8007d20:	08007ab1 	.word	0x08007ab1

08007d24 <_raise_r>:
 8007d24:	291f      	cmp	r1, #31
 8007d26:	b538      	push	{r3, r4, r5, lr}
 8007d28:	4604      	mov	r4, r0
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	d904      	bls.n	8007d38 <_raise_r+0x14>
 8007d2e:	2316      	movs	r3, #22
 8007d30:	6003      	str	r3, [r0, #0]
 8007d32:	f04f 30ff 	mov.w	r0, #4294967295
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d3a:	b112      	cbz	r2, 8007d42 <_raise_r+0x1e>
 8007d3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d40:	b94b      	cbnz	r3, 8007d56 <_raise_r+0x32>
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f830 	bl	8007da8 <_getpid_r>
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d52:	f000 b817 	b.w	8007d84 <_kill_r>
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d00a      	beq.n	8007d70 <_raise_r+0x4c>
 8007d5a:	1c59      	adds	r1, r3, #1
 8007d5c:	d103      	bne.n	8007d66 <_raise_r+0x42>
 8007d5e:	2316      	movs	r3, #22
 8007d60:	6003      	str	r3, [r0, #0]
 8007d62:	2001      	movs	r0, #1
 8007d64:	e7e7      	b.n	8007d36 <_raise_r+0x12>
 8007d66:	2400      	movs	r4, #0
 8007d68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	4798      	blx	r3
 8007d70:	2000      	movs	r0, #0
 8007d72:	e7e0      	b.n	8007d36 <_raise_r+0x12>

08007d74 <raise>:
 8007d74:	4b02      	ldr	r3, [pc, #8]	; (8007d80 <raise+0xc>)
 8007d76:	4601      	mov	r1, r0
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	f7ff bfd3 	b.w	8007d24 <_raise_r>
 8007d7e:	bf00      	nop
 8007d80:	2000000c 	.word	0x2000000c

08007d84 <_kill_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	; (8007da4 <_kill_r+0x20>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	f7f8 ffb1 	bl	8000cf8 <_kill>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d102      	bne.n	8007da0 <_kill_r+0x1c>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	b103      	cbz	r3, 8007da0 <_kill_r+0x1c>
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	20000908 	.word	0x20000908

08007da8 <_getpid_r>:
 8007da8:	f7f8 bf9e 	b.w	8000ce8 <_getpid>

08007dac <__sread>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	460c      	mov	r4, r1
 8007db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db4:	f000 f894 	bl	8007ee0 <_read_r>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	bfab      	itete	ge
 8007dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007dc0:	181b      	addge	r3, r3, r0
 8007dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dc6:	bfac      	ite	ge
 8007dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dca:	81a3      	strhlt	r3, [r4, #12]
 8007dcc:	bd10      	pop	{r4, pc}

08007dce <__swrite>:
 8007dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd2:	461f      	mov	r7, r3
 8007dd4:	898b      	ldrh	r3, [r1, #12]
 8007dd6:	05db      	lsls	r3, r3, #23
 8007dd8:	4605      	mov	r5, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	4616      	mov	r6, r2
 8007dde:	d505      	bpl.n	8007dec <__swrite+0x1e>
 8007de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de4:	2302      	movs	r3, #2
 8007de6:	2200      	movs	r2, #0
 8007de8:	f000 f868 	bl	8007ebc <_lseek_r>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	4632      	mov	r2, r6
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e02:	f000 b817 	b.w	8007e34 <_write_r>

08007e06 <__sseek>:
 8007e06:	b510      	push	{r4, lr}
 8007e08:	460c      	mov	r4, r1
 8007e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0e:	f000 f855 	bl	8007ebc <_lseek_r>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	bf15      	itete	ne
 8007e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e22:	81a3      	strheq	r3, [r4, #12]
 8007e24:	bf18      	it	ne
 8007e26:	81a3      	strhne	r3, [r4, #12]
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <__sclose>:
 8007e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2e:	f000 b813 	b.w	8007e58 <_close_r>
	...

08007e34 <_write_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_write_r+0x20>)
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7f8 ff8f 	bl	8000d66 <_write>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_write_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_write_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20000908 	.word	0x20000908

08007e58 <_close_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_close_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7f8 ff9b 	bl	8000d9e <_close>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_close_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_close_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20000908 	.word	0x20000908

08007e78 <_fstat_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	; (8007e98 <_fstat_r+0x20>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	f7f8 ff96 	bl	8000db6 <_fstat>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d102      	bne.n	8007e94 <_fstat_r+0x1c>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	b103      	cbz	r3, 8007e94 <_fstat_r+0x1c>
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
 8007e96:	bf00      	nop
 8007e98:	20000908 	.word	0x20000908

08007e9c <_isatty_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d06      	ldr	r5, [pc, #24]	; (8007eb8 <_isatty_r+0x1c>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7f8 ff95 	bl	8000dd6 <_isatty>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_isatty_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_isatty_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20000908 	.word	0x20000908

08007ebc <_lseek_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_lseek_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7f8 ff8e 	bl	8000dec <_lseek>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_lseek_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_lseek_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000908 	.word	0x20000908

08007ee0 <_read_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	; (8007f00 <_read_r+0x20>)
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	4611      	mov	r1, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	602a      	str	r2, [r5, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7f8 ff1c 	bl	8000d2c <_read>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_read_r+0x1e>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_read_r+0x1e>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20000908 	.word	0x20000908

08007f04 <_init>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr

08007f10 <_fini>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	bf00      	nop
 8007f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f16:	bc08      	pop	{r3}
 8007f18:	469e      	mov	lr, r3
 8007f1a:	4770      	bx	lr
