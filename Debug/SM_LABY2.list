
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac2c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800ae30  0800ae30  0001ae30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b254  0800b254  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b25c  0800b25c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b25c  0800b25c  0001b25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b260  0800b260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800b264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000218  0800b47c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800b47c  00020900  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b70b  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f7  00000000  00000000  0003b951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003f248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  000407f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b321  00000000  00000000  00041c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4e5  00000000  00000000  0006cf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103be8  00000000  00000000  00088406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bfee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa4  00000000  00000000  0018c040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000218 	.word	0x20000218
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ae14 	.word	0x0800ae14

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000021c 	.word	0x2000021c
 800023c:	0800ae14 	.word	0x0800ae14

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	4613      	mov	r3, r2
 8000604:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fb5a 	bl	8000cc0 <null_ptr_check>
 800060c:	4603      	mov	r3, r0
 800060e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d11c      	bne.n	8000652 <bmp280_get_regs+0x5e>
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d019      	beq.n	8000652 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685c      	ldr	r4, [r3, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7858      	ldrb	r0, [r3, #1]
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	b29b      	uxth	r3, r3
 800063a:	7bf9      	ldrb	r1, [r7, #15]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	47a0      	blx	r4
 8000640:	4603      	mov	r3, r0
 8000642:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d004      	beq.n	8000656 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 800064c:	23fc      	movs	r3, #252	; 0xfc
 800064e:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000650:	e001      	b.n	8000656 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4613      	mov	r3, r2
 8000670:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b04      	cmp	r3, #4
 8000676:	d901      	bls.n	800067c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 800067c:	6838      	ldr	r0, [r7, #0]
 800067e:	f000 fb1f 	bl	8000cc0 <null_ptr_check>
 8000682:	4603      	mov	r3, r0
 8000684:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14d      	bne.n	800072a <bmp280_set_regs+0xc8>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d04a      	beq.n	800072a <bmp280_set_regs+0xc8>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d047      	beq.n	800072a <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d041      	beq.n	8000724 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d114      	bne.n	80006d8 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	76fb      	strb	r3, [r7, #27]
 80006b2:	e00d      	b.n	80006d0 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80006b4:	7efb      	ldrb	r3, [r7, #27]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	7efb      	ldrb	r3, [r7, #27]
 80006be:	68f9      	ldr	r1, [r7, #12]
 80006c0:	440b      	add	r3, r1
 80006c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ca:	7efb      	ldrb	r3, [r7, #27]
 80006cc:	3301      	adds	r3, #1
 80006ce:	76fb      	strb	r3, [r7, #27]
 80006d0:	7efa      	ldrb	r2, [r7, #27]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3ed      	bcc.n	80006b4 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d90d      	bls.n	80006fa <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f107 0110 	add.w	r1, r7, #16
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f000 fb0a 	bl	8000d00 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	83bb      	strh	r3, [r7, #28]
 80006f8:	e001      	b.n	80006fe <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	689c      	ldr	r4, [r3, #8]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	7858      	ldrb	r0, [r3, #1]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	7819      	ldrb	r1, [r3, #0]
 800070a:	8bbb      	ldrh	r3, [r7, #28]
 800070c:	f107 0210 	add.w	r2, r7, #16
 8000710:	47a0      	blx	r4
 8000712:	4603      	mov	r3, r0
 8000714:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800071e:	23fc      	movs	r3, #252	; 0xfc
 8000720:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000722:	e005      	b.n	8000730 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000724:	23fd      	movs	r3, #253	; 0xfd
 8000726:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000728:	e002      	b.n	8000730 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	77fb      	strb	r3, [r7, #31]
 800072e:	e000      	b.n	8000732 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000730:	bf00      	nop
    }

    return rslt;
 8000732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}

0800073e <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800074a:	23b6      	movs	r3, #182	; 0xb6
 800074c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 fab6 	bl	8000cc0 <null_ptr_check>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000760:	f107 010d 	add.w	r1, r7, #13
 8000764:	f107 000e 	add.w	r0, r7, #14
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	f7ff ff79 	bl	8000662 <bmp280_set_regs>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	2002      	movs	r0, #2
 800077a:	4798      	blx	r3
    }

    return rslt;
 800077c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fa93 	bl	8000cc0 <null_ptr_check>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d150      	bne.n	8000848 <bmp280_init+0xc0>
    {
        while (try_count)
 80007a6:	e02d      	b.n	8000804 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	20d0      	movs	r0, #208	; 0xd0
 80007b0:	f7ff ff20 	bl	80005f4 <bmp280_get_regs>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d11a      	bne.n	80007f6 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80007c4:	2b56      	cmp	r3, #86	; 0x56
 80007c6:	d007      	beq.n	80007d8 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b57      	cmp	r3, #87	; 0x57
 80007ce:	d003      	beq.n	80007d8 <bmp280_init+0x50>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b58      	cmp	r3, #88	; 0x58
 80007d6:	d10e      	bne.n	80007f6 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffb0 	bl	800073e <bmp280_soft_reset>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d110      	bne.n	800080c <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fab4 	bl	8000d58 <get_calib_param>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007f4:	e00a      	b.n	800080c <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	200a      	movs	r0, #10
 80007fc:	4798      	blx	r3
            --try_count;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	3b01      	subs	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ce      	bne.n	80007a8 <bmp280_init+0x20>
 800080a:	e000      	b.n	800080e <bmp280_init+0x86>
                break;
 800080c:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000814:	23fe      	movs	r3, #254	; 0xfe
 8000816:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8000818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d113      	bne.n	8000848 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000862:	6838      	ldr	r0, [r7, #0]
 8000864:	f000 fa2c 	bl	8000cc0 <null_ptr_check>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d137      	bne.n	80008e4 <bmp280_get_config+0x90>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d034      	beq.n	80008e4 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800087a:	f107 010c 	add.w	r1, r7, #12
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2202      	movs	r2, #2
 8000882:	20f4      	movs	r0, #244	; 0xf4
 8000884:	f7ff feb6 	bl	80005f4 <bmp280_get_regs>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000894:	7b3b      	ldrb	r3, [r7, #12]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	109b      	asrs	r3, r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	095b      	lsrs	r3, r3, #5
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	109b      	asrs	r3, r3, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	332c      	adds	r3, #44	; 0x2c
 80008da:	6810      	ldr	r0, [r2, #0]
 80008dc:	6018      	str	r0, [r3, #0]
 80008de:	7912      	ldrb	r2, [r2, #4]
 80008e0:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008e2:	e001      	b.n	80008e8 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fac6 	bl	8000e94 <conf_sensor>
 8000908:	4603      	mov	r3, r0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 f9ce 	bl	8000cc0 <null_ptr_check>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d109      	bne.n	8000944 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 faaa 	bl	8000e94 <conf_sensor>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	2300      	movs	r3, #0
 8000960:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f000 f9ac 	bl	8000cc0 <null_ptr_check>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800096c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d133      	bne.n	80009dc <bmp280_get_uncomp_data+0x8c>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d030      	beq.n	80009dc <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800097a:	f107 0108 	add.w	r1, r7, #8
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2206      	movs	r2, #6
 8000982:	20f7      	movs	r0, #247	; 0xf7
 8000984:	f7ff fe36 	bl	80005f4 <bmp280_get_regs>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800098c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d120      	bne.n	80009d6 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000994:	7a3b      	ldrb	r3, [r7, #8]
 8000996:	031a      	lsls	r2, r3, #12
 8000998:	7a7b      	ldrb	r3, [r7, #9]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4313      	orrs	r3, r2
 800099e:	7aba      	ldrb	r2, [r7, #10]
 80009a0:	0912      	lsrs	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	031a      	lsls	r2, r3, #12
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	4313      	orrs	r3, r2
 80009b4:	7b7a      	ldrb	r2, [r7, #13]
 80009b6:	0912      	lsrs	r2, r2, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4610      	mov	r0, r2
 80009cc:	f000 fb18 	bl	8001000 <st_check_boundaries>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009d4:	e004      	b.n	80009e0 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009d6:	23f3      	movs	r3, #243	; 0xf3
 80009d8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009da:	e001      	b.n	80009e0 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009dc:	23ff      	movs	r3, #255	; 0xff
 80009de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f961 	bl	8000cc0 <null_ptr_check>
 80009fe:	4603      	mov	r3, r0
 8000a00:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8000a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d150      	bne.n	8000aac <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	da00      	bge.n	8000a12 <bmp280_get_comp_temp_32bit+0x26>
 8000a10:	3307      	adds	r3, #7
 8000a12:	10db      	asrs	r3, r3, #3
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	8a1b      	ldrh	r3, [r3, #16]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da01      	bge.n	8000a30 <bmp280_get_comp_temp_32bit+0x44>
 8000a2c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a30:	12db      	asrs	r3, r3, #11
 8000a32:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <bmp280_get_comp_temp_32bit+0x50>
 8000a3a:	330f      	adds	r3, #15
 8000a3c:	111b      	asrs	r3, r3, #4
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	8a1b      	ldrh	r3, [r3, #16]
 8000a44:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da00      	bge.n	8000a4e <bmp280_get_comp_temp_32bit+0x62>
 8000a4c:	330f      	adds	r3, #15
 8000a4e:	111b      	asrs	r3, r3, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8a1b      	ldrh	r3, [r3, #16]
 8000a56:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da01      	bge.n	8000a64 <bmp280_get_comp_temp_32bit+0x78>
 8000a60:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a64:	131b      	asrs	r3, r3, #12
 8000a66:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a6e:	fb02 f303 	mul.w	r3, r2, r3
        var2 =
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da03      	bge.n	8000a7e <bmp280_get_comp_temp_32bit+0x92>
 8000a76:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	139b      	asrs	r3, r3, #14
 8000a80:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	441a      	add	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	3380      	adds	r3, #128	; 0x80
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da00      	bge.n	8000a9e <bmp280_get_comp_temp_32bit+0xb2>
 8000a9c:	33ff      	adds	r3, #255	; 0xff
 8000a9e:	121b      	asrs	r3, r3, #8
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	77fb      	strb	r3, [r7, #31]
 8000aaa:	e004      	b.n	8000ab6 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8000ab2:	23f2      	movs	r3, #242	; 0xf2
 8000ab4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8000ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <bmp280_get_comp_pres_32bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_pres_32bit(uint32_t *comp_pres, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f8f5 	bl	8000cc0 <null_ptr_check>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8000ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 80e4 	bne.w	8000cac <bmp280_get_comp_pres_32bit+0x1e8>
    {
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da00      	bge.n	8000aee <bmp280_get_comp_pres_32bit+0x2a>
 8000aec:	3301      	adds	r3, #1
 8000aee:	105b      	asrs	r3, r3, #1
 8000af0:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000af4:	61bb      	str	r3, [r7, #24]
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da00      	bge.n	8000afe <bmp280_get_comp_pres_32bit+0x3a>
 8000afc:	3303      	adds	r3, #3
 8000afe:	109b      	asrs	r3, r3, #2
 8000b00:	461a      	mov	r2, r3
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da00      	bge.n	8000b0a <bmp280_get_comp_pres_32bit+0x46>
 8000b08:	3303      	adds	r3, #3
 8000b0a:	109b      	asrs	r3, r3, #2
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da01      	bge.n	8000b18 <bmp280_get_comp_pres_32bit+0x54>
 8000b14:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000b18:	12db      	asrs	r3, r3, #11
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da00      	bge.n	8000b46 <bmp280_get_comp_pres_32bit+0x82>
 8000b44:	3303      	adds	r3, #3
 8000b46:	109b      	asrs	r3, r3, #2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	4413      	add	r3, r2
 8000b54:	617b      	str	r3, [r7, #20]
        var1 =
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da00      	bge.n	8000b66 <bmp280_get_comp_pres_32bit+0xa2>
 8000b64:	3303      	adds	r3, #3
 8000b66:	109b      	asrs	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <bmp280_get_comp_pres_32bit+0xae>
 8000b70:	3303      	adds	r3, #3
 8000b72:	109b      	asrs	r3, r3, #2
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da03      	bge.n	8000b84 <bmp280_get_comp_pres_32bit+0xc0>
 8000b7c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000b80:	441a      	add	r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	135b      	asrs	r3, r3, #13
 8000b86:	fb01 f303 	mul.w	r3, r1, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da00      	bge.n	8000b90 <bmp280_get_comp_pres_32bit+0xcc>
 8000b8e:	3307      	adds	r3, #7
 8000b90:	10db      	asrs	r3, r3, #3
 8000b92:	461a      	mov	r2, r3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da00      	bge.n	8000ba8 <bmp280_get_comp_pres_32bit+0xe4>
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	105b      	asrs	r3, r3, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 8000baa:	4413      	add	r3, r2
        var1 =
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da02      	bge.n	8000bb6 <bmp280_get_comp_pres_32bit+0xf2>
 8000bb0:	4a41      	ldr	r2, [pc, #260]	; (8000cb8 <bmp280_get_comp_pres_32bit+0x1f4>)
 8000bb2:	441a      	add	r2, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	149b      	asrs	r3, r3, #18
 8000bb8:	61bb      	str	r3, [r7, #24]
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	8ad2      	ldrh	r2, [r2, #22]
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <bmp280_get_comp_pres_32bit+0x110>
 8000bcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	13db      	asrs	r3, r3, #15
 8000bd6:	61bb      	str	r3, [r7, #24]
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da01      	bge.n	8000be2 <bmp280_get_comp_pres_32bit+0x11e>
 8000bde:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000be2:	131b      	asrs	r3, r3, #12
 8000be4:	425b      	negs	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	f640 4235 	movw	r2, #3125	; 0xc35
 8000bf0:	fb03 f202 	mul.w	r2, r3, r2
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <bmp280_get_comp_pres_32bit+0x1f8>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	6013      	str	r3, [r2, #0]

        /* Avoid exception caused by division with zero */
        if (var1 != 0)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d04f      	beq.n	8000ca2 <bmp280_get_comp_pres_32bit+0x1de>
        {
            /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
            if (*comp_pres < 0x80000000)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db08      	blt.n	8000c1c <bmp280_get_comp_pres_32bit+0x158>
            {
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	005a      	lsls	r2, r3, #1
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e007      	b.n	8000c2c <bmp280_get_comp_pres_32bit+0x168>
            }
            else
            {
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	005a      	lsls	r2, r3, #1
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	601a      	str	r2, [r3, #0]
            }
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000c32:	4619      	mov	r1, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	08d2      	lsrs	r2, r2, #3
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	0b5b      	lsrs	r3, r3, #13
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da01      	bge.n	8000c52 <bmp280_get_comp_pres_32bit+0x18e>
 8000c4e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000c52:	131b      	asrs	r3, r3, #12
 8000c54:	61bb      	str	r3, [r7, #24]
                   4096;
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da03      	bge.n	8000c74 <bmp280_get_comp_pres_32bit+0x1b0>
 8000c6c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000c70:	441a      	add	r2, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	135b      	asrs	r3, r3, #13
 8000c76:	617b      	str	r3, [r7, #20]
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	4413      	add	r3, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <bmp280_get_comp_pres_32bit+0x1ce>
 8000c90:	330f      	adds	r3, #15
 8000c92:	111b      	asrs	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	77fb      	strb	r3, [r7, #31]
 8000ca0:	e004      	b.n	8000cac <bmp280_get_comp_pres_32bit+0x1e8>
        }
        else
        {
            *comp_pres = 0;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
 8000ca8:	23f1      	movs	r3, #241	; 0xf1
 8000caa:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8000cac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0003ffff 	.word	0x0003ffff
 8000cbc:	c3500000 	.word	0xc3500000

08000cc0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <null_ptr_check+0x26>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <null_ptr_check+0x26>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <null_ptr_check+0x26>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000ce6:	23ff      	movs	r3, #255	; 0xff
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e001      	b.n	8000cf0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e016      	b.n	8000d42 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	441a      	add	r2, r3
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	440b      	add	r3, r1
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	440b      	add	r3, r1
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	75fb      	strb	r3, [r7, #23]
 8000d42:	7dfa      	ldrb	r2, [r7, #23]
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3e4      	bcc.n	8000d14 <interleave_data+0x14>
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	371c      	adds	r7, #28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffa3 	bl	8000cc0 <null_ptr_check>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d17f      	bne.n	8000e88 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000d88:	f107 010c 	add.w	r1, r7, #12
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2218      	movs	r2, #24
 8000d90:	2088      	movs	r0, #136	; 0x88
 8000d92:	f7ff fc2f 	bl	80005f4 <bmp280_get_regs>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d171      	bne.n	8000e88 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000dca:	7c7b      	ldrb	r3, [r7, #17]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	7c3b      	ldrb	r3, [r7, #16]
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000ddc:	7cfb      	ldrb	r3, [r7, #19]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	7cbb      	ldrb	r3, [r7, #18]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000df0:	7d7b      	ldrb	r3, [r7, #21]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	7d3b      	ldrb	r3, [r7, #20]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000e14:	7e7b      	ldrb	r3, [r7, #25]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	7e3b      	ldrb	r3, [r7, #24]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000e26:	7efb      	ldrb	r3, [r7, #27]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	7ebb      	ldrb	r3, [r7, #26]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000e38:	7f7b      	ldrb	r3, [r7, #29]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	7f3b      	ldrb	r3, [r7, #28]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	7fbb      	ldrb	r3, [r7, #30]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000e5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000ea6:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8000eaa:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff07 	bl	8000cc0 <null_ptr_check>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8095 	bne.w	8000fea <conf_sensor+0x156>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8091 	beq.w	8000fea <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000ec8:	f107 0114 	add.w	r1, r7, #20
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	20f4      	movs	r0, #244	; 0xf4
 8000ed2:	f7ff fb8f 	bl	80005f4 <bmp280_get_regs>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8086 	bne.w	8000ff0 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fc2a 	bl	800073e <bmp280_soft_reset>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d17c      	bne.n	8000ff0 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000ef6:	7d3b      	ldrb	r3, [r7, #20]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	f023 031c 	bic.w	r3, r3, #28
 8000f18:	b25a      	sxtb	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	f003 031c 	and.w	r3, r3, #28
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000f30:	7d7b      	ldrb	r3, [r7, #21]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	789b      	ldrb	r3, [r3, #2]
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000f4a:	7d7b      	ldrb	r3, [r7, #21]
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f023 031c 	bic.w	r3, r3, #28
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	78db      	ldrb	r3, [r3, #3]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	f003 031c 	and.w	r3, r3, #28
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000f6a:	7d7b      	ldrb	r3, [r7, #21]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000f88:	f107 0114 	add.w	r1, r7, #20
 8000f8c:	f107 0010 	add.w	r0, r7, #16
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f7ff fb65 	bl	8000662 <bmp280_set_regs>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d125      	bne.n	8000ff0 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	332c      	adds	r3, #44	; 0x2c
 8000faa:	6810      	ldr	r0, [r2, #0]
 8000fac:	6018      	str	r0, [r3, #0]
 8000fae:	7912      	ldrb	r2, [r2, #4]
 8000fb0:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01b      	beq.n	8000ff0 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f023 0303 	bic.w	r3, r3, #3
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000fd4:	f107 0114 	add.w	r1, r7, #20
 8000fd8:	f107 0010 	add.w	r0, r7, #16
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f7ff fb3f 	bl	8000662 <bmp280_set_regs>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000fe8:	e002      	b.n	8000ff0 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	75fb      	strb	r3, [r7, #23]
 8000fee:	e000      	b.n	8000ff2 <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8000ff0:	bf00      	nop
    }

    return rslt;
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd03      	ble.n	800101c <st_check_boundaries+0x1c>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <st_check_boundaries+0x6c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	dd09      	ble.n	8001030 <st_check_boundaries+0x30>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd03      	ble.n	800102a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <st_check_boundaries+0x6c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	dd02      	ble.n	8001030 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800102a:	23f4      	movs	r3, #244	; 0xf4
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e015      	b.n	800105c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dd03      	ble.n	800103e <st_check_boundaries+0x3e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <st_check_boundaries+0x6c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	dd02      	ble.n	8001044 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 800103e:	23f6      	movs	r3, #246	; 0xf6
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e00b      	b.n	800105c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd03      	ble.n	8001052 <st_check_boundaries+0x52>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <st_check_boundaries+0x6c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	dd02      	ble.n	8001058 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001052:	23f5      	movs	r3, #245	; 0xf5
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e001      	b.n	800105c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	000fffef 	.word	0x000fffef

08001070 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fb85 	bl	8000788 <bmp280_init>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fbe3 	bl	8000854 <bmp280_get_config>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8001092:	2300      	movs	r3, #0
 8001094:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8001096:	2301      	movs	r3, #1
 8001098:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 800109a:	2301      	movs	r3, #1
 800109c:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 800109e:	2303      	movs	r3, #3
 80010a0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc23 	bl	80008f4 <bmp280_set_config>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2003      	movs	r0, #3
 80010b6:	f7ff fc2c 	bl	8000912 <bmp280_set_power_mode>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]

  return rslt;
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	603a      	str	r2, [r7, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t iError = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  #ifdef DEBUG
  	  uint8_t data[BMP280_SPI_BUFFER_LEN] = {0,};
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	615a      	str	r2, [r3, #20]
  	  memcpy(data, reg_data, length);
 8001104:	88ba      	ldrh	r2, [r7, #4]
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f006 ffa1 	bl	8008054 <memcpy>
  #endif

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <bmp280_spi_reg_write+0xdc>)
 8001116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <bmp280_spi_reg_write+0xe0>)
 800111e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	f001 fbb9 	bl	800289c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(BMP280_SPI, &reg_addr, BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 800112a:	1db9      	adds	r1, r7, #6
 800112c:	2305      	movs	r3, #5
 800112e:	2201      	movs	r2, #1
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <bmp280_spi_reg_write+0xe4>)
 8001132:	f002 ff34 	bl	8003f9e <HAL_SPI_Transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  status += HAL_SPI_Transmit(BMP280_SPI,  reg_data, length,            BMP280_TIMEOUT);
 800113c:	88ba      	ldrh	r2, [r7, #4]
 800113e:	2305      	movs	r3, #5
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <bmp280_spi_reg_write+0xe4>)
 8001144:	f002 ff2b 	bl	8003f9e <HAL_SPI_Transmit>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001150:	4413      	add	r3, r2
 8001152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800115c:	e012      	b.n	8001184 <bmp280_spi_reg_write+0xb8>
    HAL_GPIO_WritePin(BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET);
 800115e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <bmp280_spi_reg_write+0xdc>)
 8001164:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <bmp280_spi_reg_write+0xe0>)
 800116e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	f001 fb91 	bl	800289c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800117a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800117e:	3301      	adds	r3, #1
 8001180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0e8      	beq.n	800115e <bmp280_spi_reg_write+0x92>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800118c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <bmp280_spi_reg_write+0xce>
    iError = -1;
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return iError;
 800119a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004
 80011b0:	2000025c 	.word	0x2000025c

080011b4 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	603a      	str	r2, [r7, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	460b      	mov	r3, r1
 80011c4:	71bb      	strb	r3, [r7, #6]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t iError = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <bmp280_spi_reg_read+0xdc>)
 80011da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <bmp280_spi_reg_read+0xe0>)
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	f001 fb57 	bl	800289c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(BMP280_SPI, &reg_addr, BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 80011ee:	1db9      	adds	r1, r7, #6
 80011f0:	2305      	movs	r3, #5
 80011f2:	2201      	movs	r2, #1
 80011f4:	4828      	ldr	r0, [pc, #160]	; (8001298 <bmp280_spi_reg_read+0xe4>)
 80011f6:	f002 fed2 	bl	8003f9e <HAL_SPI_Transmit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  status += HAL_SPI_Receive( BMP280_SPI,  reg_data, length,            BMP280_TIMEOUT);
 8001200:	88ba      	ldrh	r2, [r7, #4]
 8001202:	2305      	movs	r3, #5
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <bmp280_spi_reg_read+0xe4>)
 8001208:	f003 f837 	bl	800427a <HAL_SPI_Receive>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001214:	4413      	add	r3, r2
 8001216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001220:	e012      	b.n	8001248 <bmp280_spi_reg_read+0x94>
    HAL_GPIO_WritePin(BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET);
 8001222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <bmp280_spi_reg_read+0xdc>)
 8001228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <bmp280_spi_reg_read+0xe0>)
 8001232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	f001 fb2f 	bl	800289c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001242:	3301      	adds	r3, #1
 8001244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0e8      	beq.n	8001222 <bmp280_spi_reg_read+0x6e>

  #ifdef DEBUG
  	  uint8_t data[BMP280_SPI_BUFFER_LEN] = {0,};
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
  	  memcpy(data, reg_data, length);
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fef0 	bl	8008054 <memcpy>
  #endif

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <bmp280_spi_reg_read+0xce>
    iError = -1;
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return iError;
 8001282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001286:	4618      	mov	r0, r3
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004
 8001298:	2000025c 	.word	0x2000025c

0800129c <BMP280_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP280_ReadData(struct bmp280_dev *dev, float* press, float* temp)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP280_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int32_t temp_int;
  uint32_t press_int;
  struct bmp280_uncomp_data bmp280_data;
  rslt = bmp280_get_uncomp_data(&bmp280_data, &hbmp280_1);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	491c      	ldr	r1, [pc, #112]	; (8001324 <BMP280_ReadData+0x88>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fb4b 	bl	8000950 <bmp280_get_uncomp_data>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  rslt = bmp280_get_comp_temp_32bit(&temp_int,  bmp280_data.uncomp_temp,  dev);
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fb8f 	bl	80009ec <bmp280_get_comp_temp_32bit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  rslt = bmp280_get_comp_pres_32bit(&press_int, bmp280_data.uncomp_press, dev);
 80012d4:	69b9      	ldr	r1, [r7, #24]
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fbf1 	bl	8000ac4 <bmp280_get_comp_pres_32bit>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *temp = (float)temp_int / 100.0f;
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001328 <BMP280_ReadData+0x8c>
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edc3 7a00 	vstr	s15, [r3]
  *press = (float)press_int / 100.0f;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800130a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001328 <BMP280_ReadData+0x8c>
 800130e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	edc3 7a00 	vstr	s15, [r3]
  return rslt;
 8001318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800131c:	4618      	mov	r0, r3
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000008 	.word	0x20000008
 8001328:	42c80000 	.word	0x42c80000

0800132c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <MX_GPIO_Init+0x204>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a7a      	ldr	r2, [pc, #488]	; (8001530 <MX_GPIO_Init+0x204>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <MX_GPIO_Init+0x204>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b75      	ldr	r3, [pc, #468]	; (8001530 <MX_GPIO_Init+0x204>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a74      	ldr	r2, [pc, #464]	; (8001530 <MX_GPIO_Init+0x204>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b72      	ldr	r3, [pc, #456]	; (8001530 <MX_GPIO_Init+0x204>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <MX_GPIO_Init+0x204>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a6e      	ldr	r2, [pc, #440]	; (8001530 <MX_GPIO_Init+0x204>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b6c      	ldr	r3, [pc, #432]	; (8001530 <MX_GPIO_Init+0x204>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b69      	ldr	r3, [pc, #420]	; (8001530 <MX_GPIO_Init+0x204>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a68      	ldr	r2, [pc, #416]	; (8001530 <MX_GPIO_Init+0x204>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <MX_GPIO_Init+0x204>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <MX_GPIO_Init+0x204>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a62      	ldr	r2, [pc, #392]	; (8001530 <MX_GPIO_Init+0x204>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b60      	ldr	r3, [pc, #384]	; (8001530 <MX_GPIO_Init+0x204>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <MX_GPIO_Init+0x204>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a5c      	ldr	r2, [pc, #368]	; (8001530 <MX_GPIO_Init+0x204>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <MX_GPIO_Init+0x204>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <MX_GPIO_Init+0x204>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <MX_GPIO_Init+0x204>)
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <MX_GPIO_Init+0x204>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4851      	ldr	r0, [pc, #324]	; (8001534 <MX_GPIO_Init+0x208>)
 80013f0:	f001 fa54 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f244 0181 	movw	r1, #16513	; 0x4081
 80013fa:	484f      	ldr	r0, [pc, #316]	; (8001538 <MX_GPIO_Init+0x20c>)
 80013fc:	f001 fa4e 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	484d      	ldr	r0, [pc, #308]	; (800153c <MX_GPIO_Init+0x210>)
 8001406:	f001 fa49 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800140a:	2310      	movs	r3, #16
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4844      	ldr	r0, [pc, #272]	; (8001534 <MX_GPIO_Init+0x208>)
 8001422:	f001 f88f 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4840      	ldr	r0, [pc, #256]	; (8001540 <MX_GPIO_Init+0x214>)
 800143e:	f001 f881 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001442:	2332      	movs	r3, #50	; 0x32
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001452:	230b      	movs	r3, #11
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4838      	ldr	r0, [pc, #224]	; (8001540 <MX_GPIO_Init+0x214>)
 800145e:	f001 f871 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001462:	2386      	movs	r3, #134	; 0x86
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001472:	230b      	movs	r3, #11
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4831      	ldr	r0, [pc, #196]	; (8001544 <MX_GPIO_Init+0x218>)
 800147e:	f001 f861 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001482:	f244 0381 	movw	r3, #16513	; 0x4081
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4827      	ldr	r0, [pc, #156]	; (8001538 <MX_GPIO_Init+0x20c>)
 800149c:	f001 f852 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b2:	230b      	movs	r3, #11
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	481e      	ldr	r0, [pc, #120]	; (8001538 <MX_GPIO_Init+0x20c>)
 80014be:	f001 f841 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014c2:	2340      	movs	r3, #64	; 0x40
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <MX_GPIO_Init+0x210>)
 80014da:	f001 f833 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4812      	ldr	r0, [pc, #72]	; (800153c <MX_GPIO_Init+0x210>)
 80014f2:	f001 f827 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001508:	230b      	movs	r3, #11
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <MX_GPIO_Init+0x210>)
 8001514:	f001 f816 	bl	8002544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2028      	movs	r0, #40	; 0x28
 800151e:	f000 ff48 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001522:	2028      	movs	r0, #40	; 0x28
 8001524:	f000 ff61 	bl	80023ea <HAL_NVIC_EnableIRQ>

}
 8001528:	bf00      	nop
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40021000 	.word	0x40021000
 8001538:	40020400 	.word	0x40020400
 800153c:	40021800 	.word	0x40021800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// timers callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	; 0x40
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d133      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x78>
  {
	  char str_buffer[32];
	  char pomiar[22];

	  BMP280_ReadData(&hbmp280_1, &press_flt, &temp_flt);
 8001558:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800155a:	491d      	ldr	r1, [pc, #116]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800155c:	481d      	ldr	r0, [pc, #116]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800155e:	f7ff fe9d 	bl	800129c <BMP280_ReadData>
//	  temp_flt = BMP280_ReadTemperature_degC(&hbmp280_1);
	  temp = (int)temp_flt;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156c:	ee17 2a90 	vmov	r2, s15
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001572:	601a      	str	r2, [r3, #0]
//	  sprintf(pomiar, "Pressure: %5.2f\r\n", press_flt);
//	  strcat( str_buffer, pomiar);


	  // zadanie 6, generowanie danych do pliku csv
	  sprintf(str_buffer, "%8d,", sample_number);
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4918      	ldr	r1, [pc, #96]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800157e:	4618      	mov	r0, r3
 8001580:	f007 f9c0 	bl	8008904 <siprintf>
	  sample_number = sample_number + 1;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800158c:	6013      	str	r3, [r2, #0]
	  sprintf(pomiar, "%2.3f\r\n", temp_flt);
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001598:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800159c:	ec53 2b17 	vmov	r2, r3, d7
 80015a0:	4910      	ldr	r1, [pc, #64]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015a2:	f007 f9af 	bl	8008904 <siprintf>
	  strcat( str_buffer, pomiar);
 80015a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f007 f9c7 	bl	8008944 <strcat>

	  send_string(str_buffer);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f820 	bl	8001600 <send_string>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3740      	adds	r7, #64	; 0x40
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002c4 	.word	0x200002c4
 80015cc:	20000248 	.word	0x20000248
 80015d0:	20000250 	.word	0x20000250
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000024c 	.word	0x2000024c
 80015dc:	20000254 	.word	0x20000254
 80015e0:	0800ae30 	.word	0x0800ae30
 80015e4:	0800ae38 	.word	0x0800ae38

080015e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
//	char str_buffer[32];
//	sprintf(str_buffer, "Sample number (step = 1s), Temp\r\n");
//	send_string(str_buffer);
//
//	HAL_TIM_Base_Start_IT(&htim3);
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <send_string>:

void send_string(char* s)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe fe19 	bl	8000240 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29b      	uxth	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4803      	ldr	r0, [pc, #12]	; (8001624 <send_string+0x24>)
 8001618:	f004 fea0 	bl	800635c <HAL_UART_Transmit_IT>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000035c 	.word	0x2000035c

08001628 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	uint8_t Data[5];
	sprintf(Data, "%s",Received);
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <HAL_UART_RxCpltCallback+0x78>)
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001638:	4618      	mov	r0, r3
 800163a:	f007 f963 	bl	8008904 <siprintf>
	if(Data[0]=='P')
 800163e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001642:	2b50      	cmp	r3, #80	; 0x50
 8001644:	d123      	bne.n	800168e <HAL_UART_RxCpltCallback+0x66>
	{
		value = atoi(&Data[1]);
 8001646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164a:	3301      	adds	r3, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f006 fcd3 	bl	8007ff8 <atoi>
 8001652:	4603      	mov	r3, r0
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_UART_RxCpltCallback+0x80>)
 8001656:	6013      	str	r3, [r2, #0]
		if(value >= 0 && value <=100)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_UART_RxCpltCallback+0x80>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db16      	blt.n	800168e <HAL_UART_RxCpltCallback+0x66>
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_RxCpltCallback+0x80>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	dc12      	bgt.n	800168e <HAL_UART_RxCpltCallback+0x66>
		{
			char str_buffer[32];
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value-1);
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_UART_RxCpltCallback+0x80>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_UART_RxCpltCallback+0x84>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
			sprintf(str_buffer, "PWM duty set at: %4d%% \r\n", value);
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_UART_RxCpltCallback+0x80>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <HAL_UART_RxCpltCallback+0x88>)
 800167e:	4618      	mov	r0, r3
 8001680:	f007 f940 	bl	8008904 <siprintf>
			send_string(str_buffer);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffb9 	bl	8001600 <send_string>
		}
	}
	HAL_UART_Receive_IT(&huart3, Received, 4);
 800168e:	2204      	movs	r2, #4
 8001690:	4903      	ldr	r1, [pc, #12]	; (80016a0 <HAL_UART_RxCpltCallback+0x78>)
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <HAL_UART_RxCpltCallback+0x8c>)
 8001694:	f004 fec0 	bl	8006418 <HAL_UART_Receive_IT>
}
 8001698:	bf00      	nop
 800169a:	3730      	adds	r7, #48	; 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000234 	.word	0x20000234
 80016a4:	0800ae40 	.word	0x0800ae40
 80016a8:	20000258 	.word	0x20000258
 80016ac:	200002c4 	.word	0x200002c4
 80016b0:	0800ae44 	.word	0x0800ae44
 80016b4:	2000035c 	.word	0x2000035c

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f000 fd1d 	bl	80020fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f82a 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f7ff fe32 	bl	800132c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016c8:	f000 fbae 	bl	8001e28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016cc:	f000 fc44 	bl	8001f58 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 80016d0:	f000 f89a 	bl	8001808 <MX_SPI4_Init>
  MX_TIM3_Init();
 80016d4:	f000 fa6e 	bl	8001bb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016d8:	f000 fabc 	bl	8001c54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <main+0x4c>)
 80016de:	f003 fc8b 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <main+0x50>)
 80016e4:	f003 fc88 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <main+0x50>)
 80016ec:	f003 fd5e 	bl	80051ac <HAL_TIM_PWM_Start>
  BMP280_Init(&hbmp280_1);
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <main+0x54>)
 80016f2:	f7ff fcbd 	bl	8001070 <BMP280_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, Received, 4);
 80016f6:	2204      	movs	r2, #4
 80016f8:	4905      	ldr	r1, [pc, #20]	; (8001710 <main+0x58>)
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <main+0x5c>)
 80016fc:	f004 fe8c 	bl	8006418 <HAL_UART_Receive_IT>

  while (1)
 8001700:	e7fe      	b.n	8001700 <main+0x48>
 8001702:	bf00      	nop
 8001704:	200002c4 	.word	0x200002c4
 8001708:	20000310 	.word	0x20000310
 800170c:	20000008 	.word	0x20000008
 8001710:	20000234 	.word	0x20000234
 8001714:	2000035c 	.word	0x2000035c

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2234      	movs	r2, #52	; 0x34
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f006 fca2 	bl	8008070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800173c:	f001 fa28 	bl	8002b90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <SystemClock_Config+0xdc>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <SystemClock_Config+0xdc>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <SystemClock_Config+0xdc>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <SystemClock_Config+0xe0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001760:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <SystemClock_Config+0xe0>)
 8001762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <SystemClock_Config+0xe0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001774:	2301      	movs	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800177c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2302      	movs	r3, #2
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001788:	2304      	movs	r3, #4
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001794:	2304      	movs	r3, #4
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001798:	2302      	movs	r3, #2
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 fa55 	bl	8002c50 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017ac:	f000 f826 	bl	80017fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017b0:	f001 f9fe 	bl	8002bb0 <HAL_PWREx_EnableOverDrive>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017ba:	f000 f81f 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	230f      	movs	r3, #15
 80017c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c2:	2302      	movs	r3, #2
 80017c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	2103      	movs	r1, #3
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fce6 	bl	80031ac <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80017e6:	f000 f809 	bl	80017fc <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	; 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_SPI4_Init+0x74>)
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <MX_SPI4_Init+0x78>)
 8001810:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_SPI4_Init+0x74>)
 8001814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001818:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_SPI4_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_SPI4_Init+0x74>)
 8001822:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001826:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_SPI4_Init+0x74>)
 800182a:	2202      	movs	r2, #2
 800182c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_SPI4_Init+0x74>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_SPI4_Init+0x74>)
 8001836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_SPI4_Init+0x74>)
 800183e:	2218      	movs	r2, #24
 8001840:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_SPI4_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_SPI4_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_SPI4_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_SPI4_Init+0x74>)
 8001856:	2207      	movs	r2, #7
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_SPI4_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_SPI4_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_SPI4_Init+0x74>)
 8001868:	f002 faee 	bl	8003e48 <HAL_SPI_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001872:	f7ff ffc3 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000025c 	.word	0x2000025c
 8001880:	40013400 	.word	0x40013400

08001884 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_SPI_MspInit+0x8c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12f      	bne.n	8001906 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_SPI_MspInit+0x90>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_SPI_MspInit+0x90>)
 80018ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_SPI_MspInit+0x90>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_SPI_MspInit+0x90>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_SPI_MspInit+0x90>)
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_SPI_MspInit+0x90>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018e6:	2305      	movs	r3, #5
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_SPI_MspInit+0x94>)
 80018f2:	f000 fe27 	bl	8002544 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2054      	movs	r0, #84	; 0x54
 80018fc:	f000 fd59 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001900:	2054      	movs	r0, #84	; 0x54
 8001902:	f000 fd72 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40013400 	.word	0x40013400
 8001914:	40023800 	.word	0x40023800
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x44>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x44>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x44>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x44>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x44>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x44>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 fbe0 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM3_IRQHandler+0x10>)
 80019be:	f003 fcef 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200002c4 	.word	0x200002c4

080019cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <USART3_IRQHandler+0x10>)
 80019d2:	f004 fd65 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000035c 	.word	0x2000035c

080019e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80019e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019e8:	f000 ff72 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <SPI4_IRQHandler+0x10>)
 80019f6:	f002 ff83 	bl	8004900 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000025c 	.word	0x2000025c

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_kill>:

int _kill(int pid, int sig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a1e:	f006 faef 	bl	8008000 <__errno>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2216      	movs	r2, #22
 8001a26:	601a      	str	r2, [r3, #0]
	return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_exit>:

void _exit (int status)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe7 	bl	8001a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a46:	e7fe      	b.n	8001a46 <_exit+0x12>

08001a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e00a      	b.n	8001a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5a:	f3af 8000 	nop.w
 8001a5e:	4601      	mov	r1, r0
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf0      	blt.n	8001a5a <_read+0x12>
	}

return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e009      	b.n	8001aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf1      	blt.n	8001a94 <_write+0x12>
	}
	return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_close>:

int _close(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_isatty>:

int _isatty(int file)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	return 1;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
	return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f006 fa54 	bl	8008000 <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20080000 	.word	0x20080000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	200002c0 	.word	0x200002c0
 8001b8c:	20000900 	.word	0x20000900

08001b90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <MX_TIM3_Init+0x9c>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001bda:	f242 527f 	movw	r2, #9599	; 0x257f
 8001bde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001be8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001bec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001bfc:	f003 f9a4 	bl	8004f48 <HAL_TIM_Base_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c06:	f7ff fdf9 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001c18:	f003 fdf6 	bl	8005808 <HAL_TIM_ConfigClockSource>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c22:	f7ff fdeb 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <MX_TIM3_Init+0x98>)
 8001c34:	f004 fa98 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c3e:	f7ff fddd 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002c4 	.word	0x200002c4
 8001c50:	40000400 	.word	0x40000400

08001c54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	; 0x38
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001c88:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <MX_TIM4_Init+0xec>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001c8e:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001c92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001c9c:	2263      	movs	r2, #99	; 0x63
 8001c9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cac:	4823      	ldr	r0, [pc, #140]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001cae:	f003 f94b 	bl	8004f48 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001cb8:	f7ff fda0 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481c      	ldr	r0, [pc, #112]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001cca:	f003 fd9d 	bl	8005808 <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001cd4:	f7ff fd92 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd8:	4818      	ldr	r0, [pc, #96]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001cda:	f003 fa05 	bl	80050e8 <HAL_TIM_PWM_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001ce4:	f7ff fd8a 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4811      	ldr	r0, [pc, #68]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001cf8:	f004 fa36 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d02:	f7ff fd7b 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d06:	2360      	movs	r3, #96	; 0x60
 8001d08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 90;
 8001d0a:	235a      	movs	r3, #90	; 0x5a
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001d1e:	f003 fc5f 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d28:	f7ff fd68 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM4_Init+0xe8>)
 8001d2e:	f000 f843 	bl	8001db8 <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3738      	adds	r7, #56	; 0x38
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000310 	.word	0x20000310
 8001d40:	40000800 	.word	0x40000800

08001d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_TIM_Base_MspInit+0x68>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d114      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_TIM_Base_MspInit+0x6c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_TIM_Base_MspInit+0x6c>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_TIM_Base_MspInit+0x6c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	201d      	movs	r0, #29
 8001d74:	f000 fb1d 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d78:	201d      	movs	r0, #29
 8001d7a:	f000 fb36 	bl	80023ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d7e:	e010      	b.n	8001da2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_TIM_Base_MspInit+0x70>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10b      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_TIM_Base_MspInit+0x6c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_TIM_Base_MspInit+0x6c>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_TIM_Base_MspInit+0x6c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40000800 	.word	0x40000800

08001db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_TIM_MspPostInit+0x64>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11c      	bne.n	8001e14 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_TIM_MspPostInit+0x68>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_TIM_MspPostInit+0x68>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_TIM_MspPostInit+0x68>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e04:	2302      	movs	r3, #2
 8001e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_TIM_MspPostInit+0x6c>)
 8001e10:	f000 fb98 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e14:	bf00      	nop
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020c00 	.word	0x40020c00

08001e28 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <MX_USART3_UART_Init+0x5c>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e6c:	f004 fa28 	bl	80062c0 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e76:	f7ff fcc1 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000035c 	.word	0x2000035c
 8001e84:	40004800 	.word	0x40004800

08001e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0ae      	sub	sp, #184	; 0xb8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2290      	movs	r2, #144	; 0x90
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 f8e1 	bl	8008070 <memset>
  if(uartHandle->Instance==USART3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_UART_MspInit+0xc4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d144      	bne.n	8001f42 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 fb96 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ed2:	f7ff fc93 	bl	80017fc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_UART_MspInit+0xc8>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_UART_MspInit+0xc8>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_UART_MspInit+0xc8>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_UART_MspInit+0xc8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_UART_MspInit+0xc8>)
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_UART_MspInit+0xc8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f20:	2307      	movs	r3, #7
 8001f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_UART_MspInit+0xcc>)
 8001f2e:	f000 fb09 	bl	8002544 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2027      	movs	r0, #39	; 0x27
 8001f38:	f000 fa3b 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f3c:	2027      	movs	r0, #39	; 0x27
 8001f3e:	f000 fa54 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f42:	bf00      	nop
 8001f44:	37b8      	adds	r7, #184	; 0xb8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40004800 	.word	0x40004800
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020c00 	.word	0x40020c00

08001f58 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f66:	2206      	movs	r2, #6
 8001f68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9c:	f000 fcb0 	bl	8002900 <HAL_PCD_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fa6:	f7ff fc29 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200003e4 	.word	0x200003e4

08001fb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0ae      	sub	sp, #184	; 0xb8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2290      	movs	r2, #144	; 0x90
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f006 f84b 	bl	8008070 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe2:	d159      	bne.n	8002098 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fe4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fe8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 faff 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002000:	f7ff fbfc 	bl	80017fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800201c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002036:	230a      	movs	r3, #10
 8002038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002040:	4619      	mov	r1, r3
 8002042:	4818      	ldr	r0, [pc, #96]	; (80020a4 <HAL_PCD_MspInit+0xf0>)
 8002044:	f000 fa7e 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002060:	4619      	mov	r1, r3
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <HAL_PCD_MspInit+0xf0>)
 8002064:	f000 fa6e 	bl	8002544 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	6353      	str	r3, [r2, #52]	; 0x34
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 8002086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208a:	6453      	str	r3, [r2, #68]	; 0x44
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_PCD_MspInit+0xec>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002098:	bf00      	nop
 800209a:	37b8      	adds	r7, #184	; 0xb8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c4:	4c0b      	ldr	r4, [pc, #44]	; (80020f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d2:	f7ff fd5d 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f005 ff99 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7ff faed 	bl	80016b8 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80020ec:	0800b264 	.word	0x0800b264
  ldr r2, =_sbss
 80020f0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80020f4:	20000900 	.word	0x20000900

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>

080020fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fe:	2003      	movs	r0, #3
 8002100:	f000 f94c 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002104:	2000      	movs	r0, #0
 8002106:	f000 f805 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210a:	f7ff fc07 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f967 	bl	8002406 <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 f92f 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000003c 	.word	0x2000003c
 800216c:	20000044 	.word	0x20000044
 8002170:	20000040 	.word	0x20000040

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000044 	.word	0x20000044
 8002198:	200008ec 	.word	0x200008ec

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200008ec 	.word	0x200008ec

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000044 	.word	0x20000044

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <__NVIC_SetPriorityGrouping+0x40>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	4313      	orrs	r3, r2
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x40>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00
 8002240:	05fa0000 	.word	0x05fa0000

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff29 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff3e 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff31 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffa2 	bl	8002358 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff feb6 	bl	800219c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d008      	beq.n	8002450 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e052      	b.n	80024f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0216 	bic.w	r2, r2, #22
 800245e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d103      	bne.n	8002480 <HAL_DMA_Abort+0x62>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a0:	e013      	b.n	80024ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a2:	f7ff fe7b 	bl	800219c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d90c      	bls.n	80024ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e015      	b.n	80024f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e4      	bne.n	80024a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d004      	beq.n	800251c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e00c      	b.n	8002536 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2205      	movs	r2, #5
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	e175      	b.n	8002850 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	f040 8164 	bne.w	800284a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d005      	beq.n	800259a <HAL_GPIO_Init+0x56>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d130      	bne.n	80025fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0201 	and.w	r2, r3, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b03      	cmp	r3, #3
 8002606:	d017      	beq.n	8002638 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d123      	bne.n	800268c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	08da      	lsrs	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3208      	adds	r2, #8
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	08da      	lsrs	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3208      	adds	r2, #8
 8002686:	69b9      	ldr	r1, [r7, #24]
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0203 	and.w	r2, r3, #3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80be 	beq.w	800284a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_GPIO_Init+0x324>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_GPIO_Init+0x324>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_GPIO_Init+0x324>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026e6:	4a61      	ldr	r2, [pc, #388]	; (800286c <HAL_GPIO_Init+0x328>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d037      	beq.n	8002782 <HAL_GPIO_Init+0x23e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_GPIO_Init+0x23a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_GPIO_Init+0x334>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x236>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a55      	ldr	r2, [pc, #340]	; (800287c <HAL_GPIO_Init+0x338>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x232>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a54      	ldr	r2, [pc, #336]	; (8002880 <HAL_GPIO_Init+0x33c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x22e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a53      	ldr	r2, [pc, #332]	; (8002884 <HAL_GPIO_Init+0x340>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x22a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x344>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_GPIO_Init+0x348>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x34c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x350>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x21a>
 800275a:	2309      	movs	r3, #9
 800275c:	e012      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800275e:	230a      	movs	r3, #10
 8002760:	e010      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002762:	2308      	movs	r3, #8
 8002764:	e00e      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002766:	2307      	movs	r3, #7
 8002768:	e00c      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800276a:	2306      	movs	r3, #6
 800276c:	e00a      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800276e:	2305      	movs	r3, #5
 8002770:	e008      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002772:	2304      	movs	r3, #4
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002776:	2303      	movs	r3, #3
 8002778:	e004      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800277a:	2302      	movs	r3, #2
 800277c:	e002      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002782:	2300      	movs	r3, #0
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	f002 0203 	and.w	r2, r2, #3
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	4093      	lsls	r3, r2
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002794:	4935      	ldr	r1, [pc, #212]	; (800286c <HAL_GPIO_Init+0x328>)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_GPIO_Init+0x354>)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_GPIO_Init+0x354>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_GPIO_Init+0x354>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	f67f ae86 	bls.w	8002564 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40013800 	.word	0x40013800
 8002870:	40020000 	.word	0x40020000
 8002874:	40020400 	.word	0x40020400
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40021000 	.word	0x40021000
 8002884:	40021400 	.word	0x40021400
 8002888:	40021800 	.word	0x40021800
 800288c:	40021c00 	.word	0x40021c00
 8002890:	40022000 	.word	0x40022000
 8002894:	40022400 	.word	0x40022400
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028b8:	e003      	b.n	80028c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fe7a 	bl	80015e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40013c00 	.word	0x40013c00

08002900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002902:	b08f      	sub	sp, #60	; 0x3c
 8002904:	af0a      	add	r7, sp, #40	; 0x28
 8002906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e116      	b.n	8002b40 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fb41 	bl	8001fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f005 f8b5 	bl	8007ac0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	687e      	ldr	r6, [r7, #4]
 800295e:	466d      	mov	r5, sp
 8002960:	f106 0410 	add.w	r4, r6, #16
 8002964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002970:	e885 0003 	stmia.w	r5, {r0, r1}
 8002974:	1d33      	adds	r3, r6, #4
 8002976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f005 f849 	bl	8007a10 <USB_CoreInit>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d7      	b.n	8002b40 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f005 f8a3 	bl	8007ae2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e04a      	b.n	8002a38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	333d      	adds	r3, #61	; 0x3d
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	333c      	adds	r3, #60	; 0x3c
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	b298      	uxth	r0, r3
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3344      	adds	r3, #68	; 0x44
 80029de:	4602      	mov	r2, r0
 80029e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3340      	adds	r3, #64	; 0x40
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3348      	adds	r3, #72	; 0x48
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334c      	adds	r3, #76	; 0x4c
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3354      	adds	r3, #84	; 0x54
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	3301      	adds	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3af      	bcc.n	80029a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e044      	b.n	8002ad2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d3b5      	bcc.n	8002a48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	687e      	ldr	r6, [r7, #4]
 8002ae4:	466d      	mov	r5, sp
 8002ae6:	f106 0410 	add.w	r4, r6, #16
 8002aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002af6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002afa:	1d33      	adds	r3, r6, #4
 8002afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afe:	6838      	ldr	r0, [r7, #0]
 8002b00:	f005 f83c 	bl	8007b7c <USB_DevInit>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e014      	b.n	8002b40 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f80a 	bl	8002b48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f005 f9fa 	bl	8007f32 <USB_DevDisconnect>

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_PCDEx_ActivateLPM+0x44>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	10000003 	.word	0x10000003

08002b90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40007000 	.word	0x40007000

08002bb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bde:	f7ff fadd 	bl	800219c <HAL_GetTick>
 8002be2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002be4:	e009      	b.n	8002bfa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002be6:	f7ff fad9 	bl	800219c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf4:	d901      	bls.n	8002bfa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e022      	b.n	8002c40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d1ee      	bne.n	8002be6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c14:	f7ff fac2 	bl	800219c <HAL_GetTick>
 8002c18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c1a:	e009      	b.n	8002c30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c1c:	f7ff fabe 	bl	800219c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2a:	d901      	bls.n	8002c30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e007      	b.n	8002c40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3c:	d1ee      	bne.n	8002c1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e29b      	b.n	800319e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8087 	beq.w	8002d82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c74:	4b96      	ldr	r3, [pc, #600]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c80:	4b93      	ldr	r3, [pc, #588]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d112      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x62>
 8002c8c:	4b90      	ldr	r3, [pc, #576]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c98:	d10b      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9a:	4b8d      	ldr	r3, [pc, #564]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d06c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x130>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d168      	bne.n	8002d80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e275      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x7a>
 8002cbc:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e02e      	b.n	8002d28 <HAL_RCC_OscConfig+0xd8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x9c>
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b7c      	ldr	r3, [pc, #496]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7b      	ldr	r2, [pc, #492]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e01d      	b.n	8002d28 <HAL_RCC_OscConfig+0xd8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a75      	ldr	r2, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a72      	ldr	r2, [pc, #456]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xd8>
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6b      	ldr	r2, [pc, #428]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff fa34 	bl	800219c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7ff fa30 	bl	800219c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e229      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe8>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff fa20 	bl	800219c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff fa1c 	bl	800219c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e215      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b57      	ldr	r3, [pc, #348]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x110>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d069      	beq.n	8002e62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8e:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b4d      	ldr	r3, [pc, #308]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x190>
 8002da6:	4b4a      	ldr	r3, [pc, #296]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x17a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1e9      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	493d      	ldr	r1, [pc, #244]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e040      	b.n	8002e62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d023      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a38      	ldr	r2, [pc, #224]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7ff f9d2 	bl	800219c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7ff f9ce 	bl	800219c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4929      	ldr	r1, [pc, #164]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
 8002e2e:	e018      	b.n	8002e62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7ff f9ae 	bl	800219c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7ff f9aa 	bl	800219c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1a3      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d038      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d019      	beq.n	8002eaa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7ff f98b 	bl	800219c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7ff f987 	bl	800219c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e180      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x23a>
 8002ea8:	e01a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7ff f971 	bl	800219c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7ff f96d 	bl	800219c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d903      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e166      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
 8002ed0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	4b92      	ldr	r3, [pc, #584]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ee      	bne.n	8002ebe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80a4 	beq.w	8003036 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b89      	ldr	r3, [pc, #548]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a88      	ldr	r2, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b86      	ldr	r3, [pc, #536]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f16:	4b83      	ldr	r3, [pc, #524]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f22:	4b80      	ldr	r3, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7f      	ldr	r2, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff f935 	bl	800219c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7ff f931 	bl	800219c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e12a      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f48:	4b76      	ldr	r3, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x31a>
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a6f      	ldr	r2, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e02d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x376>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x33c>
 8002f72:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e01c      	b.n	8002fc6 <HAL_RCC_OscConfig+0x376>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d10c      	bne.n	8002fae <HAL_RCC_OscConfig+0x35e>
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a5e      	ldr	r2, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x376>
 8002fae:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d015      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7ff f8e5 	bl	800219c <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7ff f8e1 	bl	800219c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0d8      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ee      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x386>
 8002ff8:	e014      	b.n	8003024 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f8cf 	bl	800219c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7ff f8cb 	bl	800219c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0c2      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ee      	bne.n	8003002 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d105      	bne.n	8003036 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80ae 	beq.w	800319c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003040:	4b37      	ldr	r3, [pc, #220]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d06d      	beq.n	8003128 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d14b      	bne.n	80030ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 800305a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f89c 	bl	800219c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7ff f898 	bl	800219c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e091      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	491b      	ldr	r1, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7ff f86a 	bl	800219c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7ff f866 	bl	800219c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e05f      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x47c>
 80030ea:	e057      	b.n	800319c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7ff f850 	bl	800219c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7ff f84c 	bl	800219c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x4b0>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x54c>
 8003120:	40023800 	.word	0x40023800
 8003124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003128:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <HAL_RCC_OscConfig+0x558>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d030      	beq.n	8003198 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d129      	bne.n	8003198 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d122      	bne.n	8003198 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d119      	bne.n	8003198 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d10f      	bne.n	8003198 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d0      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d910      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 020f 	bic.w	r2, r3, #15
 80031da:	4965      	ldr	r1, [pc, #404]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b8      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a58      	ldr	r2, [pc, #352]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003216:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003224:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a52      	ldr	r2, [pc, #328]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800322a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800322e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b50      	ldr	r3, [pc, #320]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	494d      	ldr	r1, [pc, #308]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d040      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d115      	bne.n	800328e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e07f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e073      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06b      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4936      	ldr	r1, [pc, #216]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fe ff7c 	bl	800219c <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fe ff78 	bl	800219c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e053      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d210      	bcs.n	8003300 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 020f 	bic.w	r2, r3, #15
 80032e6:	4922      	ldr	r1, [pc, #136]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e032      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4916      	ldr	r1, [pc, #88]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	490e      	ldr	r1, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333e:	f000 f821 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8003342:	4602      	mov	r2, r0
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	490a      	ldr	r1, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x1cc>)
 8003350:	5ccb      	ldrb	r3, [r1, r3]
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1d0>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x1d4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fed8 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00
 8003374:	40023800 	.word	0x40023800
 8003378:	0800ae60 	.word	0x0800ae60
 800337c:	2000003c 	.word	0x2000003c
 8003380:	20000040 	.word	0x20000040

08003384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003388:	b094      	sub	sp, #80	; 0x50
 800338a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	647b      	str	r3, [r7, #68]	; 0x44
 8003390:	2300      	movs	r3, #0
 8003392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003394:	2300      	movs	r3, #0
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800339c:	4b79      	ldr	r3, [pc, #484]	; (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d00d      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x40>
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	f200 80e1 	bhi.w	8003570 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x34>
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d003      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x3a>
 80033b6:	e0db      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033bc:	e0db      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033be:	4b73      	ldr	r3, [pc, #460]	; (800358c <HAL_RCC_GetSysClockFreq+0x208>)
 80033c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033c2:	e0d8      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	2200      	movs	r2, #0
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
 80033f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033f6:	4622      	mov	r2, r4
 80033f8:	462b      	mov	r3, r5
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	0159      	lsls	r1, r3, #5
 8003404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003408:	0150      	lsls	r0, r2, #5
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4621      	mov	r1, r4
 8003410:	1a51      	subs	r1, r2, r1
 8003412:	6139      	str	r1, [r7, #16]
 8003414:	4629      	mov	r1, r5
 8003416:	eb63 0301 	sbc.w	r3, r3, r1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003428:	4659      	mov	r1, fp
 800342a:	018b      	lsls	r3, r1, #6
 800342c:	4651      	mov	r1, sl
 800342e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003432:	4651      	mov	r1, sl
 8003434:	018a      	lsls	r2, r1, #6
 8003436:	4651      	mov	r1, sl
 8003438:	ebb2 0801 	subs.w	r8, r2, r1
 800343c:	4659      	mov	r1, fp
 800343e:	eb63 0901 	sbc.w	r9, r3, r1
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003456:	4690      	mov	r8, r2
 8003458:	4699      	mov	r9, r3
 800345a:	4623      	mov	r3, r4
 800345c:	eb18 0303 	adds.w	r3, r8, r3
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	462b      	mov	r3, r5
 8003464:	eb49 0303 	adc.w	r3, r9, r3
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003476:	4629      	mov	r1, r5
 8003478:	024b      	lsls	r3, r1, #9
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003480:	4621      	mov	r1, r4
 8003482:	024a      	lsls	r2, r1, #9
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
 800348e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003494:	f7fc ff2c 	bl	80002f0 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a0:	e058      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b38      	ldr	r3, [pc, #224]	; (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	2200      	movs	r2, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	4611      	mov	r1, r2
 80034ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	f04f 0000 	mov.w	r0, #0
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	0159      	lsls	r1, r3, #5
 80034ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ce:	0150      	lsls	r0, r2, #5
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4641      	mov	r1, r8
 80034d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034da:	4649      	mov	r1, r9
 80034dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034f4:	ebb2 040a 	subs.w	r4, r2, sl
 80034f8:	eb63 050b 	sbc.w	r5, r3, fp
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	00eb      	lsls	r3, r5, #3
 8003506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350a:	00e2      	lsls	r2, r4, #3
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	4643      	mov	r3, r8
 8003512:	18e3      	adds	r3, r4, r3
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	464b      	mov	r3, r9
 8003518:	eb45 0303 	adc.w	r3, r5, r3
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800352a:	4629      	mov	r1, r5
 800352c:	028b      	lsls	r3, r1, #10
 800352e:	4621      	mov	r1, r4
 8003530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003534:	4621      	mov	r1, r4
 8003536:	028a      	lsls	r2, r1, #10
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353e:	2200      	movs	r2, #0
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	61fa      	str	r2, [r7, #28]
 8003544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003548:	f7fc fed2 	bl	80002f0 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4613      	mov	r3, r2
 8003552:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	3301      	adds	r3, #1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetSysClockFreq+0x204>)
 8003572:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003578:	4618      	mov	r0, r3
 800357a:	3750      	adds	r7, #80	; 0x50
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	00f42400 	.word	0x00f42400
 800358c:	007a1200 	.word	0x007a1200

08003590 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	2000003c 	.word	0x2000003c

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	0800ae70 	.word	0x0800ae70

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d4:	f7ff ffdc 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0b5b      	lsrs	r3, r3, #13
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	0800ae70 	.word	0x0800ae70

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d012      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003620:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	4964      	ldr	r1, [pc, #400]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d017      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003652:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	4959      	ldr	r1, [pc, #356]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003670:	d101      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800368e:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	494a      	ldr	r1, [pc, #296]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 808b 	beq.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
 80036e8:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003700:	f7fe fd4c 	bl	800219c <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003708:	f7fe fd48 	bl	800219c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e38f      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800371a:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003726:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d035      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	429a      	cmp	r2, r3
 8003742:	d02e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003744:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003764:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d114      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fd10 	bl	800219c <HAL_GetTick>
 800377c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fe fd0c 	bl	800219c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e351      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ee      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ae:	d111      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037be:	400b      	ands	r3, r1
 80037c0:	4901      	ldr	r1, [pc, #4]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
 80037c6:	e00b      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40007000 	.word	0x40007000
 80037d0:	0ffffcff 	.word	0x0ffffcff
 80037d4:	4bac      	ldr	r3, [pc, #688]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4aab      	ldr	r2, [pc, #684]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	4ba9      	ldr	r3, [pc, #676]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	49a6      	ldr	r1, [pc, #664]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037fe:	4ba2      	ldr	r3, [pc, #648]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003804:	4aa0      	ldr	r2, [pc, #640]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800380e:	4b9e      	ldr	r3, [pc, #632]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003810:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	499b      	ldr	r1, [pc, #620]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382c:	4b96      	ldr	r3, [pc, #600]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800383a:	4993      	ldr	r1, [pc, #588]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384e:	4b8e      	ldr	r3, [pc, #568]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385c:	498a      	ldr	r1, [pc, #552]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003870:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387e:	4982      	ldr	r1, [pc, #520]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003892:	4b7d      	ldr	r3, [pc, #500]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4979      	ldr	r1, [pc, #484]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b4:	4b74      	ldr	r3, [pc, #464]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4971      	ldr	r1, [pc, #452]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d6:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f023 020c 	bic.w	r2, r3, #12
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	4968      	ldr	r1, [pc, #416]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038f8:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	4960      	ldr	r1, [pc, #384]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	4957      	ldr	r1, [pc, #348]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	494f      	ldr	r1, [pc, #316]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800395e:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	4946      	ldr	r1, [pc, #280]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003980:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	493e      	ldr	r1, [pc, #248]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b0:	4935      	ldr	r1, [pc, #212]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d2:	492d      	ldr	r1, [pc, #180]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d011      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f4:	4924      	ldr	r1, [pc, #144]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a26:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	4914      	ldr	r1, [pc, #80]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	490b      	ldr	r1, [pc, #44]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7c:	4902      	ldr	r1, [pc, #8]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a84:	e002      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a98:	4b8a      	ldr	r3, [pc, #552]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	4986      	ldr	r1, [pc, #536]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003acc:	497d      	ldr	r1, [pc, #500]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d006      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80d6 	beq.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ae8:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a75      	ldr	r2, [pc, #468]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fe fb52 	bl	800219c <HAL_GetTick>
 8003af8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afc:	f7fe fb4e 	bl	800219c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e195      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11d      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	0e1b      	lsrs	r3, r3, #24
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	019a      	lsls	r2, r3, #6
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	4958      	ldr	r1, [pc, #352]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02e      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b94:	d129      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b96:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ba4:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	0f1b      	lsrs	r3, r3, #28
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	019a      	lsls	r2, r3, #6
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	071b      	lsls	r3, r3, #28
 8003bca:	493e      	ldr	r1, [pc, #248]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bd2:	4b3c      	ldr	r3, [pc, #240]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	f023 021f 	bic.w	r2, r3, #31
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	3b01      	subs	r3, #1
 8003be2:	4938      	ldr	r1, [pc, #224]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01d      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c04:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0a:	0f1b      	lsrs	r3, r3, #28
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	019a      	lsls	r2, r3, #6
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	4926      	ldr	r1, [pc, #152]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	491a      	ldr	r1, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6e:	f7fe fa95 	bl	800219c <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c76:	f7fe fa91 	bl	800219c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d901      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0d8      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	f040 80ce 	bne.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fe fa78 	bl	800219c <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb0:	f7fe fa74 	bl	800219c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d904      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0bb      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cc8:	4b5e      	ldr	r3, [pc, #376]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd4:	d0ec      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d12a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cfe:	4b51      	ldr	r3, [pc, #324]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	0f1b      	lsrs	r3, r3, #28
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	4944      	ldr	r1, [pc, #272]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d3a:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d022      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d68:	d11d      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	0f1b      	lsrs	r3, r3, #28
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	4929      	ldr	r1, [pc, #164]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d028      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	0e1b      	lsrs	r3, r3, #24
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	019a      	lsls	r2, r3, #6
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	071b      	lsls	r3, r3, #28
 8003de6:	4917      	ldr	r1, [pc, #92]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4911      	ldr	r1, [pc, #68]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fe f9c4 	bl	800219c <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e18:	f7fe f9c0 	bl	800219c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e007      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e36:	d1ef      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e09d      	b.n	8003f96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fcf2 	bl	8001884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ec0:	d902      	bls.n	8003ec8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e002      	b.n	8003ece <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ed6:	d007      	beq.n	8003ee8 <HAL_SPI_Init+0xa0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ee0:	d002      	beq.n	8003ee8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	ea42 0103 	orr.w	r1, r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	0c1b      	lsrs	r3, r3, #16
 8003f44:	f003 0204 	and.w	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f64:	ea42 0103 	orr.w	r1, r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b088      	sub	sp, #32
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_SPI_Transmit+0x22>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e158      	b.n	8004272 <HAL_SPI_Transmit+0x2d4>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc8:	f7fe f8e8 	bl	800219c <HAL_GetTick>
 8003fcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe2:	e13d      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_Transmit+0x52>
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ff4:	e134      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d10f      	bne.n	8004062 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004060:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d007      	beq.n	8004080 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004088:	d94b      	bls.n	8004122 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Transmit+0xfa>
 8004092:	8afb      	ldrh	r3, [r7, #22]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d13e      	bne.n	8004116 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040bc:	e02b      	b.n	8004116 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d112      	bne.n	80040f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	881a      	ldrh	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	1c9a      	adds	r2, r3, #2
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f0:	e011      	b.n	8004116 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f2:	f7fe f853 	bl	800219c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d803      	bhi.n	800410a <HAL_SPI_Transmit+0x16c>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d102      	bne.n	8004110 <HAL_SPI_Transmit+0x172>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004114:	e0a4      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ce      	bne.n	80040be <HAL_SPI_Transmit+0x120>
 8004120:	e07c      	b.n	800421c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Transmit+0x192>
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d170      	bne.n	8004212 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d912      	bls.n	8004160 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	881a      	ldrh	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b02      	subs	r3, #2
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800415e:	e058      	b.n	8004212 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004186:	e044      	b.n	8004212 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d12b      	bne.n	80041ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d912      	bls.n	80041c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b02      	subs	r3, #2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c4:	e025      	b.n	8004212 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ec:	e011      	b.n	8004212 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ee:	f7fd ffd5 	bl	800219c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d803      	bhi.n	8004206 <HAL_SPI_Transmit+0x268>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d102      	bne.n	800420c <HAL_SPI_Transmit+0x26e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004210:	e026      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1b5      	bne.n	8004188 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	6839      	ldr	r1, [r7, #0]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fe27 	bl	8004e74 <SPI_EndRxTxTransaction>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e000      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800425e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004270:	7ffb      	ldrb	r3, [r7, #31]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af02      	add	r7, sp, #8
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d112      	bne.n	80042be <HAL_SPI_Receive+0x44>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10e      	bne.n	80042be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2204      	movs	r2, #4
 80042a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f910 	bl	80044da <HAL_SPI_TransmitReceive>
 80042ba:	4603      	mov	r3, r0
 80042bc:	e109      	b.n	80044d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_SPI_Receive+0x52>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e102      	b.n	80044d2 <HAL_SPI_Receive+0x258>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d4:	f7fd ff62 	bl	800219c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d002      	beq.n	80042ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042ea:	e0e9      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Receive+0x7e>
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fc:	e0e0      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2204      	movs	r2, #4
 8004302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004348:	d908      	bls.n	800435c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	e007      	b.n	800436c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d10f      	bne.n	8004396 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d007      	beq.n	80043b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043bc:	d867      	bhi.n	800448e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043be:	e030      	b.n	8004422 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d117      	bne.n	80043fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f103 020c 	add.w	r2, r3, #12
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80043fc:	e011      	b.n	8004422 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fe:	f7fd fecd 	bl	800219c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d803      	bhi.n	8004416 <HAL_SPI_Receive+0x19c>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_Receive+0x1a2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004420:	e04e      	b.n	80044c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1c8      	bne.n	80043c0 <HAL_SPI_Receive+0x146>
 800442e:	e034      	b.n	800449a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d115      	bne.n	800446a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	b292      	uxth	r2, r2
 800444a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004468:	e011      	b.n	800448e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446a:	f7fd fe97 	bl	800219c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <HAL_SPI_Receive+0x208>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d102      	bne.n	8004488 <HAL_SPI_Receive+0x20e>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800448c:	e018      	b.n	80044c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ca      	bne.n	8004430 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fc6c 	bl	8004d7c <SPI_EndRxTransaction>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e000      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

error :
 80044be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x26>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e1fb      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x41e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004508:	f7fd fe48 	bl	800219c <HAL_GetTick>
 800450c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004514:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004524:	7efb      	ldrb	r3, [r7, #27]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d00e      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x6e>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004530:	d106      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x66>
 800453a:	7efb      	ldrb	r3, [r7, #27]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004546:	e1cd      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_SPI_TransmitReceive+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x80>
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004560:	e1c0      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2205      	movs	r2, #5
 8004572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b8:	d802      	bhi.n	80045c0 <HAL_SPI_TransmitReceive+0xe6>
 80045ba:	8a3b      	ldrh	r3, [r7, #16]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d908      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e007      	b.n	80045e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d007      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004608:	d97c      	bls.n	8004704 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x13e>
 8004612:	8a7b      	ldrh	r3, [r7, #18]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d169      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463c:	e056      	b.n	80046ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11b      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	d113      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d11c      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x1f2>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	b292      	uxth	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	1c9a      	adds	r2, r3, #2
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046cc:	f7fd fd66 	bl	800219c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d8:	429a      	cmp	r2, r3
 80046da:	d807      	bhi.n	80046ec <HAL_SPI_TransmitReceive+0x212>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d003      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046ea:	e0fb      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1a3      	bne.n	800463e <HAL_SPI_TransmitReceive+0x164>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d19d      	bne.n	800463e <HAL_SPI_TransmitReceive+0x164>
 8004702:	e0df      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x23a>
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	2b01      	cmp	r3, #1
 8004710:	f040 80cb 	bne.w	80048aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d912      	bls.n	8004744 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b02      	subs	r3, #2
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004742:	e0b2      	b.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800476a:	e09e      	b.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d134      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02f      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2b01      	cmp	r3, #1
 8004788:	d12c      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d912      	bls.n	80047ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	1c9a      	adds	r2, r3, #2
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b02      	subs	r3, #2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b8:	e012      	b.n	80047e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d148      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x3aa>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d042      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d923      	bls.n	8004852 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	b292      	uxth	r2, r2
 8004816:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b02      	subs	r3, #2
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d81f      	bhi.n	8004880 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e016      	b.n	8004880 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f103 020c 	add.w	r2, r3, #12
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004884:	f7fd fc8a 	bl	800219c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <HAL_SPI_TransmitReceive+0x3c2>
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x3c8>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048a8:	e01c      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f af5b 	bne.w	800476c <HAL_SPI_TransmitReceive+0x292>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f47f af54 	bne.w	800476c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fad3 	bl	8004e74 <SPI_EndRxTxTransaction>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	661a      	str	r2, [r3, #96]	; 0x60
 80048e0:	e000      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10f      	bne.n	8004944 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	099b      	lsrs	r3, r3, #6
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
    return;
 8004942:	e0d7      	b.n	8004af4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_SPI_IRQHandler+0x66>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	09db      	lsrs	r3, r3, #7
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
    return;
 8004964:	e0c6      	b.n	8004af4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10c      	bne.n	800498c <HAL_SPI_IRQHandler+0x8c>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80b4 	beq.w	8004af4 <HAL_SPI_IRQHandler+0x1f4>
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80ad 	beq.w	8004af4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d011      	beq.n	80049d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	e00b      	b.n	80049ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	693b      	ldr	r3, [r7, #16]
        return;
 80049ec:	e082      	b.n	8004af4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d014      	beq.n	8004a24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00c      	beq.n	8004a4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f043 0208 	orr.w	r2, r3, #8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d04f      	beq.n	8004af2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <HAL_SPI_IRQHandler+0x17e>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d034      	beq.n	8004ae8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0203 	bic.w	r2, r2, #3
 8004a8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_SPI_IRQHandler+0x1fc>)
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fd2b 	bl	80024fe <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	4a0d      	ldr	r2, [pc, #52]	; (8004afc <HAL_SPI_IRQHandler+0x1fc>)
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fd15 	bl	80024fe <HAL_DMA_Abort_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004ae6:	e003      	b.n	8004af0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f809 	bl	8004b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004aee:	e000      	b.n	8004af2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004af0:	bf00      	nop
    return;
 8004af2:	bf00      	nop
  }
}
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08004b15 	.word	0x08004b15

08004b00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ffe5 	bl	8004b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b50:	f7fd fb24 	bl	800219c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b60:	f7fd fb1c 	bl	800219c <HAL_GetTick>
 8004b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	015b      	lsls	r3, r3, #5
 8004b6c:	0d1b      	lsrs	r3, r3, #20
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b76:	e054      	b.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d050      	beq.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b80:	f7fd fb0c 	bl	800219c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d902      	bls.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d13d      	bne.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d111      	bne.n	8004bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb8:	d004      	beq.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d107      	bne.n	8004bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d10f      	bne.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e017      	b.n	8004c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d19b      	bne.n	8004b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000003c 	.word	0x2000003c

08004c50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c62:	f7fd fa9b 	bl	800219c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c72:	f7fd fa93 	bl	800219c <HAL_GetTick>
 8004c76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c80:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00da      	lsls	r2, r3, #3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	0d1b      	lsrs	r3, r3, #20
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c98:	e060      	b.n	8004d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ca0:	d107      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d050      	beq.n	8004d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cba:	f7fd fa6f 	bl	800219c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d902      	bls.n	8004cd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d13d      	bne.n	8004d4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce8:	d111      	bne.n	8004d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d004      	beq.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfc:	d107      	bne.n	8004d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d16:	d10f      	bne.n	8004d38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e010      	b.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d196      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	2000003c 	.word	0x2000003c

08004d7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d90:	d111      	bne.n	8004db6 <SPI_EndRxTransaction+0x3a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9a:	d004      	beq.n	8004da6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da4:	d107      	bne.n	8004db6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dbe:	d112      	bne.n	8004de6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff feb8 	bl	8004b40 <SPI_WaitFlagStateUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d021      	beq.n	8004e1a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e03d      	b.n	8004e62 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <SPI_EndRxTransaction+0xf0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <SPI_EndRxTransaction+0xf4>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	0d5b      	lsrs	r3, r3, #21
 8004df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d0f2      	beq.n	8004dfc <SPI_EndRxTransaction+0x80>
 8004e16:	e000      	b.n	8004e1a <SPI_EndRxTransaction+0x9e>
        break;
 8004e18:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e22:	d11d      	bne.n	8004e60 <SPI_EndRxTransaction+0xe4>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	d004      	beq.n	8004e38 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d113      	bne.n	8004e60 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff ff03 	bl	8004c50 <SPI_WaitFifoStateUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	2000003c 	.word	0x2000003c
 8004e70:	165e9f81 	.word	0x165e9f81

08004e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fedf 	bl	8004c50 <SPI_WaitFifoStateUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e046      	b.n	8004f36 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <SPI_EndRxTxTransaction+0xcc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <SPI_EndRxTxTransaction+0xd0>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0d5b      	lsrs	r3, r3, #21
 8004eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec6:	d112      	bne.n	8004eee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fe34 	bl	8004b40 <SPI_WaitFlagStateUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d016      	beq.n	8004f0c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e023      	b.n	8004f36 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	d0f2      	beq.n	8004eee <SPI_EndRxTxTransaction+0x7a>
 8004f08:	e000      	b.n	8004f0c <SPI_EndRxTxTransaction+0x98>
        break;
 8004f0a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fe99 	bl	8004c50 <SPI_WaitFifoStateUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e000      	b.n	8004f36 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000003c 	.word	0x2000003c
 8004f44:	165e9f81 	.word	0x165e9f81

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fee8 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fd30 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e054      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d01d      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIM_Base_Start_IT+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d115      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d015      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d011      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40001800 	.word	0x40001800
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e049      	b.n	800518e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f841 	bl	8005196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fc60 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_TIM_PWM_Start+0x24>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e03c      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d109      	bne.n	80051ea <HAL_TIM_PWM_Start+0x3e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e02f      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d109      	bne.n	8005204 <HAL_TIM_PWM_Start+0x58>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e022      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d109      	bne.n	800521e <HAL_TIM_PWM_Start+0x72>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e015      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b10      	cmp	r3, #16
 8005222:	d109      	bne.n	8005238 <HAL_TIM_PWM_Start+0x8c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e008      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e092      	b.n	8005378 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xb6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	e023      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xc6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005270:	e01b      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xd6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	e013      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xe6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005290:	e00b      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b10      	cmp	r3, #16
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xf6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a0:	e003      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 ff32 	bl	800611c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a30      	ldr	r2, [pc, #192]	; (8005380 <HAL_TIM_PWM_Start+0x1d4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIM_PWM_Start+0x120>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <HAL_TIM_PWM_Start+0x1d8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_PWM_Start+0x124>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_PWM_Start+0x126>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a25      	ldr	r2, [pc, #148]	; (8005380 <HAL_TIM_PWM_Start+0x1d4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d01d      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a22      	ldr	r2, [pc, #136]	; (8005388 <HAL_TIM_PWM_Start+0x1dc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <HAL_TIM_PWM_Start+0x1e0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_TIM_PWM_Start+0x1e4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_TIM_PWM_Start+0x1d8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_TIM_PWM_Start+0x1e8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_TIM_PWM_Start+0x1ec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d115      	bne.n	8005362 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_TIM_PWM_Start+0x1f0>)
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d015      	beq.n	8005374 <HAL_TIM_PWM_Start+0x1c8>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534e:	d011      	beq.n	8005374 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	e008      	b.n	8005374 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e000      	b.n	8005376 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800
 800539c:	00010007 	.word	0x00010007

080053a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0202 	mvn.w	r2, #2
 80053cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fae4 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fad6 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fae7 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0204 	mvn.w	r2, #4
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 faba 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 faac 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fabd 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b08      	cmp	r3, #8
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0208 	mvn.w	r2, #8
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2204      	movs	r2, #4
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa90 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa82 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa93 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0210 	mvn.w	r2, #16
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2208      	movs	r2, #8
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa66 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa58 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa69 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0201 	mvn.w	r2, #1
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc f812 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fea4 	bl	8006298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d10e      	bne.n	800557e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fe97 	bl	80062ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b40      	cmp	r3, #64	; 0x40
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa17 	bl	80059d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d10e      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0220 	mvn.w	r2, #32
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fe57 	bl	8006284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ff      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b14      	cmp	r3, #20
 800560a:	f200 80f0 	bhi.w	80057ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005669 	.word	0x08005669
 8005618:	080057ef 	.word	0x080057ef
 800561c:	080057ef 	.word	0x080057ef
 8005620:	080057ef 	.word	0x080057ef
 8005624:	080056a9 	.word	0x080056a9
 8005628:	080057ef 	.word	0x080057ef
 800562c:	080057ef 	.word	0x080057ef
 8005630:	080057ef 	.word	0x080057ef
 8005634:	080056eb 	.word	0x080056eb
 8005638:	080057ef 	.word	0x080057ef
 800563c:	080057ef 	.word	0x080057ef
 8005640:	080057ef 	.word	0x080057ef
 8005644:	0800572b 	.word	0x0800572b
 8005648:	080057ef 	.word	0x080057ef
 800564c:	080057ef 	.word	0x080057ef
 8005650:	080057ef 	.word	0x080057ef
 8005654:	0800576d 	.word	0x0800576d
 8005658:	080057ef 	.word	0x080057ef
 800565c:	080057ef 	.word	0x080057ef
 8005660:	080057ef 	.word	0x080057ef
 8005664:	080057ad 	.word	0x080057ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa5c 	bl	8005b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]
      break;
 80056a6:	e0a5      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 faae 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
      break;
 80056e8:	e084      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb05 	bl	8005d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0204 	bic.w	r2, r2, #4
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
      break;
 8005728:	e064      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fb5b 	bl	8005dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	021a      	lsls	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	61da      	str	r2, [r3, #28]
      break;
 800576a:	e043      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb92 	bl	8005e9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0208 	orr.w	r2, r2, #8
 8005786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057aa:	e023      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fbc4 	bl	8005f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop

08005808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIM_ConfigClockSource+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e0b4      	b.n	800598e <HAL_TIM_ConfigClockSource+0x186>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	4b56      	ldr	r3, [pc, #344]	; (8005998 <HAL_TIM_ConfigClockSource+0x190>)
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585c:	d03e      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xd4>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005862:	f200 8087 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586a:	f000 8086 	beq.w	800597a <HAL_TIM_ConfigClockSource+0x172>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	d87f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b70      	cmp	r3, #112	; 0x70
 8005876:	d01a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xa6>
 8005878:	2b70      	cmp	r3, #112	; 0x70
 800587a:	d87b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b60      	cmp	r3, #96	; 0x60
 800587e:	d050      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x11a>
 8005880:	2b60      	cmp	r3, #96	; 0x60
 8005882:	d877      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b50      	cmp	r3, #80	; 0x50
 8005886:	d03c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0xfa>
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d873      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d058      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x13a>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d86f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b30      	cmp	r3, #48	; 0x30
 8005896:	d064      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d86b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d060      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d867      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d05a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	e062      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f000 fc0d 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	609a      	str	r2, [r3, #8]
      break;
 80058da:	e04f      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6899      	ldr	r1, [r3, #8]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f000 fbf6 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fe:	609a      	str	r2, [r3, #8]
      break;
 8005900:	e03c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fb6a 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2150      	movs	r1, #80	; 0x50
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fbc3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005920:	e02c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fb89 	bl	8006046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2160      	movs	r1, #96	; 0x60
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fbb3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005940:	e01c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fb4a 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fba3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005960:	e00c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 fb9a 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005972:	e003      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	e000      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800597a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	fffeff88 	.word	0xfffeff88

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a40      	ldr	r2, [pc, #256]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d00f      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3d      	ldr	r2, [pc, #244]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3c      	ldr	r2, [pc, #240]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3b      	ldr	r2, [pc, #236]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a3a      	ldr	r2, [pc, #232]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d027      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d023      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01f      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <TIM_Base_SetConfig+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <TIM_Base_SetConfig+0x130>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <TIM_Base_SetConfig+0x134>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <TIM_Base_SetConfig+0x138>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <TIM_Base_SetConfig+0x13c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	40001800 	.word	0x40001800
 8005b24:	40001c00 	.word	0x40001c00
 8005b28:	40002000 	.word	0x40002000

08005b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <TIM_OC1_SetConfig+0xd8>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 0302 	bic.w	r3, r3, #2
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <TIM_OC1_SetConfig+0xdc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC1_SetConfig+0x64>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <TIM_OC1_SetConfig+0xe0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10c      	bne.n	8005baa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0308 	bic.w	r3, r3, #8
 8005b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 0304 	bic.w	r3, r3, #4
 8005ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <TIM_OC1_SetConfig+0xdc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_OC1_SetConfig+0x8e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <TIM_OC1_SetConfig+0xe0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	fffeff8f 	.word	0xfffeff8f
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC2_SetConfig+0x68>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <TIM_OC2_SetConfig+0xec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10d      	bne.n	8005c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_OC2_SetConfig+0x94>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <TIM_OC2_SetConfig+0xec>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d113      	bne.n	8005ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	feff8fff 	.word	0xfeff8fff
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010400 	.word	0x40010400

08005d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <TIM_OC3_SetConfig+0xe0>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <TIM_OC3_SetConfig+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC3_SetConfig+0x66>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <TIM_OC3_SetConfig+0xe8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10d      	bne.n	8005d82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <TIM_OC3_SetConfig+0xe4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC3_SetConfig+0x92>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <TIM_OC3_SetConfig+0xe8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d113      	bne.n	8005dba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	fffeff8f 	.word	0xfffeff8f
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <TIM_OC4_SetConfig+0xa4>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	031b      	lsls	r3, r3, #12
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <TIM_OC4_SetConfig+0xa8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC4_SetConfig+0x68>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <TIM_OC4_SetConfig+0xac>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d109      	bne.n	8005e68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	019b      	lsls	r3, r3, #6
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	feff8fff 	.word	0xfeff8fff
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40010400 	.word	0x40010400

08005e9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <TIM_OC5_SetConfig+0x98>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005edc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <TIM_OC5_SetConfig+0x9c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC5_SetConfig+0x5e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <TIM_OC5_SetConfig+0xa0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d109      	bne.n	8005f0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	fffeff8f 	.word	0xfffeff8f
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400

08005f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <TIM_OC6_SetConfig+0x9c>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <TIM_OC6_SetConfig+0xa0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x60>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <TIM_OC6_SetConfig+0xa4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	feff8fff 	.word	0xfeff8fff
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2201      	movs	r2, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800617c:	2302      	movs	r3, #2
 800617e:	e06d      	b.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a30      	ldr	r2, [pc, #192]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2f      	ldr	r2, [pc, #188]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d108      	bne.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a20      	ldr	r2, [pc, #128]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d022      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f2:	d01d      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d018      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00e      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a15      	ldr	r2, [pc, #84]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10c      	bne.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006236:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	4313      	orrs	r3, r2
 8006240:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40001800 	.word	0x40001800

08006284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e040      	b.n	8006354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fdd0 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fbe0 	bl	8006ac4 <UART_SetConfig>
 8006304:	4603      	mov	r3, r0
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e022      	b.n	8006354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fe38 	bl	8006f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 febf 	bl	80070d0 <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800635c:	b480      	push	{r7}
 800635e:	b08b      	sub	sp, #44	; 0x2c
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800636e:	2b20      	cmp	r3, #32
 8006370:	d147      	bne.n	8006402 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_UART_Transmit_IT+0x22>
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e040      	b.n	8006404 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2221      	movs	r2, #33	; 0x21
 80063aa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d107      	bne.n	80063c6 <HAL_UART_Transmit_IT+0x6a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <HAL_UART_Transmit_IT+0xb4>)
 80063c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80063c4:	e002      	b.n	80063cc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a12      	ldr	r2, [pc, #72]	; (8006414 <HAL_UART_Transmit_IT+0xb8>)
 80063ca:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	613b      	str	r3, [r7, #16]
   return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e6      	bne.n	80063cc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e000      	b.n	8006404 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	372c      	adds	r7, #44	; 0x2c
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	0800762f 	.word	0x0800762f
 8006414:	08007579 	.word	0x08007579

08006418 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800642c:	2b20      	cmp	r3, #32
 800642e:	d132      	bne.n	8006496 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_UART_Receive_IT+0x24>
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e02b      	b.n	8006498 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d018      	beq.n	8006486 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	613b      	str	r3, [r7, #16]
   return(result);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	623b      	str	r3, [r7, #32]
 8006474:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	6a3a      	ldr	r2, [r7, #32]
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e6      	bne.n	8006454 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	461a      	mov	r2, r3
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 ff33 	bl	80072f8 <UART_Start_Receive_IT>
 8006492:	4603      	mov	r3, r0
 8006494:	e000      	b.n	8006498 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3728      	adds	r7, #40	; 0x28
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b0ba      	sub	sp, #232	; 0xe8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ce:	4013      	ands	r3, r2
 80064d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d115      	bne.n	8006508 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00f      	beq.n	8006508 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d009      	beq.n	8006508 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 82ac 	beq.w	8006a56 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
      }
      return;
 8006506:	e2a6      	b.n	8006a56 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8117 	beq.w	8006740 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800651e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006522:	4b85      	ldr	r3, [pc, #532]	; (8006738 <HAL_UART_IRQHandler+0x298>)
 8006524:	4013      	ands	r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 810a 	beq.w	8006740 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <HAL_UART_IRQHandler+0xbc>
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	f043 0201 	orr.w	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d011      	beq.n	800658c <HAL_UART_IRQHandler+0xec>
 8006568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2202      	movs	r2, #2
 800657a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	f043 0204 	orr.w	r2, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d011      	beq.n	80065bc <HAL_UART_IRQHandler+0x11c>
 8006598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2204      	movs	r2, #4
 80065aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b2:	f043 0202 	orr.w	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d017      	beq.n	80065f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2208      	movs	r2, #8
 80065e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ee:	f043 0208 	orr.w	r2, r3, #8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006600:	2b00      	cmp	r3, #0
 8006602:	d012      	beq.n	800662a <HAL_UART_IRQHandler+0x18a>
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00c      	beq.n	800662a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8212 	beq.w	8006a5a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d005      	beq.n	8006682 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667e:	2b00      	cmp	r3, #0
 8006680:	d04f      	beq.n	8006722 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fefe 	bl	8007484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d141      	bne.n	800671a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1d9      	bne.n	8006696 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d013      	beq.n	8006712 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <HAL_UART_IRQHandler+0x29c>)
 80066f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fb ff01 	bl	80024fe <HAL_DMA_Abort_IT>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d017      	beq.n	8006732 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	e00f      	b.n	8006732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f9b6 	bl	8006a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	e00b      	b.n	8006732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f9b2 	bl	8006a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	e007      	b.n	8006732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9ae 	bl	8006a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006730:	e193      	b.n	8006a5a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006732:	bf00      	nop
    return;
 8006734:	e191      	b.n	8006a5a <HAL_UART_IRQHandler+0x5ba>
 8006736:	bf00      	nop
 8006738:	04000120 	.word	0x04000120
 800673c:	0800754d 	.word	0x0800754d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	2b01      	cmp	r3, #1
 8006746:	f040 814c 	bne.w	80069e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8145 	beq.w	80069e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 813e 	beq.w	80069e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2210      	movs	r2, #16
 800676c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	f040 80b6 	bne.w	80068ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800678a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8165 	beq.w	8006a5e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800679a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800679e:	429a      	cmp	r2, r3
 80067a0:	f080 815d 	bcs.w	8006a5e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b8:	f000 8086 	beq.w	80068c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1da      	bne.n	80067bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3308      	adds	r3, #8
 800680c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800682a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800682e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800683c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e1      	bne.n	8006806 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006868:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800686c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e3      	bne.n	8006842 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e4      	bne.n	8006888 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fb fdab 	bl	800241e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	b29b      	uxth	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f8d8 	bl	8006a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e8:	e0b9      	b.n	8006a5e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80ab 	beq.w	8006a62 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800690c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80a6 	beq.w	8006a62 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006938:	647b      	str	r3, [r7, #68]	; 0x44
 800693a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800693e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e4      	bne.n	8006916 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	623b      	str	r3, [r7, #32]
   return(result);
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006970:	633a      	str	r2, [r7, #48]	; 0x30
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e3      	bne.n	800694c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	617b      	str	r3, [r7, #20]
   return(result);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e4      	bne.n	8006998 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2202      	movs	r2, #2
 80069d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f85c 	bl	8006a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069e0:	e03f      	b.n	8006a62 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00e      	beq.n	8006a0c <HAL_UART_IRQHandler+0x56c>
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f853 	bl	8006ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a0a:	e02d      	b.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00e      	beq.n	8006a36 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01c      	beq.n	8006a66 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
    }
    return;
 8006a34:	e017      	b.n	8006a66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d012      	beq.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
 8006a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fe4d 	bl	80076ee <UART_EndTransmit_IT>
    return;
 8006a54:	e008      	b.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a56:	bf00      	nop
 8006a58:	e006      	b.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006a5a:	bf00      	nop
 8006a5c:	e004      	b.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a5e:	bf00      	nop
 8006a60:	e002      	b.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a62:	bf00      	nop
 8006a64:	e000      	b.n	8006a68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006a66:	bf00      	nop
  }

}
 8006a68:	37e8      	adds	r7, #232	; 0xe8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop

08006a70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4ba6      	ldr	r3, [pc, #664]	; (8006d88 <UART_SetConfig+0x2c4>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	6979      	ldr	r1, [r7, #20]
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a94      	ldr	r2, [pc, #592]	; (8006d8c <UART_SetConfig+0x2c8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d120      	bne.n	8006b82 <UART_SetConfig+0xbe>
 8006b40:	4b93      	ldr	r3, [pc, #588]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d816      	bhi.n	8006b7c <UART_SetConfig+0xb8>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x90>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b71 	.word	0x08006b71
 8006b5c:	08006b6b 	.word	0x08006b6b
 8006b60:	08006b77 	.word	0x08006b77
 8006b64:	2301      	movs	r3, #1
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e150      	b.n	8006e0c <UART_SetConfig+0x348>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e14d      	b.n	8006e0c <UART_SetConfig+0x348>
 8006b70:	2304      	movs	r3, #4
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e14a      	b.n	8006e0c <UART_SetConfig+0x348>
 8006b76:	2308      	movs	r3, #8
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e147      	b.n	8006e0c <UART_SetConfig+0x348>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e144      	b.n	8006e0c <UART_SetConfig+0x348>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a83      	ldr	r2, [pc, #524]	; (8006d94 <UART_SetConfig+0x2d0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d132      	bne.n	8006bf2 <UART_SetConfig+0x12e>
 8006b8c:	4b80      	ldr	r3, [pc, #512]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f003 030c 	and.w	r3, r3, #12
 8006b96:	2b0c      	cmp	r3, #12
 8006b98:	d828      	bhi.n	8006bec <UART_SetConfig+0x128>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0xdc>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bd5 	.word	0x08006bd5
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006bed 	.word	0x08006bed
 8006bac:	08006bed 	.word	0x08006bed
 8006bb0:	08006be1 	.word	0x08006be1
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006bdb 	.word	0x08006bdb
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006bed 	.word	0x08006bed
 8006bd0:	08006be7 	.word	0x08006be7
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e118      	b.n	8006e0c <UART_SetConfig+0x348>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e115      	b.n	8006e0c <UART_SetConfig+0x348>
 8006be0:	2304      	movs	r3, #4
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e112      	b.n	8006e0c <UART_SetConfig+0x348>
 8006be6:	2308      	movs	r3, #8
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e10f      	b.n	8006e0c <UART_SetConfig+0x348>
 8006bec:	2310      	movs	r3, #16
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e10c      	b.n	8006e0c <UART_SetConfig+0x348>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a68      	ldr	r2, [pc, #416]	; (8006d98 <UART_SetConfig+0x2d4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d120      	bne.n	8006c3e <UART_SetConfig+0x17a>
 8006bfc:	4b64      	ldr	r3, [pc, #400]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c06:	2b30      	cmp	r3, #48	; 0x30
 8006c08:	d013      	beq.n	8006c32 <UART_SetConfig+0x16e>
 8006c0a:	2b30      	cmp	r3, #48	; 0x30
 8006c0c:	d814      	bhi.n	8006c38 <UART_SetConfig+0x174>
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d009      	beq.n	8006c26 <UART_SetConfig+0x162>
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d810      	bhi.n	8006c38 <UART_SetConfig+0x174>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <UART_SetConfig+0x15c>
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d006      	beq.n	8006c2c <UART_SetConfig+0x168>
 8006c1e:	e00b      	b.n	8006c38 <UART_SetConfig+0x174>
 8006c20:	2300      	movs	r3, #0
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e0f2      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c26:	2302      	movs	r3, #2
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e0ef      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e0ec      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c32:	2308      	movs	r3, #8
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e0e9      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e0e6      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a56      	ldr	r2, [pc, #344]	; (8006d9c <UART_SetConfig+0x2d8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d120      	bne.n	8006c8a <UART_SetConfig+0x1c6>
 8006c48:	4b51      	ldr	r3, [pc, #324]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c52:	2bc0      	cmp	r3, #192	; 0xc0
 8006c54:	d013      	beq.n	8006c7e <UART_SetConfig+0x1ba>
 8006c56:	2bc0      	cmp	r3, #192	; 0xc0
 8006c58:	d814      	bhi.n	8006c84 <UART_SetConfig+0x1c0>
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d009      	beq.n	8006c72 <UART_SetConfig+0x1ae>
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d810      	bhi.n	8006c84 <UART_SetConfig+0x1c0>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <UART_SetConfig+0x1a8>
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d006      	beq.n	8006c78 <UART_SetConfig+0x1b4>
 8006c6a:	e00b      	b.n	8006c84 <UART_SetConfig+0x1c0>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e0cc      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c72:	2302      	movs	r3, #2
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e0c9      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e0c6      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e0c3      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c84:	2310      	movs	r3, #16
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e0c0      	b.n	8006e0c <UART_SetConfig+0x348>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a44      	ldr	r2, [pc, #272]	; (8006da0 <UART_SetConfig+0x2dc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d125      	bne.n	8006ce0 <UART_SetConfig+0x21c>
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d017      	beq.n	8006cd4 <UART_SetConfig+0x210>
 8006ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca8:	d817      	bhi.n	8006cda <UART_SetConfig+0x216>
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cae:	d00b      	beq.n	8006cc8 <UART_SetConfig+0x204>
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d811      	bhi.n	8006cda <UART_SetConfig+0x216>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <UART_SetConfig+0x1fe>
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	d006      	beq.n	8006cce <UART_SetConfig+0x20a>
 8006cc0:	e00b      	b.n	8006cda <UART_SetConfig+0x216>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e0a1      	b.n	8006e0c <UART_SetConfig+0x348>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e09e      	b.n	8006e0c <UART_SetConfig+0x348>
 8006cce:	2304      	movs	r3, #4
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e09b      	b.n	8006e0c <UART_SetConfig+0x348>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e098      	b.n	8006e0c <UART_SetConfig+0x348>
 8006cda:	2310      	movs	r3, #16
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e095      	b.n	8006e0c <UART_SetConfig+0x348>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <UART_SetConfig+0x2e0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d125      	bne.n	8006d36 <UART_SetConfig+0x272>
 8006cea:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf8:	d017      	beq.n	8006d2a <UART_SetConfig+0x266>
 8006cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfe:	d817      	bhi.n	8006d30 <UART_SetConfig+0x26c>
 8006d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d04:	d00b      	beq.n	8006d1e <UART_SetConfig+0x25a>
 8006d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0a:	d811      	bhi.n	8006d30 <UART_SetConfig+0x26c>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <UART_SetConfig+0x254>
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d14:	d006      	beq.n	8006d24 <UART_SetConfig+0x260>
 8006d16:	e00b      	b.n	8006d30 <UART_SetConfig+0x26c>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e076      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	77fb      	strb	r3, [r7, #31]
 8006d22:	e073      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d24:	2304      	movs	r3, #4
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e070      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e06d      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d30:	2310      	movs	r3, #16
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e06a      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <UART_SetConfig+0x2e4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d138      	bne.n	8006db2 <UART_SetConfig+0x2ee>
 8006d40:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <UART_SetConfig+0x2cc>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d4e:	d017      	beq.n	8006d80 <UART_SetConfig+0x2bc>
 8006d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d54:	d82a      	bhi.n	8006dac <UART_SetConfig+0x2e8>
 8006d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5a:	d00b      	beq.n	8006d74 <UART_SetConfig+0x2b0>
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d60:	d824      	bhi.n	8006dac <UART_SetConfig+0x2e8>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <UART_SetConfig+0x2aa>
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6a:	d006      	beq.n	8006d7a <UART_SetConfig+0x2b6>
 8006d6c:	e01e      	b.n	8006dac <UART_SetConfig+0x2e8>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e04b      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d74:	2302      	movs	r3, #2
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e048      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d7a:	2304      	movs	r3, #4
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e045      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d80:	2308      	movs	r3, #8
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e042      	b.n	8006e0c <UART_SetConfig+0x348>
 8006d86:	bf00      	nop
 8006d88:	efff69f3 	.word	0xefff69f3
 8006d8c:	40011000 	.word	0x40011000
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40004400 	.word	0x40004400
 8006d98:	40004800 	.word	0x40004800
 8006d9c:	40004c00 	.word	0x40004c00
 8006da0:	40005000 	.word	0x40005000
 8006da4:	40011400 	.word	0x40011400
 8006da8:	40007800 	.word	0x40007800
 8006dac:	2310      	movs	r3, #16
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	e02c      	b.n	8006e0c <UART_SetConfig+0x348>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a72      	ldr	r2, [pc, #456]	; (8006f80 <UART_SetConfig+0x4bc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d125      	bne.n	8006e08 <UART_SetConfig+0x344>
 8006dbc:	4b71      	ldr	r3, [pc, #452]	; (8006f84 <UART_SetConfig+0x4c0>)
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dca:	d017      	beq.n	8006dfc <UART_SetConfig+0x338>
 8006dcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dd0:	d817      	bhi.n	8006e02 <UART_SetConfig+0x33e>
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d00b      	beq.n	8006df0 <UART_SetConfig+0x32c>
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d811      	bhi.n	8006e02 <UART_SetConfig+0x33e>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <UART_SetConfig+0x326>
 8006de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de6:	d006      	beq.n	8006df6 <UART_SetConfig+0x332>
 8006de8:	e00b      	b.n	8006e02 <UART_SetConfig+0x33e>
 8006dea:	2300      	movs	r3, #0
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e00d      	b.n	8006e0c <UART_SetConfig+0x348>
 8006df0:	2302      	movs	r3, #2
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e00a      	b.n	8006e0c <UART_SetConfig+0x348>
 8006df6:	2304      	movs	r3, #4
 8006df8:	77fb      	strb	r3, [r7, #31]
 8006dfa:	e007      	b.n	8006e0c <UART_SetConfig+0x348>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e004      	b.n	8006e0c <UART_SetConfig+0x348>
 8006e02:	2310      	movs	r3, #16
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e001      	b.n	8006e0c <UART_SetConfig+0x348>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e14:	d15b      	bne.n	8006ece <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e16:	7ffb      	ldrb	r3, [r7, #31]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d828      	bhi.n	8006e6e <UART_SetConfig+0x3aa>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0x360>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e6f 	.word	0x08006e6f
 8006e34:	08006e5f 	.word	0x08006e5f
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e6f 	.word	0x08006e6f
 8006e40:	08006e6f 	.word	0x08006e6f
 8006e44:	08006e67 	.word	0x08006e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7fc fbae 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	61b8      	str	r0, [r7, #24]
        break;
 8006e4e:	e013      	b.n	8006e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e50:	f7fc fbbe 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8006e54:	61b8      	str	r0, [r7, #24]
        break;
 8006e56:	e00f      	b.n	8006e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e58:	4b4b      	ldr	r3, [pc, #300]	; (8006f88 <UART_SetConfig+0x4c4>)
 8006e5a:	61bb      	str	r3, [r7, #24]
        break;
 8006e5c:	e00c      	b.n	8006e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fc fa91 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8006e62:	61b8      	str	r0, [r7, #24]
        break;
 8006e64:	e008      	b.n	8006e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e6a:	61bb      	str	r3, [r7, #24]
        break;
 8006e6c:	e004      	b.n	8006e78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	77bb      	strb	r3, [r7, #30]
        break;
 8006e76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d074      	beq.n	8006f68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	005a      	lsls	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	441a      	add	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d916      	bls.n	8006ec8 <UART_SetConfig+0x404>
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea0:	d212      	bcs.n	8006ec8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f023 030f 	bic.w	r3, r3, #15
 8006eaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	89fb      	ldrh	r3, [r7, #14]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	89fa      	ldrh	r2, [r7, #14]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	e04f      	b.n	8006f68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77bb      	strb	r3, [r7, #30]
 8006ecc:	e04c      	b.n	8006f68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d828      	bhi.n	8006f26 <UART_SetConfig+0x462>
 8006ed4:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <UART_SetConfig+0x418>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	08006f27 	.word	0x08006f27
 8006eec:	08006f17 	.word	0x08006f17
 8006ef0:	08006f27 	.word	0x08006f27
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	08006f27 	.word	0x08006f27
 8006efc:	08006f1f 	.word	0x08006f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f00:	f7fc fb52 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8006f04:	61b8      	str	r0, [r7, #24]
        break;
 8006f06:	e013      	b.n	8006f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f08:	f7fc fb62 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8006f0c:	61b8      	str	r0, [r7, #24]
        break;
 8006f0e:	e00f      	b.n	8006f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f10:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <UART_SetConfig+0x4c4>)
 8006f12:	61bb      	str	r3, [r7, #24]
        break;
 8006f14:	e00c      	b.n	8006f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f16:	f7fc fa35 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8006f1a:	61b8      	str	r0, [r7, #24]
        break;
 8006f1c:	e008      	b.n	8006f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f22:	61bb      	str	r3, [r7, #24]
        break;
 8006f24:	e004      	b.n	8006f30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d018      	beq.n	8006f68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085a      	lsrs	r2, r3, #1
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	441a      	add	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b0f      	cmp	r3, #15
 8006f4e:	d909      	bls.n	8006f64 <UART_SetConfig+0x4a0>
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f56:	d205      	bcs.n	8006f64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e001      	b.n	8006f68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40007c00 	.word	0x40007c00
 8006f84:	40023800 	.word	0x40023800
 8006f88:	00f42400 	.word	0x00f42400

08006f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01a      	beq.n	80070a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708a:	d10a      	bne.n	80070a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  }
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e0:	f7fb f85c 	bl	800219c <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d10e      	bne.n	8007112 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f831 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e027      	b.n	8007162 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b04      	cmp	r3, #4
 800711e:	d10e      	bne.n	800713e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f81b 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e011      	b.n	8007162 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b09c      	sub	sp, #112	; 0x70
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717a:	e0a7      	b.n	80072cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	f000 80a3 	beq.w	80072cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fb f809 	bl	800219c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
 8007196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007198:	2b00      	cmp	r3, #0
 800719a:	d13f      	bne.n	800721c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e068      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d050      	beq.n	80072cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007238:	d148      	bne.n	80072cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007242:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
 8007264:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	613b      	str	r3, [r7, #16]
   return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	66bb      	str	r3, [r7, #104]	; 0x68
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007296:	623a      	str	r2, [r7, #32]
 8007298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	69f9      	ldr	r1, [r7, #28]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e010      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69da      	ldr	r2, [r3, #28]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4013      	ands	r3, r2
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	f43f af48 	beq.w	800717c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3770      	adds	r7, #112	; 0x70
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b097      	sub	sp, #92	; 0x5c
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	88fa      	ldrh	r2, [r7, #6]
 8007310:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732a:	d10e      	bne.n	800734a <UART_Start_Receive_IT+0x52>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <UART_Start_Receive_IT+0x48>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f240 12ff 	movw	r2, #511	; 0x1ff
 800733a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800733e:	e02d      	b.n	800739c <UART_Start_Receive_IT+0xa4>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	22ff      	movs	r2, #255	; 0xff
 8007344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007348:	e028      	b.n	800739c <UART_Start_Receive_IT+0xa4>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10d      	bne.n	800736e <UART_Start_Receive_IT+0x76>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d104      	bne.n	8007364 <UART_Start_Receive_IT+0x6c>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	22ff      	movs	r2, #255	; 0xff
 800735e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007362:	e01b      	b.n	800739c <UART_Start_Receive_IT+0xa4>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	227f      	movs	r2, #127	; 0x7f
 8007368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800736c:	e016      	b.n	800739c <UART_Start_Receive_IT+0xa4>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007376:	d10d      	bne.n	8007394 <UART_Start_Receive_IT+0x9c>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <UART_Start_Receive_IT+0x92>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	227f      	movs	r2, #127	; 0x7f
 8007384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007388:	e008      	b.n	800739c <UART_Start_Receive_IT+0xa4>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	223f      	movs	r2, #63	; 0x3f
 800738e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007392:	e003      	b.n	800739c <UART_Start_Receive_IT+0xa4>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2222      	movs	r2, #34	; 0x22
 80073a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	657b      	str	r3, [r7, #84]	; 0x54
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80073ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e8:	d107      	bne.n	80073fa <UART_Start_Receive_IT+0x102>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4a21      	ldr	r2, [pc, #132]	; (800747c <UART_Start_Receive_IT+0x184>)
 80073f6:	669a      	str	r2, [r3, #104]	; 0x68
 80073f8:	e002      	b.n	8007400 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4a20      	ldr	r2, [pc, #128]	; (8007480 <UART_Start_Receive_IT+0x188>)
 80073fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d019      	beq.n	800743c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800741c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800742c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_Start_Receive_IT+0x110>
 800743a:	e018      	b.n	800746e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	613b      	str	r3, [r7, #16]
   return(result);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	653b      	str	r3, [r7, #80]	; 0x50
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745a:	623b      	str	r3, [r7, #32]
 800745c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	69f9      	ldr	r1, [r7, #28]
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	61bb      	str	r3, [r7, #24]
   return(result);
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e6      	bne.n	800743c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	375c      	adds	r7, #92	; 0x5c
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	080078a9 	.word	0x080078a9
 8007480:	08007743 	.word	0x08007743

08007484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b095      	sub	sp, #84	; 0x54
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074aa:	643b      	str	r3, [r7, #64]	; 0x40
 80074ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f023 0301 	bic.w	r3, r3, #1
 80074d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3308      	adds	r3, #8
 80074dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e5      	bne.n	80074be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d118      	bne.n	800752c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60bb      	str	r3, [r7, #8]
   return(result);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	647b      	str	r3, [r7, #68]	; 0x44
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6979      	ldr	r1, [r7, #20]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	613b      	str	r3, [r7, #16]
   return(result);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e6      	bne.n	80074fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007540:	bf00      	nop
 8007542:	3754      	adds	r7, #84	; 0x54
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fa8a 	bl	8006a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b08f      	sub	sp, #60	; 0x3c
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007584:	2b21      	cmp	r3, #33	; 0x21
 8007586:	d14c      	bne.n	8007622 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d132      	bne.n	80075fa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	613b      	str	r3, [r7, #16]
   return(result);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80075f8:	e013      	b.n	8007622 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007622:	bf00      	nop
 8007624:	373c      	adds	r7, #60	; 0x3c
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800762e:	b480      	push	{r7}
 8007630:	b091      	sub	sp, #68	; 0x44
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763a:	2b21      	cmp	r3, #33	; 0x21
 800763c:	d151      	bne.n	80076e2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d132      	bne.n	80076b0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	623b      	str	r3, [r7, #32]
   return(result);
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800765e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
 800766a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	60fb      	str	r3, [r7, #12]
   return(result);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	69b9      	ldr	r1, [r7, #24]
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	617b      	str	r3, [r7, #20]
   return(result);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e6      	bne.n	800767c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80076ae:	e018      	b.n	80076e2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80076b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ca:	1c9a      	adds	r2, r3, #2
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80076e2:	bf00      	nop
 80076e4:	3744      	adds	r7, #68	; 0x44
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b088      	sub	sp, #32
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	60bb      	str	r3, [r7, #8]
   return(result);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6979      	ldr	r1, [r7, #20]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	613b      	str	r3, [r7, #16]
   return(result);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e6      	bne.n	80076f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff f99b 	bl	8006a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800773a:	bf00      	nop
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b096      	sub	sp, #88	; 0x58
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007750:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800775a:	2b22      	cmp	r3, #34	; 0x22
 800775c:	f040 8098 	bne.w	8007890 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800776a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800776e:	b2d9      	uxtb	r1, r3
 8007770:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007774:	b2da      	uxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	400a      	ands	r2, r1
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d17b      	bne.n	80078a0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077bc:	653b      	str	r3, [r7, #80]	; 0x50
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
 80077c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077fa:	633a      	str	r2, [r7, #48]	; 0x30
 80077fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e5      	bne.n	80077da <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007826:	2b01      	cmp	r3, #1
 8007828:	d12e      	bne.n	8007888 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	60fb      	str	r3, [r7, #12]
   return(result);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f023 0310 	bic.w	r3, r3, #16
 8007844:	64bb      	str	r3, [r7, #72]	; 0x48
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	69b9      	ldr	r1, [r7, #24]
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	617b      	str	r3, [r7, #20]
   return(result);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e6      	bne.n	8007830 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b10      	cmp	r3, #16
 800786e:	d103      	bne.n	8007878 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2210      	movs	r2, #16
 8007876:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff f909 	bl	8006a98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007886:	e00b      	b.n	80078a0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7f9 fecd 	bl	8001628 <HAL_UART_RxCpltCallback>
}
 800788e:	e007      	b.n	80078a0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0208 	orr.w	r2, r2, #8
 800789e:	619a      	str	r2, [r3, #24]
}
 80078a0:	bf00      	nop
 80078a2:	3758      	adds	r7, #88	; 0x58
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b096      	sub	sp, #88	; 0x58
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c0:	2b22      	cmp	r3, #34	; 0x22
 80078c2:	f040 8098 	bne.w	80079f6 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80078d6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078de:	4013      	ands	r3, r2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	1c9a      	adds	r2, r3, #2
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d17b      	bne.n	8007a06 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792c:	643b      	str	r3, [r7, #64]	; 0x40
 800792e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	64bb      	str	r3, [r7, #72]	; 0x48
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e5      	bne.n	8007940 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798c:	2b01      	cmp	r3, #1
 800798e:	d12e      	bne.n	80079ee <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	647b      	str	r3, [r7, #68]	; 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6979      	ldr	r1, [r7, #20]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	613b      	str	r3, [r7, #16]
   return(result);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d103      	bne.n	80079de <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2210      	movs	r2, #16
 80079dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff f856 	bl	8006a98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ec:	e00b      	b.n	8007a06 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7f9 fe1a 	bl	8001628 <HAL_UART_RxCpltCallback>
}
 80079f4:	e007      	b.n	8007a06 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	619a      	str	r2, [r3, #24]
}
 8007a06:	bf00      	nop
 8007a08:	3758      	adds	r7, #88	; 0x58
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a10:	b084      	sub	sp, #16
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	f107 001c 	add.w	r0, r7, #28
 8007a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d120      	bne.n	8007a6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	4b20      	ldr	r3, [pc, #128]	; (8007abc <USB_CoreInit+0xac>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d105      	bne.n	8007a5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa96 	bl	8007f90 <USB_CoreReset>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
 8007a68:	e010      	b.n	8007a8c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa8a 	bl	8007f90 <USB_CoreReset>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10b      	bne.n	8007aaa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f043 0206 	orr.w	r2, r3, #6
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ab6:	b004      	add	sp, #16
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	ffbdffbf 	.word	0xffbdffbf

08007ac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f023 0201 	bic.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d115      	bne.n	8007b30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b10:	2001      	movs	r0, #1
 8007b12:	f7fa fb4f 	bl	80021b4 <HAL_Delay>
      ms++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa29 	bl	8007f74 <USB_GetMode>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d01e      	beq.n	8007b66 <USB_SetCurrentMode+0x84>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b31      	cmp	r3, #49	; 0x31
 8007b2c:	d9f0      	bls.n	8007b10 <USB_SetCurrentMode+0x2e>
 8007b2e:	e01a      	b.n	8007b66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d115      	bne.n	8007b62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b42:	2001      	movs	r0, #1
 8007b44:	f7fa fb36 	bl	80021b4 <HAL_Delay>
      ms++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa10 	bl	8007f74 <USB_GetMode>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <USB_SetCurrentMode+0x84>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b31      	cmp	r3, #49	; 0x31
 8007b5e:	d9f0      	bls.n	8007b42 <USB_SetCurrentMode+0x60>
 8007b60:	e001      	b.n	8007b66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e005      	b.n	8007b72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b32      	cmp	r3, #50	; 0x32
 8007b6a:	d101      	bne.n	8007b70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	e009      	b.n	8007bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3340      	adds	r3, #64	; 0x40
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3301      	adds	r3, #1
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b0e      	cmp	r3, #14
 8007bb4:	d9f2      	bls.n	8007b9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11c      	bne.n	8007bf6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bca:	f043 0302 	orr.w	r3, r3, #2
 8007bce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e005      	b.n	8007c02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c08:	461a      	mov	r2, r3
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c14:	4619      	mov	r1, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	680b      	ldr	r3, [r1, #0]
 8007c20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d10c      	bne.n	8007c42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f965 	bl	8007f00 <USB_SetDevSpeed>
 8007c36:	e008      	b.n	8007c4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c38:	2101      	movs	r1, #1
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f960 	bl	8007f00 <USB_SetDevSpeed>
 8007c40:	e003      	b.n	8007c4a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c42:	2103      	movs	r1, #3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f95b 	bl	8007f00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c4a:	2110      	movs	r1, #16
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f8f3 	bl	8007e38 <USB_FlushTxFifo>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f91f 	bl	8007ea0 <USB_FlushRxFifo>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	461a      	mov	r2, r3
 8007c74:	2300      	movs	r3, #0
 8007c76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7e:	461a      	mov	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c90:	2300      	movs	r3, #0
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	e043      	b.n	8007d1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cac:	d118      	bne.n	8007ce0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e013      	b.n	8007cf2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e008      	b.n	8007cf2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cec:	461a      	mov	r2, r3
 8007cee:	2300      	movs	r3, #0
 8007cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2300      	movs	r3, #0
 8007d02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	461a      	mov	r2, r3
 8007d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d3b7      	bcc.n	8007c96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	e043      	b.n	8007db4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d42:	d118      	bne.n	8007d76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	461a      	mov	r2, r3
 8007d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e013      	b.n	8007d88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e008      	b.n	8007d88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d82:	461a      	mov	r2, r3
 8007d84:	2300      	movs	r3, #0
 8007d86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d94:	461a      	mov	r2, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	461a      	mov	r2, r3
 8007da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3301      	adds	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d3b7      	bcc.n	8007d2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ddc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	f043 0210 	orr.w	r2, r3, #16
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <USB_DevInit+0x2b4>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f043 0208 	orr.w	r2, r3, #8
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d105      	bne.n	8007e20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <USB_DevInit+0x2b8>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e2c:	b004      	add	sp, #16
 8007e2e:	4770      	bx	lr
 8007e30:	803c3800 	.word	0x803c3800
 8007e34:	40000004 	.word	0x40000004

08007e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <USB_FlushTxFifo+0x64>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d901      	bls.n	8007e58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e01b      	b.n	8007e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	daf2      	bge.n	8007e46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	019b      	lsls	r3, r3, #6
 8007e68:	f043 0220 	orr.w	r2, r3, #32
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4a08      	ldr	r2, [pc, #32]	; (8007e9c <USB_FlushTxFifo+0x64>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d901      	bls.n	8007e82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e006      	b.n	8007e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d0f0      	beq.n	8007e70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	00030d40 	.word	0x00030d40

08007ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4a11      	ldr	r2, [pc, #68]	; (8007efc <USB_FlushRxFifo+0x5c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d901      	bls.n	8007ebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e018      	b.n	8007ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	daf2      	bge.n	8007eac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2210      	movs	r2, #16
 8007ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <USB_FlushRxFifo+0x5c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e006      	b.n	8007ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d0f0      	beq.n	8007ed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	00030d40 	.word	0x00030d40

08007f00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f20:	4313      	orrs	r3, r2
 8007f22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f4c:	f023 0303 	bic.w	r3, r3, #3
 8007f50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f60:	f043 0302 	orr.w	r3, r3, #2
 8007f64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	f003 0301 	and.w	r3, r3, #1
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d901      	bls.n	8007fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e01b      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	daf2      	bge.n	8007f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f043 0201 	orr.w	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d901      	bls.n	8007fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d0f0      	beq.n	8007fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	00030d40 	.word	0x00030d40

08007ff8 <atoi>:
 8007ff8:	220a      	movs	r2, #10
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	f000 bd34 	b.w	8008a68 <strtol>

08008000 <__errno>:
 8008000:	4b01      	ldr	r3, [pc, #4]	; (8008008 <__errno+0x8>)
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20000048 	.word	0x20000048

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d0d      	ldr	r5, [pc, #52]	; (8008044 <__libc_init_array+0x38>)
 8008010:	4c0d      	ldr	r4, [pc, #52]	; (8008048 <__libc_init_array+0x3c>)
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	2600      	movs	r6, #0
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	4d0b      	ldr	r5, [pc, #44]	; (800804c <__libc_init_array+0x40>)
 800801e:	4c0c      	ldr	r4, [pc, #48]	; (8008050 <__libc_init_array+0x44>)
 8008020:	f002 fef8 	bl	800ae14 <_init>
 8008024:	1b64      	subs	r4, r4, r5
 8008026:	10a4      	asrs	r4, r4, #2
 8008028:	2600      	movs	r6, #0
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	f855 3b04 	ldr.w	r3, [r5], #4
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	f855 3b04 	ldr.w	r3, [r5], #4
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	0800b25c 	.word	0x0800b25c
 8008048:	0800b25c 	.word	0x0800b25c
 800804c:	0800b25c 	.word	0x0800b25c
 8008050:	0800b260 	.word	0x0800b260

08008054 <memcpy>:
 8008054:	440a      	add	r2, r1
 8008056:	4291      	cmp	r1, r2
 8008058:	f100 33ff 	add.w	r3, r0, #4294967295
 800805c:	d100      	bne.n	8008060 <memcpy+0xc>
 800805e:	4770      	bx	lr
 8008060:	b510      	push	{r4, lr}
 8008062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800806a:	4291      	cmp	r1, r2
 800806c:	d1f9      	bne.n	8008062 <memcpy+0xe>
 800806e:	bd10      	pop	{r4, pc}

08008070 <memset>:
 8008070:	4402      	add	r2, r0
 8008072:	4603      	mov	r3, r0
 8008074:	4293      	cmp	r3, r2
 8008076:	d100      	bne.n	800807a <memset+0xa>
 8008078:	4770      	bx	lr
 800807a:	f803 1b01 	strb.w	r1, [r3], #1
 800807e:	e7f9      	b.n	8008074 <memset+0x4>

08008080 <__cvt>:
 8008080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008082:	ed2d 8b02 	vpush	{d8}
 8008086:	eeb0 8b40 	vmov.f64	d8, d0
 800808a:	b085      	sub	sp, #20
 800808c:	4617      	mov	r7, r2
 800808e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008090:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008092:	ee18 2a90 	vmov	r2, s17
 8008096:	f025 0520 	bic.w	r5, r5, #32
 800809a:	2a00      	cmp	r2, #0
 800809c:	bfb6      	itet	lt
 800809e:	222d      	movlt	r2, #45	; 0x2d
 80080a0:	2200      	movge	r2, #0
 80080a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80080a6:	2d46      	cmp	r5, #70	; 0x46
 80080a8:	460c      	mov	r4, r1
 80080aa:	701a      	strb	r2, [r3, #0]
 80080ac:	d004      	beq.n	80080b8 <__cvt+0x38>
 80080ae:	2d45      	cmp	r5, #69	; 0x45
 80080b0:	d100      	bne.n	80080b4 <__cvt+0x34>
 80080b2:	3401      	adds	r4, #1
 80080b4:	2102      	movs	r1, #2
 80080b6:	e000      	b.n	80080ba <__cvt+0x3a>
 80080b8:	2103      	movs	r1, #3
 80080ba:	ab03      	add	r3, sp, #12
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	ab02      	add	r3, sp, #8
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	4622      	mov	r2, r4
 80080c4:	4633      	mov	r3, r6
 80080c6:	eeb0 0b48 	vmov.f64	d0, d8
 80080ca:	f000 fd65 	bl	8008b98 <_dtoa_r>
 80080ce:	2d47      	cmp	r5, #71	; 0x47
 80080d0:	d101      	bne.n	80080d6 <__cvt+0x56>
 80080d2:	07fb      	lsls	r3, r7, #31
 80080d4:	d51a      	bpl.n	800810c <__cvt+0x8c>
 80080d6:	2d46      	cmp	r5, #70	; 0x46
 80080d8:	eb00 0204 	add.w	r2, r0, r4
 80080dc:	d10c      	bne.n	80080f8 <__cvt+0x78>
 80080de:	7803      	ldrb	r3, [r0, #0]
 80080e0:	2b30      	cmp	r3, #48	; 0x30
 80080e2:	d107      	bne.n	80080f4 <__cvt+0x74>
 80080e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ec:	bf1c      	itt	ne
 80080ee:	f1c4 0401 	rsbne	r4, r4, #1
 80080f2:	6034      	strne	r4, [r6, #0]
 80080f4:	6833      	ldr	r3, [r6, #0]
 80080f6:	441a      	add	r2, r3
 80080f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008100:	bf08      	it	eq
 8008102:	9203      	streq	r2, [sp, #12]
 8008104:	2130      	movs	r1, #48	; 0x30
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	4293      	cmp	r3, r2
 800810a:	d307      	bcc.n	800811c <__cvt+0x9c>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008110:	1a1b      	subs	r3, r3, r0
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	b005      	add	sp, #20
 8008116:	ecbd 8b02 	vpop	{d8}
 800811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811c:	1c5c      	adds	r4, r3, #1
 800811e:	9403      	str	r4, [sp, #12]
 8008120:	7019      	strb	r1, [r3, #0]
 8008122:	e7f0      	b.n	8008106 <__cvt+0x86>

08008124 <__exponent>:
 8008124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008126:	4603      	mov	r3, r0
 8008128:	2900      	cmp	r1, #0
 800812a:	bfb8      	it	lt
 800812c:	4249      	neglt	r1, r1
 800812e:	f803 2b02 	strb.w	r2, [r3], #2
 8008132:	bfb4      	ite	lt
 8008134:	222d      	movlt	r2, #45	; 0x2d
 8008136:	222b      	movge	r2, #43	; 0x2b
 8008138:	2909      	cmp	r1, #9
 800813a:	7042      	strb	r2, [r0, #1]
 800813c:	dd2a      	ble.n	8008194 <__exponent+0x70>
 800813e:	f10d 0407 	add.w	r4, sp, #7
 8008142:	46a4      	mov	ip, r4
 8008144:	270a      	movs	r7, #10
 8008146:	46a6      	mov	lr, r4
 8008148:	460a      	mov	r2, r1
 800814a:	fb91 f6f7 	sdiv	r6, r1, r7
 800814e:	fb07 1516 	mls	r5, r7, r6, r1
 8008152:	3530      	adds	r5, #48	; 0x30
 8008154:	2a63      	cmp	r2, #99	; 0x63
 8008156:	f104 34ff 	add.w	r4, r4, #4294967295
 800815a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800815e:	4631      	mov	r1, r6
 8008160:	dcf1      	bgt.n	8008146 <__exponent+0x22>
 8008162:	3130      	adds	r1, #48	; 0x30
 8008164:	f1ae 0502 	sub.w	r5, lr, #2
 8008168:	f804 1c01 	strb.w	r1, [r4, #-1]
 800816c:	1c44      	adds	r4, r0, #1
 800816e:	4629      	mov	r1, r5
 8008170:	4561      	cmp	r1, ip
 8008172:	d30a      	bcc.n	800818a <__exponent+0x66>
 8008174:	f10d 0209 	add.w	r2, sp, #9
 8008178:	eba2 020e 	sub.w	r2, r2, lr
 800817c:	4565      	cmp	r5, ip
 800817e:	bf88      	it	hi
 8008180:	2200      	movhi	r2, #0
 8008182:	4413      	add	r3, r2
 8008184:	1a18      	subs	r0, r3, r0
 8008186:	b003      	add	sp, #12
 8008188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800818e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008192:	e7ed      	b.n	8008170 <__exponent+0x4c>
 8008194:	2330      	movs	r3, #48	; 0x30
 8008196:	3130      	adds	r1, #48	; 0x30
 8008198:	7083      	strb	r3, [r0, #2]
 800819a:	70c1      	strb	r1, [r0, #3]
 800819c:	1d03      	adds	r3, r0, #4
 800819e:	e7f1      	b.n	8008184 <__exponent+0x60>

080081a0 <_printf_float>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	b08b      	sub	sp, #44	; 0x2c
 80081a6:	460c      	mov	r4, r1
 80081a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80081ac:	4616      	mov	r6, r2
 80081ae:	461f      	mov	r7, r3
 80081b0:	4605      	mov	r5, r0
 80081b2:	f001 fa5f 	bl	8009674 <_localeconv_r>
 80081b6:	f8d0 b000 	ldr.w	fp, [r0]
 80081ba:	4658      	mov	r0, fp
 80081bc:	f7f8 f840 	bl	8000240 <strlen>
 80081c0:	2300      	movs	r3, #0
 80081c2:	9308      	str	r3, [sp, #32]
 80081c4:	f8d8 3000 	ldr.w	r3, [r8]
 80081c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	3307      	adds	r3, #7
 80081d0:	f023 0307 	bic.w	r3, r3, #7
 80081d4:	f103 0108 	add.w	r1, r3, #8
 80081d8:	f8c8 1000 	str.w	r1, [r8]
 80081dc:	4682      	mov	sl, r0
 80081de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80081e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008448 <_printf_float+0x2a8>
 80081ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80081ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80081f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80081f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fa:	dd24      	ble.n	8008246 <_printf_float+0xa6>
 80081fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008204:	d502      	bpl.n	800820c <_printf_float+0x6c>
 8008206:	232d      	movs	r3, #45	; 0x2d
 8008208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800820c:	4b90      	ldr	r3, [pc, #576]	; (8008450 <_printf_float+0x2b0>)
 800820e:	4891      	ldr	r0, [pc, #580]	; (8008454 <_printf_float+0x2b4>)
 8008210:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008214:	bf94      	ite	ls
 8008216:	4698      	movls	r8, r3
 8008218:	4680      	movhi	r8, r0
 800821a:	2303      	movs	r3, #3
 800821c:	6123      	str	r3, [r4, #16]
 800821e:	f022 0204 	bic.w	r2, r2, #4
 8008222:	2300      	movs	r3, #0
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	9700      	str	r7, [sp, #0]
 800822a:	4633      	mov	r3, r6
 800822c:	aa09      	add	r2, sp, #36	; 0x24
 800822e:	4621      	mov	r1, r4
 8008230:	4628      	mov	r0, r5
 8008232:	f000 f9d3 	bl	80085dc <_printf_common>
 8008236:	3001      	adds	r0, #1
 8008238:	f040 808a 	bne.w	8008350 <_printf_float+0x1b0>
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	b00b      	add	sp, #44	; 0x2c
 8008242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008246:	eeb4 0b40 	vcmp.f64	d0, d0
 800824a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824e:	d709      	bvc.n	8008264 <_printf_float+0xc4>
 8008250:	ee10 3a90 	vmov	r3, s1
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfbc      	itt	lt
 8008258:	232d      	movlt	r3, #45	; 0x2d
 800825a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800825e:	487e      	ldr	r0, [pc, #504]	; (8008458 <_printf_float+0x2b8>)
 8008260:	4b7e      	ldr	r3, [pc, #504]	; (800845c <_printf_float+0x2bc>)
 8008262:	e7d5      	b.n	8008210 <_printf_float+0x70>
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800826a:	9104      	str	r1, [sp, #16]
 800826c:	1c59      	adds	r1, r3, #1
 800826e:	d13c      	bne.n	80082ea <_printf_float+0x14a>
 8008270:	2306      	movs	r3, #6
 8008272:	6063      	str	r3, [r4, #4]
 8008274:	2300      	movs	r3, #0
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	ab08      	add	r3, sp, #32
 800827a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800827e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008282:	ab07      	add	r3, sp, #28
 8008284:	6861      	ldr	r1, [r4, #4]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	f10d 031b 	add.w	r3, sp, #27
 800828e:	4628      	mov	r0, r5
 8008290:	f7ff fef6 	bl	8008080 <__cvt>
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	9907      	ldr	r1, [sp, #28]
 8008298:	2b47      	cmp	r3, #71	; 0x47
 800829a:	4680      	mov	r8, r0
 800829c:	d108      	bne.n	80082b0 <_printf_float+0x110>
 800829e:	1cc8      	adds	r0, r1, #3
 80082a0:	db02      	blt.n	80082a8 <_printf_float+0x108>
 80082a2:	6863      	ldr	r3, [r4, #4]
 80082a4:	4299      	cmp	r1, r3
 80082a6:	dd41      	ble.n	800832c <_printf_float+0x18c>
 80082a8:	f1a9 0902 	sub.w	r9, r9, #2
 80082ac:	fa5f f989 	uxtb.w	r9, r9
 80082b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082b4:	d820      	bhi.n	80082f8 <_printf_float+0x158>
 80082b6:	3901      	subs	r1, #1
 80082b8:	464a      	mov	r2, r9
 80082ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082be:	9107      	str	r1, [sp, #28]
 80082c0:	f7ff ff30 	bl	8008124 <__exponent>
 80082c4:	9a08      	ldr	r2, [sp, #32]
 80082c6:	9004      	str	r0, [sp, #16]
 80082c8:	1813      	adds	r3, r2, r0
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	dc02      	bgt.n	80082d6 <_printf_float+0x136>
 80082d0:	6822      	ldr	r2, [r4, #0]
 80082d2:	07d2      	lsls	r2, r2, #31
 80082d4:	d501      	bpl.n	80082da <_printf_float+0x13a>
 80082d6:	3301      	adds	r3, #1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0a2      	beq.n	8008228 <_printf_float+0x88>
 80082e2:	232d      	movs	r3, #45	; 0x2d
 80082e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082e8:	e79e      	b.n	8008228 <_printf_float+0x88>
 80082ea:	9904      	ldr	r1, [sp, #16]
 80082ec:	2947      	cmp	r1, #71	; 0x47
 80082ee:	d1c1      	bne.n	8008274 <_printf_float+0xd4>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1bf      	bne.n	8008274 <_printf_float+0xd4>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e7bc      	b.n	8008272 <_printf_float+0xd2>
 80082f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80082fc:	d118      	bne.n	8008330 <_printf_float+0x190>
 80082fe:	2900      	cmp	r1, #0
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	dd0b      	ble.n	800831c <_printf_float+0x17c>
 8008304:	6121      	str	r1, [r4, #16]
 8008306:	b913      	cbnz	r3, 800830e <_printf_float+0x16e>
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	07d0      	lsls	r0, r2, #31
 800830c:	d502      	bpl.n	8008314 <_printf_float+0x174>
 800830e:	3301      	adds	r3, #1
 8008310:	440b      	add	r3, r1
 8008312:	6123      	str	r3, [r4, #16]
 8008314:	2300      	movs	r3, #0
 8008316:	65a1      	str	r1, [r4, #88]	; 0x58
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	e7de      	b.n	80082da <_printf_float+0x13a>
 800831c:	b913      	cbnz	r3, 8008324 <_printf_float+0x184>
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	07d2      	lsls	r2, r2, #31
 8008322:	d501      	bpl.n	8008328 <_printf_float+0x188>
 8008324:	3302      	adds	r3, #2
 8008326:	e7f4      	b.n	8008312 <_printf_float+0x172>
 8008328:	2301      	movs	r3, #1
 800832a:	e7f2      	b.n	8008312 <_printf_float+0x172>
 800832c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	4299      	cmp	r1, r3
 8008334:	db05      	blt.n	8008342 <_printf_float+0x1a2>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	6121      	str	r1, [r4, #16]
 800833a:	07d8      	lsls	r0, r3, #31
 800833c:	d5ea      	bpl.n	8008314 <_printf_float+0x174>
 800833e:	1c4b      	adds	r3, r1, #1
 8008340:	e7e7      	b.n	8008312 <_printf_float+0x172>
 8008342:	2900      	cmp	r1, #0
 8008344:	bfd4      	ite	le
 8008346:	f1c1 0202 	rsble	r2, r1, #2
 800834a:	2201      	movgt	r2, #1
 800834c:	4413      	add	r3, r2
 800834e:	e7e0      	b.n	8008312 <_printf_float+0x172>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	055a      	lsls	r2, r3, #21
 8008354:	d407      	bmi.n	8008366 <_printf_float+0x1c6>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	4642      	mov	r2, r8
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	d12a      	bne.n	80083ba <_printf_float+0x21a>
 8008364:	e76a      	b.n	800823c <_printf_float+0x9c>
 8008366:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800836a:	f240 80e2 	bls.w	8008532 <_printf_float+0x392>
 800836e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008372:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837a:	d133      	bne.n	80083e4 <_printf_float+0x244>
 800837c:	4a38      	ldr	r2, [pc, #224]	; (8008460 <_printf_float+0x2c0>)
 800837e:	2301      	movs	r3, #1
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f af58 	beq.w	800823c <_printf_float+0x9c>
 800838c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008390:	429a      	cmp	r2, r3
 8008392:	db02      	blt.n	800839a <_printf_float+0x1fa>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	07d8      	lsls	r0, r3, #31
 8008398:	d50f      	bpl.n	80083ba <_printf_float+0x21a>
 800839a:	4653      	mov	r3, sl
 800839c:	465a      	mov	r2, fp
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b8      	blx	r7
 80083a4:	3001      	adds	r0, #1
 80083a6:	f43f af49 	beq.w	800823c <_printf_float+0x9c>
 80083aa:	f04f 0800 	mov.w	r8, #0
 80083ae:	f104 091a 	add.w	r9, r4, #26
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	4543      	cmp	r3, r8
 80083b8:	dc09      	bgt.n	80083ce <_printf_float+0x22e>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	079b      	lsls	r3, r3, #30
 80083be:	f100 8108 	bmi.w	80085d2 <_printf_float+0x432>
 80083c2:	68e0      	ldr	r0, [r4, #12]
 80083c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c6:	4298      	cmp	r0, r3
 80083c8:	bfb8      	it	lt
 80083ca:	4618      	movlt	r0, r3
 80083cc:	e738      	b.n	8008240 <_printf_float+0xa0>
 80083ce:	2301      	movs	r3, #1
 80083d0:	464a      	mov	r2, r9
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f af2f 	beq.w	800823c <_printf_float+0x9c>
 80083de:	f108 0801 	add.w	r8, r8, #1
 80083e2:	e7e6      	b.n	80083b2 <_printf_float+0x212>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dc3c      	bgt.n	8008464 <_printf_float+0x2c4>
 80083ea:	4a1d      	ldr	r2, [pc, #116]	; (8008460 <_printf_float+0x2c0>)
 80083ec:	2301      	movs	r3, #1
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f af21 	beq.w	800823c <_printf_float+0x9c>
 80083fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80083fe:	4313      	orrs	r3, r2
 8008400:	d102      	bne.n	8008408 <_printf_float+0x268>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	07d9      	lsls	r1, r3, #31
 8008406:	d5d8      	bpl.n	80083ba <_printf_float+0x21a>
 8008408:	4653      	mov	r3, sl
 800840a:	465a      	mov	r2, fp
 800840c:	4631      	mov	r1, r6
 800840e:	4628      	mov	r0, r5
 8008410:	47b8      	blx	r7
 8008412:	3001      	adds	r0, #1
 8008414:	f43f af12 	beq.w	800823c <_printf_float+0x9c>
 8008418:	f04f 0900 	mov.w	r9, #0
 800841c:	f104 0a1a 	add.w	sl, r4, #26
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	425b      	negs	r3, r3
 8008424:	454b      	cmp	r3, r9
 8008426:	dc01      	bgt.n	800842c <_printf_float+0x28c>
 8008428:	9b08      	ldr	r3, [sp, #32]
 800842a:	e795      	b.n	8008358 <_printf_float+0x1b8>
 800842c:	2301      	movs	r3, #1
 800842e:	4652      	mov	r2, sl
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	f43f af00 	beq.w	800823c <_printf_float+0x9c>
 800843c:	f109 0901 	add.w	r9, r9, #1
 8008440:	e7ee      	b.n	8008420 <_printf_float+0x280>
 8008442:	bf00      	nop
 8008444:	f3af 8000 	nop.w
 8008448:	ffffffff 	.word	0xffffffff
 800844c:	7fefffff 	.word	0x7fefffff
 8008450:	0800ae7c 	.word	0x0800ae7c
 8008454:	0800ae80 	.word	0x0800ae80
 8008458:	0800ae88 	.word	0x0800ae88
 800845c:	0800ae84 	.word	0x0800ae84
 8008460:	0800ae8c 	.word	0x0800ae8c
 8008464:	9a08      	ldr	r2, [sp, #32]
 8008466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008468:	429a      	cmp	r2, r3
 800846a:	bfa8      	it	ge
 800846c:	461a      	movge	r2, r3
 800846e:	2a00      	cmp	r2, #0
 8008470:	4691      	mov	r9, r2
 8008472:	dc38      	bgt.n	80084e6 <_printf_float+0x346>
 8008474:	2300      	movs	r3, #0
 8008476:	9305      	str	r3, [sp, #20]
 8008478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800847c:	f104 021a 	add.w	r2, r4, #26
 8008480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008482:	9905      	ldr	r1, [sp, #20]
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	eba3 0309 	sub.w	r3, r3, r9
 800848a:	428b      	cmp	r3, r1
 800848c:	dc33      	bgt.n	80084f6 <_printf_float+0x356>
 800848e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008492:	429a      	cmp	r2, r3
 8008494:	db3c      	blt.n	8008510 <_printf_float+0x370>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	07da      	lsls	r2, r3, #31
 800849a:	d439      	bmi.n	8008510 <_printf_float+0x370>
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	9907      	ldr	r1, [sp, #28]
 80084a2:	1a9a      	subs	r2, r3, r2
 80084a4:	eba3 0901 	sub.w	r9, r3, r1
 80084a8:	4591      	cmp	r9, r2
 80084aa:	bfa8      	it	ge
 80084ac:	4691      	movge	r9, r2
 80084ae:	f1b9 0f00 	cmp.w	r9, #0
 80084b2:	dc35      	bgt.n	8008520 <_printf_float+0x380>
 80084b4:	f04f 0800 	mov.w	r8, #0
 80084b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084bc:	f104 0a1a 	add.w	sl, r4, #26
 80084c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	eba3 0309 	sub.w	r3, r3, r9
 80084ca:	4543      	cmp	r3, r8
 80084cc:	f77f af75 	ble.w	80083ba <_printf_float+0x21a>
 80084d0:	2301      	movs	r3, #1
 80084d2:	4652      	mov	r2, sl
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f aeae 	beq.w	800823c <_printf_float+0x9c>
 80084e0:	f108 0801 	add.w	r8, r8, #1
 80084e4:	e7ec      	b.n	80084c0 <_printf_float+0x320>
 80084e6:	4613      	mov	r3, r2
 80084e8:	4631      	mov	r1, r6
 80084ea:	4642      	mov	r2, r8
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	d1bf      	bne.n	8008474 <_printf_float+0x2d4>
 80084f4:	e6a2      	b.n	800823c <_printf_float+0x9c>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	9204      	str	r2, [sp, #16]
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f ae9b 	beq.w	800823c <_printf_float+0x9c>
 8008506:	9b05      	ldr	r3, [sp, #20]
 8008508:	9a04      	ldr	r2, [sp, #16]
 800850a:	3301      	adds	r3, #1
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	e7b7      	b.n	8008480 <_printf_float+0x2e0>
 8008510:	4653      	mov	r3, sl
 8008512:	465a      	mov	r2, fp
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	d1be      	bne.n	800849c <_printf_float+0x2fc>
 800851e:	e68d      	b.n	800823c <_printf_float+0x9c>
 8008520:	9a04      	ldr	r2, [sp, #16]
 8008522:	464b      	mov	r3, r9
 8008524:	4442      	add	r2, r8
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	d1c1      	bne.n	80084b4 <_printf_float+0x314>
 8008530:	e684      	b.n	800823c <_printf_float+0x9c>
 8008532:	9a08      	ldr	r2, [sp, #32]
 8008534:	2a01      	cmp	r2, #1
 8008536:	dc01      	bgt.n	800853c <_printf_float+0x39c>
 8008538:	07db      	lsls	r3, r3, #31
 800853a:	d537      	bpl.n	80085ac <_printf_float+0x40c>
 800853c:	2301      	movs	r3, #1
 800853e:	4642      	mov	r2, r8
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	f43f ae78 	beq.w	800823c <_printf_float+0x9c>
 800854c:	4653      	mov	r3, sl
 800854e:	465a      	mov	r2, fp
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f ae70 	beq.w	800823c <_printf_float+0x9c>
 800855c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008560:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008568:	d01b      	beq.n	80085a2 <_printf_float+0x402>
 800856a:	9b08      	ldr	r3, [sp, #32]
 800856c:	f108 0201 	add.w	r2, r8, #1
 8008570:	3b01      	subs	r3, #1
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	d10e      	bne.n	800859a <_printf_float+0x3fa>
 800857c:	e65e      	b.n	800823c <_printf_float+0x9c>
 800857e:	2301      	movs	r3, #1
 8008580:	464a      	mov	r2, r9
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	47b8      	blx	r7
 8008588:	3001      	adds	r0, #1
 800858a:	f43f ae57 	beq.w	800823c <_printf_float+0x9c>
 800858e:	f108 0801 	add.w	r8, r8, #1
 8008592:	9b08      	ldr	r3, [sp, #32]
 8008594:	3b01      	subs	r3, #1
 8008596:	4543      	cmp	r3, r8
 8008598:	dcf1      	bgt.n	800857e <_printf_float+0x3de>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085a0:	e6db      	b.n	800835a <_printf_float+0x1ba>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	f104 091a 	add.w	r9, r4, #26
 80085aa:	e7f2      	b.n	8008592 <_printf_float+0x3f2>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4642      	mov	r2, r8
 80085b0:	e7df      	b.n	8008572 <_printf_float+0x3d2>
 80085b2:	2301      	movs	r3, #1
 80085b4:	464a      	mov	r2, r9
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f ae3d 	beq.w	800823c <_printf_float+0x9c>
 80085c2:	f108 0801 	add.w	r8, r8, #1
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	4543      	cmp	r3, r8
 80085ce:	dcf0      	bgt.n	80085b2 <_printf_float+0x412>
 80085d0:	e6f7      	b.n	80083c2 <_printf_float+0x222>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	f104 0919 	add.w	r9, r4, #25
 80085da:	e7f4      	b.n	80085c6 <_printf_float+0x426>

080085dc <_printf_common>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	4616      	mov	r6, r2
 80085e2:	4699      	mov	r9, r3
 80085e4:	688a      	ldr	r2, [r1, #8]
 80085e6:	690b      	ldr	r3, [r1, #16]
 80085e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	bfb8      	it	lt
 80085f0:	4613      	movlt	r3, r2
 80085f2:	6033      	str	r3, [r6, #0]
 80085f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085f8:	4607      	mov	r7, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	b10a      	cbz	r2, 8008602 <_printf_common+0x26>
 80085fe:	3301      	adds	r3, #1
 8008600:	6033      	str	r3, [r6, #0]
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	0699      	lsls	r1, r3, #26
 8008606:	bf42      	ittt	mi
 8008608:	6833      	ldrmi	r3, [r6, #0]
 800860a:	3302      	addmi	r3, #2
 800860c:	6033      	strmi	r3, [r6, #0]
 800860e:	6825      	ldr	r5, [r4, #0]
 8008610:	f015 0506 	ands.w	r5, r5, #6
 8008614:	d106      	bne.n	8008624 <_printf_common+0x48>
 8008616:	f104 0a19 	add.w	sl, r4, #25
 800861a:	68e3      	ldr	r3, [r4, #12]
 800861c:	6832      	ldr	r2, [r6, #0]
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	42ab      	cmp	r3, r5
 8008622:	dc26      	bgt.n	8008672 <_printf_common+0x96>
 8008624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008628:	1e13      	subs	r3, r2, #0
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	bf18      	it	ne
 800862e:	2301      	movne	r3, #1
 8008630:	0692      	lsls	r2, r2, #26
 8008632:	d42b      	bmi.n	800868c <_printf_common+0xb0>
 8008634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008638:	4649      	mov	r1, r9
 800863a:	4638      	mov	r0, r7
 800863c:	47c0      	blx	r8
 800863e:	3001      	adds	r0, #1
 8008640:	d01e      	beq.n	8008680 <_printf_common+0xa4>
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	68e5      	ldr	r5, [r4, #12]
 8008646:	6832      	ldr	r2, [r6, #0]
 8008648:	f003 0306 	and.w	r3, r3, #6
 800864c:	2b04      	cmp	r3, #4
 800864e:	bf08      	it	eq
 8008650:	1aad      	subeq	r5, r5, r2
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	6922      	ldr	r2, [r4, #16]
 8008656:	bf0c      	ite	eq
 8008658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800865c:	2500      	movne	r5, #0
 800865e:	4293      	cmp	r3, r2
 8008660:	bfc4      	itt	gt
 8008662:	1a9b      	subgt	r3, r3, r2
 8008664:	18ed      	addgt	r5, r5, r3
 8008666:	2600      	movs	r6, #0
 8008668:	341a      	adds	r4, #26
 800866a:	42b5      	cmp	r5, r6
 800866c:	d11a      	bne.n	80086a4 <_printf_common+0xc8>
 800866e:	2000      	movs	r0, #0
 8008670:	e008      	b.n	8008684 <_printf_common+0xa8>
 8008672:	2301      	movs	r3, #1
 8008674:	4652      	mov	r2, sl
 8008676:	4649      	mov	r1, r9
 8008678:	4638      	mov	r0, r7
 800867a:	47c0      	blx	r8
 800867c:	3001      	adds	r0, #1
 800867e:	d103      	bne.n	8008688 <_printf_common+0xac>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008688:	3501      	adds	r5, #1
 800868a:	e7c6      	b.n	800861a <_printf_common+0x3e>
 800868c:	18e1      	adds	r1, r4, r3
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	2030      	movs	r0, #48	; 0x30
 8008692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008696:	4422      	add	r2, r4
 8008698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800869c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086a0:	3302      	adds	r3, #2
 80086a2:	e7c7      	b.n	8008634 <_printf_common+0x58>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4622      	mov	r2, r4
 80086a8:	4649      	mov	r1, r9
 80086aa:	4638      	mov	r0, r7
 80086ac:	47c0      	blx	r8
 80086ae:	3001      	adds	r0, #1
 80086b0:	d0e6      	beq.n	8008680 <_printf_common+0xa4>
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7d9      	b.n	800866a <_printf_common+0x8e>
	...

080086b8 <_printf_i>:
 80086b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086bc:	7e0f      	ldrb	r7, [r1, #24]
 80086be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086c0:	2f78      	cmp	r7, #120	; 0x78
 80086c2:	4691      	mov	r9, r2
 80086c4:	4680      	mov	r8, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	469a      	mov	sl, r3
 80086ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ce:	d807      	bhi.n	80086e0 <_printf_i+0x28>
 80086d0:	2f62      	cmp	r7, #98	; 0x62
 80086d2:	d80a      	bhi.n	80086ea <_printf_i+0x32>
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	f000 80d8 	beq.w	800888a <_printf_i+0x1d2>
 80086da:	2f58      	cmp	r7, #88	; 0x58
 80086dc:	f000 80a3 	beq.w	8008826 <_printf_i+0x16e>
 80086e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086e8:	e03a      	b.n	8008760 <_printf_i+0xa8>
 80086ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ee:	2b15      	cmp	r3, #21
 80086f0:	d8f6      	bhi.n	80086e0 <_printf_i+0x28>
 80086f2:	a101      	add	r1, pc, #4	; (adr r1, 80086f8 <_printf_i+0x40>)
 80086f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086f8:	08008751 	.word	0x08008751
 80086fc:	08008765 	.word	0x08008765
 8008700:	080086e1 	.word	0x080086e1
 8008704:	080086e1 	.word	0x080086e1
 8008708:	080086e1 	.word	0x080086e1
 800870c:	080086e1 	.word	0x080086e1
 8008710:	08008765 	.word	0x08008765
 8008714:	080086e1 	.word	0x080086e1
 8008718:	080086e1 	.word	0x080086e1
 800871c:	080086e1 	.word	0x080086e1
 8008720:	080086e1 	.word	0x080086e1
 8008724:	08008871 	.word	0x08008871
 8008728:	08008795 	.word	0x08008795
 800872c:	08008853 	.word	0x08008853
 8008730:	080086e1 	.word	0x080086e1
 8008734:	080086e1 	.word	0x080086e1
 8008738:	08008893 	.word	0x08008893
 800873c:	080086e1 	.word	0x080086e1
 8008740:	08008795 	.word	0x08008795
 8008744:	080086e1 	.word	0x080086e1
 8008748:	080086e1 	.word	0x080086e1
 800874c:	0800885b 	.word	0x0800885b
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	1d1a      	adds	r2, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	602a      	str	r2, [r5, #0]
 8008758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800875c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008760:	2301      	movs	r3, #1
 8008762:	e0a3      	b.n	80088ac <_printf_i+0x1f4>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	6829      	ldr	r1, [r5, #0]
 8008768:	0606      	lsls	r6, r0, #24
 800876a:	f101 0304 	add.w	r3, r1, #4
 800876e:	d50a      	bpl.n	8008786 <_printf_i+0xce>
 8008770:	680e      	ldr	r6, [r1, #0]
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	2e00      	cmp	r6, #0
 8008776:	da03      	bge.n	8008780 <_printf_i+0xc8>
 8008778:	232d      	movs	r3, #45	; 0x2d
 800877a:	4276      	negs	r6, r6
 800877c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008780:	485e      	ldr	r0, [pc, #376]	; (80088fc <_printf_i+0x244>)
 8008782:	230a      	movs	r3, #10
 8008784:	e019      	b.n	80087ba <_printf_i+0x102>
 8008786:	680e      	ldr	r6, [r1, #0]
 8008788:	602b      	str	r3, [r5, #0]
 800878a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800878e:	bf18      	it	ne
 8008790:	b236      	sxthne	r6, r6
 8008792:	e7ef      	b.n	8008774 <_printf_i+0xbc>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	1d19      	adds	r1, r3, #4
 800879a:	6029      	str	r1, [r5, #0]
 800879c:	0601      	lsls	r1, r0, #24
 800879e:	d501      	bpl.n	80087a4 <_printf_i+0xec>
 80087a0:	681e      	ldr	r6, [r3, #0]
 80087a2:	e002      	b.n	80087aa <_printf_i+0xf2>
 80087a4:	0646      	lsls	r6, r0, #25
 80087a6:	d5fb      	bpl.n	80087a0 <_printf_i+0xe8>
 80087a8:	881e      	ldrh	r6, [r3, #0]
 80087aa:	4854      	ldr	r0, [pc, #336]	; (80088fc <_printf_i+0x244>)
 80087ac:	2f6f      	cmp	r7, #111	; 0x6f
 80087ae:	bf0c      	ite	eq
 80087b0:	2308      	moveq	r3, #8
 80087b2:	230a      	movne	r3, #10
 80087b4:	2100      	movs	r1, #0
 80087b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ba:	6865      	ldr	r5, [r4, #4]
 80087bc:	60a5      	str	r5, [r4, #8]
 80087be:	2d00      	cmp	r5, #0
 80087c0:	bfa2      	ittt	ge
 80087c2:	6821      	ldrge	r1, [r4, #0]
 80087c4:	f021 0104 	bicge.w	r1, r1, #4
 80087c8:	6021      	strge	r1, [r4, #0]
 80087ca:	b90e      	cbnz	r6, 80087d0 <_printf_i+0x118>
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d04d      	beq.n	800886c <_printf_i+0x1b4>
 80087d0:	4615      	mov	r5, r2
 80087d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087d6:	fb03 6711 	mls	r7, r3, r1, r6
 80087da:	5dc7      	ldrb	r7, [r0, r7]
 80087dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087e0:	4637      	mov	r7, r6
 80087e2:	42bb      	cmp	r3, r7
 80087e4:	460e      	mov	r6, r1
 80087e6:	d9f4      	bls.n	80087d2 <_printf_i+0x11a>
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d10b      	bne.n	8008804 <_printf_i+0x14c>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	07de      	lsls	r6, r3, #31
 80087f0:	d508      	bpl.n	8008804 <_printf_i+0x14c>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	6861      	ldr	r1, [r4, #4]
 80087f6:	4299      	cmp	r1, r3
 80087f8:	bfde      	ittt	le
 80087fa:	2330      	movle	r3, #48	; 0x30
 80087fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008800:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008804:	1b52      	subs	r2, r2, r5
 8008806:	6122      	str	r2, [r4, #16]
 8008808:	f8cd a000 	str.w	sl, [sp]
 800880c:	464b      	mov	r3, r9
 800880e:	aa03      	add	r2, sp, #12
 8008810:	4621      	mov	r1, r4
 8008812:	4640      	mov	r0, r8
 8008814:	f7ff fee2 	bl	80085dc <_printf_common>
 8008818:	3001      	adds	r0, #1
 800881a:	d14c      	bne.n	80088b6 <_printf_i+0x1fe>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	b004      	add	sp, #16
 8008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008826:	4835      	ldr	r0, [pc, #212]	; (80088fc <_printf_i+0x244>)
 8008828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800882c:	6829      	ldr	r1, [r5, #0]
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	f851 6b04 	ldr.w	r6, [r1], #4
 8008834:	6029      	str	r1, [r5, #0]
 8008836:	061d      	lsls	r5, r3, #24
 8008838:	d514      	bpl.n	8008864 <_printf_i+0x1ac>
 800883a:	07df      	lsls	r7, r3, #31
 800883c:	bf44      	itt	mi
 800883e:	f043 0320 	orrmi.w	r3, r3, #32
 8008842:	6023      	strmi	r3, [r4, #0]
 8008844:	b91e      	cbnz	r6, 800884e <_printf_i+0x196>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	f023 0320 	bic.w	r3, r3, #32
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	2310      	movs	r3, #16
 8008850:	e7b0      	b.n	80087b4 <_printf_i+0xfc>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	f043 0320 	orr.w	r3, r3, #32
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	2378      	movs	r3, #120	; 0x78
 800885c:	4828      	ldr	r0, [pc, #160]	; (8008900 <_printf_i+0x248>)
 800885e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008862:	e7e3      	b.n	800882c <_printf_i+0x174>
 8008864:	0659      	lsls	r1, r3, #25
 8008866:	bf48      	it	mi
 8008868:	b2b6      	uxthmi	r6, r6
 800886a:	e7e6      	b.n	800883a <_printf_i+0x182>
 800886c:	4615      	mov	r5, r2
 800886e:	e7bb      	b.n	80087e8 <_printf_i+0x130>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	6826      	ldr	r6, [r4, #0]
 8008874:	6961      	ldr	r1, [r4, #20]
 8008876:	1d18      	adds	r0, r3, #4
 8008878:	6028      	str	r0, [r5, #0]
 800887a:	0635      	lsls	r5, r6, #24
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	d501      	bpl.n	8008884 <_printf_i+0x1cc>
 8008880:	6019      	str	r1, [r3, #0]
 8008882:	e002      	b.n	800888a <_printf_i+0x1d2>
 8008884:	0670      	lsls	r0, r6, #25
 8008886:	d5fb      	bpl.n	8008880 <_printf_i+0x1c8>
 8008888:	8019      	strh	r1, [r3, #0]
 800888a:	2300      	movs	r3, #0
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	4615      	mov	r5, r2
 8008890:	e7ba      	b.n	8008808 <_printf_i+0x150>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	1d1a      	adds	r2, r3, #4
 8008896:	602a      	str	r2, [r5, #0]
 8008898:	681d      	ldr	r5, [r3, #0]
 800889a:	6862      	ldr	r2, [r4, #4]
 800889c:	2100      	movs	r1, #0
 800889e:	4628      	mov	r0, r5
 80088a0:	f7f7 fcd6 	bl	8000250 <memchr>
 80088a4:	b108      	cbz	r0, 80088aa <_printf_i+0x1f2>
 80088a6:	1b40      	subs	r0, r0, r5
 80088a8:	6060      	str	r0, [r4, #4]
 80088aa:	6863      	ldr	r3, [r4, #4]
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	2300      	movs	r3, #0
 80088b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b4:	e7a8      	b.n	8008808 <_printf_i+0x150>
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	462a      	mov	r2, r5
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d0ab      	beq.n	800881c <_printf_i+0x164>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	079b      	lsls	r3, r3, #30
 80088c8:	d413      	bmi.n	80088f2 <_printf_i+0x23a>
 80088ca:	68e0      	ldr	r0, [r4, #12]
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	4298      	cmp	r0, r3
 80088d0:	bfb8      	it	lt
 80088d2:	4618      	movlt	r0, r3
 80088d4:	e7a4      	b.n	8008820 <_printf_i+0x168>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4632      	mov	r2, r6
 80088da:	4649      	mov	r1, r9
 80088dc:	4640      	mov	r0, r8
 80088de:	47d0      	blx	sl
 80088e0:	3001      	adds	r0, #1
 80088e2:	d09b      	beq.n	800881c <_printf_i+0x164>
 80088e4:	3501      	adds	r5, #1
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	9903      	ldr	r1, [sp, #12]
 80088ea:	1a5b      	subs	r3, r3, r1
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dcf2      	bgt.n	80088d6 <_printf_i+0x21e>
 80088f0:	e7eb      	b.n	80088ca <_printf_i+0x212>
 80088f2:	2500      	movs	r5, #0
 80088f4:	f104 0619 	add.w	r6, r4, #25
 80088f8:	e7f5      	b.n	80088e6 <_printf_i+0x22e>
 80088fa:	bf00      	nop
 80088fc:	0800ae8e 	.word	0x0800ae8e
 8008900:	0800ae9f 	.word	0x0800ae9f

08008904 <siprintf>:
 8008904:	b40e      	push	{r1, r2, r3}
 8008906:	b500      	push	{lr}
 8008908:	b09c      	sub	sp, #112	; 0x70
 800890a:	ab1d      	add	r3, sp, #116	; 0x74
 800890c:	9002      	str	r0, [sp, #8]
 800890e:	9006      	str	r0, [sp, #24]
 8008910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008914:	4809      	ldr	r0, [pc, #36]	; (800893c <siprintf+0x38>)
 8008916:	9107      	str	r1, [sp, #28]
 8008918:	9104      	str	r1, [sp, #16]
 800891a:	4909      	ldr	r1, [pc, #36]	; (8008940 <siprintf+0x3c>)
 800891c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008920:	9105      	str	r1, [sp, #20]
 8008922:	6800      	ldr	r0, [r0, #0]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	a902      	add	r1, sp, #8
 8008928:	f001 fb86 	bl	800a038 <_svfiprintf_r>
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	b01c      	add	sp, #112	; 0x70
 8008934:	f85d eb04 	ldr.w	lr, [sp], #4
 8008938:	b003      	add	sp, #12
 800893a:	4770      	bx	lr
 800893c:	20000048 	.word	0x20000048
 8008940:	ffff0208 	.word	0xffff0208

08008944 <strcat>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4602      	mov	r2, r0
 8008948:	7814      	ldrb	r4, [r2, #0]
 800894a:	4613      	mov	r3, r2
 800894c:	3201      	adds	r2, #1
 800894e:	2c00      	cmp	r4, #0
 8008950:	d1fa      	bne.n	8008948 <strcat+0x4>
 8008952:	3b01      	subs	r3, #1
 8008954:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008958:	f803 2f01 	strb.w	r2, [r3, #1]!
 800895c:	2a00      	cmp	r2, #0
 800895e:	d1f9      	bne.n	8008954 <strcat+0x10>
 8008960:	bd10      	pop	{r4, pc}
	...

08008964 <_strtol_l.constprop.0>:
 8008964:	2b01      	cmp	r3, #1
 8008966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800896a:	d001      	beq.n	8008970 <_strtol_l.constprop.0+0xc>
 800896c:	2b24      	cmp	r3, #36	; 0x24
 800896e:	d906      	bls.n	800897e <_strtol_l.constprop.0+0x1a>
 8008970:	f7ff fb46 	bl	8008000 <__errno>
 8008974:	2316      	movs	r3, #22
 8008976:	6003      	str	r3, [r0, #0]
 8008978:	2000      	movs	r0, #0
 800897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a64 <_strtol_l.constprop.0+0x100>
 8008982:	460d      	mov	r5, r1
 8008984:	462e      	mov	r6, r5
 8008986:	f815 4b01 	ldrb.w	r4, [r5], #1
 800898a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800898e:	f017 0708 	ands.w	r7, r7, #8
 8008992:	d1f7      	bne.n	8008984 <_strtol_l.constprop.0+0x20>
 8008994:	2c2d      	cmp	r4, #45	; 0x2d
 8008996:	d132      	bne.n	80089fe <_strtol_l.constprop.0+0x9a>
 8008998:	782c      	ldrb	r4, [r5, #0]
 800899a:	2701      	movs	r7, #1
 800899c:	1cb5      	adds	r5, r6, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d05b      	beq.n	8008a5a <_strtol_l.constprop.0+0xf6>
 80089a2:	2b10      	cmp	r3, #16
 80089a4:	d109      	bne.n	80089ba <_strtol_l.constprop.0+0x56>
 80089a6:	2c30      	cmp	r4, #48	; 0x30
 80089a8:	d107      	bne.n	80089ba <_strtol_l.constprop.0+0x56>
 80089aa:	782c      	ldrb	r4, [r5, #0]
 80089ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089b0:	2c58      	cmp	r4, #88	; 0x58
 80089b2:	d14d      	bne.n	8008a50 <_strtol_l.constprop.0+0xec>
 80089b4:	786c      	ldrb	r4, [r5, #1]
 80089b6:	2310      	movs	r3, #16
 80089b8:	3502      	adds	r5, #2
 80089ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089be:	f108 38ff 	add.w	r8, r8, #4294967295
 80089c2:	f04f 0c00 	mov.w	ip, #0
 80089c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80089ca:	4666      	mov	r6, ip
 80089cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80089d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80089d4:	f1be 0f09 	cmp.w	lr, #9
 80089d8:	d816      	bhi.n	8008a08 <_strtol_l.constprop.0+0xa4>
 80089da:	4674      	mov	r4, lr
 80089dc:	42a3      	cmp	r3, r4
 80089de:	dd24      	ble.n	8008a2a <_strtol_l.constprop.0+0xc6>
 80089e0:	f1bc 0f00 	cmp.w	ip, #0
 80089e4:	db1e      	blt.n	8008a24 <_strtol_l.constprop.0+0xc0>
 80089e6:	45b1      	cmp	r9, r6
 80089e8:	d31c      	bcc.n	8008a24 <_strtol_l.constprop.0+0xc0>
 80089ea:	d101      	bne.n	80089f0 <_strtol_l.constprop.0+0x8c>
 80089ec:	45a2      	cmp	sl, r4
 80089ee:	db19      	blt.n	8008a24 <_strtol_l.constprop.0+0xc0>
 80089f0:	fb06 4603 	mla	r6, r6, r3, r4
 80089f4:	f04f 0c01 	mov.w	ip, #1
 80089f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089fc:	e7e8      	b.n	80089d0 <_strtol_l.constprop.0+0x6c>
 80089fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008a00:	bf04      	itt	eq
 8008a02:	782c      	ldrbeq	r4, [r5, #0]
 8008a04:	1cb5      	addeq	r5, r6, #2
 8008a06:	e7ca      	b.n	800899e <_strtol_l.constprop.0+0x3a>
 8008a08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008a0c:	f1be 0f19 	cmp.w	lr, #25
 8008a10:	d801      	bhi.n	8008a16 <_strtol_l.constprop.0+0xb2>
 8008a12:	3c37      	subs	r4, #55	; 0x37
 8008a14:	e7e2      	b.n	80089dc <_strtol_l.constprop.0+0x78>
 8008a16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008a1a:	f1be 0f19 	cmp.w	lr, #25
 8008a1e:	d804      	bhi.n	8008a2a <_strtol_l.constprop.0+0xc6>
 8008a20:	3c57      	subs	r4, #87	; 0x57
 8008a22:	e7db      	b.n	80089dc <_strtol_l.constprop.0+0x78>
 8008a24:	f04f 3cff 	mov.w	ip, #4294967295
 8008a28:	e7e6      	b.n	80089f8 <_strtol_l.constprop.0+0x94>
 8008a2a:	f1bc 0f00 	cmp.w	ip, #0
 8008a2e:	da05      	bge.n	8008a3c <_strtol_l.constprop.0+0xd8>
 8008a30:	2322      	movs	r3, #34	; 0x22
 8008a32:	6003      	str	r3, [r0, #0]
 8008a34:	4646      	mov	r6, r8
 8008a36:	b942      	cbnz	r2, 8008a4a <_strtol_l.constprop.0+0xe6>
 8008a38:	4630      	mov	r0, r6
 8008a3a:	e79e      	b.n	800897a <_strtol_l.constprop.0+0x16>
 8008a3c:	b107      	cbz	r7, 8008a40 <_strtol_l.constprop.0+0xdc>
 8008a3e:	4276      	negs	r6, r6
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	d0f9      	beq.n	8008a38 <_strtol_l.constprop.0+0xd4>
 8008a44:	f1bc 0f00 	cmp.w	ip, #0
 8008a48:	d000      	beq.n	8008a4c <_strtol_l.constprop.0+0xe8>
 8008a4a:	1e69      	subs	r1, r5, #1
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	e7f3      	b.n	8008a38 <_strtol_l.constprop.0+0xd4>
 8008a50:	2430      	movs	r4, #48	; 0x30
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1b1      	bne.n	80089ba <_strtol_l.constprop.0+0x56>
 8008a56:	2308      	movs	r3, #8
 8008a58:	e7af      	b.n	80089ba <_strtol_l.constprop.0+0x56>
 8008a5a:	2c30      	cmp	r4, #48	; 0x30
 8008a5c:	d0a5      	beq.n	80089aa <_strtol_l.constprop.0+0x46>
 8008a5e:	230a      	movs	r3, #10
 8008a60:	e7ab      	b.n	80089ba <_strtol_l.constprop.0+0x56>
 8008a62:	bf00      	nop
 8008a64:	0800aeb1 	.word	0x0800aeb1

08008a68 <strtol>:
 8008a68:	4613      	mov	r3, r2
 8008a6a:	460a      	mov	r2, r1
 8008a6c:	4601      	mov	r1, r0
 8008a6e:	4802      	ldr	r0, [pc, #8]	; (8008a78 <strtol+0x10>)
 8008a70:	6800      	ldr	r0, [r0, #0]
 8008a72:	f7ff bf77 	b.w	8008964 <_strtol_l.constprop.0>
 8008a76:	bf00      	nop
 8008a78:	20000048 	.word	0x20000048

08008a7c <quorem>:
 8008a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	6903      	ldr	r3, [r0, #16]
 8008a82:	690c      	ldr	r4, [r1, #16]
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	4607      	mov	r7, r0
 8008a88:	f2c0 8081 	blt.w	8008b8e <quorem+0x112>
 8008a8c:	3c01      	subs	r4, #1
 8008a8e:	f101 0814 	add.w	r8, r1, #20
 8008a92:	f100 0514 	add.w	r5, r0, #20
 8008a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008aac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ab0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ab4:	d331      	bcc.n	8008b1a <quorem+0x9e>
 8008ab6:	f04f 0e00 	mov.w	lr, #0
 8008aba:	4640      	mov	r0, r8
 8008abc:	46ac      	mov	ip, r5
 8008abe:	46f2      	mov	sl, lr
 8008ac0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ac4:	b293      	uxth	r3, r2
 8008ac6:	fb06 e303 	mla	r3, r6, r3, lr
 8008aca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	ebaa 0303 	sub.w	r3, sl, r3
 8008ad4:	f8dc a000 	ldr.w	sl, [ip]
 8008ad8:	0c12      	lsrs	r2, r2, #16
 8008ada:	fa13 f38a 	uxtah	r3, r3, sl
 8008ade:	fb06 e202 	mla	r2, r6, r2, lr
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	9b00      	ldr	r3, [sp, #0]
 8008ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aea:	b292      	uxth	r2, r2
 8008aec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008af4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008af8:	4581      	cmp	r9, r0
 8008afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008afe:	f84c 3b04 	str.w	r3, [ip], #4
 8008b02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b06:	d2db      	bcs.n	8008ac0 <quorem+0x44>
 8008b08:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b0c:	b92b      	cbnz	r3, 8008b1a <quorem+0x9e>
 8008b0e:	9b01      	ldr	r3, [sp, #4]
 8008b10:	3b04      	subs	r3, #4
 8008b12:	429d      	cmp	r5, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	d32e      	bcc.n	8008b76 <quorem+0xfa>
 8008b18:	613c      	str	r4, [r7, #16]
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f001 f838 	bl	8009b90 <__mcmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	db24      	blt.n	8008b6e <quorem+0xf2>
 8008b24:	3601      	adds	r6, #1
 8008b26:	4628      	mov	r0, r5
 8008b28:	f04f 0c00 	mov.w	ip, #0
 8008b2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b30:	f8d0 e000 	ldr.w	lr, [r0]
 8008b34:	b293      	uxth	r3, r2
 8008b36:	ebac 0303 	sub.w	r3, ip, r3
 8008b3a:	0c12      	lsrs	r2, r2, #16
 8008b3c:	fa13 f38e 	uxtah	r3, r3, lr
 8008b40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b4e:	45c1      	cmp	r9, r8
 8008b50:	f840 3b04 	str.w	r3, [r0], #4
 8008b54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b58:	d2e8      	bcs.n	8008b2c <quorem+0xb0>
 8008b5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b62:	b922      	cbnz	r2, 8008b6e <quorem+0xf2>
 8008b64:	3b04      	subs	r3, #4
 8008b66:	429d      	cmp	r5, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	d30a      	bcc.n	8008b82 <quorem+0x106>
 8008b6c:	613c      	str	r4, [r7, #16]
 8008b6e:	4630      	mov	r0, r6
 8008b70:	b003      	add	sp, #12
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	6812      	ldr	r2, [r2, #0]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	d1cc      	bne.n	8008b18 <quorem+0x9c>
 8008b7e:	3c01      	subs	r4, #1
 8008b80:	e7c7      	b.n	8008b12 <quorem+0x96>
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	3b04      	subs	r3, #4
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	d1f0      	bne.n	8008b6c <quorem+0xf0>
 8008b8a:	3c01      	subs	r4, #1
 8008b8c:	e7eb      	b.n	8008b66 <quorem+0xea>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e7ee      	b.n	8008b70 <quorem+0xf4>
 8008b92:	0000      	movs	r0, r0
 8008b94:	0000      	movs	r0, r0
	...

08008b98 <_dtoa_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	ed2d 8b02 	vpush	{d8}
 8008ba0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ba2:	b091      	sub	sp, #68	; 0x44
 8008ba4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ba8:	ec59 8b10 	vmov	r8, r9, d0
 8008bac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008bae:	9106      	str	r1, [sp, #24]
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	9208      	str	r2, [sp, #32]
 8008bb4:	930c      	str	r3, [sp, #48]	; 0x30
 8008bb6:	b975      	cbnz	r5, 8008bd6 <_dtoa_r+0x3e>
 8008bb8:	2010      	movs	r0, #16
 8008bba:	f000 fd5f 	bl	800967c <malloc>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6270      	str	r0, [r6, #36]	; 0x24
 8008bc2:	b920      	cbnz	r0, 8008bce <_dtoa_r+0x36>
 8008bc4:	4baa      	ldr	r3, [pc, #680]	; (8008e70 <_dtoa_r+0x2d8>)
 8008bc6:	21ea      	movs	r1, #234	; 0xea
 8008bc8:	48aa      	ldr	r0, [pc, #680]	; (8008e74 <_dtoa_r+0x2dc>)
 8008bca:	f001 fb45 	bl	800a258 <__assert_func>
 8008bce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bd2:	6005      	str	r5, [r0, #0]
 8008bd4:	60c5      	str	r5, [r0, #12]
 8008bd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bd8:	6819      	ldr	r1, [r3, #0]
 8008bda:	b151      	cbz	r1, 8008bf2 <_dtoa_r+0x5a>
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	604a      	str	r2, [r1, #4]
 8008be0:	2301      	movs	r3, #1
 8008be2:	4093      	lsls	r3, r2
 8008be4:	608b      	str	r3, [r1, #8]
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 fd90 	bl	800970c <_Bfree>
 8008bec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f1b9 0300 	subs.w	r3, r9, #0
 8008bf6:	bfbb      	ittet	lt
 8008bf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bfc:	9303      	strlt	r3, [sp, #12]
 8008bfe:	2300      	movge	r3, #0
 8008c00:	2201      	movlt	r2, #1
 8008c02:	bfac      	ite	ge
 8008c04:	6023      	strge	r3, [r4, #0]
 8008c06:	6022      	strlt	r2, [r4, #0]
 8008c08:	4b9b      	ldr	r3, [pc, #620]	; (8008e78 <_dtoa_r+0x2e0>)
 8008c0a:	9c03      	ldr	r4, [sp, #12]
 8008c0c:	43a3      	bics	r3, r4
 8008c0e:	d11c      	bne.n	8008c4a <_dtoa_r+0xb2>
 8008c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c12:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008c1c:	ea53 0308 	orrs.w	r3, r3, r8
 8008c20:	f000 84fd 	beq.w	800961e <_dtoa_r+0xa86>
 8008c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c26:	b963      	cbnz	r3, 8008c42 <_dtoa_r+0xaa>
 8008c28:	4b94      	ldr	r3, [pc, #592]	; (8008e7c <_dtoa_r+0x2e4>)
 8008c2a:	e01f      	b.n	8008c6c <_dtoa_r+0xd4>
 8008c2c:	4b94      	ldr	r3, [pc, #592]	; (8008e80 <_dtoa_r+0x2e8>)
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	3308      	adds	r3, #8
 8008c32:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	9801      	ldr	r0, [sp, #4]
 8008c38:	b011      	add	sp, #68	; 0x44
 8008c3a:	ecbd 8b02 	vpop	{d8}
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	4b8e      	ldr	r3, [pc, #568]	; (8008e7c <_dtoa_r+0x2e4>)
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	3303      	adds	r3, #3
 8008c48:	e7f3      	b.n	8008c32 <_dtoa_r+0x9a>
 8008c4a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008c4e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c56:	d10b      	bne.n	8008c70 <_dtoa_r+0xd8>
 8008c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 84d9 	beq.w	8009618 <_dtoa_r+0xa80>
 8008c66:	4887      	ldr	r0, [pc, #540]	; (8008e84 <_dtoa_r+0x2ec>)
 8008c68:	6018      	str	r0, [r3, #0]
 8008c6a:	1e43      	subs	r3, r0, #1
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	e7e2      	b.n	8008c36 <_dtoa_r+0x9e>
 8008c70:	a90f      	add	r1, sp, #60	; 0x3c
 8008c72:	aa0e      	add	r2, sp, #56	; 0x38
 8008c74:	4630      	mov	r0, r6
 8008c76:	eeb0 0b48 	vmov.f64	d0, d8
 8008c7a:	f001 f82f 	bl	8009cdc <__d2b>
 8008c7e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008c82:	4605      	mov	r5, r0
 8008c84:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c86:	2900      	cmp	r1, #0
 8008c88:	d046      	beq.n	8008d18 <_dtoa_r+0x180>
 8008c8a:	ee18 4a90 	vmov	r4, s17
 8008c8e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c92:	ec53 2b18 	vmov	r2, r3, d8
 8008c96:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008c9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ca2:	2400      	movs	r4, #0
 8008ca4:	ec43 2b16 	vmov	d6, r2, r3
 8008ca8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008cac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008e58 <_dtoa_r+0x2c0>
 8008cb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008cb4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008e60 <_dtoa_r+0x2c8>
 8008cb8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008cbc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008e68 <_dtoa_r+0x2d0>
 8008cc0:	ee07 1a90 	vmov	s15, r1
 8008cc4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008cc8:	eeb0 7b46 	vmov.f64	d7, d6
 8008ccc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008cd0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008cd4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	ee16 ba90 	vmov	fp, s13
 8008ce0:	940a      	str	r4, [sp, #40]	; 0x28
 8008ce2:	d508      	bpl.n	8008cf6 <_dtoa_r+0x15e>
 8008ce4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008ce8:	eeb4 6b47 	vcmp.f64	d6, d7
 8008cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf0:	bf18      	it	ne
 8008cf2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008cf6:	f1bb 0f16 	cmp.w	fp, #22
 8008cfa:	d82f      	bhi.n	8008d5c <_dtoa_r+0x1c4>
 8008cfc:	4b62      	ldr	r3, [pc, #392]	; (8008e88 <_dtoa_r+0x2f0>)
 8008cfe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d02:	ed93 7b00 	vldr	d7, [r3]
 8008d06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0e:	d501      	bpl.n	8008d14 <_dtoa_r+0x17c>
 8008d10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d14:	2300      	movs	r3, #0
 8008d16:	e022      	b.n	8008d5e <_dtoa_r+0x1c6>
 8008d18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d1a:	4401      	add	r1, r0
 8008d1c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	bfc1      	itttt	gt
 8008d24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d28:	fa04 f303 	lslgt.w	r3, r4, r3
 8008d2c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008d30:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008d34:	bfd6      	itet	le
 8008d36:	f1c3 0320 	rsble	r3, r3, #32
 8008d3a:	ea43 0808 	orrgt.w	r8, r3, r8
 8008d3e:	fa08 f803 	lslle.w	r8, r8, r3
 8008d42:	ee07 8a90 	vmov	s15, r8
 8008d46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008d4a:	3901      	subs	r1, #1
 8008d4c:	ee17 4a90 	vmov	r4, s15
 8008d50:	ec53 2b17 	vmov	r2, r3, d7
 8008d54:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008d58:	2401      	movs	r4, #1
 8008d5a:	e7a3      	b.n	8008ca4 <_dtoa_r+0x10c>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d60:	1a43      	subs	r3, r0, r1
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	bf45      	ittet	mi
 8008d66:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d6a:	9304      	strmi	r3, [sp, #16]
 8008d6c:	2300      	movpl	r3, #0
 8008d6e:	2300      	movmi	r3, #0
 8008d70:	9205      	str	r2, [sp, #20]
 8008d72:	bf54      	ite	pl
 8008d74:	9304      	strpl	r3, [sp, #16]
 8008d76:	9305      	strmi	r3, [sp, #20]
 8008d78:	f1bb 0f00 	cmp.w	fp, #0
 8008d7c:	db18      	blt.n	8008db0 <_dtoa_r+0x218>
 8008d7e:	9b05      	ldr	r3, [sp, #20]
 8008d80:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008d84:	445b      	add	r3, fp
 8008d86:	9305      	str	r3, [sp, #20]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9a06      	ldr	r2, [sp, #24]
 8008d8c:	2a09      	cmp	r2, #9
 8008d8e:	d849      	bhi.n	8008e24 <_dtoa_r+0x28c>
 8008d90:	2a05      	cmp	r2, #5
 8008d92:	bfc4      	itt	gt
 8008d94:	3a04      	subgt	r2, #4
 8008d96:	9206      	strgt	r2, [sp, #24]
 8008d98:	9a06      	ldr	r2, [sp, #24]
 8008d9a:	f1a2 0202 	sub.w	r2, r2, #2
 8008d9e:	bfcc      	ite	gt
 8008da0:	2400      	movgt	r4, #0
 8008da2:	2401      	movle	r4, #1
 8008da4:	2a03      	cmp	r2, #3
 8008da6:	d848      	bhi.n	8008e3a <_dtoa_r+0x2a2>
 8008da8:	e8df f002 	tbb	[pc, r2]
 8008dac:	3a2c2e0b 	.word	0x3a2c2e0b
 8008db0:	9b04      	ldr	r3, [sp, #16]
 8008db2:	2200      	movs	r2, #0
 8008db4:	eba3 030b 	sub.w	r3, r3, fp
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbc:	f1cb 0300 	rsb	r3, fp, #0
 8008dc0:	e7e3      	b.n	8008d8a <_dtoa_r+0x1f2>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	9207      	str	r2, [sp, #28]
 8008dc6:	9a08      	ldr	r2, [sp, #32]
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	dc39      	bgt.n	8008e40 <_dtoa_r+0x2a8>
 8008dcc:	f04f 0a01 	mov.w	sl, #1
 8008dd0:	46d1      	mov	r9, sl
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	f8cd a020 	str.w	sl, [sp, #32]
 8008dd8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008dda:	2100      	movs	r1, #0
 8008ddc:	6079      	str	r1, [r7, #4]
 8008dde:	2004      	movs	r0, #4
 8008de0:	f100 0c14 	add.w	ip, r0, #20
 8008de4:	4594      	cmp	ip, r2
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	d92f      	bls.n	8008e4a <_dtoa_r+0x2b2>
 8008dea:	4630      	mov	r0, r6
 8008dec:	930d      	str	r3, [sp, #52]	; 0x34
 8008dee:	f000 fc4d 	bl	800968c <_Balloc>
 8008df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df4:	9001      	str	r0, [sp, #4]
 8008df6:	4602      	mov	r2, r0
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d149      	bne.n	8008e90 <_dtoa_r+0x2f8>
 8008dfc:	4b23      	ldr	r3, [pc, #140]	; (8008e8c <_dtoa_r+0x2f4>)
 8008dfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e02:	e6e1      	b.n	8008bc8 <_dtoa_r+0x30>
 8008e04:	2201      	movs	r2, #1
 8008e06:	e7dd      	b.n	8008dc4 <_dtoa_r+0x22c>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	9207      	str	r2, [sp, #28]
 8008e0c:	9a08      	ldr	r2, [sp, #32]
 8008e0e:	eb0b 0a02 	add.w	sl, fp, r2
 8008e12:	f10a 0901 	add.w	r9, sl, #1
 8008e16:	464a      	mov	r2, r9
 8008e18:	2a01      	cmp	r2, #1
 8008e1a:	bfb8      	it	lt
 8008e1c:	2201      	movlt	r2, #1
 8008e1e:	e7db      	b.n	8008dd8 <_dtoa_r+0x240>
 8008e20:	2201      	movs	r2, #1
 8008e22:	e7f2      	b.n	8008e0a <_dtoa_r+0x272>
 8008e24:	2401      	movs	r4, #1
 8008e26:	2200      	movs	r2, #0
 8008e28:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008e2c:	f04f 3aff 	mov.w	sl, #4294967295
 8008e30:	2100      	movs	r1, #0
 8008e32:	46d1      	mov	r9, sl
 8008e34:	2212      	movs	r2, #18
 8008e36:	9108      	str	r1, [sp, #32]
 8008e38:	e7ce      	b.n	8008dd8 <_dtoa_r+0x240>
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	9207      	str	r2, [sp, #28]
 8008e3e:	e7f5      	b.n	8008e2c <_dtoa_r+0x294>
 8008e40:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e44:	46d1      	mov	r9, sl
 8008e46:	4652      	mov	r2, sl
 8008e48:	e7c6      	b.n	8008dd8 <_dtoa_r+0x240>
 8008e4a:	3101      	adds	r1, #1
 8008e4c:	6079      	str	r1, [r7, #4]
 8008e4e:	0040      	lsls	r0, r0, #1
 8008e50:	e7c6      	b.n	8008de0 <_dtoa_r+0x248>
 8008e52:	bf00      	nop
 8008e54:	f3af 8000 	nop.w
 8008e58:	636f4361 	.word	0x636f4361
 8008e5c:	3fd287a7 	.word	0x3fd287a7
 8008e60:	8b60c8b3 	.word	0x8b60c8b3
 8008e64:	3fc68a28 	.word	0x3fc68a28
 8008e68:	509f79fb 	.word	0x509f79fb
 8008e6c:	3fd34413 	.word	0x3fd34413
 8008e70:	0800afbe 	.word	0x0800afbe
 8008e74:	0800afd5 	.word	0x0800afd5
 8008e78:	7ff00000 	.word	0x7ff00000
 8008e7c:	0800afba 	.word	0x0800afba
 8008e80:	0800afb1 	.word	0x0800afb1
 8008e84:	0800ae8d 	.word	0x0800ae8d
 8008e88:	0800b0c8 	.word	0x0800b0c8
 8008e8c:	0800b030 	.word	0x0800b030
 8008e90:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008e92:	9901      	ldr	r1, [sp, #4]
 8008e94:	6011      	str	r1, [r2, #0]
 8008e96:	f1b9 0f0e 	cmp.w	r9, #14
 8008e9a:	d86c      	bhi.n	8008f76 <_dtoa_r+0x3de>
 8008e9c:	2c00      	cmp	r4, #0
 8008e9e:	d06a      	beq.n	8008f76 <_dtoa_r+0x3de>
 8008ea0:	f1bb 0f00 	cmp.w	fp, #0
 8008ea4:	f340 80a0 	ble.w	8008fe8 <_dtoa_r+0x450>
 8008ea8:	49c1      	ldr	r1, [pc, #772]	; (80091b0 <_dtoa_r+0x618>)
 8008eaa:	f00b 020f 	and.w	r2, fp, #15
 8008eae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008eb2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008eb6:	ed92 7b00 	vldr	d7, [r2]
 8008eba:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008ebe:	f000 8087 	beq.w	8008fd0 <_dtoa_r+0x438>
 8008ec2:	4abc      	ldr	r2, [pc, #752]	; (80091b4 <_dtoa_r+0x61c>)
 8008ec4:	ed92 6b08 	vldr	d6, [r2, #32]
 8008ec8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008ecc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008ed0:	f001 010f 	and.w	r1, r1, #15
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	48b7      	ldr	r0, [pc, #732]	; (80091b4 <_dtoa_r+0x61c>)
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d17b      	bne.n	8008fd4 <_dtoa_r+0x43c>
 8008edc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008ee0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eea:	2900      	cmp	r1, #0
 8008eec:	f000 80a2 	beq.w	8009034 <_dtoa_r+0x49c>
 8008ef0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ef8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f00:	f140 8098 	bpl.w	8009034 <_dtoa_r+0x49c>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	f000 8094 	beq.w	8009034 <_dtoa_r+0x49c>
 8008f0c:	f1ba 0f00 	cmp.w	sl, #0
 8008f10:	dd2f      	ble.n	8008f72 <_dtoa_r+0x3da>
 8008f12:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008f16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f1e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f22:	3201      	adds	r2, #1
 8008f24:	4650      	mov	r0, sl
 8008f26:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f2a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008f2e:	ee07 2a90 	vmov	s15, r2
 8008f32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f36:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008f3a:	ee15 4a90 	vmov	r4, s11
 8008f3e:	ec52 1b15 	vmov	r1, r2, d5
 8008f42:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d177      	bne.n	800903a <_dtoa_r+0x4a2>
 8008f4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f52:	ec42 1b17 	vmov	d7, r1, r2
 8008f56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5e:	f300 8263 	bgt.w	8009428 <_dtoa_r+0x890>
 8008f62:	eeb1 7b47 	vneg.f64	d7, d7
 8008f66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6e:	f100 8258 	bmi.w	8009422 <_dtoa_r+0x88a>
 8008f72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	f2c0 811d 	blt.w	80091b8 <_dtoa_r+0x620>
 8008f7e:	f1bb 0f0e 	cmp.w	fp, #14
 8008f82:	f300 8119 	bgt.w	80091b8 <_dtoa_r+0x620>
 8008f86:	4b8a      	ldr	r3, [pc, #552]	; (80091b0 <_dtoa_r+0x618>)
 8008f88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f8c:	ed93 6b00 	vldr	d6, [r3]
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f280 80b7 	bge.w	8009106 <_dtoa_r+0x56e>
 8008f98:	f1b9 0f00 	cmp.w	r9, #0
 8008f9c:	f300 80b3 	bgt.w	8009106 <_dtoa_r+0x56e>
 8008fa0:	f040 823f 	bne.w	8009422 <_dtoa_r+0x88a>
 8008fa4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008fa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008fac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb8:	464c      	mov	r4, r9
 8008fba:	464f      	mov	r7, r9
 8008fbc:	f280 8215 	bge.w	80093ea <_dtoa_r+0x852>
 8008fc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008fc4:	2331      	movs	r3, #49	; 0x31
 8008fc6:	f808 3b01 	strb.w	r3, [r8], #1
 8008fca:	f10b 0b01 	add.w	fp, fp, #1
 8008fce:	e211      	b.n	80093f4 <_dtoa_r+0x85c>
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	e780      	b.n	8008ed6 <_dtoa_r+0x33e>
 8008fd4:	07cc      	lsls	r4, r1, #31
 8008fd6:	d504      	bpl.n	8008fe2 <_dtoa_r+0x44a>
 8008fd8:	ed90 6b00 	vldr	d6, [r0]
 8008fdc:	3201      	adds	r2, #1
 8008fde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fe2:	1049      	asrs	r1, r1, #1
 8008fe4:	3008      	adds	r0, #8
 8008fe6:	e777      	b.n	8008ed8 <_dtoa_r+0x340>
 8008fe8:	d022      	beq.n	8009030 <_dtoa_r+0x498>
 8008fea:	f1cb 0100 	rsb	r1, fp, #0
 8008fee:	4a70      	ldr	r2, [pc, #448]	; (80091b0 <_dtoa_r+0x618>)
 8008ff0:	f001 000f 	and.w	r0, r1, #15
 8008ff4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008ff8:	ed92 7b00 	vldr	d7, [r2]
 8008ffc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009000:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009004:	486b      	ldr	r0, [pc, #428]	; (80091b4 <_dtoa_r+0x61c>)
 8009006:	1109      	asrs	r1, r1, #4
 8009008:	2400      	movs	r4, #0
 800900a:	2202      	movs	r2, #2
 800900c:	b929      	cbnz	r1, 800901a <_dtoa_r+0x482>
 800900e:	2c00      	cmp	r4, #0
 8009010:	f43f af6a 	beq.w	8008ee8 <_dtoa_r+0x350>
 8009014:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009018:	e766      	b.n	8008ee8 <_dtoa_r+0x350>
 800901a:	07cf      	lsls	r7, r1, #31
 800901c:	d505      	bpl.n	800902a <_dtoa_r+0x492>
 800901e:	ed90 6b00 	vldr	d6, [r0]
 8009022:	3201      	adds	r2, #1
 8009024:	2401      	movs	r4, #1
 8009026:	ee27 7b06 	vmul.f64	d7, d7, d6
 800902a:	1049      	asrs	r1, r1, #1
 800902c:	3008      	adds	r0, #8
 800902e:	e7ed      	b.n	800900c <_dtoa_r+0x474>
 8009030:	2202      	movs	r2, #2
 8009032:	e759      	b.n	8008ee8 <_dtoa_r+0x350>
 8009034:	465f      	mov	r7, fp
 8009036:	4648      	mov	r0, r9
 8009038:	e775      	b.n	8008f26 <_dtoa_r+0x38e>
 800903a:	ec42 1b17 	vmov	d7, r1, r2
 800903e:	4a5c      	ldr	r2, [pc, #368]	; (80091b0 <_dtoa_r+0x618>)
 8009040:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009044:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009048:	9a01      	ldr	r2, [sp, #4]
 800904a:	1814      	adds	r4, r2, r0
 800904c:	9a07      	ldr	r2, [sp, #28]
 800904e:	b352      	cbz	r2, 80090a6 <_dtoa_r+0x50e>
 8009050:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009054:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009058:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800905c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009060:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009064:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009068:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800906c:	ee14 2a90 	vmov	r2, s9
 8009070:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009074:	3230      	adds	r2, #48	; 0x30
 8009076:	ee36 6b45 	vsub.f64	d6, d6, d5
 800907a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	f808 2b01 	strb.w	r2, [r8], #1
 8009086:	d439      	bmi.n	80090fc <_dtoa_r+0x564>
 8009088:	ee32 5b46 	vsub.f64	d5, d2, d6
 800908c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	d472      	bmi.n	800917c <_dtoa_r+0x5e4>
 8009096:	45a0      	cmp	r8, r4
 8009098:	f43f af6b 	beq.w	8008f72 <_dtoa_r+0x3da>
 800909c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80090a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80090a4:	e7e0      	b.n	8009068 <_dtoa_r+0x4d0>
 80090a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80090ae:	4621      	mov	r1, r4
 80090b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80090b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80090b8:	ee14 2a90 	vmov	r2, s9
 80090bc:	3230      	adds	r2, #48	; 0x30
 80090be:	f808 2b01 	strb.w	r2, [r8], #1
 80090c2:	45a0      	cmp	r8, r4
 80090c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80090c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80090cc:	d118      	bne.n	8009100 <_dtoa_r+0x568>
 80090ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80090d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80090d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	dc4d      	bgt.n	800917c <_dtoa_r+0x5e4>
 80090e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80090e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	f57f af41 	bpl.w	8008f72 <_dtoa_r+0x3da>
 80090f0:	4688      	mov	r8, r1
 80090f2:	3901      	subs	r1, #1
 80090f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80090f8:	2b30      	cmp	r3, #48	; 0x30
 80090fa:	d0f9      	beq.n	80090f0 <_dtoa_r+0x558>
 80090fc:	46bb      	mov	fp, r7
 80090fe:	e02a      	b.n	8009156 <_dtoa_r+0x5be>
 8009100:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009104:	e7d6      	b.n	80090b4 <_dtoa_r+0x51c>
 8009106:	ed9d 7b02 	vldr	d7, [sp, #8]
 800910a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800910e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009112:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009116:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800911a:	ee15 3a10 	vmov	r3, s10
 800911e:	3330      	adds	r3, #48	; 0x30
 8009120:	f808 3b01 	strb.w	r3, [r8], #1
 8009124:	9b01      	ldr	r3, [sp, #4]
 8009126:	eba8 0303 	sub.w	r3, r8, r3
 800912a:	4599      	cmp	r9, r3
 800912c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009130:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009134:	d133      	bne.n	800919e <_dtoa_r+0x606>
 8009136:	ee37 7b07 	vadd.f64	d7, d7, d7
 800913a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800913e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009142:	dc1a      	bgt.n	800917a <_dtoa_r+0x5e2>
 8009144:	eeb4 7b46 	vcmp.f64	d7, d6
 8009148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914c:	d103      	bne.n	8009156 <_dtoa_r+0x5be>
 800914e:	ee15 3a10 	vmov	r3, s10
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d411      	bmi.n	800917a <_dtoa_r+0x5e2>
 8009156:	4629      	mov	r1, r5
 8009158:	4630      	mov	r0, r6
 800915a:	f000 fad7 	bl	800970c <_Bfree>
 800915e:	2300      	movs	r3, #0
 8009160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009162:	f888 3000 	strb.w	r3, [r8]
 8009166:	f10b 0301 	add.w	r3, fp, #1
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800916e:	2b00      	cmp	r3, #0
 8009170:	f43f ad61 	beq.w	8008c36 <_dtoa_r+0x9e>
 8009174:	f8c3 8000 	str.w	r8, [r3]
 8009178:	e55d      	b.n	8008c36 <_dtoa_r+0x9e>
 800917a:	465f      	mov	r7, fp
 800917c:	4643      	mov	r3, r8
 800917e:	4698      	mov	r8, r3
 8009180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009184:	2a39      	cmp	r2, #57	; 0x39
 8009186:	d106      	bne.n	8009196 <_dtoa_r+0x5fe>
 8009188:	9a01      	ldr	r2, [sp, #4]
 800918a:	429a      	cmp	r2, r3
 800918c:	d1f7      	bne.n	800917e <_dtoa_r+0x5e6>
 800918e:	9901      	ldr	r1, [sp, #4]
 8009190:	2230      	movs	r2, #48	; 0x30
 8009192:	3701      	adds	r7, #1
 8009194:	700a      	strb	r2, [r1, #0]
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	3201      	adds	r2, #1
 800919a:	701a      	strb	r2, [r3, #0]
 800919c:	e7ae      	b.n	80090fc <_dtoa_r+0x564>
 800919e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80091a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091aa:	d1b2      	bne.n	8009112 <_dtoa_r+0x57a>
 80091ac:	e7d3      	b.n	8009156 <_dtoa_r+0x5be>
 80091ae:	bf00      	nop
 80091b0:	0800b0c8 	.word	0x0800b0c8
 80091b4:	0800b0a0 	.word	0x0800b0a0
 80091b8:	9907      	ldr	r1, [sp, #28]
 80091ba:	2900      	cmp	r1, #0
 80091bc:	f000 80d0 	beq.w	8009360 <_dtoa_r+0x7c8>
 80091c0:	9906      	ldr	r1, [sp, #24]
 80091c2:	2901      	cmp	r1, #1
 80091c4:	f300 80b4 	bgt.w	8009330 <_dtoa_r+0x798>
 80091c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091ca:	2900      	cmp	r1, #0
 80091cc:	f000 80ac 	beq.w	8009328 <_dtoa_r+0x790>
 80091d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80091d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80091d8:	461c      	mov	r4, r3
 80091da:	930a      	str	r3, [sp, #40]	; 0x28
 80091dc:	9b04      	ldr	r3, [sp, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	2101      	movs	r1, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	4630      	mov	r0, r6
 80091ea:	9305      	str	r3, [sp, #20]
 80091ec:	f000 fb46 	bl	800987c <__i2b>
 80091f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f2:	4607      	mov	r7, r0
 80091f4:	f1b8 0f00 	cmp.w	r8, #0
 80091f8:	dd0d      	ble.n	8009216 <_dtoa_r+0x67e>
 80091fa:	9a05      	ldr	r2, [sp, #20]
 80091fc:	2a00      	cmp	r2, #0
 80091fe:	dd0a      	ble.n	8009216 <_dtoa_r+0x67e>
 8009200:	4542      	cmp	r2, r8
 8009202:	9904      	ldr	r1, [sp, #16]
 8009204:	bfa8      	it	ge
 8009206:	4642      	movge	r2, r8
 8009208:	1a89      	subs	r1, r1, r2
 800920a:	9104      	str	r1, [sp, #16]
 800920c:	9905      	ldr	r1, [sp, #20]
 800920e:	eba8 0802 	sub.w	r8, r8, r2
 8009212:	1a8a      	subs	r2, r1, r2
 8009214:	9205      	str	r2, [sp, #20]
 8009216:	b303      	cbz	r3, 800925a <_dtoa_r+0x6c2>
 8009218:	9a07      	ldr	r2, [sp, #28]
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 80a5 	beq.w	800936a <_dtoa_r+0x7d2>
 8009220:	2c00      	cmp	r4, #0
 8009222:	dd13      	ble.n	800924c <_dtoa_r+0x6b4>
 8009224:	4639      	mov	r1, r7
 8009226:	4622      	mov	r2, r4
 8009228:	4630      	mov	r0, r6
 800922a:	930d      	str	r3, [sp, #52]	; 0x34
 800922c:	f000 fbe6 	bl	80099fc <__pow5mult>
 8009230:	462a      	mov	r2, r5
 8009232:	4601      	mov	r1, r0
 8009234:	4607      	mov	r7, r0
 8009236:	4630      	mov	r0, r6
 8009238:	f000 fb36 	bl	80098a8 <__multiply>
 800923c:	4629      	mov	r1, r5
 800923e:	900a      	str	r0, [sp, #40]	; 0x28
 8009240:	4630      	mov	r0, r6
 8009242:	f000 fa63 	bl	800970c <_Bfree>
 8009246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924a:	4615      	mov	r5, r2
 800924c:	1b1a      	subs	r2, r3, r4
 800924e:	d004      	beq.n	800925a <_dtoa_r+0x6c2>
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f000 fbd2 	bl	80099fc <__pow5mult>
 8009258:	4605      	mov	r5, r0
 800925a:	2101      	movs	r1, #1
 800925c:	4630      	mov	r0, r6
 800925e:	f000 fb0d 	bl	800987c <__i2b>
 8009262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	4604      	mov	r4, r0
 8009268:	f340 8081 	ble.w	800936e <_dtoa_r+0x7d6>
 800926c:	461a      	mov	r2, r3
 800926e:	4601      	mov	r1, r0
 8009270:	4630      	mov	r0, r6
 8009272:	f000 fbc3 	bl	80099fc <__pow5mult>
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	2b01      	cmp	r3, #1
 800927a:	4604      	mov	r4, r0
 800927c:	dd7a      	ble.n	8009374 <_dtoa_r+0x7dc>
 800927e:	2300      	movs	r3, #0
 8009280:	930a      	str	r3, [sp, #40]	; 0x28
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009288:	6910      	ldr	r0, [r2, #16]
 800928a:	f000 faa7 	bl	80097dc <__hi0bits>
 800928e:	f1c0 0020 	rsb	r0, r0, #32
 8009292:	9b05      	ldr	r3, [sp, #20]
 8009294:	4418      	add	r0, r3
 8009296:	f010 001f 	ands.w	r0, r0, #31
 800929a:	f000 808c 	beq.w	80093b6 <_dtoa_r+0x81e>
 800929e:	f1c0 0220 	rsb	r2, r0, #32
 80092a2:	2a04      	cmp	r2, #4
 80092a4:	f340 8085 	ble.w	80093b2 <_dtoa_r+0x81a>
 80092a8:	f1c0 001c 	rsb	r0, r0, #28
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	4403      	add	r3, r0
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	4403      	add	r3, r0
 80092b6:	4480      	add	r8, r0
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dd05      	ble.n	80092cc <_dtoa_r+0x734>
 80092c0:	4629      	mov	r1, r5
 80092c2:	461a      	mov	r2, r3
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 fbf3 	bl	8009ab0 <__lshift>
 80092ca:	4605      	mov	r5, r0
 80092cc:	9b05      	ldr	r3, [sp, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dd05      	ble.n	80092de <_dtoa_r+0x746>
 80092d2:	4621      	mov	r1, r4
 80092d4:	461a      	mov	r2, r3
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 fbea 	bl	8009ab0 <__lshift>
 80092dc:	4604      	mov	r4, r0
 80092de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d06a      	beq.n	80093ba <_dtoa_r+0x822>
 80092e4:	4621      	mov	r1, r4
 80092e6:	4628      	mov	r0, r5
 80092e8:	f000 fc52 	bl	8009b90 <__mcmp>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	da64      	bge.n	80093ba <_dtoa_r+0x822>
 80092f0:	2300      	movs	r3, #0
 80092f2:	4629      	mov	r1, r5
 80092f4:	220a      	movs	r2, #10
 80092f6:	4630      	mov	r0, r6
 80092f8:	f000 fa2a 	bl	8009750 <__multadd>
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009302:	4605      	mov	r5, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8191 	beq.w	800962c <_dtoa_r+0xa94>
 800930a:	4639      	mov	r1, r7
 800930c:	2300      	movs	r3, #0
 800930e:	220a      	movs	r2, #10
 8009310:	4630      	mov	r0, r6
 8009312:	f000 fa1d 	bl	8009750 <__multadd>
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	4607      	mov	r7, r0
 800931c:	f300 808d 	bgt.w	800943a <_dtoa_r+0x8a2>
 8009320:	9b06      	ldr	r3, [sp, #24]
 8009322:	2b02      	cmp	r3, #2
 8009324:	dc50      	bgt.n	80093c8 <_dtoa_r+0x830>
 8009326:	e088      	b.n	800943a <_dtoa_r+0x8a2>
 8009328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800932a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800932e:	e751      	b.n	80091d4 <_dtoa_r+0x63c>
 8009330:	f109 34ff 	add.w	r4, r9, #4294967295
 8009334:	42a3      	cmp	r3, r4
 8009336:	bfbf      	itttt	lt
 8009338:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800933a:	1ae3      	sublt	r3, r4, r3
 800933c:	18d2      	addlt	r2, r2, r3
 800933e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009340:	bfb6      	itet	lt
 8009342:	4623      	movlt	r3, r4
 8009344:	1b1c      	subge	r4, r3, r4
 8009346:	2400      	movlt	r4, #0
 8009348:	f1b9 0f00 	cmp.w	r9, #0
 800934c:	bfb5      	itete	lt
 800934e:	9a04      	ldrlt	r2, [sp, #16]
 8009350:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009354:	eba2 0809 	sublt.w	r8, r2, r9
 8009358:	464a      	movge	r2, r9
 800935a:	bfb8      	it	lt
 800935c:	2200      	movlt	r2, #0
 800935e:	e73c      	b.n	80091da <_dtoa_r+0x642>
 8009360:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009364:	9f07      	ldr	r7, [sp, #28]
 8009366:	461c      	mov	r4, r3
 8009368:	e744      	b.n	80091f4 <_dtoa_r+0x65c>
 800936a:	461a      	mov	r2, r3
 800936c:	e770      	b.n	8009250 <_dtoa_r+0x6b8>
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	2b01      	cmp	r3, #1
 8009372:	dc18      	bgt.n	80093a6 <_dtoa_r+0x80e>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	b9b3      	cbnz	r3, 80093a6 <_dtoa_r+0x80e>
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800937e:	b9a2      	cbnz	r2, 80093aa <_dtoa_r+0x812>
 8009380:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009384:	0d12      	lsrs	r2, r2, #20
 8009386:	0512      	lsls	r2, r2, #20
 8009388:	b18a      	cbz	r2, 80093ae <_dtoa_r+0x816>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	3301      	adds	r3, #1
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	3301      	adds	r3, #1
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	2301      	movs	r3, #1
 8009398:	930a      	str	r3, [sp, #40]	; 0x28
 800939a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939c:	2b00      	cmp	r3, #0
 800939e:	f47f af70 	bne.w	8009282 <_dtoa_r+0x6ea>
 80093a2:	2001      	movs	r0, #1
 80093a4:	e775      	b.n	8009292 <_dtoa_r+0x6fa>
 80093a6:	2300      	movs	r3, #0
 80093a8:	e7f6      	b.n	8009398 <_dtoa_r+0x800>
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	e7f4      	b.n	8009398 <_dtoa_r+0x800>
 80093ae:	920a      	str	r2, [sp, #40]	; 0x28
 80093b0:	e7f3      	b.n	800939a <_dtoa_r+0x802>
 80093b2:	d082      	beq.n	80092ba <_dtoa_r+0x722>
 80093b4:	4610      	mov	r0, r2
 80093b6:	301c      	adds	r0, #28
 80093b8:	e778      	b.n	80092ac <_dtoa_r+0x714>
 80093ba:	f1b9 0f00 	cmp.w	r9, #0
 80093be:	dc37      	bgt.n	8009430 <_dtoa_r+0x898>
 80093c0:	9b06      	ldr	r3, [sp, #24]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	dd34      	ble.n	8009430 <_dtoa_r+0x898>
 80093c6:	46ca      	mov	sl, r9
 80093c8:	f1ba 0f00 	cmp.w	sl, #0
 80093cc:	d10d      	bne.n	80093ea <_dtoa_r+0x852>
 80093ce:	4621      	mov	r1, r4
 80093d0:	4653      	mov	r3, sl
 80093d2:	2205      	movs	r2, #5
 80093d4:	4630      	mov	r0, r6
 80093d6:	f000 f9bb 	bl	8009750 <__multadd>
 80093da:	4601      	mov	r1, r0
 80093dc:	4604      	mov	r4, r0
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 fbd6 	bl	8009b90 <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f73f adeb 	bgt.w	8008fc0 <_dtoa_r+0x428>
 80093ea:	9b08      	ldr	r3, [sp, #32]
 80093ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093f0:	ea6f 0b03 	mvn.w	fp, r3
 80093f4:	f04f 0900 	mov.w	r9, #0
 80093f8:	4621      	mov	r1, r4
 80093fa:	4630      	mov	r0, r6
 80093fc:	f000 f986 	bl	800970c <_Bfree>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f43f aea8 	beq.w	8009156 <_dtoa_r+0x5be>
 8009406:	f1b9 0f00 	cmp.w	r9, #0
 800940a:	d005      	beq.n	8009418 <_dtoa_r+0x880>
 800940c:	45b9      	cmp	r9, r7
 800940e:	d003      	beq.n	8009418 <_dtoa_r+0x880>
 8009410:	4649      	mov	r1, r9
 8009412:	4630      	mov	r0, r6
 8009414:	f000 f97a 	bl	800970c <_Bfree>
 8009418:	4639      	mov	r1, r7
 800941a:	4630      	mov	r0, r6
 800941c:	f000 f976 	bl	800970c <_Bfree>
 8009420:	e699      	b.n	8009156 <_dtoa_r+0x5be>
 8009422:	2400      	movs	r4, #0
 8009424:	4627      	mov	r7, r4
 8009426:	e7e0      	b.n	80093ea <_dtoa_r+0x852>
 8009428:	46bb      	mov	fp, r7
 800942a:	4604      	mov	r4, r0
 800942c:	4607      	mov	r7, r0
 800942e:	e5c7      	b.n	8008fc0 <_dtoa_r+0x428>
 8009430:	9b07      	ldr	r3, [sp, #28]
 8009432:	46ca      	mov	sl, r9
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 8100 	beq.w	800963a <_dtoa_r+0xaa2>
 800943a:	f1b8 0f00 	cmp.w	r8, #0
 800943e:	dd05      	ble.n	800944c <_dtoa_r+0x8b4>
 8009440:	4639      	mov	r1, r7
 8009442:	4642      	mov	r2, r8
 8009444:	4630      	mov	r0, r6
 8009446:	f000 fb33 	bl	8009ab0 <__lshift>
 800944a:	4607      	mov	r7, r0
 800944c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d05d      	beq.n	800950e <_dtoa_r+0x976>
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4630      	mov	r0, r6
 8009456:	f000 f919 	bl	800968c <_Balloc>
 800945a:	4680      	mov	r8, r0
 800945c:	b928      	cbnz	r0, 800946a <_dtoa_r+0x8d2>
 800945e:	4b82      	ldr	r3, [pc, #520]	; (8009668 <_dtoa_r+0xad0>)
 8009460:	4602      	mov	r2, r0
 8009462:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009466:	f7ff bbaf 	b.w	8008bc8 <_dtoa_r+0x30>
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	3202      	adds	r2, #2
 800946e:	0092      	lsls	r2, r2, #2
 8009470:	f107 010c 	add.w	r1, r7, #12
 8009474:	300c      	adds	r0, #12
 8009476:	f7fe fded 	bl	8008054 <memcpy>
 800947a:	2201      	movs	r2, #1
 800947c:	4641      	mov	r1, r8
 800947e:	4630      	mov	r0, r6
 8009480:	f000 fb16 	bl	8009ab0 <__lshift>
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	3301      	adds	r3, #1
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	9b01      	ldr	r3, [sp, #4]
 800948c:	4453      	add	r3, sl
 800948e:	9308      	str	r3, [sp, #32]
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	46b9      	mov	r9, r7
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	4607      	mov	r7, r0
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	4621      	mov	r1, r4
 80094a0:	3b01      	subs	r3, #1
 80094a2:	4628      	mov	r0, r5
 80094a4:	9302      	str	r3, [sp, #8]
 80094a6:	f7ff fae9 	bl	8008a7c <quorem>
 80094aa:	4603      	mov	r3, r0
 80094ac:	3330      	adds	r3, #48	; 0x30
 80094ae:	9005      	str	r0, [sp, #20]
 80094b0:	4649      	mov	r1, r9
 80094b2:	4628      	mov	r0, r5
 80094b4:	9309      	str	r3, [sp, #36]	; 0x24
 80094b6:	f000 fb6b 	bl	8009b90 <__mcmp>
 80094ba:	463a      	mov	r2, r7
 80094bc:	4682      	mov	sl, r0
 80094be:	4621      	mov	r1, r4
 80094c0:	4630      	mov	r0, r6
 80094c2:	f000 fb81 	bl	8009bc8 <__mdiff>
 80094c6:	68c2      	ldr	r2, [r0, #12]
 80094c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ca:	4680      	mov	r8, r0
 80094cc:	bb0a      	cbnz	r2, 8009512 <_dtoa_r+0x97a>
 80094ce:	4601      	mov	r1, r0
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 fb5d 	bl	8009b90 <__mcmp>
 80094d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d8:	4602      	mov	r2, r0
 80094da:	4641      	mov	r1, r8
 80094dc:	4630      	mov	r0, r6
 80094de:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80094e2:	f000 f913 	bl	800970c <_Bfree>
 80094e6:	9b06      	ldr	r3, [sp, #24]
 80094e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80094ee:	ea43 0102 	orr.w	r1, r3, r2
 80094f2:	9b07      	ldr	r3, [sp, #28]
 80094f4:	430b      	orrs	r3, r1
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	d10d      	bne.n	8009516 <_dtoa_r+0x97e>
 80094fa:	2b39      	cmp	r3, #57	; 0x39
 80094fc:	d029      	beq.n	8009552 <_dtoa_r+0x9ba>
 80094fe:	f1ba 0f00 	cmp.w	sl, #0
 8009502:	dd01      	ble.n	8009508 <_dtoa_r+0x970>
 8009504:	9b05      	ldr	r3, [sp, #20]
 8009506:	3331      	adds	r3, #49	; 0x31
 8009508:	9a02      	ldr	r2, [sp, #8]
 800950a:	7013      	strb	r3, [r2, #0]
 800950c:	e774      	b.n	80093f8 <_dtoa_r+0x860>
 800950e:	4638      	mov	r0, r7
 8009510:	e7b8      	b.n	8009484 <_dtoa_r+0x8ec>
 8009512:	2201      	movs	r2, #1
 8009514:	e7e1      	b.n	80094da <_dtoa_r+0x942>
 8009516:	f1ba 0f00 	cmp.w	sl, #0
 800951a:	db06      	blt.n	800952a <_dtoa_r+0x992>
 800951c:	9906      	ldr	r1, [sp, #24]
 800951e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009522:	9907      	ldr	r1, [sp, #28]
 8009524:	ea5a 0101 	orrs.w	r1, sl, r1
 8009528:	d120      	bne.n	800956c <_dtoa_r+0x9d4>
 800952a:	2a00      	cmp	r2, #0
 800952c:	ddec      	ble.n	8009508 <_dtoa_r+0x970>
 800952e:	4629      	mov	r1, r5
 8009530:	2201      	movs	r2, #1
 8009532:	4630      	mov	r0, r6
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	f000 fabb 	bl	8009ab0 <__lshift>
 800953a:	4621      	mov	r1, r4
 800953c:	4605      	mov	r5, r0
 800953e:	f000 fb27 	bl	8009b90 <__mcmp>
 8009542:	2800      	cmp	r0, #0
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	dc02      	bgt.n	800954e <_dtoa_r+0x9b6>
 8009548:	d1de      	bne.n	8009508 <_dtoa_r+0x970>
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d5dc      	bpl.n	8009508 <_dtoa_r+0x970>
 800954e:	2b39      	cmp	r3, #57	; 0x39
 8009550:	d1d8      	bne.n	8009504 <_dtoa_r+0x96c>
 8009552:	9a02      	ldr	r2, [sp, #8]
 8009554:	2339      	movs	r3, #57	; 0x39
 8009556:	7013      	strb	r3, [r2, #0]
 8009558:	4643      	mov	r3, r8
 800955a:	4698      	mov	r8, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009562:	2a39      	cmp	r2, #57	; 0x39
 8009564:	d051      	beq.n	800960a <_dtoa_r+0xa72>
 8009566:	3201      	adds	r2, #1
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	e745      	b.n	80093f8 <_dtoa_r+0x860>
 800956c:	2a00      	cmp	r2, #0
 800956e:	dd03      	ble.n	8009578 <_dtoa_r+0x9e0>
 8009570:	2b39      	cmp	r3, #57	; 0x39
 8009572:	d0ee      	beq.n	8009552 <_dtoa_r+0x9ba>
 8009574:	3301      	adds	r3, #1
 8009576:	e7c7      	b.n	8009508 <_dtoa_r+0x970>
 8009578:	9a04      	ldr	r2, [sp, #16]
 800957a:	9908      	ldr	r1, [sp, #32]
 800957c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009580:	428a      	cmp	r2, r1
 8009582:	d02b      	beq.n	80095dc <_dtoa_r+0xa44>
 8009584:	4629      	mov	r1, r5
 8009586:	2300      	movs	r3, #0
 8009588:	220a      	movs	r2, #10
 800958a:	4630      	mov	r0, r6
 800958c:	f000 f8e0 	bl	8009750 <__multadd>
 8009590:	45b9      	cmp	r9, r7
 8009592:	4605      	mov	r5, r0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	f04f 020a 	mov.w	r2, #10
 800959c:	4649      	mov	r1, r9
 800959e:	4630      	mov	r0, r6
 80095a0:	d107      	bne.n	80095b2 <_dtoa_r+0xa1a>
 80095a2:	f000 f8d5 	bl	8009750 <__multadd>
 80095a6:	4681      	mov	r9, r0
 80095a8:	4607      	mov	r7, r0
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	e774      	b.n	800949c <_dtoa_r+0x904>
 80095b2:	f000 f8cd 	bl	8009750 <__multadd>
 80095b6:	4639      	mov	r1, r7
 80095b8:	4681      	mov	r9, r0
 80095ba:	2300      	movs	r3, #0
 80095bc:	220a      	movs	r2, #10
 80095be:	4630      	mov	r0, r6
 80095c0:	f000 f8c6 	bl	8009750 <__multadd>
 80095c4:	4607      	mov	r7, r0
 80095c6:	e7f0      	b.n	80095aa <_dtoa_r+0xa12>
 80095c8:	f1ba 0f00 	cmp.w	sl, #0
 80095cc:	9a01      	ldr	r2, [sp, #4]
 80095ce:	bfcc      	ite	gt
 80095d0:	46d0      	movgt	r8, sl
 80095d2:	f04f 0801 	movle.w	r8, #1
 80095d6:	4490      	add	r8, r2
 80095d8:	f04f 0900 	mov.w	r9, #0
 80095dc:	4629      	mov	r1, r5
 80095de:	2201      	movs	r2, #1
 80095e0:	4630      	mov	r0, r6
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	f000 fa64 	bl	8009ab0 <__lshift>
 80095e8:	4621      	mov	r1, r4
 80095ea:	4605      	mov	r5, r0
 80095ec:	f000 fad0 	bl	8009b90 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dcb1      	bgt.n	8009558 <_dtoa_r+0x9c0>
 80095f4:	d102      	bne.n	80095fc <_dtoa_r+0xa64>
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	07db      	lsls	r3, r3, #31
 80095fa:	d4ad      	bmi.n	8009558 <_dtoa_r+0x9c0>
 80095fc:	4643      	mov	r3, r8
 80095fe:	4698      	mov	r8, r3
 8009600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009604:	2a30      	cmp	r2, #48	; 0x30
 8009606:	d0fa      	beq.n	80095fe <_dtoa_r+0xa66>
 8009608:	e6f6      	b.n	80093f8 <_dtoa_r+0x860>
 800960a:	9a01      	ldr	r2, [sp, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d1a4      	bne.n	800955a <_dtoa_r+0x9c2>
 8009610:	f10b 0b01 	add.w	fp, fp, #1
 8009614:	2331      	movs	r3, #49	; 0x31
 8009616:	e778      	b.n	800950a <_dtoa_r+0x972>
 8009618:	4b14      	ldr	r3, [pc, #80]	; (800966c <_dtoa_r+0xad4>)
 800961a:	f7ff bb27 	b.w	8008c6c <_dtoa_r+0xd4>
 800961e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009620:	2b00      	cmp	r3, #0
 8009622:	f47f ab03 	bne.w	8008c2c <_dtoa_r+0x94>
 8009626:	4b12      	ldr	r3, [pc, #72]	; (8009670 <_dtoa_r+0xad8>)
 8009628:	f7ff bb20 	b.w	8008c6c <_dtoa_r+0xd4>
 800962c:	f1ba 0f00 	cmp.w	sl, #0
 8009630:	dc03      	bgt.n	800963a <_dtoa_r+0xaa2>
 8009632:	9b06      	ldr	r3, [sp, #24]
 8009634:	2b02      	cmp	r3, #2
 8009636:	f73f aec7 	bgt.w	80093c8 <_dtoa_r+0x830>
 800963a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800963e:	4621      	mov	r1, r4
 8009640:	4628      	mov	r0, r5
 8009642:	f7ff fa1b 	bl	8008a7c <quorem>
 8009646:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800964a:	f808 3b01 	strb.w	r3, [r8], #1
 800964e:	9a01      	ldr	r2, [sp, #4]
 8009650:	eba8 0202 	sub.w	r2, r8, r2
 8009654:	4592      	cmp	sl, r2
 8009656:	ddb7      	ble.n	80095c8 <_dtoa_r+0xa30>
 8009658:	4629      	mov	r1, r5
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4630      	mov	r0, r6
 8009660:	f000 f876 	bl	8009750 <__multadd>
 8009664:	4605      	mov	r5, r0
 8009666:	e7ea      	b.n	800963e <_dtoa_r+0xaa6>
 8009668:	0800b030 	.word	0x0800b030
 800966c:	0800ae8c 	.word	0x0800ae8c
 8009670:	0800afb1 	.word	0x0800afb1

08009674 <_localeconv_r>:
 8009674:	4800      	ldr	r0, [pc, #0]	; (8009678 <_localeconv_r+0x4>)
 8009676:	4770      	bx	lr
 8009678:	2000019c 	.word	0x2000019c

0800967c <malloc>:
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <malloc+0xc>)
 800967e:	4601      	mov	r1, r0
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	f000 bc09 	b.w	8009e98 <_malloc_r>
 8009686:	bf00      	nop
 8009688:	20000048 	.word	0x20000048

0800968c <_Balloc>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	b976      	cbnz	r6, 80096b4 <_Balloc+0x28>
 8009696:	2010      	movs	r0, #16
 8009698:	f7ff fff0 	bl	800967c <malloc>
 800969c:	4602      	mov	r2, r0
 800969e:	6260      	str	r0, [r4, #36]	; 0x24
 80096a0:	b920      	cbnz	r0, 80096ac <_Balloc+0x20>
 80096a2:	4b18      	ldr	r3, [pc, #96]	; (8009704 <_Balloc+0x78>)
 80096a4:	4818      	ldr	r0, [pc, #96]	; (8009708 <_Balloc+0x7c>)
 80096a6:	2166      	movs	r1, #102	; 0x66
 80096a8:	f000 fdd6 	bl	800a258 <__assert_func>
 80096ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096b0:	6006      	str	r6, [r0, #0]
 80096b2:	60c6      	str	r6, [r0, #12]
 80096b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096b6:	68f3      	ldr	r3, [r6, #12]
 80096b8:	b183      	cbz	r3, 80096dc <_Balloc+0x50>
 80096ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096c2:	b9b8      	cbnz	r0, 80096f4 <_Balloc+0x68>
 80096c4:	2101      	movs	r1, #1
 80096c6:	fa01 f605 	lsl.w	r6, r1, r5
 80096ca:	1d72      	adds	r2, r6, #5
 80096cc:	0092      	lsls	r2, r2, #2
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fb60 	bl	8009d94 <_calloc_r>
 80096d4:	b160      	cbz	r0, 80096f0 <_Balloc+0x64>
 80096d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096da:	e00e      	b.n	80096fa <_Balloc+0x6e>
 80096dc:	2221      	movs	r2, #33	; 0x21
 80096de:	2104      	movs	r1, #4
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fb57 	bl	8009d94 <_calloc_r>
 80096e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e8:	60f0      	str	r0, [r6, #12]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e4      	bne.n	80096ba <_Balloc+0x2e>
 80096f0:	2000      	movs	r0, #0
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	6802      	ldr	r2, [r0, #0]
 80096f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096fa:	2300      	movs	r3, #0
 80096fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009700:	e7f7      	b.n	80096f2 <_Balloc+0x66>
 8009702:	bf00      	nop
 8009704:	0800afbe 	.word	0x0800afbe
 8009708:	0800b041 	.word	0x0800b041

0800970c <_Bfree>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009710:	4605      	mov	r5, r0
 8009712:	460c      	mov	r4, r1
 8009714:	b976      	cbnz	r6, 8009734 <_Bfree+0x28>
 8009716:	2010      	movs	r0, #16
 8009718:	f7ff ffb0 	bl	800967c <malloc>
 800971c:	4602      	mov	r2, r0
 800971e:	6268      	str	r0, [r5, #36]	; 0x24
 8009720:	b920      	cbnz	r0, 800972c <_Bfree+0x20>
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <_Bfree+0x3c>)
 8009724:	4809      	ldr	r0, [pc, #36]	; (800974c <_Bfree+0x40>)
 8009726:	218a      	movs	r1, #138	; 0x8a
 8009728:	f000 fd96 	bl	800a258 <__assert_func>
 800972c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009730:	6006      	str	r6, [r0, #0]
 8009732:	60c6      	str	r6, [r0, #12]
 8009734:	b13c      	cbz	r4, 8009746 <_Bfree+0x3a>
 8009736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009738:	6862      	ldr	r2, [r4, #4]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009740:	6021      	str	r1, [r4, #0]
 8009742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	0800afbe 	.word	0x0800afbe
 800974c:	0800b041 	.word	0x0800b041

08009750 <__multadd>:
 8009750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009754:	690d      	ldr	r5, [r1, #16]
 8009756:	4607      	mov	r7, r0
 8009758:	460c      	mov	r4, r1
 800975a:	461e      	mov	r6, r3
 800975c:	f101 0c14 	add.w	ip, r1, #20
 8009760:	2000      	movs	r0, #0
 8009762:	f8dc 3000 	ldr.w	r3, [ip]
 8009766:	b299      	uxth	r1, r3
 8009768:	fb02 6101 	mla	r1, r2, r1, r6
 800976c:	0c1e      	lsrs	r6, r3, #16
 800976e:	0c0b      	lsrs	r3, r1, #16
 8009770:	fb02 3306 	mla	r3, r2, r6, r3
 8009774:	b289      	uxth	r1, r1
 8009776:	3001      	adds	r0, #1
 8009778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800977c:	4285      	cmp	r5, r0
 800977e:	f84c 1b04 	str.w	r1, [ip], #4
 8009782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009786:	dcec      	bgt.n	8009762 <__multadd+0x12>
 8009788:	b30e      	cbz	r6, 80097ce <__multadd+0x7e>
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	42ab      	cmp	r3, r5
 800978e:	dc19      	bgt.n	80097c4 <__multadd+0x74>
 8009790:	6861      	ldr	r1, [r4, #4]
 8009792:	4638      	mov	r0, r7
 8009794:	3101      	adds	r1, #1
 8009796:	f7ff ff79 	bl	800968c <_Balloc>
 800979a:	4680      	mov	r8, r0
 800979c:	b928      	cbnz	r0, 80097aa <__multadd+0x5a>
 800979e:	4602      	mov	r2, r0
 80097a0:	4b0c      	ldr	r3, [pc, #48]	; (80097d4 <__multadd+0x84>)
 80097a2:	480d      	ldr	r0, [pc, #52]	; (80097d8 <__multadd+0x88>)
 80097a4:	21b5      	movs	r1, #181	; 0xb5
 80097a6:	f000 fd57 	bl	800a258 <__assert_func>
 80097aa:	6922      	ldr	r2, [r4, #16]
 80097ac:	3202      	adds	r2, #2
 80097ae:	f104 010c 	add.w	r1, r4, #12
 80097b2:	0092      	lsls	r2, r2, #2
 80097b4:	300c      	adds	r0, #12
 80097b6:	f7fe fc4d 	bl	8008054 <memcpy>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff ffa5 	bl	800970c <_Bfree>
 80097c2:	4644      	mov	r4, r8
 80097c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097c8:	3501      	adds	r5, #1
 80097ca:	615e      	str	r6, [r3, #20]
 80097cc:	6125      	str	r5, [r4, #16]
 80097ce:	4620      	mov	r0, r4
 80097d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d4:	0800b030 	.word	0x0800b030
 80097d8:	0800b041 	.word	0x0800b041

080097dc <__hi0bits>:
 80097dc:	0c03      	lsrs	r3, r0, #16
 80097de:	041b      	lsls	r3, r3, #16
 80097e0:	b9d3      	cbnz	r3, 8009818 <__hi0bits+0x3c>
 80097e2:	0400      	lsls	r0, r0, #16
 80097e4:	2310      	movs	r3, #16
 80097e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097ea:	bf04      	itt	eq
 80097ec:	0200      	lsleq	r0, r0, #8
 80097ee:	3308      	addeq	r3, #8
 80097f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097f4:	bf04      	itt	eq
 80097f6:	0100      	lsleq	r0, r0, #4
 80097f8:	3304      	addeq	r3, #4
 80097fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097fe:	bf04      	itt	eq
 8009800:	0080      	lsleq	r0, r0, #2
 8009802:	3302      	addeq	r3, #2
 8009804:	2800      	cmp	r0, #0
 8009806:	db05      	blt.n	8009814 <__hi0bits+0x38>
 8009808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800980c:	f103 0301 	add.w	r3, r3, #1
 8009810:	bf08      	it	eq
 8009812:	2320      	moveq	r3, #32
 8009814:	4618      	mov	r0, r3
 8009816:	4770      	bx	lr
 8009818:	2300      	movs	r3, #0
 800981a:	e7e4      	b.n	80097e6 <__hi0bits+0xa>

0800981c <__lo0bits>:
 800981c:	6803      	ldr	r3, [r0, #0]
 800981e:	f013 0207 	ands.w	r2, r3, #7
 8009822:	4601      	mov	r1, r0
 8009824:	d00b      	beq.n	800983e <__lo0bits+0x22>
 8009826:	07da      	lsls	r2, r3, #31
 8009828:	d423      	bmi.n	8009872 <__lo0bits+0x56>
 800982a:	0798      	lsls	r0, r3, #30
 800982c:	bf49      	itett	mi
 800982e:	085b      	lsrmi	r3, r3, #1
 8009830:	089b      	lsrpl	r3, r3, #2
 8009832:	2001      	movmi	r0, #1
 8009834:	600b      	strmi	r3, [r1, #0]
 8009836:	bf5c      	itt	pl
 8009838:	600b      	strpl	r3, [r1, #0]
 800983a:	2002      	movpl	r0, #2
 800983c:	4770      	bx	lr
 800983e:	b298      	uxth	r0, r3
 8009840:	b9a8      	cbnz	r0, 800986e <__lo0bits+0x52>
 8009842:	0c1b      	lsrs	r3, r3, #16
 8009844:	2010      	movs	r0, #16
 8009846:	b2da      	uxtb	r2, r3
 8009848:	b90a      	cbnz	r2, 800984e <__lo0bits+0x32>
 800984a:	3008      	adds	r0, #8
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	071a      	lsls	r2, r3, #28
 8009850:	bf04      	itt	eq
 8009852:	091b      	lsreq	r3, r3, #4
 8009854:	3004      	addeq	r0, #4
 8009856:	079a      	lsls	r2, r3, #30
 8009858:	bf04      	itt	eq
 800985a:	089b      	lsreq	r3, r3, #2
 800985c:	3002      	addeq	r0, #2
 800985e:	07da      	lsls	r2, r3, #31
 8009860:	d403      	bmi.n	800986a <__lo0bits+0x4e>
 8009862:	085b      	lsrs	r3, r3, #1
 8009864:	f100 0001 	add.w	r0, r0, #1
 8009868:	d005      	beq.n	8009876 <__lo0bits+0x5a>
 800986a:	600b      	str	r3, [r1, #0]
 800986c:	4770      	bx	lr
 800986e:	4610      	mov	r0, r2
 8009870:	e7e9      	b.n	8009846 <__lo0bits+0x2a>
 8009872:	2000      	movs	r0, #0
 8009874:	4770      	bx	lr
 8009876:	2020      	movs	r0, #32
 8009878:	4770      	bx	lr
	...

0800987c <__i2b>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	2101      	movs	r1, #1
 8009882:	f7ff ff03 	bl	800968c <_Balloc>
 8009886:	4602      	mov	r2, r0
 8009888:	b928      	cbnz	r0, 8009896 <__i2b+0x1a>
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <__i2b+0x24>)
 800988c:	4805      	ldr	r0, [pc, #20]	; (80098a4 <__i2b+0x28>)
 800988e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009892:	f000 fce1 	bl	800a258 <__assert_func>
 8009896:	2301      	movs	r3, #1
 8009898:	6144      	str	r4, [r0, #20]
 800989a:	6103      	str	r3, [r0, #16]
 800989c:	bd10      	pop	{r4, pc}
 800989e:	bf00      	nop
 80098a0:	0800b030 	.word	0x0800b030
 80098a4:	0800b041 	.word	0x0800b041

080098a8 <__multiply>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	4691      	mov	r9, r2
 80098ae:	690a      	ldr	r2, [r1, #16]
 80098b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	bfb8      	it	lt
 80098b8:	460b      	movlt	r3, r1
 80098ba:	460c      	mov	r4, r1
 80098bc:	bfbc      	itt	lt
 80098be:	464c      	movlt	r4, r9
 80098c0:	4699      	movlt	r9, r3
 80098c2:	6927      	ldr	r7, [r4, #16]
 80098c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	6861      	ldr	r1, [r4, #4]
 80098cc:	eb07 060a 	add.w	r6, r7, sl
 80098d0:	42b3      	cmp	r3, r6
 80098d2:	b085      	sub	sp, #20
 80098d4:	bfb8      	it	lt
 80098d6:	3101      	addlt	r1, #1
 80098d8:	f7ff fed8 	bl	800968c <_Balloc>
 80098dc:	b930      	cbnz	r0, 80098ec <__multiply+0x44>
 80098de:	4602      	mov	r2, r0
 80098e0:	4b44      	ldr	r3, [pc, #272]	; (80099f4 <__multiply+0x14c>)
 80098e2:	4845      	ldr	r0, [pc, #276]	; (80099f8 <__multiply+0x150>)
 80098e4:	f240 115d 	movw	r1, #349	; 0x15d
 80098e8:	f000 fcb6 	bl	800a258 <__assert_func>
 80098ec:	f100 0514 	add.w	r5, r0, #20
 80098f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098f4:	462b      	mov	r3, r5
 80098f6:	2200      	movs	r2, #0
 80098f8:	4543      	cmp	r3, r8
 80098fa:	d321      	bcc.n	8009940 <__multiply+0x98>
 80098fc:	f104 0314 	add.w	r3, r4, #20
 8009900:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009904:	f109 0314 	add.w	r3, r9, #20
 8009908:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800990c:	9202      	str	r2, [sp, #8]
 800990e:	1b3a      	subs	r2, r7, r4
 8009910:	3a15      	subs	r2, #21
 8009912:	f022 0203 	bic.w	r2, r2, #3
 8009916:	3204      	adds	r2, #4
 8009918:	f104 0115 	add.w	r1, r4, #21
 800991c:	428f      	cmp	r7, r1
 800991e:	bf38      	it	cc
 8009920:	2204      	movcc	r2, #4
 8009922:	9201      	str	r2, [sp, #4]
 8009924:	9a02      	ldr	r2, [sp, #8]
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	429a      	cmp	r2, r3
 800992a:	d80c      	bhi.n	8009946 <__multiply+0x9e>
 800992c:	2e00      	cmp	r6, #0
 800992e:	dd03      	ble.n	8009938 <__multiply+0x90>
 8009930:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009934:	2b00      	cmp	r3, #0
 8009936:	d05a      	beq.n	80099ee <__multiply+0x146>
 8009938:	6106      	str	r6, [r0, #16]
 800993a:	b005      	add	sp, #20
 800993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009940:	f843 2b04 	str.w	r2, [r3], #4
 8009944:	e7d8      	b.n	80098f8 <__multiply+0x50>
 8009946:	f8b3 a000 	ldrh.w	sl, [r3]
 800994a:	f1ba 0f00 	cmp.w	sl, #0
 800994e:	d024      	beq.n	800999a <__multiply+0xf2>
 8009950:	f104 0e14 	add.w	lr, r4, #20
 8009954:	46a9      	mov	r9, r5
 8009956:	f04f 0c00 	mov.w	ip, #0
 800995a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800995e:	f8d9 1000 	ldr.w	r1, [r9]
 8009962:	fa1f fb82 	uxth.w	fp, r2
 8009966:	b289      	uxth	r1, r1
 8009968:	fb0a 110b 	mla	r1, sl, fp, r1
 800996c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009970:	f8d9 2000 	ldr.w	r2, [r9]
 8009974:	4461      	add	r1, ip
 8009976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800997a:	fb0a c20b 	mla	r2, sl, fp, ip
 800997e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009982:	b289      	uxth	r1, r1
 8009984:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009988:	4577      	cmp	r7, lr
 800998a:	f849 1b04 	str.w	r1, [r9], #4
 800998e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009992:	d8e2      	bhi.n	800995a <__multiply+0xb2>
 8009994:	9a01      	ldr	r2, [sp, #4]
 8009996:	f845 c002 	str.w	ip, [r5, r2]
 800999a:	9a03      	ldr	r2, [sp, #12]
 800999c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099a0:	3304      	adds	r3, #4
 80099a2:	f1b9 0f00 	cmp.w	r9, #0
 80099a6:	d020      	beq.n	80099ea <__multiply+0x142>
 80099a8:	6829      	ldr	r1, [r5, #0]
 80099aa:	f104 0c14 	add.w	ip, r4, #20
 80099ae:	46ae      	mov	lr, r5
 80099b0:	f04f 0a00 	mov.w	sl, #0
 80099b4:	f8bc b000 	ldrh.w	fp, [ip]
 80099b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099bc:	fb09 220b 	mla	r2, r9, fp, r2
 80099c0:	4492      	add	sl, r2
 80099c2:	b289      	uxth	r1, r1
 80099c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099c8:	f84e 1b04 	str.w	r1, [lr], #4
 80099cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099d0:	f8be 1000 	ldrh.w	r1, [lr]
 80099d4:	0c12      	lsrs	r2, r2, #16
 80099d6:	fb09 1102 	mla	r1, r9, r2, r1
 80099da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099de:	4567      	cmp	r7, ip
 80099e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099e4:	d8e6      	bhi.n	80099b4 <__multiply+0x10c>
 80099e6:	9a01      	ldr	r2, [sp, #4]
 80099e8:	50a9      	str	r1, [r5, r2]
 80099ea:	3504      	adds	r5, #4
 80099ec:	e79a      	b.n	8009924 <__multiply+0x7c>
 80099ee:	3e01      	subs	r6, #1
 80099f0:	e79c      	b.n	800992c <__multiply+0x84>
 80099f2:	bf00      	nop
 80099f4:	0800b030 	.word	0x0800b030
 80099f8:	0800b041 	.word	0x0800b041

080099fc <__pow5mult>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	4615      	mov	r5, r2
 8009a02:	f012 0203 	ands.w	r2, r2, #3
 8009a06:	4606      	mov	r6, r0
 8009a08:	460f      	mov	r7, r1
 8009a0a:	d007      	beq.n	8009a1c <__pow5mult+0x20>
 8009a0c:	4c25      	ldr	r4, [pc, #148]	; (8009aa4 <__pow5mult+0xa8>)
 8009a0e:	3a01      	subs	r2, #1
 8009a10:	2300      	movs	r3, #0
 8009a12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a16:	f7ff fe9b 	bl	8009750 <__multadd>
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	10ad      	asrs	r5, r5, #2
 8009a1e:	d03d      	beq.n	8009a9c <__pow5mult+0xa0>
 8009a20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a22:	b97c      	cbnz	r4, 8009a44 <__pow5mult+0x48>
 8009a24:	2010      	movs	r0, #16
 8009a26:	f7ff fe29 	bl	800967c <malloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a2e:	b928      	cbnz	r0, 8009a3c <__pow5mult+0x40>
 8009a30:	4b1d      	ldr	r3, [pc, #116]	; (8009aa8 <__pow5mult+0xac>)
 8009a32:	481e      	ldr	r0, [pc, #120]	; (8009aac <__pow5mult+0xb0>)
 8009a34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a38:	f000 fc0e 	bl	800a258 <__assert_func>
 8009a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a40:	6004      	str	r4, [r0, #0]
 8009a42:	60c4      	str	r4, [r0, #12]
 8009a44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a4c:	b94c      	cbnz	r4, 8009a62 <__pow5mult+0x66>
 8009a4e:	f240 2171 	movw	r1, #625	; 0x271
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ff12 	bl	800987c <__i2b>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a5e:	4604      	mov	r4, r0
 8009a60:	6003      	str	r3, [r0, #0]
 8009a62:	f04f 0900 	mov.w	r9, #0
 8009a66:	07eb      	lsls	r3, r5, #31
 8009a68:	d50a      	bpl.n	8009a80 <__pow5mult+0x84>
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ff1a 	bl	80098a8 <__multiply>
 8009a74:	4639      	mov	r1, r7
 8009a76:	4680      	mov	r8, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff fe47 	bl	800970c <_Bfree>
 8009a7e:	4647      	mov	r7, r8
 8009a80:	106d      	asrs	r5, r5, #1
 8009a82:	d00b      	beq.n	8009a9c <__pow5mult+0xa0>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	b938      	cbnz	r0, 8009a98 <__pow5mult+0x9c>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff ff0b 	bl	80098a8 <__multiply>
 8009a92:	6020      	str	r0, [r4, #0]
 8009a94:	f8c0 9000 	str.w	r9, [r0]
 8009a98:	4604      	mov	r4, r0
 8009a9a:	e7e4      	b.n	8009a66 <__pow5mult+0x6a>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa2:	bf00      	nop
 8009aa4:	0800b190 	.word	0x0800b190
 8009aa8:	0800afbe 	.word	0x0800afbe
 8009aac:	0800b041 	.word	0x0800b041

08009ab0 <__lshift>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	6849      	ldr	r1, [r1, #4]
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	4691      	mov	r9, r2
 8009ac4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ac8:	f108 0601 	add.w	r6, r8, #1
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	db0b      	blt.n	8009ae8 <__lshift+0x38>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff fddb 	bl	800968c <_Balloc>
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	b948      	cbnz	r0, 8009aee <__lshift+0x3e>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b2a      	ldr	r3, [pc, #168]	; (8009b88 <__lshift+0xd8>)
 8009ade:	482b      	ldr	r0, [pc, #172]	; (8009b8c <__lshift+0xdc>)
 8009ae0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ae4:	f000 fbb8 	bl	800a258 <__assert_func>
 8009ae8:	3101      	adds	r1, #1
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	e7ee      	b.n	8009acc <__lshift+0x1c>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f100 0114 	add.w	r1, r0, #20
 8009af4:	f100 0210 	add.w	r2, r0, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	4553      	cmp	r3, sl
 8009afc:	db37      	blt.n	8009b6e <__lshift+0xbe>
 8009afe:	6920      	ldr	r0, [r4, #16]
 8009b00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b04:	f104 0314 	add.w	r3, r4, #20
 8009b08:	f019 091f 	ands.w	r9, r9, #31
 8009b0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b14:	d02f      	beq.n	8009b76 <__lshift+0xc6>
 8009b16:	f1c9 0e20 	rsb	lr, r9, #32
 8009b1a:	468a      	mov	sl, r1
 8009b1c:	f04f 0c00 	mov.w	ip, #0
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	fa02 f209 	lsl.w	r2, r2, r9
 8009b26:	ea42 020c 	orr.w	r2, r2, ip
 8009b2a:	f84a 2b04 	str.w	r2, [sl], #4
 8009b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b32:	4298      	cmp	r0, r3
 8009b34:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b38:	d8f2      	bhi.n	8009b20 <__lshift+0x70>
 8009b3a:	1b03      	subs	r3, r0, r4
 8009b3c:	3b15      	subs	r3, #21
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	3304      	adds	r3, #4
 8009b44:	f104 0215 	add.w	r2, r4, #21
 8009b48:	4290      	cmp	r0, r2
 8009b4a:	bf38      	it	cc
 8009b4c:	2304      	movcc	r3, #4
 8009b4e:	f841 c003 	str.w	ip, [r1, r3]
 8009b52:	f1bc 0f00 	cmp.w	ip, #0
 8009b56:	d001      	beq.n	8009b5c <__lshift+0xac>
 8009b58:	f108 0602 	add.w	r6, r8, #2
 8009b5c:	3e01      	subs	r6, #1
 8009b5e:	4638      	mov	r0, r7
 8009b60:	612e      	str	r6, [r5, #16]
 8009b62:	4621      	mov	r1, r4
 8009b64:	f7ff fdd2 	bl	800970c <_Bfree>
 8009b68:	4628      	mov	r0, r5
 8009b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b72:	3301      	adds	r3, #1
 8009b74:	e7c1      	b.n	8009afa <__lshift+0x4a>
 8009b76:	3904      	subs	r1, #4
 8009b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b80:	4298      	cmp	r0, r3
 8009b82:	d8f9      	bhi.n	8009b78 <__lshift+0xc8>
 8009b84:	e7ea      	b.n	8009b5c <__lshift+0xac>
 8009b86:	bf00      	nop
 8009b88:	0800b030 	.word	0x0800b030
 8009b8c:	0800b041 	.word	0x0800b041

08009b90 <__mcmp>:
 8009b90:	b530      	push	{r4, r5, lr}
 8009b92:	6902      	ldr	r2, [r0, #16]
 8009b94:	690c      	ldr	r4, [r1, #16]
 8009b96:	1b12      	subs	r2, r2, r4
 8009b98:	d10e      	bne.n	8009bb8 <__mcmp+0x28>
 8009b9a:	f100 0314 	add.w	r3, r0, #20
 8009b9e:	3114      	adds	r1, #20
 8009ba0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ba4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ba8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bb0:	42a5      	cmp	r5, r4
 8009bb2:	d003      	beq.n	8009bbc <__mcmp+0x2c>
 8009bb4:	d305      	bcc.n	8009bc2 <__mcmp+0x32>
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	4610      	mov	r0, r2
 8009bba:	bd30      	pop	{r4, r5, pc}
 8009bbc:	4283      	cmp	r3, r0
 8009bbe:	d3f3      	bcc.n	8009ba8 <__mcmp+0x18>
 8009bc0:	e7fa      	b.n	8009bb8 <__mcmp+0x28>
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	e7f7      	b.n	8009bb8 <__mcmp+0x28>

08009bc8 <__mdiff>:
 8009bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	4606      	mov	r6, r0
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	4690      	mov	r8, r2
 8009bd6:	f7ff ffdb 	bl	8009b90 <__mcmp>
 8009bda:	1e05      	subs	r5, r0, #0
 8009bdc:	d110      	bne.n	8009c00 <__mdiff+0x38>
 8009bde:	4629      	mov	r1, r5
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7ff fd53 	bl	800968c <_Balloc>
 8009be6:	b930      	cbnz	r0, 8009bf6 <__mdiff+0x2e>
 8009be8:	4b3a      	ldr	r3, [pc, #232]	; (8009cd4 <__mdiff+0x10c>)
 8009bea:	4602      	mov	r2, r0
 8009bec:	f240 2132 	movw	r1, #562	; 0x232
 8009bf0:	4839      	ldr	r0, [pc, #228]	; (8009cd8 <__mdiff+0x110>)
 8009bf2:	f000 fb31 	bl	800a258 <__assert_func>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c00:	bfa4      	itt	ge
 8009c02:	4643      	movge	r3, r8
 8009c04:	46a0      	movge	r8, r4
 8009c06:	4630      	mov	r0, r6
 8009c08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c0c:	bfa6      	itte	ge
 8009c0e:	461c      	movge	r4, r3
 8009c10:	2500      	movge	r5, #0
 8009c12:	2501      	movlt	r5, #1
 8009c14:	f7ff fd3a 	bl	800968c <_Balloc>
 8009c18:	b920      	cbnz	r0, 8009c24 <__mdiff+0x5c>
 8009c1a:	4b2e      	ldr	r3, [pc, #184]	; (8009cd4 <__mdiff+0x10c>)
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c22:	e7e5      	b.n	8009bf0 <__mdiff+0x28>
 8009c24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c28:	6926      	ldr	r6, [r4, #16]
 8009c2a:	60c5      	str	r5, [r0, #12]
 8009c2c:	f104 0914 	add.w	r9, r4, #20
 8009c30:	f108 0514 	add.w	r5, r8, #20
 8009c34:	f100 0e14 	add.w	lr, r0, #20
 8009c38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c40:	f108 0210 	add.w	r2, r8, #16
 8009c44:	46f2      	mov	sl, lr
 8009c46:	2100      	movs	r1, #0
 8009c48:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c50:	fa1f f883 	uxth.w	r8, r3
 8009c54:	fa11 f18b 	uxtah	r1, r1, fp
 8009c58:	0c1b      	lsrs	r3, r3, #16
 8009c5a:	eba1 0808 	sub.w	r8, r1, r8
 8009c5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c66:	fa1f f888 	uxth.w	r8, r8
 8009c6a:	1419      	asrs	r1, r3, #16
 8009c6c:	454e      	cmp	r6, r9
 8009c6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c72:	f84a 3b04 	str.w	r3, [sl], #4
 8009c76:	d8e7      	bhi.n	8009c48 <__mdiff+0x80>
 8009c78:	1b33      	subs	r3, r6, r4
 8009c7a:	3b15      	subs	r3, #21
 8009c7c:	f023 0303 	bic.w	r3, r3, #3
 8009c80:	3304      	adds	r3, #4
 8009c82:	3415      	adds	r4, #21
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	bf38      	it	cc
 8009c88:	2304      	movcc	r3, #4
 8009c8a:	441d      	add	r5, r3
 8009c8c:	4473      	add	r3, lr
 8009c8e:	469e      	mov	lr, r3
 8009c90:	462e      	mov	r6, r5
 8009c92:	4566      	cmp	r6, ip
 8009c94:	d30e      	bcc.n	8009cb4 <__mdiff+0xec>
 8009c96:	f10c 0203 	add.w	r2, ip, #3
 8009c9a:	1b52      	subs	r2, r2, r5
 8009c9c:	f022 0203 	bic.w	r2, r2, #3
 8009ca0:	3d03      	subs	r5, #3
 8009ca2:	45ac      	cmp	ip, r5
 8009ca4:	bf38      	it	cc
 8009ca6:	2200      	movcc	r2, #0
 8009ca8:	441a      	add	r2, r3
 8009caa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009cae:	b17b      	cbz	r3, 8009cd0 <__mdiff+0x108>
 8009cb0:	6107      	str	r7, [r0, #16]
 8009cb2:	e7a3      	b.n	8009bfc <__mdiff+0x34>
 8009cb4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cb8:	fa11 f288 	uxtah	r2, r1, r8
 8009cbc:	1414      	asrs	r4, r2, #16
 8009cbe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cc2:	b292      	uxth	r2, r2
 8009cc4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cc8:	f84e 2b04 	str.w	r2, [lr], #4
 8009ccc:	1421      	asrs	r1, r4, #16
 8009cce:	e7e0      	b.n	8009c92 <__mdiff+0xca>
 8009cd0:	3f01      	subs	r7, #1
 8009cd2:	e7ea      	b.n	8009caa <__mdiff+0xe2>
 8009cd4:	0800b030 	.word	0x0800b030
 8009cd8:	0800b041 	.word	0x0800b041

08009cdc <__d2b>:
 8009cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	ec57 6b10 	vmov	r6, r7, d0
 8009ce8:	4690      	mov	r8, r2
 8009cea:	f7ff fccf 	bl	800968c <_Balloc>
 8009cee:	4604      	mov	r4, r0
 8009cf0:	b930      	cbnz	r0, 8009d00 <__d2b+0x24>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4b25      	ldr	r3, [pc, #148]	; (8009d8c <__d2b+0xb0>)
 8009cf6:	4826      	ldr	r0, [pc, #152]	; (8009d90 <__d2b+0xb4>)
 8009cf8:	f240 310a 	movw	r1, #778	; 0x30a
 8009cfc:	f000 faac 	bl	800a258 <__assert_func>
 8009d00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d08:	bb35      	cbnz	r5, 8009d58 <__d2b+0x7c>
 8009d0a:	2e00      	cmp	r6, #0
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	d028      	beq.n	8009d62 <__d2b+0x86>
 8009d10:	4668      	mov	r0, sp
 8009d12:	9600      	str	r6, [sp, #0]
 8009d14:	f7ff fd82 	bl	800981c <__lo0bits>
 8009d18:	9900      	ldr	r1, [sp, #0]
 8009d1a:	b300      	cbz	r0, 8009d5e <__d2b+0x82>
 8009d1c:	9a01      	ldr	r2, [sp, #4]
 8009d1e:	f1c0 0320 	rsb	r3, r0, #32
 8009d22:	fa02 f303 	lsl.w	r3, r2, r3
 8009d26:	430b      	orrs	r3, r1
 8009d28:	40c2      	lsrs	r2, r0
 8009d2a:	6163      	str	r3, [r4, #20]
 8009d2c:	9201      	str	r2, [sp, #4]
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	61a3      	str	r3, [r4, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bf14      	ite	ne
 8009d36:	2202      	movne	r2, #2
 8009d38:	2201      	moveq	r2, #1
 8009d3a:	6122      	str	r2, [r4, #16]
 8009d3c:	b1d5      	cbz	r5, 8009d74 <__d2b+0x98>
 8009d3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d42:	4405      	add	r5, r0
 8009d44:	f8c9 5000 	str.w	r5, [r9]
 8009d48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d4c:	f8c8 0000 	str.w	r0, [r8]
 8009d50:	4620      	mov	r0, r4
 8009d52:	b003      	add	sp, #12
 8009d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d5c:	e7d5      	b.n	8009d0a <__d2b+0x2e>
 8009d5e:	6161      	str	r1, [r4, #20]
 8009d60:	e7e5      	b.n	8009d2e <__d2b+0x52>
 8009d62:	a801      	add	r0, sp, #4
 8009d64:	f7ff fd5a 	bl	800981c <__lo0bits>
 8009d68:	9b01      	ldr	r3, [sp, #4]
 8009d6a:	6163      	str	r3, [r4, #20]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	6122      	str	r2, [r4, #16]
 8009d70:	3020      	adds	r0, #32
 8009d72:	e7e3      	b.n	8009d3c <__d2b+0x60>
 8009d74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d7c:	f8c9 0000 	str.w	r0, [r9]
 8009d80:	6918      	ldr	r0, [r3, #16]
 8009d82:	f7ff fd2b 	bl	80097dc <__hi0bits>
 8009d86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d8a:	e7df      	b.n	8009d4c <__d2b+0x70>
 8009d8c:	0800b030 	.word	0x0800b030
 8009d90:	0800b041 	.word	0x0800b041

08009d94 <_calloc_r>:
 8009d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d96:	fba1 2402 	umull	r2, r4, r1, r2
 8009d9a:	b94c      	cbnz	r4, 8009db0 <_calloc_r+0x1c>
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	9201      	str	r2, [sp, #4]
 8009da0:	f000 f87a 	bl	8009e98 <_malloc_r>
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	4605      	mov	r5, r0
 8009da8:	b930      	cbnz	r0, 8009db8 <_calloc_r+0x24>
 8009daa:	4628      	mov	r0, r5
 8009dac:	b003      	add	sp, #12
 8009dae:	bd30      	pop	{r4, r5, pc}
 8009db0:	220c      	movs	r2, #12
 8009db2:	6002      	str	r2, [r0, #0]
 8009db4:	2500      	movs	r5, #0
 8009db6:	e7f8      	b.n	8009daa <_calloc_r+0x16>
 8009db8:	4621      	mov	r1, r4
 8009dba:	f7fe f959 	bl	8008070 <memset>
 8009dbe:	e7f4      	b.n	8009daa <_calloc_r+0x16>

08009dc0 <_free_r>:
 8009dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dc2:	2900      	cmp	r1, #0
 8009dc4:	d044      	beq.n	8009e50 <_free_r+0x90>
 8009dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dca:	9001      	str	r0, [sp, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f1a1 0404 	sub.w	r4, r1, #4
 8009dd2:	bfb8      	it	lt
 8009dd4:	18e4      	addlt	r4, r4, r3
 8009dd6:	f000 fa9b 	bl	800a310 <__malloc_lock>
 8009dda:	4a1e      	ldr	r2, [pc, #120]	; (8009e54 <_free_r+0x94>)
 8009ddc:	9801      	ldr	r0, [sp, #4]
 8009dde:	6813      	ldr	r3, [r2, #0]
 8009de0:	b933      	cbnz	r3, 8009df0 <_free_r+0x30>
 8009de2:	6063      	str	r3, [r4, #4]
 8009de4:	6014      	str	r4, [r2, #0]
 8009de6:	b003      	add	sp, #12
 8009de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dec:	f000 ba96 	b.w	800a31c <__malloc_unlock>
 8009df0:	42a3      	cmp	r3, r4
 8009df2:	d908      	bls.n	8009e06 <_free_r+0x46>
 8009df4:	6825      	ldr	r5, [r4, #0]
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	428b      	cmp	r3, r1
 8009dfa:	bf01      	itttt	eq
 8009dfc:	6819      	ldreq	r1, [r3, #0]
 8009dfe:	685b      	ldreq	r3, [r3, #4]
 8009e00:	1949      	addeq	r1, r1, r5
 8009e02:	6021      	streq	r1, [r4, #0]
 8009e04:	e7ed      	b.n	8009de2 <_free_r+0x22>
 8009e06:	461a      	mov	r2, r3
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	b10b      	cbz	r3, 8009e10 <_free_r+0x50>
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	d9fa      	bls.n	8009e06 <_free_r+0x46>
 8009e10:	6811      	ldr	r1, [r2, #0]
 8009e12:	1855      	adds	r5, r2, r1
 8009e14:	42a5      	cmp	r5, r4
 8009e16:	d10b      	bne.n	8009e30 <_free_r+0x70>
 8009e18:	6824      	ldr	r4, [r4, #0]
 8009e1a:	4421      	add	r1, r4
 8009e1c:	1854      	adds	r4, r2, r1
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	6011      	str	r1, [r2, #0]
 8009e22:	d1e0      	bne.n	8009de6 <_free_r+0x26>
 8009e24:	681c      	ldr	r4, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	6053      	str	r3, [r2, #4]
 8009e2a:	4421      	add	r1, r4
 8009e2c:	6011      	str	r1, [r2, #0]
 8009e2e:	e7da      	b.n	8009de6 <_free_r+0x26>
 8009e30:	d902      	bls.n	8009e38 <_free_r+0x78>
 8009e32:	230c      	movs	r3, #12
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	e7d6      	b.n	8009de6 <_free_r+0x26>
 8009e38:	6825      	ldr	r5, [r4, #0]
 8009e3a:	1961      	adds	r1, r4, r5
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	bf04      	itt	eq
 8009e40:	6819      	ldreq	r1, [r3, #0]
 8009e42:	685b      	ldreq	r3, [r3, #4]
 8009e44:	6063      	str	r3, [r4, #4]
 8009e46:	bf04      	itt	eq
 8009e48:	1949      	addeq	r1, r1, r5
 8009e4a:	6021      	streq	r1, [r4, #0]
 8009e4c:	6054      	str	r4, [r2, #4]
 8009e4e:	e7ca      	b.n	8009de6 <_free_r+0x26>
 8009e50:	b003      	add	sp, #12
 8009e52:	bd30      	pop	{r4, r5, pc}
 8009e54:	200008f0 	.word	0x200008f0

08009e58 <sbrk_aligned>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	4e0e      	ldr	r6, [pc, #56]	; (8009e94 <sbrk_aligned+0x3c>)
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	6831      	ldr	r1, [r6, #0]
 8009e60:	4605      	mov	r5, r0
 8009e62:	b911      	cbnz	r1, 8009e6a <sbrk_aligned+0x12>
 8009e64:	f000 f9e8 	bl	800a238 <_sbrk_r>
 8009e68:	6030      	str	r0, [r6, #0]
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f000 f9e3 	bl	800a238 <_sbrk_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d00a      	beq.n	8009e8c <sbrk_aligned+0x34>
 8009e76:	1cc4      	adds	r4, r0, #3
 8009e78:	f024 0403 	bic.w	r4, r4, #3
 8009e7c:	42a0      	cmp	r0, r4
 8009e7e:	d007      	beq.n	8009e90 <sbrk_aligned+0x38>
 8009e80:	1a21      	subs	r1, r4, r0
 8009e82:	4628      	mov	r0, r5
 8009e84:	f000 f9d8 	bl	800a238 <_sbrk_r>
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d101      	bne.n	8009e90 <sbrk_aligned+0x38>
 8009e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e90:	4620      	mov	r0, r4
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	200008f4 	.word	0x200008f4

08009e98 <_malloc_r>:
 8009e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9c:	1ccd      	adds	r5, r1, #3
 8009e9e:	f025 0503 	bic.w	r5, r5, #3
 8009ea2:	3508      	adds	r5, #8
 8009ea4:	2d0c      	cmp	r5, #12
 8009ea6:	bf38      	it	cc
 8009ea8:	250c      	movcc	r5, #12
 8009eaa:	2d00      	cmp	r5, #0
 8009eac:	4607      	mov	r7, r0
 8009eae:	db01      	blt.n	8009eb4 <_malloc_r+0x1c>
 8009eb0:	42a9      	cmp	r1, r5
 8009eb2:	d905      	bls.n	8009ec0 <_malloc_r+0x28>
 8009eb4:	230c      	movs	r3, #12
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	2600      	movs	r6, #0
 8009eba:	4630      	mov	r0, r6
 8009ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec0:	4e2e      	ldr	r6, [pc, #184]	; (8009f7c <_malloc_r+0xe4>)
 8009ec2:	f000 fa25 	bl	800a310 <__malloc_lock>
 8009ec6:	6833      	ldr	r3, [r6, #0]
 8009ec8:	461c      	mov	r4, r3
 8009eca:	bb34      	cbnz	r4, 8009f1a <_malloc_r+0x82>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	4638      	mov	r0, r7
 8009ed0:	f7ff ffc2 	bl	8009e58 <sbrk_aligned>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	d14d      	bne.n	8009f76 <_malloc_r+0xde>
 8009eda:	6834      	ldr	r4, [r6, #0]
 8009edc:	4626      	mov	r6, r4
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	d140      	bne.n	8009f64 <_malloc_r+0xcc>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	eb04 0803 	add.w	r8, r4, r3
 8009eec:	f000 f9a4 	bl	800a238 <_sbrk_r>
 8009ef0:	4580      	cmp	r8, r0
 8009ef2:	d13a      	bne.n	8009f6a <_malloc_r+0xd2>
 8009ef4:	6821      	ldr	r1, [r4, #0]
 8009ef6:	3503      	adds	r5, #3
 8009ef8:	1a6d      	subs	r5, r5, r1
 8009efa:	f025 0503 	bic.w	r5, r5, #3
 8009efe:	3508      	adds	r5, #8
 8009f00:	2d0c      	cmp	r5, #12
 8009f02:	bf38      	it	cc
 8009f04:	250c      	movcc	r5, #12
 8009f06:	4629      	mov	r1, r5
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ffa5 	bl	8009e58 <sbrk_aligned>
 8009f0e:	3001      	adds	r0, #1
 8009f10:	d02b      	beq.n	8009f6a <_malloc_r+0xd2>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	442b      	add	r3, r5
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	e00e      	b.n	8009f38 <_malloc_r+0xa0>
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	1b52      	subs	r2, r2, r5
 8009f1e:	d41e      	bmi.n	8009f5e <_malloc_r+0xc6>
 8009f20:	2a0b      	cmp	r2, #11
 8009f22:	d916      	bls.n	8009f52 <_malloc_r+0xba>
 8009f24:	1961      	adds	r1, r4, r5
 8009f26:	42a3      	cmp	r3, r4
 8009f28:	6025      	str	r5, [r4, #0]
 8009f2a:	bf18      	it	ne
 8009f2c:	6059      	strne	r1, [r3, #4]
 8009f2e:	6863      	ldr	r3, [r4, #4]
 8009f30:	bf08      	it	eq
 8009f32:	6031      	streq	r1, [r6, #0]
 8009f34:	5162      	str	r2, [r4, r5]
 8009f36:	604b      	str	r3, [r1, #4]
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f104 060b 	add.w	r6, r4, #11
 8009f3e:	f000 f9ed 	bl	800a31c <__malloc_unlock>
 8009f42:	f026 0607 	bic.w	r6, r6, #7
 8009f46:	1d23      	adds	r3, r4, #4
 8009f48:	1af2      	subs	r2, r6, r3
 8009f4a:	d0b6      	beq.n	8009eba <_malloc_r+0x22>
 8009f4c:	1b9b      	subs	r3, r3, r6
 8009f4e:	50a3      	str	r3, [r4, r2]
 8009f50:	e7b3      	b.n	8009eba <_malloc_r+0x22>
 8009f52:	6862      	ldr	r2, [r4, #4]
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	bf0c      	ite	eq
 8009f58:	6032      	streq	r2, [r6, #0]
 8009f5a:	605a      	strne	r2, [r3, #4]
 8009f5c:	e7ec      	b.n	8009f38 <_malloc_r+0xa0>
 8009f5e:	4623      	mov	r3, r4
 8009f60:	6864      	ldr	r4, [r4, #4]
 8009f62:	e7b2      	b.n	8009eca <_malloc_r+0x32>
 8009f64:	4634      	mov	r4, r6
 8009f66:	6876      	ldr	r6, [r6, #4]
 8009f68:	e7b9      	b.n	8009ede <_malloc_r+0x46>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	603b      	str	r3, [r7, #0]
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f000 f9d4 	bl	800a31c <__malloc_unlock>
 8009f74:	e7a1      	b.n	8009eba <_malloc_r+0x22>
 8009f76:	6025      	str	r5, [r4, #0]
 8009f78:	e7de      	b.n	8009f38 <_malloc_r+0xa0>
 8009f7a:	bf00      	nop
 8009f7c:	200008f0 	.word	0x200008f0

08009f80 <__ssputs_r>:
 8009f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	688e      	ldr	r6, [r1, #8]
 8009f86:	429e      	cmp	r6, r3
 8009f88:	4682      	mov	sl, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	4690      	mov	r8, r2
 8009f8e:	461f      	mov	r7, r3
 8009f90:	d838      	bhi.n	800a004 <__ssputs_r+0x84>
 8009f92:	898a      	ldrh	r2, [r1, #12]
 8009f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f98:	d032      	beq.n	800a000 <__ssputs_r+0x80>
 8009f9a:	6825      	ldr	r5, [r4, #0]
 8009f9c:	6909      	ldr	r1, [r1, #16]
 8009f9e:	eba5 0901 	sub.w	r9, r5, r1
 8009fa2:	6965      	ldr	r5, [r4, #20]
 8009fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fac:	3301      	adds	r3, #1
 8009fae:	444b      	add	r3, r9
 8009fb0:	106d      	asrs	r5, r5, #1
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	bf38      	it	cc
 8009fb6:	461d      	movcc	r5, r3
 8009fb8:	0553      	lsls	r3, r2, #21
 8009fba:	d531      	bpl.n	800a020 <__ssputs_r+0xa0>
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	f7ff ff6b 	bl	8009e98 <_malloc_r>
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	b950      	cbnz	r0, 8009fdc <__ssputs_r+0x5c>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	f8ca 3000 	str.w	r3, [sl]
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fdc:	6921      	ldr	r1, [r4, #16]
 8009fde:	464a      	mov	r2, r9
 8009fe0:	f7fe f838 	bl	8008054 <memcpy>
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fee:	81a3      	strh	r3, [r4, #12]
 8009ff0:	6126      	str	r6, [r4, #16]
 8009ff2:	6165      	str	r5, [r4, #20]
 8009ff4:	444e      	add	r6, r9
 8009ff6:	eba5 0509 	sub.w	r5, r5, r9
 8009ffa:	6026      	str	r6, [r4, #0]
 8009ffc:	60a5      	str	r5, [r4, #8]
 8009ffe:	463e      	mov	r6, r7
 800a000:	42be      	cmp	r6, r7
 800a002:	d900      	bls.n	800a006 <__ssputs_r+0x86>
 800a004:	463e      	mov	r6, r7
 800a006:	6820      	ldr	r0, [r4, #0]
 800a008:	4632      	mov	r2, r6
 800a00a:	4641      	mov	r1, r8
 800a00c:	f000 f966 	bl	800a2dc <memmove>
 800a010:	68a3      	ldr	r3, [r4, #8]
 800a012:	1b9b      	subs	r3, r3, r6
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	4433      	add	r3, r6
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	2000      	movs	r0, #0
 800a01e:	e7db      	b.n	8009fd8 <__ssputs_r+0x58>
 800a020:	462a      	mov	r2, r5
 800a022:	f000 f981 	bl	800a328 <_realloc_r>
 800a026:	4606      	mov	r6, r0
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1e1      	bne.n	8009ff0 <__ssputs_r+0x70>
 800a02c:	6921      	ldr	r1, [r4, #16]
 800a02e:	4650      	mov	r0, sl
 800a030:	f7ff fec6 	bl	8009dc0 <_free_r>
 800a034:	e7c7      	b.n	8009fc6 <__ssputs_r+0x46>
	...

0800a038 <_svfiprintf_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	4698      	mov	r8, r3
 800a03e:	898b      	ldrh	r3, [r1, #12]
 800a040:	061b      	lsls	r3, r3, #24
 800a042:	b09d      	sub	sp, #116	; 0x74
 800a044:	4607      	mov	r7, r0
 800a046:	460d      	mov	r5, r1
 800a048:	4614      	mov	r4, r2
 800a04a:	d50e      	bpl.n	800a06a <_svfiprintf_r+0x32>
 800a04c:	690b      	ldr	r3, [r1, #16]
 800a04e:	b963      	cbnz	r3, 800a06a <_svfiprintf_r+0x32>
 800a050:	2140      	movs	r1, #64	; 0x40
 800a052:	f7ff ff21 	bl	8009e98 <_malloc_r>
 800a056:	6028      	str	r0, [r5, #0]
 800a058:	6128      	str	r0, [r5, #16]
 800a05a:	b920      	cbnz	r0, 800a066 <_svfiprintf_r+0x2e>
 800a05c:	230c      	movs	r3, #12
 800a05e:	603b      	str	r3, [r7, #0]
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	e0d1      	b.n	800a20a <_svfiprintf_r+0x1d2>
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	616b      	str	r3, [r5, #20]
 800a06a:	2300      	movs	r3, #0
 800a06c:	9309      	str	r3, [sp, #36]	; 0x24
 800a06e:	2320      	movs	r3, #32
 800a070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a074:	f8cd 800c 	str.w	r8, [sp, #12]
 800a078:	2330      	movs	r3, #48	; 0x30
 800a07a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a224 <_svfiprintf_r+0x1ec>
 800a07e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a082:	f04f 0901 	mov.w	r9, #1
 800a086:	4623      	mov	r3, r4
 800a088:	469a      	mov	sl, r3
 800a08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a08e:	b10a      	cbz	r2, 800a094 <_svfiprintf_r+0x5c>
 800a090:	2a25      	cmp	r2, #37	; 0x25
 800a092:	d1f9      	bne.n	800a088 <_svfiprintf_r+0x50>
 800a094:	ebba 0b04 	subs.w	fp, sl, r4
 800a098:	d00b      	beq.n	800a0b2 <_svfiprintf_r+0x7a>
 800a09a:	465b      	mov	r3, fp
 800a09c:	4622      	mov	r2, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f7ff ff6d 	bl	8009f80 <__ssputs_r>
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f000 80aa 	beq.w	800a200 <_svfiprintf_r+0x1c8>
 800a0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ae:	445a      	add	r2, fp
 800a0b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 80a2 	beq.w	800a200 <_svfiprintf_r+0x1c8>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0d4:	4654      	mov	r4, sl
 800a0d6:	2205      	movs	r2, #5
 800a0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0dc:	4851      	ldr	r0, [pc, #324]	; (800a224 <_svfiprintf_r+0x1ec>)
 800a0de:	f7f6 f8b7 	bl	8000250 <memchr>
 800a0e2:	9a04      	ldr	r2, [sp, #16]
 800a0e4:	b9d8      	cbnz	r0, 800a11e <_svfiprintf_r+0xe6>
 800a0e6:	06d0      	lsls	r0, r2, #27
 800a0e8:	bf44      	itt	mi
 800a0ea:	2320      	movmi	r3, #32
 800a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f0:	0711      	lsls	r1, r2, #28
 800a0f2:	bf44      	itt	mi
 800a0f4:	232b      	movmi	r3, #43	; 0x2b
 800a0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a100:	d015      	beq.n	800a12e <_svfiprintf_r+0xf6>
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	4654      	mov	r4, sl
 800a106:	2000      	movs	r0, #0
 800a108:	f04f 0c0a 	mov.w	ip, #10
 800a10c:	4621      	mov	r1, r4
 800a10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a112:	3b30      	subs	r3, #48	; 0x30
 800a114:	2b09      	cmp	r3, #9
 800a116:	d94e      	bls.n	800a1b6 <_svfiprintf_r+0x17e>
 800a118:	b1b0      	cbz	r0, 800a148 <_svfiprintf_r+0x110>
 800a11a:	9207      	str	r2, [sp, #28]
 800a11c:	e014      	b.n	800a148 <_svfiprintf_r+0x110>
 800a11e:	eba0 0308 	sub.w	r3, r0, r8
 800a122:	fa09 f303 	lsl.w	r3, r9, r3
 800a126:	4313      	orrs	r3, r2
 800a128:	9304      	str	r3, [sp, #16]
 800a12a:	46a2      	mov	sl, r4
 800a12c:	e7d2      	b.n	800a0d4 <_svfiprintf_r+0x9c>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	1d19      	adds	r1, r3, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	9103      	str	r1, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfbb      	ittet	lt
 800a13a:	425b      	neglt	r3, r3
 800a13c:	f042 0202 	orrlt.w	r2, r2, #2
 800a140:	9307      	strge	r3, [sp, #28]
 800a142:	9307      	strlt	r3, [sp, #28]
 800a144:	bfb8      	it	lt
 800a146:	9204      	strlt	r2, [sp, #16]
 800a148:	7823      	ldrb	r3, [r4, #0]
 800a14a:	2b2e      	cmp	r3, #46	; 0x2e
 800a14c:	d10c      	bne.n	800a168 <_svfiprintf_r+0x130>
 800a14e:	7863      	ldrb	r3, [r4, #1]
 800a150:	2b2a      	cmp	r3, #42	; 0x2a
 800a152:	d135      	bne.n	800a1c0 <_svfiprintf_r+0x188>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9203      	str	r2, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfb8      	it	lt
 800a160:	f04f 33ff 	movlt.w	r3, #4294967295
 800a164:	3402      	adds	r4, #2
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a234 <_svfiprintf_r+0x1fc>
 800a16c:	7821      	ldrb	r1, [r4, #0]
 800a16e:	2203      	movs	r2, #3
 800a170:	4650      	mov	r0, sl
 800a172:	f7f6 f86d 	bl	8000250 <memchr>
 800a176:	b140      	cbz	r0, 800a18a <_svfiprintf_r+0x152>
 800a178:	2340      	movs	r3, #64	; 0x40
 800a17a:	eba0 000a 	sub.w	r0, r0, sl
 800a17e:	fa03 f000 	lsl.w	r0, r3, r0
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	4303      	orrs	r3, r0
 800a186:	3401      	adds	r4, #1
 800a188:	9304      	str	r3, [sp, #16]
 800a18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18e:	4826      	ldr	r0, [pc, #152]	; (800a228 <_svfiprintf_r+0x1f0>)
 800a190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a194:	2206      	movs	r2, #6
 800a196:	f7f6 f85b 	bl	8000250 <memchr>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d038      	beq.n	800a210 <_svfiprintf_r+0x1d8>
 800a19e:	4b23      	ldr	r3, [pc, #140]	; (800a22c <_svfiprintf_r+0x1f4>)
 800a1a0:	bb1b      	cbnz	r3, 800a1ea <_svfiprintf_r+0x1b2>
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	3307      	adds	r3, #7
 800a1a6:	f023 0307 	bic.w	r3, r3, #7
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b0:	4433      	add	r3, r6
 800a1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b4:	e767      	b.n	800a086 <_svfiprintf_r+0x4e>
 800a1b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	2001      	movs	r0, #1
 800a1be:	e7a5      	b.n	800a10c <_svfiprintf_r+0xd4>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	3401      	adds	r4, #1
 800a1c4:	9305      	str	r3, [sp, #20]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	f04f 0c0a 	mov.w	ip, #10
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1d2:	3a30      	subs	r2, #48	; 0x30
 800a1d4:	2a09      	cmp	r2, #9
 800a1d6:	d903      	bls.n	800a1e0 <_svfiprintf_r+0x1a8>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0c5      	beq.n	800a168 <_svfiprintf_r+0x130>
 800a1dc:	9105      	str	r1, [sp, #20]
 800a1de:	e7c3      	b.n	800a168 <_svfiprintf_r+0x130>
 800a1e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e7f0      	b.n	800a1cc <_svfiprintf_r+0x194>
 800a1ea:	ab03      	add	r3, sp, #12
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <_svfiprintf_r+0x1f8>)
 800a1f2:	a904      	add	r1, sp, #16
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7fd ffd3 	bl	80081a0 <_printf_float>
 800a1fa:	1c42      	adds	r2, r0, #1
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	d1d6      	bne.n	800a1ae <_svfiprintf_r+0x176>
 800a200:	89ab      	ldrh	r3, [r5, #12]
 800a202:	065b      	lsls	r3, r3, #25
 800a204:	f53f af2c 	bmi.w	800a060 <_svfiprintf_r+0x28>
 800a208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a20a:	b01d      	add	sp, #116	; 0x74
 800a20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a210:	ab03      	add	r3, sp, #12
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	462a      	mov	r2, r5
 800a216:	4b06      	ldr	r3, [pc, #24]	; (800a230 <_svfiprintf_r+0x1f8>)
 800a218:	a904      	add	r1, sp, #16
 800a21a:	4638      	mov	r0, r7
 800a21c:	f7fe fa4c 	bl	80086b8 <_printf_i>
 800a220:	e7eb      	b.n	800a1fa <_svfiprintf_r+0x1c2>
 800a222:	bf00      	nop
 800a224:	0800b19c 	.word	0x0800b19c
 800a228:	0800b1a6 	.word	0x0800b1a6
 800a22c:	080081a1 	.word	0x080081a1
 800a230:	08009f81 	.word	0x08009f81
 800a234:	0800b1a2 	.word	0x0800b1a2

0800a238 <_sbrk_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d06      	ldr	r5, [pc, #24]	; (800a254 <_sbrk_r+0x1c>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7f7 fc6e 	bl	8001b24 <_sbrk>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_sbrk_r+0x1a>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_sbrk_r+0x1a>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	200008f8 	.word	0x200008f8

0800a258 <__assert_func>:
 800a258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a25a:	4614      	mov	r4, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b09      	ldr	r3, [pc, #36]	; (800a284 <__assert_func+0x2c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4605      	mov	r5, r0
 800a264:	68d8      	ldr	r0, [r3, #12]
 800a266:	b14c      	cbz	r4, 800a27c <__assert_func+0x24>
 800a268:	4b07      	ldr	r3, [pc, #28]	; (800a288 <__assert_func+0x30>)
 800a26a:	9100      	str	r1, [sp, #0]
 800a26c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a270:	4906      	ldr	r1, [pc, #24]	; (800a28c <__assert_func+0x34>)
 800a272:	462b      	mov	r3, r5
 800a274:	f000 f80e 	bl	800a294 <fiprintf>
 800a278:	f000 faac 	bl	800a7d4 <abort>
 800a27c:	4b04      	ldr	r3, [pc, #16]	; (800a290 <__assert_func+0x38>)
 800a27e:	461c      	mov	r4, r3
 800a280:	e7f3      	b.n	800a26a <__assert_func+0x12>
 800a282:	bf00      	nop
 800a284:	20000048 	.word	0x20000048
 800a288:	0800b1ad 	.word	0x0800b1ad
 800a28c:	0800b1ba 	.word	0x0800b1ba
 800a290:	0800b1e8 	.word	0x0800b1e8

0800a294 <fiprintf>:
 800a294:	b40e      	push	{r1, r2, r3}
 800a296:	b503      	push	{r0, r1, lr}
 800a298:	4601      	mov	r1, r0
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <fiprintf+0x20>)
 800a29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	f000 f897 	bl	800a3d8 <_vfiprintf_r>
 800a2aa:	b002      	add	sp, #8
 800a2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b0:	b003      	add	sp, #12
 800a2b2:	4770      	bx	lr
 800a2b4:	20000048 	.word	0x20000048

0800a2b8 <__ascii_mbtowc>:
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	b901      	cbnz	r1, 800a2be <__ascii_mbtowc+0x6>
 800a2bc:	a901      	add	r1, sp, #4
 800a2be:	b142      	cbz	r2, 800a2d2 <__ascii_mbtowc+0x1a>
 800a2c0:	b14b      	cbz	r3, 800a2d6 <__ascii_mbtowc+0x1e>
 800a2c2:	7813      	ldrb	r3, [r2, #0]
 800a2c4:	600b      	str	r3, [r1, #0]
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	1e10      	subs	r0, r2, #0
 800a2ca:	bf18      	it	ne
 800a2cc:	2001      	movne	r0, #1
 800a2ce:	b002      	add	sp, #8
 800a2d0:	4770      	bx	lr
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	e7fb      	b.n	800a2ce <__ascii_mbtowc+0x16>
 800a2d6:	f06f 0001 	mvn.w	r0, #1
 800a2da:	e7f8      	b.n	800a2ce <__ascii_mbtowc+0x16>

0800a2dc <memmove>:
 800a2dc:	4288      	cmp	r0, r1
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	eb01 0402 	add.w	r4, r1, r2
 800a2e4:	d902      	bls.n	800a2ec <memmove+0x10>
 800a2e6:	4284      	cmp	r4, r0
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	d807      	bhi.n	800a2fc <memmove+0x20>
 800a2ec:	1e43      	subs	r3, r0, #1
 800a2ee:	42a1      	cmp	r1, r4
 800a2f0:	d008      	beq.n	800a304 <memmove+0x28>
 800a2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2fa:	e7f8      	b.n	800a2ee <memmove+0x12>
 800a2fc:	4402      	add	r2, r0
 800a2fe:	4601      	mov	r1, r0
 800a300:	428a      	cmp	r2, r1
 800a302:	d100      	bne.n	800a306 <memmove+0x2a>
 800a304:	bd10      	pop	{r4, pc}
 800a306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a30e:	e7f7      	b.n	800a300 <memmove+0x24>

0800a310 <__malloc_lock>:
 800a310:	4801      	ldr	r0, [pc, #4]	; (800a318 <__malloc_lock+0x8>)
 800a312:	f000 bc1f 	b.w	800ab54 <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	200008fc 	.word	0x200008fc

0800a31c <__malloc_unlock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__malloc_unlock+0x8>)
 800a31e:	f000 bc1a 	b.w	800ab56 <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	200008fc 	.word	0x200008fc

0800a328 <_realloc_r>:
 800a328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32c:	4680      	mov	r8, r0
 800a32e:	4614      	mov	r4, r2
 800a330:	460e      	mov	r6, r1
 800a332:	b921      	cbnz	r1, 800a33e <_realloc_r+0x16>
 800a334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a338:	4611      	mov	r1, r2
 800a33a:	f7ff bdad 	b.w	8009e98 <_malloc_r>
 800a33e:	b92a      	cbnz	r2, 800a34c <_realloc_r+0x24>
 800a340:	f7ff fd3e 	bl	8009dc0 <_free_r>
 800a344:	4625      	mov	r5, r4
 800a346:	4628      	mov	r0, r5
 800a348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34c:	f000 fc6a 	bl	800ac24 <_malloc_usable_size_r>
 800a350:	4284      	cmp	r4, r0
 800a352:	4607      	mov	r7, r0
 800a354:	d802      	bhi.n	800a35c <_realloc_r+0x34>
 800a356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a35a:	d812      	bhi.n	800a382 <_realloc_r+0x5a>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4640      	mov	r0, r8
 800a360:	f7ff fd9a 	bl	8009e98 <_malloc_r>
 800a364:	4605      	mov	r5, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	d0ed      	beq.n	800a346 <_realloc_r+0x1e>
 800a36a:	42bc      	cmp	r4, r7
 800a36c:	4622      	mov	r2, r4
 800a36e:	4631      	mov	r1, r6
 800a370:	bf28      	it	cs
 800a372:	463a      	movcs	r2, r7
 800a374:	f7fd fe6e 	bl	8008054 <memcpy>
 800a378:	4631      	mov	r1, r6
 800a37a:	4640      	mov	r0, r8
 800a37c:	f7ff fd20 	bl	8009dc0 <_free_r>
 800a380:	e7e1      	b.n	800a346 <_realloc_r+0x1e>
 800a382:	4635      	mov	r5, r6
 800a384:	e7df      	b.n	800a346 <_realloc_r+0x1e>

0800a386 <__sfputc_r>:
 800a386:	6893      	ldr	r3, [r2, #8]
 800a388:	3b01      	subs	r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	b410      	push	{r4}
 800a38e:	6093      	str	r3, [r2, #8]
 800a390:	da08      	bge.n	800a3a4 <__sfputc_r+0x1e>
 800a392:	6994      	ldr	r4, [r2, #24]
 800a394:	42a3      	cmp	r3, r4
 800a396:	db01      	blt.n	800a39c <__sfputc_r+0x16>
 800a398:	290a      	cmp	r1, #10
 800a39a:	d103      	bne.n	800a3a4 <__sfputc_r+0x1e>
 800a39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a0:	f000 b94a 	b.w	800a638 <__swbuf_r>
 800a3a4:	6813      	ldr	r3, [r2, #0]
 800a3a6:	1c58      	adds	r0, r3, #1
 800a3a8:	6010      	str	r0, [r2, #0]
 800a3aa:	7019      	strb	r1, [r3, #0]
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <__sfputs_r>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	18d5      	adds	r5, r2, r3
 800a3be:	42ac      	cmp	r4, r5
 800a3c0:	d101      	bne.n	800a3c6 <__sfputs_r+0x12>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e007      	b.n	800a3d6 <__sfputs_r+0x22>
 800a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7ff ffda 	bl	800a386 <__sfputc_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d1f3      	bne.n	800a3be <__sfputs_r+0xa>
 800a3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3d8 <_vfiprintf_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	460d      	mov	r5, r1
 800a3de:	b09d      	sub	sp, #116	; 0x74
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	b118      	cbz	r0, 800a3f0 <_vfiprintf_r+0x18>
 800a3e8:	6983      	ldr	r3, [r0, #24]
 800a3ea:	b90b      	cbnz	r3, 800a3f0 <_vfiprintf_r+0x18>
 800a3ec:	f000 fb14 	bl	800aa18 <__sinit>
 800a3f0:	4b89      	ldr	r3, [pc, #548]	; (800a618 <_vfiprintf_r+0x240>)
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	d11b      	bne.n	800a42e <_vfiprintf_r+0x56>
 800a3f6:	6875      	ldr	r5, [r6, #4]
 800a3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fa:	07d9      	lsls	r1, r3, #31
 800a3fc:	d405      	bmi.n	800a40a <_vfiprintf_r+0x32>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	059a      	lsls	r2, r3, #22
 800a402:	d402      	bmi.n	800a40a <_vfiprintf_r+0x32>
 800a404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a406:	f000 fba5 	bl	800ab54 <__retarget_lock_acquire_recursive>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	071b      	lsls	r3, r3, #28
 800a40e:	d501      	bpl.n	800a414 <_vfiprintf_r+0x3c>
 800a410:	692b      	ldr	r3, [r5, #16]
 800a412:	b9eb      	cbnz	r3, 800a450 <_vfiprintf_r+0x78>
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f000 f96e 	bl	800a6f8 <__swsetup_r>
 800a41c:	b1c0      	cbz	r0, 800a450 <_vfiprintf_r+0x78>
 800a41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a420:	07dc      	lsls	r4, r3, #31
 800a422:	d50e      	bpl.n	800a442 <_vfiprintf_r+0x6a>
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	b01d      	add	sp, #116	; 0x74
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	4b7b      	ldr	r3, [pc, #492]	; (800a61c <_vfiprintf_r+0x244>)
 800a430:	429d      	cmp	r5, r3
 800a432:	d101      	bne.n	800a438 <_vfiprintf_r+0x60>
 800a434:	68b5      	ldr	r5, [r6, #8]
 800a436:	e7df      	b.n	800a3f8 <_vfiprintf_r+0x20>
 800a438:	4b79      	ldr	r3, [pc, #484]	; (800a620 <_vfiprintf_r+0x248>)
 800a43a:	429d      	cmp	r5, r3
 800a43c:	bf08      	it	eq
 800a43e:	68f5      	ldreq	r5, [r6, #12]
 800a440:	e7da      	b.n	800a3f8 <_vfiprintf_r+0x20>
 800a442:	89ab      	ldrh	r3, [r5, #12]
 800a444:	0598      	lsls	r0, r3, #22
 800a446:	d4ed      	bmi.n	800a424 <_vfiprintf_r+0x4c>
 800a448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44a:	f000 fb84 	bl	800ab56 <__retarget_lock_release_recursive>
 800a44e:	e7e9      	b.n	800a424 <_vfiprintf_r+0x4c>
 800a450:	2300      	movs	r3, #0
 800a452:	9309      	str	r3, [sp, #36]	; 0x24
 800a454:	2320      	movs	r3, #32
 800a456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45e:	2330      	movs	r3, #48	; 0x30
 800a460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a624 <_vfiprintf_r+0x24c>
 800a464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a468:	f04f 0901 	mov.w	r9, #1
 800a46c:	4623      	mov	r3, r4
 800a46e:	469a      	mov	sl, r3
 800a470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a474:	b10a      	cbz	r2, 800a47a <_vfiprintf_r+0xa2>
 800a476:	2a25      	cmp	r2, #37	; 0x25
 800a478:	d1f9      	bne.n	800a46e <_vfiprintf_r+0x96>
 800a47a:	ebba 0b04 	subs.w	fp, sl, r4
 800a47e:	d00b      	beq.n	800a498 <_vfiprintf_r+0xc0>
 800a480:	465b      	mov	r3, fp
 800a482:	4622      	mov	r2, r4
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff94 	bl	800a3b4 <__sfputs_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	f000 80aa 	beq.w	800a5e6 <_vfiprintf_r+0x20e>
 800a492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a494:	445a      	add	r2, fp
 800a496:	9209      	str	r2, [sp, #36]	; 0x24
 800a498:	f89a 3000 	ldrb.w	r3, [sl]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80a2 	beq.w	800a5e6 <_vfiprintf_r+0x20e>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ac:	f10a 0a01 	add.w	sl, sl, #1
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ba:	4654      	mov	r4, sl
 800a4bc:	2205      	movs	r2, #5
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	4858      	ldr	r0, [pc, #352]	; (800a624 <_vfiprintf_r+0x24c>)
 800a4c4:	f7f5 fec4 	bl	8000250 <memchr>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	b9d8      	cbnz	r0, 800a504 <_vfiprintf_r+0x12c>
 800a4cc:	06d1      	lsls	r1, r2, #27
 800a4ce:	bf44      	itt	mi
 800a4d0:	2320      	movmi	r3, #32
 800a4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d6:	0713      	lsls	r3, r2, #28
 800a4d8:	bf44      	itt	mi
 800a4da:	232b      	movmi	r3, #43	; 0x2b
 800a4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e6:	d015      	beq.n	800a514 <_vfiprintf_r+0x13c>
 800a4e8:	9a07      	ldr	r2, [sp, #28]
 800a4ea:	4654      	mov	r4, sl
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f04f 0c0a 	mov.w	ip, #10
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f8:	3b30      	subs	r3, #48	; 0x30
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d94e      	bls.n	800a59c <_vfiprintf_r+0x1c4>
 800a4fe:	b1b0      	cbz	r0, 800a52e <_vfiprintf_r+0x156>
 800a500:	9207      	str	r2, [sp, #28]
 800a502:	e014      	b.n	800a52e <_vfiprintf_r+0x156>
 800a504:	eba0 0308 	sub.w	r3, r0, r8
 800a508:	fa09 f303 	lsl.w	r3, r9, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	46a2      	mov	sl, r4
 800a512:	e7d2      	b.n	800a4ba <_vfiprintf_r+0xe2>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfbb      	ittet	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	f042 0202 	orrlt.w	r2, r2, #2
 800a526:	9307      	strge	r3, [sp, #28]
 800a528:	9307      	strlt	r3, [sp, #28]
 800a52a:	bfb8      	it	lt
 800a52c:	9204      	strlt	r2, [sp, #16]
 800a52e:	7823      	ldrb	r3, [r4, #0]
 800a530:	2b2e      	cmp	r3, #46	; 0x2e
 800a532:	d10c      	bne.n	800a54e <_vfiprintf_r+0x176>
 800a534:	7863      	ldrb	r3, [r4, #1]
 800a536:	2b2a      	cmp	r3, #42	; 0x2a
 800a538:	d135      	bne.n	800a5a6 <_vfiprintf_r+0x1ce>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9203      	str	r2, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	f04f 33ff 	movlt.w	r3, #4294967295
 800a54a:	3402      	adds	r4, #2
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a634 <_vfiprintf_r+0x25c>
 800a552:	7821      	ldrb	r1, [r4, #0]
 800a554:	2203      	movs	r2, #3
 800a556:	4650      	mov	r0, sl
 800a558:	f7f5 fe7a 	bl	8000250 <memchr>
 800a55c:	b140      	cbz	r0, 800a570 <_vfiprintf_r+0x198>
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	eba0 000a 	sub.w	r0, r0, sl
 800a564:	fa03 f000 	lsl.w	r0, r3, r0
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	4303      	orrs	r3, r0
 800a56c:	3401      	adds	r4, #1
 800a56e:	9304      	str	r3, [sp, #16]
 800a570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a574:	482c      	ldr	r0, [pc, #176]	; (800a628 <_vfiprintf_r+0x250>)
 800a576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57a:	2206      	movs	r2, #6
 800a57c:	f7f5 fe68 	bl	8000250 <memchr>
 800a580:	2800      	cmp	r0, #0
 800a582:	d03f      	beq.n	800a604 <_vfiprintf_r+0x22c>
 800a584:	4b29      	ldr	r3, [pc, #164]	; (800a62c <_vfiprintf_r+0x254>)
 800a586:	bb1b      	cbnz	r3, 800a5d0 <_vfiprintf_r+0x1f8>
 800a588:	9b03      	ldr	r3, [sp, #12]
 800a58a:	3307      	adds	r3, #7
 800a58c:	f023 0307 	bic.w	r3, r3, #7
 800a590:	3308      	adds	r3, #8
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a596:	443b      	add	r3, r7
 800a598:	9309      	str	r3, [sp, #36]	; 0x24
 800a59a:	e767      	b.n	800a46c <_vfiprintf_r+0x94>
 800a59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7a5      	b.n	800a4f2 <_vfiprintf_r+0x11a>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	3401      	adds	r4, #1
 800a5aa:	9305      	str	r3, [sp, #20]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f04f 0c0a 	mov.w	ip, #10
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b8:	3a30      	subs	r2, #48	; 0x30
 800a5ba:	2a09      	cmp	r2, #9
 800a5bc:	d903      	bls.n	800a5c6 <_vfiprintf_r+0x1ee>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0c5      	beq.n	800a54e <_vfiprintf_r+0x176>
 800a5c2:	9105      	str	r1, [sp, #20]
 800a5c4:	e7c3      	b.n	800a54e <_vfiprintf_r+0x176>
 800a5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e7f0      	b.n	800a5b2 <_vfiprintf_r+0x1da>
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	4b16      	ldr	r3, [pc, #88]	; (800a630 <_vfiprintf_r+0x258>)
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fd fde0 	bl	80081a0 <_printf_float>
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	1c78      	adds	r0, r7, #1
 800a5e4:	d1d6      	bne.n	800a594 <_vfiprintf_r+0x1bc>
 800a5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e8:	07d9      	lsls	r1, r3, #31
 800a5ea:	d405      	bmi.n	800a5f8 <_vfiprintf_r+0x220>
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	059a      	lsls	r2, r3, #22
 800a5f0:	d402      	bmi.n	800a5f8 <_vfiprintf_r+0x220>
 800a5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f4:	f000 faaf 	bl	800ab56 <__retarget_lock_release_recursive>
 800a5f8:	89ab      	ldrh	r3, [r5, #12]
 800a5fa:	065b      	lsls	r3, r3, #25
 800a5fc:	f53f af12 	bmi.w	800a424 <_vfiprintf_r+0x4c>
 800a600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a602:	e711      	b.n	800a428 <_vfiprintf_r+0x50>
 800a604:	ab03      	add	r3, sp, #12
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	462a      	mov	r2, r5
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <_vfiprintf_r+0x258>)
 800a60c:	a904      	add	r1, sp, #16
 800a60e:	4630      	mov	r0, r6
 800a610:	f7fe f852 	bl	80086b8 <_printf_i>
 800a614:	e7e4      	b.n	800a5e0 <_vfiprintf_r+0x208>
 800a616:	bf00      	nop
 800a618:	0800b214 	.word	0x0800b214
 800a61c:	0800b234 	.word	0x0800b234
 800a620:	0800b1f4 	.word	0x0800b1f4
 800a624:	0800b19c 	.word	0x0800b19c
 800a628:	0800b1a6 	.word	0x0800b1a6
 800a62c:	080081a1 	.word	0x080081a1
 800a630:	0800a3b5 	.word	0x0800a3b5
 800a634:	0800b1a2 	.word	0x0800b1a2

0800a638 <__swbuf_r>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	460e      	mov	r6, r1
 800a63c:	4614      	mov	r4, r2
 800a63e:	4605      	mov	r5, r0
 800a640:	b118      	cbz	r0, 800a64a <__swbuf_r+0x12>
 800a642:	6983      	ldr	r3, [r0, #24]
 800a644:	b90b      	cbnz	r3, 800a64a <__swbuf_r+0x12>
 800a646:	f000 f9e7 	bl	800aa18 <__sinit>
 800a64a:	4b21      	ldr	r3, [pc, #132]	; (800a6d0 <__swbuf_r+0x98>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d12b      	bne.n	800a6a8 <__swbuf_r+0x70>
 800a650:	686c      	ldr	r4, [r5, #4]
 800a652:	69a3      	ldr	r3, [r4, #24]
 800a654:	60a3      	str	r3, [r4, #8]
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	071a      	lsls	r2, r3, #28
 800a65a:	d52f      	bpl.n	800a6bc <__swbuf_r+0x84>
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	b36b      	cbz	r3, 800a6bc <__swbuf_r+0x84>
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	6820      	ldr	r0, [r4, #0]
 800a664:	1ac0      	subs	r0, r0, r3
 800a666:	6963      	ldr	r3, [r4, #20]
 800a668:	b2f6      	uxtb	r6, r6
 800a66a:	4283      	cmp	r3, r0
 800a66c:	4637      	mov	r7, r6
 800a66e:	dc04      	bgt.n	800a67a <__swbuf_r+0x42>
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f93c 	bl	800a8f0 <_fflush_r>
 800a678:	bb30      	cbnz	r0, 800a6c8 <__swbuf_r+0x90>
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	60a3      	str	r3, [r4, #8]
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	6022      	str	r2, [r4, #0]
 800a686:	701e      	strb	r6, [r3, #0]
 800a688:	6963      	ldr	r3, [r4, #20]
 800a68a:	3001      	adds	r0, #1
 800a68c:	4283      	cmp	r3, r0
 800a68e:	d004      	beq.n	800a69a <__swbuf_r+0x62>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	07db      	lsls	r3, r3, #31
 800a694:	d506      	bpl.n	800a6a4 <__swbuf_r+0x6c>
 800a696:	2e0a      	cmp	r6, #10
 800a698:	d104      	bne.n	800a6a4 <__swbuf_r+0x6c>
 800a69a:	4621      	mov	r1, r4
 800a69c:	4628      	mov	r0, r5
 800a69e:	f000 f927 	bl	800a8f0 <_fflush_r>
 800a6a2:	b988      	cbnz	r0, 800a6c8 <__swbuf_r+0x90>
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <__swbuf_r+0x9c>)
 800a6aa:	429c      	cmp	r4, r3
 800a6ac:	d101      	bne.n	800a6b2 <__swbuf_r+0x7a>
 800a6ae:	68ac      	ldr	r4, [r5, #8]
 800a6b0:	e7cf      	b.n	800a652 <__swbuf_r+0x1a>
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <__swbuf_r+0xa0>)
 800a6b4:	429c      	cmp	r4, r3
 800a6b6:	bf08      	it	eq
 800a6b8:	68ec      	ldreq	r4, [r5, #12]
 800a6ba:	e7ca      	b.n	800a652 <__swbuf_r+0x1a>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f000 f81a 	bl	800a6f8 <__swsetup_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d0cb      	beq.n	800a660 <__swbuf_r+0x28>
 800a6c8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6cc:	e7ea      	b.n	800a6a4 <__swbuf_r+0x6c>
 800a6ce:	bf00      	nop
 800a6d0:	0800b214 	.word	0x0800b214
 800a6d4:	0800b234 	.word	0x0800b234
 800a6d8:	0800b1f4 	.word	0x0800b1f4

0800a6dc <__ascii_wctomb>:
 800a6dc:	b149      	cbz	r1, 800a6f2 <__ascii_wctomb+0x16>
 800a6de:	2aff      	cmp	r2, #255	; 0xff
 800a6e0:	bf85      	ittet	hi
 800a6e2:	238a      	movhi	r3, #138	; 0x8a
 800a6e4:	6003      	strhi	r3, [r0, #0]
 800a6e6:	700a      	strbls	r2, [r1, #0]
 800a6e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6ec:	bf98      	it	ls
 800a6ee:	2001      	movls	r0, #1
 800a6f0:	4770      	bx	lr
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <__swsetup_r>:
 800a6f8:	4b32      	ldr	r3, [pc, #200]	; (800a7c4 <__swsetup_r+0xcc>)
 800a6fa:	b570      	push	{r4, r5, r6, lr}
 800a6fc:	681d      	ldr	r5, [r3, #0]
 800a6fe:	4606      	mov	r6, r0
 800a700:	460c      	mov	r4, r1
 800a702:	b125      	cbz	r5, 800a70e <__swsetup_r+0x16>
 800a704:	69ab      	ldr	r3, [r5, #24]
 800a706:	b913      	cbnz	r3, 800a70e <__swsetup_r+0x16>
 800a708:	4628      	mov	r0, r5
 800a70a:	f000 f985 	bl	800aa18 <__sinit>
 800a70e:	4b2e      	ldr	r3, [pc, #184]	; (800a7c8 <__swsetup_r+0xd0>)
 800a710:	429c      	cmp	r4, r3
 800a712:	d10f      	bne.n	800a734 <__swsetup_r+0x3c>
 800a714:	686c      	ldr	r4, [r5, #4]
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a71c:	0719      	lsls	r1, r3, #28
 800a71e:	d42c      	bmi.n	800a77a <__swsetup_r+0x82>
 800a720:	06dd      	lsls	r5, r3, #27
 800a722:	d411      	bmi.n	800a748 <__swsetup_r+0x50>
 800a724:	2309      	movs	r3, #9
 800a726:	6033      	str	r3, [r6, #0]
 800a728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	f04f 30ff 	mov.w	r0, #4294967295
 800a732:	e03e      	b.n	800a7b2 <__swsetup_r+0xba>
 800a734:	4b25      	ldr	r3, [pc, #148]	; (800a7cc <__swsetup_r+0xd4>)
 800a736:	429c      	cmp	r4, r3
 800a738:	d101      	bne.n	800a73e <__swsetup_r+0x46>
 800a73a:	68ac      	ldr	r4, [r5, #8]
 800a73c:	e7eb      	b.n	800a716 <__swsetup_r+0x1e>
 800a73e:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <__swsetup_r+0xd8>)
 800a740:	429c      	cmp	r4, r3
 800a742:	bf08      	it	eq
 800a744:	68ec      	ldreq	r4, [r5, #12]
 800a746:	e7e6      	b.n	800a716 <__swsetup_r+0x1e>
 800a748:	0758      	lsls	r0, r3, #29
 800a74a:	d512      	bpl.n	800a772 <__swsetup_r+0x7a>
 800a74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a74e:	b141      	cbz	r1, 800a762 <__swsetup_r+0x6a>
 800a750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a754:	4299      	cmp	r1, r3
 800a756:	d002      	beq.n	800a75e <__swsetup_r+0x66>
 800a758:	4630      	mov	r0, r6
 800a75a:	f7ff fb31 	bl	8009dc0 <_free_r>
 800a75e:	2300      	movs	r3, #0
 800a760:	6363      	str	r3, [r4, #52]	; 0x34
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	2300      	movs	r3, #0
 800a76c:	6063      	str	r3, [r4, #4]
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f043 0308 	orr.w	r3, r3, #8
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	b94b      	cbnz	r3, 800a792 <__swsetup_r+0x9a>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a788:	d003      	beq.n	800a792 <__swsetup_r+0x9a>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 fa09 	bl	800aba4 <__smakebuf_r>
 800a792:	89a0      	ldrh	r0, [r4, #12]
 800a794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a798:	f010 0301 	ands.w	r3, r0, #1
 800a79c:	d00a      	beq.n	800a7b4 <__swsetup_r+0xbc>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60a3      	str	r3, [r4, #8]
 800a7a2:	6963      	ldr	r3, [r4, #20]
 800a7a4:	425b      	negs	r3, r3
 800a7a6:	61a3      	str	r3, [r4, #24]
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	b943      	cbnz	r3, 800a7be <__swsetup_r+0xc6>
 800a7ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7b0:	d1ba      	bne.n	800a728 <__swsetup_r+0x30>
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}
 800a7b4:	0781      	lsls	r1, r0, #30
 800a7b6:	bf58      	it	pl
 800a7b8:	6963      	ldrpl	r3, [r4, #20]
 800a7ba:	60a3      	str	r3, [r4, #8]
 800a7bc:	e7f4      	b.n	800a7a8 <__swsetup_r+0xb0>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	e7f7      	b.n	800a7b2 <__swsetup_r+0xba>
 800a7c2:	bf00      	nop
 800a7c4:	20000048 	.word	0x20000048
 800a7c8:	0800b214 	.word	0x0800b214
 800a7cc:	0800b234 	.word	0x0800b234
 800a7d0:	0800b1f4 	.word	0x0800b1f4

0800a7d4 <abort>:
 800a7d4:	b508      	push	{r3, lr}
 800a7d6:	2006      	movs	r0, #6
 800a7d8:	f000 fa54 	bl	800ac84 <raise>
 800a7dc:	2001      	movs	r0, #1
 800a7de:	f7f7 f929 	bl	8001a34 <_exit>
	...

0800a7e4 <__sflush_r>:
 800a7e4:	898a      	ldrh	r2, [r1, #12]
 800a7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	0710      	lsls	r0, r2, #28
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	d458      	bmi.n	800a8a4 <__sflush_r+0xc0>
 800a7f2:	684b      	ldr	r3, [r1, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dc05      	bgt.n	800a804 <__sflush_r+0x20>
 800a7f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dc02      	bgt.n	800a804 <__sflush_r+0x20>
 800a7fe:	2000      	movs	r0, #0
 800a800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a806:	2e00      	cmp	r6, #0
 800a808:	d0f9      	beq.n	800a7fe <__sflush_r+0x1a>
 800a80a:	2300      	movs	r3, #0
 800a80c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a810:	682f      	ldr	r7, [r5, #0]
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	d032      	beq.n	800a87c <__sflush_r+0x98>
 800a816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	075a      	lsls	r2, r3, #29
 800a81c:	d505      	bpl.n	800a82a <__sflush_r+0x46>
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	1ac0      	subs	r0, r0, r3
 800a822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a824:	b10b      	cbz	r3, 800a82a <__sflush_r+0x46>
 800a826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a828:	1ac0      	subs	r0, r0, r3
 800a82a:	2300      	movs	r3, #0
 800a82c:	4602      	mov	r2, r0
 800a82e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a830:	6a21      	ldr	r1, [r4, #32]
 800a832:	4628      	mov	r0, r5
 800a834:	47b0      	blx	r6
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	d106      	bne.n	800a84a <__sflush_r+0x66>
 800a83c:	6829      	ldr	r1, [r5, #0]
 800a83e:	291d      	cmp	r1, #29
 800a840:	d82c      	bhi.n	800a89c <__sflush_r+0xb8>
 800a842:	4a2a      	ldr	r2, [pc, #168]	; (800a8ec <__sflush_r+0x108>)
 800a844:	40ca      	lsrs	r2, r1
 800a846:	07d6      	lsls	r6, r2, #31
 800a848:	d528      	bpl.n	800a89c <__sflush_r+0xb8>
 800a84a:	2200      	movs	r2, #0
 800a84c:	6062      	str	r2, [r4, #4]
 800a84e:	04d9      	lsls	r1, r3, #19
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	d504      	bpl.n	800a860 <__sflush_r+0x7c>
 800a856:	1c42      	adds	r2, r0, #1
 800a858:	d101      	bne.n	800a85e <__sflush_r+0x7a>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	b903      	cbnz	r3, 800a860 <__sflush_r+0x7c>
 800a85e:	6560      	str	r0, [r4, #84]	; 0x54
 800a860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a862:	602f      	str	r7, [r5, #0]
 800a864:	2900      	cmp	r1, #0
 800a866:	d0ca      	beq.n	800a7fe <__sflush_r+0x1a>
 800a868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d002      	beq.n	800a876 <__sflush_r+0x92>
 800a870:	4628      	mov	r0, r5
 800a872:	f7ff faa5 	bl	8009dc0 <_free_r>
 800a876:	2000      	movs	r0, #0
 800a878:	6360      	str	r0, [r4, #52]	; 0x34
 800a87a:	e7c1      	b.n	800a800 <__sflush_r+0x1c>
 800a87c:	6a21      	ldr	r1, [r4, #32]
 800a87e:	2301      	movs	r3, #1
 800a880:	4628      	mov	r0, r5
 800a882:	47b0      	blx	r6
 800a884:	1c41      	adds	r1, r0, #1
 800a886:	d1c7      	bne.n	800a818 <__sflush_r+0x34>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0c4      	beq.n	800a818 <__sflush_r+0x34>
 800a88e:	2b1d      	cmp	r3, #29
 800a890:	d001      	beq.n	800a896 <__sflush_r+0xb2>
 800a892:	2b16      	cmp	r3, #22
 800a894:	d101      	bne.n	800a89a <__sflush_r+0xb6>
 800a896:	602f      	str	r7, [r5, #0]
 800a898:	e7b1      	b.n	800a7fe <__sflush_r+0x1a>
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a0:	81a3      	strh	r3, [r4, #12]
 800a8a2:	e7ad      	b.n	800a800 <__sflush_r+0x1c>
 800a8a4:	690f      	ldr	r7, [r1, #16]
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	d0a9      	beq.n	800a7fe <__sflush_r+0x1a>
 800a8aa:	0793      	lsls	r3, r2, #30
 800a8ac:	680e      	ldr	r6, [r1, #0]
 800a8ae:	bf08      	it	eq
 800a8b0:	694b      	ldreq	r3, [r1, #20]
 800a8b2:	600f      	str	r7, [r1, #0]
 800a8b4:	bf18      	it	ne
 800a8b6:	2300      	movne	r3, #0
 800a8b8:	eba6 0807 	sub.w	r8, r6, r7
 800a8bc:	608b      	str	r3, [r1, #8]
 800a8be:	f1b8 0f00 	cmp.w	r8, #0
 800a8c2:	dd9c      	ble.n	800a7fe <__sflush_r+0x1a>
 800a8c4:	6a21      	ldr	r1, [r4, #32]
 800a8c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8c8:	4643      	mov	r3, r8
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	47b0      	blx	r6
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	dc06      	bgt.n	800a8e2 <__sflush_r+0xfe>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8da:	81a3      	strh	r3, [r4, #12]
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e0:	e78e      	b.n	800a800 <__sflush_r+0x1c>
 800a8e2:	4407      	add	r7, r0
 800a8e4:	eba8 0800 	sub.w	r8, r8, r0
 800a8e8:	e7e9      	b.n	800a8be <__sflush_r+0xda>
 800a8ea:	bf00      	nop
 800a8ec:	20400001 	.word	0x20400001

0800a8f0 <_fflush_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	b913      	cbnz	r3, 800a900 <_fflush_r+0x10>
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	b118      	cbz	r0, 800a90a <_fflush_r+0x1a>
 800a902:	6983      	ldr	r3, [r0, #24]
 800a904:	b90b      	cbnz	r3, 800a90a <_fflush_r+0x1a>
 800a906:	f000 f887 	bl	800aa18 <__sinit>
 800a90a:	4b14      	ldr	r3, [pc, #80]	; (800a95c <_fflush_r+0x6c>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d11b      	bne.n	800a948 <_fflush_r+0x58>
 800a910:	686c      	ldr	r4, [r5, #4]
 800a912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0ef      	beq.n	800a8fa <_fflush_r+0xa>
 800a91a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a91c:	07d0      	lsls	r0, r2, #31
 800a91e:	d404      	bmi.n	800a92a <_fflush_r+0x3a>
 800a920:	0599      	lsls	r1, r3, #22
 800a922:	d402      	bmi.n	800a92a <_fflush_r+0x3a>
 800a924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a926:	f000 f915 	bl	800ab54 <__retarget_lock_acquire_recursive>
 800a92a:	4628      	mov	r0, r5
 800a92c:	4621      	mov	r1, r4
 800a92e:	f7ff ff59 	bl	800a7e4 <__sflush_r>
 800a932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a934:	07da      	lsls	r2, r3, #31
 800a936:	4605      	mov	r5, r0
 800a938:	d4e0      	bmi.n	800a8fc <_fflush_r+0xc>
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	059b      	lsls	r3, r3, #22
 800a93e:	d4dd      	bmi.n	800a8fc <_fflush_r+0xc>
 800a940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a942:	f000 f908 	bl	800ab56 <__retarget_lock_release_recursive>
 800a946:	e7d9      	b.n	800a8fc <_fflush_r+0xc>
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <_fflush_r+0x70>)
 800a94a:	429c      	cmp	r4, r3
 800a94c:	d101      	bne.n	800a952 <_fflush_r+0x62>
 800a94e:	68ac      	ldr	r4, [r5, #8]
 800a950:	e7df      	b.n	800a912 <_fflush_r+0x22>
 800a952:	4b04      	ldr	r3, [pc, #16]	; (800a964 <_fflush_r+0x74>)
 800a954:	429c      	cmp	r4, r3
 800a956:	bf08      	it	eq
 800a958:	68ec      	ldreq	r4, [r5, #12]
 800a95a:	e7da      	b.n	800a912 <_fflush_r+0x22>
 800a95c:	0800b214 	.word	0x0800b214
 800a960:	0800b234 	.word	0x0800b234
 800a964:	0800b1f4 	.word	0x0800b1f4

0800a968 <std>:
 800a968:	2300      	movs	r3, #0
 800a96a:	b510      	push	{r4, lr}
 800a96c:	4604      	mov	r4, r0
 800a96e:	e9c0 3300 	strd	r3, r3, [r0]
 800a972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a976:	6083      	str	r3, [r0, #8]
 800a978:	8181      	strh	r1, [r0, #12]
 800a97a:	6643      	str	r3, [r0, #100]	; 0x64
 800a97c:	81c2      	strh	r2, [r0, #14]
 800a97e:	6183      	str	r3, [r0, #24]
 800a980:	4619      	mov	r1, r3
 800a982:	2208      	movs	r2, #8
 800a984:	305c      	adds	r0, #92	; 0x5c
 800a986:	f7fd fb73 	bl	8008070 <memset>
 800a98a:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <std+0x38>)
 800a98c:	6263      	str	r3, [r4, #36]	; 0x24
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <std+0x3c>)
 800a990:	62a3      	str	r3, [r4, #40]	; 0x28
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <std+0x40>)
 800a994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <std+0x44>)
 800a998:	6224      	str	r4, [r4, #32]
 800a99a:	6323      	str	r3, [r4, #48]	; 0x30
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	bf00      	nop
 800a9a0:	0800acbd 	.word	0x0800acbd
 800a9a4:	0800acdf 	.word	0x0800acdf
 800a9a8:	0800ad17 	.word	0x0800ad17
 800a9ac:	0800ad3b 	.word	0x0800ad3b

0800a9b0 <_cleanup_r>:
 800a9b0:	4901      	ldr	r1, [pc, #4]	; (800a9b8 <_cleanup_r+0x8>)
 800a9b2:	f000 b8af 	b.w	800ab14 <_fwalk_reent>
 800a9b6:	bf00      	nop
 800a9b8:	0800a8f1 	.word	0x0800a8f1

0800a9bc <__sfmoreglue>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	2268      	movs	r2, #104	; 0x68
 800a9c0:	1e4d      	subs	r5, r1, #1
 800a9c2:	4355      	muls	r5, r2
 800a9c4:	460e      	mov	r6, r1
 800a9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ca:	f7ff fa65 	bl	8009e98 <_malloc_r>
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	b140      	cbz	r0, 800a9e4 <__sfmoreglue+0x28>
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a9d8:	300c      	adds	r0, #12
 800a9da:	60a0      	str	r0, [r4, #8]
 800a9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9e0:	f7fd fb46 	bl	8008070 <memset>
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}

0800a9e8 <__sfp_lock_acquire>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__sfp_lock_acquire+0x8>)
 800a9ea:	f000 b8b3 	b.w	800ab54 <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	200008fd 	.word	0x200008fd

0800a9f4 <__sfp_lock_release>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__sfp_lock_release+0x8>)
 800a9f6:	f000 b8ae 	b.w	800ab56 <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	200008fd 	.word	0x200008fd

0800aa00 <__sinit_lock_acquire>:
 800aa00:	4801      	ldr	r0, [pc, #4]	; (800aa08 <__sinit_lock_acquire+0x8>)
 800aa02:	f000 b8a7 	b.w	800ab54 <__retarget_lock_acquire_recursive>
 800aa06:	bf00      	nop
 800aa08:	200008fe 	.word	0x200008fe

0800aa0c <__sinit_lock_release>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__sinit_lock_release+0x8>)
 800aa0e:	f000 b8a2 	b.w	800ab56 <__retarget_lock_release_recursive>
 800aa12:	bf00      	nop
 800aa14:	200008fe 	.word	0x200008fe

0800aa18 <__sinit>:
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	f7ff fff0 	bl	800aa00 <__sinit_lock_acquire>
 800aa20:	69a3      	ldr	r3, [r4, #24]
 800aa22:	b11b      	cbz	r3, 800aa2c <__sinit+0x14>
 800aa24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa28:	f7ff bff0 	b.w	800aa0c <__sinit_lock_release>
 800aa2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa30:	6523      	str	r3, [r4, #80]	; 0x50
 800aa32:	4b13      	ldr	r3, [pc, #76]	; (800aa80 <__sinit+0x68>)
 800aa34:	4a13      	ldr	r2, [pc, #76]	; (800aa84 <__sinit+0x6c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	bf04      	itt	eq
 800aa3e:	2301      	moveq	r3, #1
 800aa40:	61a3      	streq	r3, [r4, #24]
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 f820 	bl	800aa88 <__sfp>
 800aa48:	6060      	str	r0, [r4, #4]
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 f81c 	bl	800aa88 <__sfp>
 800aa50:	60a0      	str	r0, [r4, #8]
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 f818 	bl	800aa88 <__sfp>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	60e0      	str	r0, [r4, #12]
 800aa5c:	2104      	movs	r1, #4
 800aa5e:	6860      	ldr	r0, [r4, #4]
 800aa60:	f7ff ff82 	bl	800a968 <std>
 800aa64:	68a0      	ldr	r0, [r4, #8]
 800aa66:	2201      	movs	r2, #1
 800aa68:	2109      	movs	r1, #9
 800aa6a:	f7ff ff7d 	bl	800a968 <std>
 800aa6e:	68e0      	ldr	r0, [r4, #12]
 800aa70:	2202      	movs	r2, #2
 800aa72:	2112      	movs	r1, #18
 800aa74:	f7ff ff78 	bl	800a968 <std>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	61a3      	str	r3, [r4, #24]
 800aa7c:	e7d2      	b.n	800aa24 <__sinit+0xc>
 800aa7e:	bf00      	nop
 800aa80:	0800ae78 	.word	0x0800ae78
 800aa84:	0800a9b1 	.word	0x0800a9b1

0800aa88 <__sfp>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	f7ff ffac 	bl	800a9e8 <__sfp_lock_acquire>
 800aa90:	4b1e      	ldr	r3, [pc, #120]	; (800ab0c <__sfp+0x84>)
 800aa92:	681e      	ldr	r6, [r3, #0]
 800aa94:	69b3      	ldr	r3, [r6, #24]
 800aa96:	b913      	cbnz	r3, 800aa9e <__sfp+0x16>
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff ffbd 	bl	800aa18 <__sinit>
 800aa9e:	3648      	adds	r6, #72	; 0x48
 800aaa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	d503      	bpl.n	800aab0 <__sfp+0x28>
 800aaa8:	6833      	ldr	r3, [r6, #0]
 800aaaa:	b30b      	cbz	r3, 800aaf0 <__sfp+0x68>
 800aaac:	6836      	ldr	r6, [r6, #0]
 800aaae:	e7f7      	b.n	800aaa0 <__sfp+0x18>
 800aab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aab4:	b9d5      	cbnz	r5, 800aaec <__sfp+0x64>
 800aab6:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <__sfp+0x88>)
 800aab8:	60e3      	str	r3, [r4, #12]
 800aaba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aabe:	6665      	str	r5, [r4, #100]	; 0x64
 800aac0:	f000 f847 	bl	800ab52 <__retarget_lock_init_recursive>
 800aac4:	f7ff ff96 	bl	800a9f4 <__sfp_lock_release>
 800aac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aacc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aad0:	6025      	str	r5, [r4, #0]
 800aad2:	61a5      	str	r5, [r4, #24]
 800aad4:	2208      	movs	r2, #8
 800aad6:	4629      	mov	r1, r5
 800aad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aadc:	f7fd fac8 	bl	8008070 <memset>
 800aae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aae8:	4620      	mov	r0, r4
 800aaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaec:	3468      	adds	r4, #104	; 0x68
 800aaee:	e7d9      	b.n	800aaa4 <__sfp+0x1c>
 800aaf0:	2104      	movs	r1, #4
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff ff62 	bl	800a9bc <__sfmoreglue>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	6030      	str	r0, [r6, #0]
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1d5      	bne.n	800aaac <__sfp+0x24>
 800ab00:	f7ff ff78 	bl	800a9f4 <__sfp_lock_release>
 800ab04:	230c      	movs	r3, #12
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	e7ee      	b.n	800aae8 <__sfp+0x60>
 800ab0a:	bf00      	nop
 800ab0c:	0800ae78 	.word	0x0800ae78
 800ab10:	ffff0001 	.word	0xffff0001

0800ab14 <_fwalk_reent>:
 800ab14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab18:	4606      	mov	r6, r0
 800ab1a:	4688      	mov	r8, r1
 800ab1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab20:	2700      	movs	r7, #0
 800ab22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab26:	f1b9 0901 	subs.w	r9, r9, #1
 800ab2a:	d505      	bpl.n	800ab38 <_fwalk_reent+0x24>
 800ab2c:	6824      	ldr	r4, [r4, #0]
 800ab2e:	2c00      	cmp	r4, #0
 800ab30:	d1f7      	bne.n	800ab22 <_fwalk_reent+0xe>
 800ab32:	4638      	mov	r0, r7
 800ab34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab38:	89ab      	ldrh	r3, [r5, #12]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d907      	bls.n	800ab4e <_fwalk_reent+0x3a>
 800ab3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab42:	3301      	adds	r3, #1
 800ab44:	d003      	beq.n	800ab4e <_fwalk_reent+0x3a>
 800ab46:	4629      	mov	r1, r5
 800ab48:	4630      	mov	r0, r6
 800ab4a:	47c0      	blx	r8
 800ab4c:	4307      	orrs	r7, r0
 800ab4e:	3568      	adds	r5, #104	; 0x68
 800ab50:	e7e9      	b.n	800ab26 <_fwalk_reent+0x12>

0800ab52 <__retarget_lock_init_recursive>:
 800ab52:	4770      	bx	lr

0800ab54 <__retarget_lock_acquire_recursive>:
 800ab54:	4770      	bx	lr

0800ab56 <__retarget_lock_release_recursive>:
 800ab56:	4770      	bx	lr

0800ab58 <__swhatbuf_r>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	460e      	mov	r6, r1
 800ab5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab60:	2900      	cmp	r1, #0
 800ab62:	b096      	sub	sp, #88	; 0x58
 800ab64:	4614      	mov	r4, r2
 800ab66:	461d      	mov	r5, r3
 800ab68:	da08      	bge.n	800ab7c <__swhatbuf_r+0x24>
 800ab6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	061a      	lsls	r2, r3, #24
 800ab74:	d410      	bmi.n	800ab98 <__swhatbuf_r+0x40>
 800ab76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab7a:	e00e      	b.n	800ab9a <__swhatbuf_r+0x42>
 800ab7c:	466a      	mov	r2, sp
 800ab7e:	f000 f903 	bl	800ad88 <_fstat_r>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	dbf1      	blt.n	800ab6a <__swhatbuf_r+0x12>
 800ab86:	9a01      	ldr	r2, [sp, #4]
 800ab88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab90:	425a      	negs	r2, r3
 800ab92:	415a      	adcs	r2, r3
 800ab94:	602a      	str	r2, [r5, #0]
 800ab96:	e7ee      	b.n	800ab76 <__swhatbuf_r+0x1e>
 800ab98:	2340      	movs	r3, #64	; 0x40
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	b016      	add	sp, #88	; 0x58
 800aba0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aba4 <__smakebuf_r>:
 800aba4:	898b      	ldrh	r3, [r1, #12]
 800aba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aba8:	079d      	lsls	r5, r3, #30
 800abaa:	4606      	mov	r6, r0
 800abac:	460c      	mov	r4, r1
 800abae:	d507      	bpl.n	800abc0 <__smakebuf_r+0x1c>
 800abb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	2301      	movs	r3, #1
 800abba:	6163      	str	r3, [r4, #20]
 800abbc:	b002      	add	sp, #8
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	ab01      	add	r3, sp, #4
 800abc2:	466a      	mov	r2, sp
 800abc4:	f7ff ffc8 	bl	800ab58 <__swhatbuf_r>
 800abc8:	9900      	ldr	r1, [sp, #0]
 800abca:	4605      	mov	r5, r0
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff f963 	bl	8009e98 <_malloc_r>
 800abd2:	b948      	cbnz	r0, 800abe8 <__smakebuf_r+0x44>
 800abd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	d4ef      	bmi.n	800abbc <__smakebuf_r+0x18>
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	f043 0302 	orr.w	r3, r3, #2
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	e7e3      	b.n	800abb0 <__smakebuf_r+0xc>
 800abe8:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <__smakebuf_r+0x7c>)
 800abea:	62b3      	str	r3, [r6, #40]	; 0x28
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	6020      	str	r0, [r4, #0]
 800abf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf4:	81a3      	strh	r3, [r4, #12]
 800abf6:	9b00      	ldr	r3, [sp, #0]
 800abf8:	6163      	str	r3, [r4, #20]
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	6120      	str	r0, [r4, #16]
 800abfe:	b15b      	cbz	r3, 800ac18 <__smakebuf_r+0x74>
 800ac00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac04:	4630      	mov	r0, r6
 800ac06:	f000 f8d1 	bl	800adac <_isatty_r>
 800ac0a:	b128      	cbz	r0, 800ac18 <__smakebuf_r+0x74>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	89a0      	ldrh	r0, [r4, #12]
 800ac1a:	4305      	orrs	r5, r0
 800ac1c:	81a5      	strh	r5, [r4, #12]
 800ac1e:	e7cd      	b.n	800abbc <__smakebuf_r+0x18>
 800ac20:	0800a9b1 	.word	0x0800a9b1

0800ac24 <_malloc_usable_size_r>:
 800ac24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac28:	1f18      	subs	r0, r3, #4
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbc      	itt	lt
 800ac2e:	580b      	ldrlt	r3, [r1, r0]
 800ac30:	18c0      	addlt	r0, r0, r3
 800ac32:	4770      	bx	lr

0800ac34 <_raise_r>:
 800ac34:	291f      	cmp	r1, #31
 800ac36:	b538      	push	{r3, r4, r5, lr}
 800ac38:	4604      	mov	r4, r0
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	d904      	bls.n	800ac48 <_raise_r+0x14>
 800ac3e:	2316      	movs	r3, #22
 800ac40:	6003      	str	r3, [r0, #0]
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac4a:	b112      	cbz	r2, 800ac52 <_raise_r+0x1e>
 800ac4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac50:	b94b      	cbnz	r3, 800ac66 <_raise_r+0x32>
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f830 	bl	800acb8 <_getpid_r>
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac62:	f000 b817 	b.w	800ac94 <_kill_r>
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d00a      	beq.n	800ac80 <_raise_r+0x4c>
 800ac6a:	1c59      	adds	r1, r3, #1
 800ac6c:	d103      	bne.n	800ac76 <_raise_r+0x42>
 800ac6e:	2316      	movs	r3, #22
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	2001      	movs	r0, #1
 800ac74:	e7e7      	b.n	800ac46 <_raise_r+0x12>
 800ac76:	2400      	movs	r4, #0
 800ac78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	4798      	blx	r3
 800ac80:	2000      	movs	r0, #0
 800ac82:	e7e0      	b.n	800ac46 <_raise_r+0x12>

0800ac84 <raise>:
 800ac84:	4b02      	ldr	r3, [pc, #8]	; (800ac90 <raise+0xc>)
 800ac86:	4601      	mov	r1, r0
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	f7ff bfd3 	b.w	800ac34 <_raise_r>
 800ac8e:	bf00      	nop
 800ac90:	20000048 	.word	0x20000048

0800ac94 <_kill_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4d07      	ldr	r5, [pc, #28]	; (800acb4 <_kill_r+0x20>)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	4611      	mov	r1, r2
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	f7f6 feb7 	bl	8001a14 <_kill>
 800aca6:	1c43      	adds	r3, r0, #1
 800aca8:	d102      	bne.n	800acb0 <_kill_r+0x1c>
 800acaa:	682b      	ldr	r3, [r5, #0]
 800acac:	b103      	cbz	r3, 800acb0 <_kill_r+0x1c>
 800acae:	6023      	str	r3, [r4, #0]
 800acb0:	bd38      	pop	{r3, r4, r5, pc}
 800acb2:	bf00      	nop
 800acb4:	200008f8 	.word	0x200008f8

0800acb8 <_getpid_r>:
 800acb8:	f7f6 bea4 	b.w	8001a04 <_getpid>

0800acbc <__sread>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	460c      	mov	r4, r1
 800acc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc4:	f000 f894 	bl	800adf0 <_read_r>
 800acc8:	2800      	cmp	r0, #0
 800acca:	bfab      	itete	ge
 800accc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acce:	89a3      	ldrhlt	r3, [r4, #12]
 800acd0:	181b      	addge	r3, r3, r0
 800acd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acd6:	bfac      	ite	ge
 800acd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acda:	81a3      	strhlt	r3, [r4, #12]
 800acdc:	bd10      	pop	{r4, pc}

0800acde <__swrite>:
 800acde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace2:	461f      	mov	r7, r3
 800ace4:	898b      	ldrh	r3, [r1, #12]
 800ace6:	05db      	lsls	r3, r3, #23
 800ace8:	4605      	mov	r5, r0
 800acea:	460c      	mov	r4, r1
 800acec:	4616      	mov	r6, r2
 800acee:	d505      	bpl.n	800acfc <__swrite+0x1e>
 800acf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf4:	2302      	movs	r3, #2
 800acf6:	2200      	movs	r2, #0
 800acf8:	f000 f868 	bl	800adcc <_lseek_r>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	4632      	mov	r2, r6
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	f000 b817 	b.w	800ad44 <_write_r>

0800ad16 <__sseek>:
 800ad16:	b510      	push	{r4, lr}
 800ad18:	460c      	mov	r4, r1
 800ad1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1e:	f000 f855 	bl	800adcc <_lseek_r>
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	bf15      	itete	ne
 800ad28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad32:	81a3      	strheq	r3, [r4, #12]
 800ad34:	bf18      	it	ne
 800ad36:	81a3      	strhne	r3, [r4, #12]
 800ad38:	bd10      	pop	{r4, pc}

0800ad3a <__sclose>:
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	f000 b813 	b.w	800ad68 <_close_r>
	...

0800ad44 <_write_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d07      	ldr	r5, [pc, #28]	; (800ad64 <_write_r+0x20>)
 800ad48:	4604      	mov	r4, r0
 800ad4a:	4608      	mov	r0, r1
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	2200      	movs	r2, #0
 800ad50:	602a      	str	r2, [r5, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f7f6 fe95 	bl	8001a82 <_write>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_write_r+0x1e>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_write_r+0x1e>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	200008f8 	.word	0x200008f8

0800ad68 <_close_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d06      	ldr	r5, [pc, #24]	; (800ad84 <_close_r+0x1c>)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	f7f6 fea1 	bl	8001aba <_close>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_close_r+0x1a>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_close_r+0x1a>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	200008f8 	.word	0x200008f8

0800ad88 <_fstat_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d07      	ldr	r5, [pc, #28]	; (800ada8 <_fstat_r+0x20>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	4611      	mov	r1, r2
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	f7f6 fe9c 	bl	8001ad2 <_fstat>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d102      	bne.n	800ada4 <_fstat_r+0x1c>
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	b103      	cbz	r3, 800ada4 <_fstat_r+0x1c>
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	bd38      	pop	{r3, r4, r5, pc}
 800ada6:	bf00      	nop
 800ada8:	200008f8 	.word	0x200008f8

0800adac <_isatty_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d06      	ldr	r5, [pc, #24]	; (800adc8 <_isatty_r+0x1c>)
 800adb0:	2300      	movs	r3, #0
 800adb2:	4604      	mov	r4, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	f7f6 fe9b 	bl	8001af2 <_isatty>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_isatty_r+0x1a>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_isatty_r+0x1a>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	200008f8 	.word	0x200008f8

0800adcc <_lseek_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_lseek_r+0x20>)
 800add0:	4604      	mov	r4, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f6 fe94 	bl	8001b08 <_lseek>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_lseek_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_lseek_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	200008f8 	.word	0x200008f8

0800adf0 <_read_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d07      	ldr	r5, [pc, #28]	; (800ae10 <_read_r+0x20>)
 800adf4:	4604      	mov	r4, r0
 800adf6:	4608      	mov	r0, r1
 800adf8:	4611      	mov	r1, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f6 fe22 	bl	8001a48 <_read>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_read_r+0x1e>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_read_r+0x1e>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	200008f8 	.word	0x200008f8

0800ae14 <_init>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	bf00      	nop
 800ae18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1a:	bc08      	pop	{r3}
 800ae1c:	469e      	mov	lr, r3
 800ae1e:	4770      	bx	lr

0800ae20 <_fini>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	bf00      	nop
 800ae24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae26:	bc08      	pop	{r3}
 800ae28:	469e      	mov	lr, r3
 800ae2a:	4770      	bx	lr
