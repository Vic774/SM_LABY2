
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a7c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009c80  08009c80  00019c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a4  0800a0a4  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000218  0800a2c4  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800a2c4  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b06d  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389e  00000000  00000000  0003b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  000400e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b31b  00000000  00000000  000414e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b43f  00000000  00000000  0006c7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103b74  00000000  00000000  00087c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006978  00000000  00000000  0018b800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000218 	.word	0x20000218
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c64 	.word	0x08009c64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000021c 	.word	0x2000021c
 800023c:	08009c64 	.word	0x08009c64

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	4613      	mov	r3, r2
 8000604:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fb5a 	bl	8000cc0 <null_ptr_check>
 800060c:	4603      	mov	r3, r0
 800060e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d11c      	bne.n	8000652 <bmp280_get_regs+0x5e>
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d019      	beq.n	8000652 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062c:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685c      	ldr	r4, [r3, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7858      	ldrb	r0, [r3, #1]
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	b29b      	uxth	r3, r3
 800063a:	7bf9      	ldrb	r1, [r7, #15]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	47a0      	blx	r4
 8000640:	4603      	mov	r3, r0
 8000642:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d004      	beq.n	8000656 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 800064c:	23fc      	movs	r3, #252	; 0xfc
 800064e:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000650:	e001      	b.n	8000656 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4613      	mov	r3, r2
 8000670:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b04      	cmp	r3, #4
 8000676:	d901      	bls.n	800067c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 800067c:	6838      	ldr	r0, [r7, #0]
 800067e:	f000 fb1f 	bl	8000cc0 <null_ptr_check>
 8000682:	4603      	mov	r3, r0
 8000684:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14d      	bne.n	800072a <bmp280_set_regs+0xc8>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d04a      	beq.n	800072a <bmp280_set_regs+0xc8>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d047      	beq.n	800072a <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d041      	beq.n	8000724 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d114      	bne.n	80006d8 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	76fb      	strb	r3, [r7, #27]
 80006b2:	e00d      	b.n	80006d0 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80006b4:	7efb      	ldrb	r3, [r7, #27]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	7efb      	ldrb	r3, [r7, #27]
 80006be:	68f9      	ldr	r1, [r7, #12]
 80006c0:	440b      	add	r3, r1
 80006c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006ca:	7efb      	ldrb	r3, [r7, #27]
 80006cc:	3301      	adds	r3, #1
 80006ce:	76fb      	strb	r3, [r7, #27]
 80006d0:	7efa      	ldrb	r2, [r7, #27]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3ed      	bcc.n	80006b4 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d90d      	bls.n	80006fa <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f107 0110 	add.w	r1, r7, #16
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f000 fb0a 	bl	8000d00 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	83bb      	strh	r3, [r7, #28]
 80006f8:	e001      	b.n	80006fe <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	689c      	ldr	r4, [r3, #8]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	7858      	ldrb	r0, [r3, #1]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	7819      	ldrb	r1, [r3, #0]
 800070a:	8bbb      	ldrh	r3, [r7, #28]
 800070c:	f107 0210 	add.w	r2, r7, #16
 8000710:	47a0      	blx	r4
 8000712:	4603      	mov	r3, r0
 8000714:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800071e:	23fc      	movs	r3, #252	; 0xfc
 8000720:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000722:	e005      	b.n	8000730 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000724:	23fd      	movs	r3, #253	; 0xfd
 8000726:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000728:	e002      	b.n	8000730 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	77fb      	strb	r3, [r7, #31]
 800072e:	e000      	b.n	8000732 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000730:	bf00      	nop
    }

    return rslt;
 8000732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}

0800073e <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000746:	23e0      	movs	r3, #224	; 0xe0
 8000748:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800074a:	23b6      	movs	r3, #182	; 0xb6
 800074c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 fab6 	bl	8000cc0 <null_ptr_check>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000760:	f107 010d 	add.w	r1, r7, #13
 8000764:	f107 000e 	add.w	r0, r7, #14
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	f7ff ff79 	bl	8000662 <bmp280_set_regs>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	2002      	movs	r0, #2
 800077a:	4798      	blx	r3
    }

    return rslt;
 800077c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fa93 	bl	8000cc0 <null_ptr_check>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d150      	bne.n	8000848 <bmp280_init+0xc0>
    {
        while (try_count)
 80007a6:	e02d      	b.n	8000804 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	20d0      	movs	r0, #208	; 0xd0
 80007b0:	f7ff ff20 	bl	80005f4 <bmp280_get_regs>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d11a      	bne.n	80007f6 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80007c4:	2b56      	cmp	r3, #86	; 0x56
 80007c6:	d007      	beq.n	80007d8 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b57      	cmp	r3, #87	; 0x57
 80007ce:	d003      	beq.n	80007d8 <bmp280_init+0x50>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b58      	cmp	r3, #88	; 0x58
 80007d6:	d10e      	bne.n	80007f6 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffb0 	bl	800073e <bmp280_soft_reset>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d110      	bne.n	800080c <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fab4 	bl	8000d58 <get_calib_param>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007f4:	e00a      	b.n	800080c <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	200a      	movs	r0, #10
 80007fc:	4798      	blx	r3
            --try_count;
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	3b01      	subs	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ce      	bne.n	80007a8 <bmp280_init+0x20>
 800080a:	e000      	b.n	800080e <bmp280_init+0x86>
                break;
 800080c:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000814:	23fe      	movs	r3, #254	; 0xfe
 8000816:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8000818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d113      	bne.n	8000848 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000862:	6838      	ldr	r0, [r7, #0]
 8000864:	f000 fa2c 	bl	8000cc0 <null_ptr_check>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d137      	bne.n	80008e4 <bmp280_get_config+0x90>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d034      	beq.n	80008e4 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800087a:	f107 010c 	add.w	r1, r7, #12
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2202      	movs	r2, #2
 8000882:	20f4      	movs	r0, #244	; 0xf4
 8000884:	f7ff feb6 	bl	80005f4 <bmp280_get_regs>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000894:	7b3b      	ldrb	r3, [r7, #12]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	109b      	asrs	r3, r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	095b      	lsrs	r3, r3, #5
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	109b      	asrs	r3, r3, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	332c      	adds	r3, #44	; 0x2c
 80008da:	6810      	ldr	r0, [r2, #0]
 80008dc:	6018      	str	r0, [r3, #0]
 80008de:	7912      	ldrb	r2, [r2, #4]
 80008e0:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008e2:	e001      	b.n	80008e8 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fac6 	bl	8000e94 <conf_sensor>
 8000908:	4603      	mov	r3, r0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 f9ce 	bl	8000cc0 <null_ptr_check>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d109      	bne.n	8000944 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 faaa 	bl	8000e94 <conf_sensor>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	2300      	movs	r3, #0
 8000960:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f000 f9ac 	bl	8000cc0 <null_ptr_check>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800096c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d133      	bne.n	80009dc <bmp280_get_uncomp_data+0x8c>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d030      	beq.n	80009dc <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800097a:	f107 0108 	add.w	r1, r7, #8
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2206      	movs	r2, #6
 8000982:	20f7      	movs	r0, #247	; 0xf7
 8000984:	f7ff fe36 	bl	80005f4 <bmp280_get_regs>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800098c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d120      	bne.n	80009d6 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000994:	7a3b      	ldrb	r3, [r7, #8]
 8000996:	031a      	lsls	r2, r3, #12
 8000998:	7a7b      	ldrb	r3, [r7, #9]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4313      	orrs	r3, r2
 800099e:	7aba      	ldrb	r2, [r7, #10]
 80009a0:	0912      	lsrs	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	031a      	lsls	r2, r3, #12
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	4313      	orrs	r3, r2
 80009b4:	7b7a      	ldrb	r2, [r7, #13]
 80009b6:	0912      	lsrs	r2, r2, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4610      	mov	r0, r2
 80009cc:	f000 fb18 	bl	8001000 <st_check_boundaries>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009d4:	e004      	b.n	80009e0 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009d6:	23f3      	movs	r3, #243	; 0xf3
 80009d8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009da:	e001      	b.n	80009e0 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009dc:	23ff      	movs	r3, #255	; 0xff
 80009de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f961 	bl	8000cc0 <null_ptr_check>
 80009fe:	4603      	mov	r3, r0
 8000a00:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8000a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d150      	bne.n	8000aac <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	da00      	bge.n	8000a12 <bmp280_get_comp_temp_32bit+0x26>
 8000a10:	3307      	adds	r3, #7
 8000a12:	10db      	asrs	r3, r3, #3
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	8a1b      	ldrh	r3, [r3, #16]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da01      	bge.n	8000a30 <bmp280_get_comp_temp_32bit+0x44>
 8000a2c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000a30:	12db      	asrs	r3, r3, #11
 8000a32:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <bmp280_get_comp_temp_32bit+0x50>
 8000a3a:	330f      	adds	r3, #15
 8000a3c:	111b      	asrs	r3, r3, #4
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	8a1b      	ldrh	r3, [r3, #16]
 8000a44:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da00      	bge.n	8000a4e <bmp280_get_comp_temp_32bit+0x62>
 8000a4c:	330f      	adds	r3, #15
 8000a4e:	111b      	asrs	r3, r3, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8a1b      	ldrh	r3, [r3, #16]
 8000a56:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da01      	bge.n	8000a64 <bmp280_get_comp_temp_32bit+0x78>
 8000a60:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a64:	131b      	asrs	r3, r3, #12
 8000a66:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8000a6e:	fb02 f303 	mul.w	r3, r2, r3
        var2 =
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da03      	bge.n	8000a7e <bmp280_get_comp_temp_32bit+0x92>
 8000a76:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	139b      	asrs	r3, r3, #14
 8000a80:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	441a      	add	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	3380      	adds	r3, #128	; 0x80
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da00      	bge.n	8000a9e <bmp280_get_comp_temp_32bit+0xb2>
 8000a9c:	33ff      	adds	r3, #255	; 0xff
 8000a9e:	121b      	asrs	r3, r3, #8
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	77fb      	strb	r3, [r7, #31]
 8000aaa:	e004      	b.n	8000ab6 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8000ab2:	23f2      	movs	r3, #242	; 0xf2
 8000ab4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8000ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <bmp280_get_comp_pres_32bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_pres_32bit(uint32_t *comp_pres, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f8f5 	bl	8000cc0 <null_ptr_check>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8000ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 80e4 	bne.w	8000cac <bmp280_get_comp_pres_32bit+0x1e8>
    {
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da00      	bge.n	8000aee <bmp280_get_comp_pres_32bit+0x2a>
 8000aec:	3301      	adds	r3, #1
 8000aee:	105b      	asrs	r3, r3, #1
 8000af0:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000af4:	61bb      	str	r3, [r7, #24]
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da00      	bge.n	8000afe <bmp280_get_comp_pres_32bit+0x3a>
 8000afc:	3303      	adds	r3, #3
 8000afe:	109b      	asrs	r3, r3, #2
 8000b00:	461a      	mov	r2, r3
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da00      	bge.n	8000b0a <bmp280_get_comp_pres_32bit+0x46>
 8000b08:	3303      	adds	r3, #3
 8000b0a:	109b      	asrs	r3, r3, #2
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da01      	bge.n	8000b18 <bmp280_get_comp_pres_32bit+0x54>
 8000b14:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000b18:	12db      	asrs	r3, r3, #11
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da00      	bge.n	8000b46 <bmp280_get_comp_pres_32bit+0x82>
 8000b44:	3303      	adds	r3, #3
 8000b46:	109b      	asrs	r3, r3, #2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	4413      	add	r3, r2
 8000b54:	617b      	str	r3, [r7, #20]
        var1 =
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da00      	bge.n	8000b66 <bmp280_get_comp_pres_32bit+0xa2>
 8000b64:	3303      	adds	r3, #3
 8000b66:	109b      	asrs	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <bmp280_get_comp_pres_32bit+0xae>
 8000b70:	3303      	adds	r3, #3
 8000b72:	109b      	asrs	r3, r3, #2
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da03      	bge.n	8000b84 <bmp280_get_comp_pres_32bit+0xc0>
 8000b7c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000b80:	441a      	add	r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	135b      	asrs	r3, r3, #13
 8000b86:	fb01 f303 	mul.w	r3, r1, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da00      	bge.n	8000b90 <bmp280_get_comp_pres_32bit+0xcc>
 8000b8e:	3307      	adds	r3, #7
 8000b90:	10db      	asrs	r3, r3, #3
 8000b92:	461a      	mov	r2, r3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da00      	bge.n	8000ba8 <bmp280_get_comp_pres_32bit+0xe4>
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	105b      	asrs	r3, r3, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 8000baa:	4413      	add	r3, r2
        var1 =
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da02      	bge.n	8000bb6 <bmp280_get_comp_pres_32bit+0xf2>
 8000bb0:	4a41      	ldr	r2, [pc, #260]	; (8000cb8 <bmp280_get_comp_pres_32bit+0x1f4>)
 8000bb2:	441a      	add	r2, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	149b      	asrs	r3, r3, #18
 8000bb8:	61bb      	str	r3, [r7, #24]
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	8ad2      	ldrh	r2, [r2, #22]
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <bmp280_get_comp_pres_32bit+0x110>
 8000bcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	13db      	asrs	r3, r3, #15
 8000bd6:	61bb      	str	r3, [r7, #24]
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da01      	bge.n	8000be2 <bmp280_get_comp_pres_32bit+0x11e>
 8000bde:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000be2:	131b      	asrs	r3, r3, #12
 8000be4:	425b      	negs	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	f640 4235 	movw	r2, #3125	; 0xc35
 8000bf0:	fb03 f202 	mul.w	r2, r3, r2
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <bmp280_get_comp_pres_32bit+0x1f8>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	6013      	str	r3, [r2, #0]

        /* Avoid exception caused by division with zero */
        if (var1 != 0)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d04f      	beq.n	8000ca2 <bmp280_get_comp_pres_32bit+0x1de>
        {
            /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
            if (*comp_pres < 0x80000000)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db08      	blt.n	8000c1c <bmp280_get_comp_pres_32bit+0x158>
            {
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	005a      	lsls	r2, r3, #1
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e007      	b.n	8000c2c <bmp280_get_comp_pres_32bit+0x168>
            }
            else
            {
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	005a      	lsls	r2, r3, #1
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	601a      	str	r2, [r3, #0]
            }
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000c32:	4619      	mov	r1, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	08d2      	lsrs	r2, r2, #3
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	0b5b      	lsrs	r3, r3, #13
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da01      	bge.n	8000c52 <bmp280_get_comp_pres_32bit+0x18e>
 8000c4e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000c52:	131b      	asrs	r3, r3, #12
 8000c54:	61bb      	str	r3, [r7, #24]
                   4096;
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da03      	bge.n	8000c74 <bmp280_get_comp_pres_32bit+0x1b0>
 8000c6c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000c70:	441a      	add	r2, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	135b      	asrs	r3, r3, #13
 8000c76:	617b      	str	r3, [r7, #20]
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	4413      	add	r3, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <bmp280_get_comp_pres_32bit+0x1ce>
 8000c90:	330f      	adds	r3, #15
 8000c92:	111b      	asrs	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	77fb      	strb	r3, [r7, #31]
 8000ca0:	e004      	b.n	8000cac <bmp280_get_comp_pres_32bit+0x1e8>
        }
        else
        {
            *comp_pres = 0;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
 8000ca8:	23f1      	movs	r3, #241	; 0xf1
 8000caa:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8000cac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0003ffff 	.word	0x0003ffff
 8000cbc:	c3500000 	.word	0xc3500000

08000cc0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <null_ptr_check+0x26>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <null_ptr_check+0x26>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <null_ptr_check+0x26>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000ce6:	23ff      	movs	r3, #255	; 0xff
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e001      	b.n	8000cf0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e016      	b.n	8000d42 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	441a      	add	r2, r3
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	440b      	add	r3, r1
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	440b      	add	r3, r1
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	75fb      	strb	r3, [r7, #23]
 8000d42:	7dfa      	ldrb	r2, [r7, #23]
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3e4      	bcc.n	8000d14 <interleave_data+0x14>
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	371c      	adds	r7, #28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffa3 	bl	8000cc0 <null_ptr_check>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d17f      	bne.n	8000e88 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000d88:	f107 010c 	add.w	r1, r7, #12
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2218      	movs	r2, #24
 8000d90:	2088      	movs	r0, #136	; 0x88
 8000d92:	f7ff fc2f 	bl	80005f4 <bmp280_get_regs>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d171      	bne.n	8000e88 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000dca:	7c7b      	ldrb	r3, [r7, #17]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	7c3b      	ldrb	r3, [r7, #16]
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000ddc:	7cfb      	ldrb	r3, [r7, #19]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	7cbb      	ldrb	r3, [r7, #18]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000df0:	7d7b      	ldrb	r3, [r7, #21]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	7d3b      	ldrb	r3, [r7, #20]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000e14:	7e7b      	ldrb	r3, [r7, #25]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	7e3b      	ldrb	r3, [r7, #24]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000e26:	7efb      	ldrb	r3, [r7, #27]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	7ebb      	ldrb	r3, [r7, #26]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000e38:	7f7b      	ldrb	r3, [r7, #29]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	7f3b      	ldrb	r3, [r7, #28]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	7fbb      	ldrb	r3, [r7, #30]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000e5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000ea6:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8000eaa:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff07 	bl	8000cc0 <null_ptr_check>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8095 	bne.w	8000fea <conf_sensor+0x156>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8091 	beq.w	8000fea <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000ec8:	f107 0114 	add.w	r1, r7, #20
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	20f4      	movs	r0, #244	; 0xf4
 8000ed2:	f7ff fb8f 	bl	80005f4 <bmp280_get_regs>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8086 	bne.w	8000ff0 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fc2a 	bl	800073e <bmp280_soft_reset>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d17c      	bne.n	8000ff0 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000ef6:	7d3b      	ldrb	r3, [r7, #20]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	f023 031c 	bic.w	r3, r3, #28
 8000f18:	b25a      	sxtb	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	f003 031c 	and.w	r3, r3, #28
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000f30:	7d7b      	ldrb	r3, [r7, #21]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	789b      	ldrb	r3, [r3, #2]
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000f4a:	7d7b      	ldrb	r3, [r7, #21]
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f023 031c 	bic.w	r3, r3, #28
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	78db      	ldrb	r3, [r3, #3]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	f003 031c 	and.w	r3, r3, #28
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000f6a:	7d7b      	ldrb	r3, [r7, #21]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000f88:	f107 0114 	add.w	r1, r7, #20
 8000f8c:	f107 0010 	add.w	r0, r7, #16
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f7ff fb65 	bl	8000662 <bmp280_set_regs>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d125      	bne.n	8000ff0 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	332c      	adds	r3, #44	; 0x2c
 8000faa:	6810      	ldr	r0, [r2, #0]
 8000fac:	6018      	str	r0, [r3, #0]
 8000fae:	7912      	ldrb	r2, [r2, #4]
 8000fb0:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01b      	beq.n	8000ff0 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f023 0303 	bic.w	r3, r3, #3
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000fd4:	f107 0114 	add.w	r1, r7, #20
 8000fd8:	f107 0010 	add.w	r0, r7, #16
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f7ff fb3f 	bl	8000662 <bmp280_set_regs>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000fe8:	e002      	b.n	8000ff0 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	75fb      	strb	r3, [r7, #23]
 8000fee:	e000      	b.n	8000ff2 <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8000ff0:	bf00      	nop
    }

    return rslt;
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd03      	ble.n	800101c <st_check_boundaries+0x1c>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <st_check_boundaries+0x6c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	dd09      	ble.n	8001030 <st_check_boundaries+0x30>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd03      	ble.n	800102a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <st_check_boundaries+0x6c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	dd02      	ble.n	8001030 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800102a:	23f4      	movs	r3, #244	; 0xf4
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e015      	b.n	800105c <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dd03      	ble.n	800103e <st_check_boundaries+0x3e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <st_check_boundaries+0x6c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	dd02      	ble.n	8001044 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 800103e:	23f6      	movs	r3, #246	; 0xf6
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e00b      	b.n	800105c <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd03      	ble.n	8001052 <st_check_boundaries+0x52>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <st_check_boundaries+0x6c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	dd02      	ble.n	8001058 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001052:	23f5      	movs	r3, #245	; 0xf5
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e001      	b.n	800105c <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	000fffef 	.word	0x000fffef

08001070 <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fb85 	bl	8000788 <bmp280_init>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fbe3 	bl	8000854 <bmp280_get_config>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8001092:	2300      	movs	r3, #0
 8001094:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8001096:	2301      	movs	r3, #1
 8001098:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 800109a:	2301      	movs	r3, #1
 800109c:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 800109e:	2303      	movs	r3, #3
 80010a0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc23 	bl	80008f4 <bmp280_set_config>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2003      	movs	r0, #3
 80010b6:	f7ff fc2c 	bl	8000912 <bmp280_set_power_mode>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]

  return rslt;
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	603a      	str	r2, [r7, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t iError = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  #ifdef DEBUG
  	  uint8_t data[BMP280_SPI_BUFFER_LEN] = {0,};
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	615a      	str	r2, [r3, #20]
  	  memcpy(data, reg_data, length);
 8001104:	88ba      	ldrh	r2, [r7, #4]
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f005 ff65 	bl	8006fdc <memcpy>
  #endif

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <bmp280_spi_reg_write+0xdc>)
 8001116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <bmp280_spi_reg_write+0xe0>)
 800111e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	f001 faff 	bl	8002728 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(BMP280_SPI, &reg_addr, BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 800112a:	1db9      	adds	r1, r7, #6
 800112c:	2305      	movs	r3, #5
 800112e:	2201      	movs	r2, #1
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <bmp280_spi_reg_write+0xe4>)
 8001132:	f002 fe62 	bl	8003dfa <HAL_SPI_Transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  status += HAL_SPI_Transmit(BMP280_SPI,  reg_data, length,            BMP280_TIMEOUT);
 800113c:	88ba      	ldrh	r2, [r7, #4]
 800113e:	2305      	movs	r3, #5
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <bmp280_spi_reg_write+0xe4>)
 8001144:	f002 fe59 	bl	8003dfa <HAL_SPI_Transmit>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001150:	4413      	add	r3, r2
 8001152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800115c:	e012      	b.n	8001184 <bmp280_spi_reg_write+0xb8>
    HAL_GPIO_WritePin(BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET);
 800115e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <bmp280_spi_reg_write+0xdc>)
 8001164:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <bmp280_spi_reg_write+0xe0>)
 800116e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	f001 fad7 	bl	8002728 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800117a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800117e:	3301      	adds	r3, #1
 8001180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0e8      	beq.n	800115e <bmp280_spi_reg_write+0x92>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800118c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <bmp280_spi_reg_write+0xce>
    iError = -1;
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return iError;
 800119a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004
 80011b0:	2000023c 	.word	0x2000023c

080011b4 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	603a      	str	r2, [r7, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	460b      	mov	r3, r1
 80011c4:	71bb      	strb	r3, [r7, #6]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t iError = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <bmp280_spi_reg_read+0xdc>)
 80011da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <bmp280_spi_reg_read+0xe0>)
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	f001 fa9d 	bl	8002728 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(BMP280_SPI, &reg_addr, BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 80011ee:	1db9      	adds	r1, r7, #6
 80011f0:	2305      	movs	r3, #5
 80011f2:	2201      	movs	r2, #1
 80011f4:	4828      	ldr	r0, [pc, #160]	; (8001298 <bmp280_spi_reg_read+0xe4>)
 80011f6:	f002 fe00 	bl	8003dfa <HAL_SPI_Transmit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  status += HAL_SPI_Receive( BMP280_SPI,  reg_data, length,            BMP280_TIMEOUT);
 8001200:	88ba      	ldrh	r2, [r7, #4]
 8001202:	2305      	movs	r3, #5
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <bmp280_spi_reg_read+0xe4>)
 8001208:	f002 ff65 	bl	80040d6 <HAL_SPI_Receive>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001214:	4413      	add	r3, r2
 8001216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001220:	e012      	b.n	8001248 <bmp280_spi_reg_read+0x94>
    HAL_GPIO_WritePin(BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET);
 8001222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <bmp280_spi_reg_read+0xdc>)
 8001228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <bmp280_spi_reg_read+0xe0>)
 8001232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	f001 fa75 	bl	8002728 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++)
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001242:	3301      	adds	r3, #1
 8001244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0e8      	beq.n	8001222 <bmp280_spi_reg_read+0x6e>

  #ifdef DEBUG
  	  uint8_t data[BMP280_SPI_BUFFER_LEN] = {0,};
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
  	  memcpy(data, reg_data, length);
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f005 feb4 	bl	8006fdc <memcpy>
  #endif

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <bmp280_spi_reg_read+0xce>
    iError = -1;
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return iError;
 8001282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001286:	4618      	mov	r0, r3
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004
 8001298:	2000023c 	.word	0x2000023c

0800129c <BMP280_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP280 device structure
 *
 *  @return Temperature measurement [degC]
 */
float BMP280_ReadTemperature_degC(struct bmp280_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  int32_t temp_int;
  struct bmp280_uncomp_data bmp280_data;
  bmp280_get_uncomp_data(&bmp280_data, dev);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fb50 	bl	8000950 <bmp280_get_uncomp_data>
  bmp280_get_comp_temp_32bit(&temp_int,  bmp280_data.uncomp_temp,  dev);
 80012b0:	68f9      	ldr	r1, [r7, #12]
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb97 	bl	80009ec <bmp280_get_comp_temp_32bit>
  return (float)temp_int / 100.0f;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80012e0 <BMP280_ReadTemperature_degC+0x44>
 80012cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	42c80000 	.word	0x42c80000

080012e4 <BMP280_ReadPressure_hPa>:
 *  @param[in]  dev   : BMP280 device structure
 *
 *  @return Pressure measurement [hPa]
 */
float BMP280_ReadPressure_hPa(struct bmp280_dev *dev)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t press_int;
  struct bmp280_uncomp_data bmp280_data;
  bmp280_get_uncomp_data(&bmp280_data, &hbmp280_1);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	490d      	ldr	r1, [pc, #52]	; (8001328 <BMP280_ReadPressure_hPa+0x44>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fb2c 	bl	8000950 <bmp280_get_uncomp_data>
  bmp280_get_comp_pres_32bit(&press_int, bmp280_data.uncomp_press, dev);
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fbdf 	bl	8000ac4 <bmp280_get_comp_pres_32bit>
  return (float)press_int / 100.0f;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001310:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800132c <BMP280_ReadPressure_hPa+0x48>
 8001314:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001318:	eef0 7a66 	vmov.f32	s15, s13
}
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	42c80000 	.word	0x42c80000

08001330 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	4b77      	ldr	r3, [pc, #476]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a76      	ldr	r2, [pc, #472]	; (8001524 <MX_GPIO_Init+0x1f4>)
 800134c:	f043 0310 	orr.w	r3, r3, #16
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b74      	ldr	r3, [pc, #464]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b71      	ldr	r3, [pc, #452]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a70      	ldr	r2, [pc, #448]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b6e      	ldr	r3, [pc, #440]	; (8001524 <MX_GPIO_Init+0x1f4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	4b6b      	ldr	r3, [pc, #428]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a6a      	ldr	r2, [pc, #424]	; (8001524 <MX_GPIO_Init+0x1f4>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b68      	ldr	r3, [pc, #416]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b65      	ldr	r3, [pc, #404]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a64      	ldr	r2, [pc, #400]	; (8001524 <MX_GPIO_Init+0x1f4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b62      	ldr	r3, [pc, #392]	; (8001524 <MX_GPIO_Init+0x1f4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a5e      	ldr	r2, [pc, #376]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b59      	ldr	r3, [pc, #356]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a58      	ldr	r2, [pc, #352]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b56      	ldr	r3, [pc, #344]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d6:	4b53      	ldr	r3, [pc, #332]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a52      	ldr	r2, [pc, #328]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b50      	ldr	r3, [pc, #320]	; (8001524 <MX_GPIO_Init+0x1f4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2110      	movs	r1, #16
 80013f2:	484d      	ldr	r0, [pc, #308]	; (8001528 <MX_GPIO_Init+0x1f8>)
 80013f4:	f001 f998 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80013fe:	484b      	ldr	r0, [pc, #300]	; (800152c <MX_GPIO_Init+0x1fc>)
 8001400:	f001 f992 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	4849      	ldr	r0, [pc, #292]	; (8001530 <MX_GPIO_Init+0x200>)
 800140a:	f001 f98d 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800140e:	2310      	movs	r3, #16
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4840      	ldr	r0, [pc, #256]	; (8001528 <MX_GPIO_Init+0x1f8>)
 8001426:	f000 ffd3 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001430:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	483c      	ldr	r0, [pc, #240]	; (8001534 <MX_GPIO_Init+0x204>)
 8001442:	f000 ffc5 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001446:	2332      	movs	r3, #50	; 0x32
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001456:	230b      	movs	r3, #11
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4834      	ldr	r0, [pc, #208]	; (8001534 <MX_GPIO_Init+0x204>)
 8001462:	f000 ffb5 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001466:	2386      	movs	r3, #134	; 0x86
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001476:	230b      	movs	r3, #11
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	482d      	ldr	r0, [pc, #180]	; (8001538 <MX_GPIO_Init+0x208>)
 8001482:	f000 ffa5 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001486:	f244 0381 	movw	r3, #16513	; 0x4081
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4823      	ldr	r0, [pc, #140]	; (800152c <MX_GPIO_Init+0x1fc>)
 80014a0:	f000 ff96 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b6:	230b      	movs	r3, #11
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	481a      	ldr	r0, [pc, #104]	; (800152c <MX_GPIO_Init+0x1fc>)
 80014c2:	f000 ff85 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014c6:	2340      	movs	r3, #64	; 0x40
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_GPIO_Init+0x200>)
 80014de:	f000 ff77 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <MX_GPIO_Init+0x200>)
 80014f6:	f000 ff6b 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150c:	230b      	movs	r3, #11
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_GPIO_Init+0x200>)
 8001518:	f000 ff5a 	bl	80023d0 <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40021000 	.word	0x40021000
 800152c:	40020400 	.word	0x40020400
 8001530:	40021800 	.word	0x40021800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// timers callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d118      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x42>
  {
	  char str_buffer[32];

	  temp = BMP280_ReadTemperature_degC(&hbmp280_1);
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800154e:	f7ff fea5 	bl	800129c <BMP280_ReadTemperature_degC>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001558:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(str_buffer, "Temperature: %2.3f\r\n", temp);
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001566:	f107 0008 	add.w	r0, r7, #8
 800156a:	ec53 2b17 	vmov	r2, r3, d7
 800156e:	4917      	ldr	r1, [pc, #92]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001570:	f006 f98c 	bl	800788c <siprintf>
	  send_string(str_buffer);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f82f 	bl	80015dc <send_string>
  }

  if (htim == &htim4)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d118      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
  	  char str_buffer[32];

  	  press = BMP280_ReadPressure_hPa(&hbmp280_1);
 8001586:	480f      	ldr	r0, [pc, #60]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001588:	f7ff feac 	bl	80012e4 <BMP280_ReadPressure_hPa>
 800158c:	eef0 7a40 	vmov.f32	s15, s0
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001592:	edc3 7a00 	vstr	s15, [r3]
  	  sprintf(str_buffer, "Pressure: %5.2f\r\n", press);
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	f107 0008 	add.w	r0, r7, #8
 80015a4:	ec53 2b17 	vmov	r2, r3, d7
 80015a8:	490b      	ldr	r1, [pc, #44]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015aa:	f006 f96f 	bl	800788c <siprintf>
  	  send_string(str_buffer);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f812 	bl	80015dc <send_string>
    }
}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002a4 	.word	0x200002a4
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000234 	.word	0x20000234
 80015cc:	08009c80 	.word	0x08009c80
 80015d0:	200002f0 	.word	0x200002f0
 80015d4:	20000238 	.word	0x20000238
 80015d8:	08009c98 	.word	0x08009c98

080015dc <send_string>:

void send_string(char* s)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7fe fe2b 	bl	8000240 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <send_string+0x24>)
 80015f4:	f004 f8ec 	bl	80057d0 <HAL_UART_Transmit_IT>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000033c 	.word	0x2000033c

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001608:	f000 fcbd 	bl	8001f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160c:	f000 f820 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f7ff fe8e 	bl	8001330 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001614:	f000 fb4e 	bl	8001cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001618:	f000 fbe4 	bl	8001de4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 800161c:	f000 f890 	bl	8001740 <MX_SPI4_Init>
  MX_TIM3_Init();
 8001620:	f000 fa66 	bl	8001af0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001624:	f000 fab4 	bl	8001b90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <main+0x40>)
 800162a:	f003 fc13 	bl	8004e54 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 800162e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001632:	f000 fd05 	bl	8002040 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <main+0x44>)
 8001638:	f003 fc0c 	bl	8004e54 <HAL_TIM_Base_Start_IT>
  BMP280_Init(&hbmp280_1);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <main+0x48>)
 800163e:	f7ff fd17 	bl	8001070 <BMP280_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001642:	e7fe      	b.n	8001642 <main+0x3e>
 8001644:	200002a4 	.word	0x200002a4
 8001648:	200002f0 	.word	0x200002f0
 800164c:	20000008 	.word	0x20000008

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2234      	movs	r2, #52	; 0x34
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fcca 	bl	8006ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001674:	f001 f9ba 	bl	80029ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <SystemClock_Config+0xdc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <SystemClock_Config+0xdc>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <SystemClock_Config+0xdc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <SystemClock_Config+0xe0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <SystemClock_Config+0xe0>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <SystemClock_Config+0xe0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016c4:	2360      	movs	r3, #96	; 0x60
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 f9e7 	bl	8002aac <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016e4:	f000 f826 	bl	8001734 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016e8:	f001 f990 	bl	8002a0c <HAL_PWREx_EnableOverDrive>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016f2:	f000 f81f 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f6:	230f      	movs	r3, #15
 80016f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fa:	2302      	movs	r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2103      	movs	r1, #3
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc78 	bl	8003008 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800171e:	f000 f809 	bl	8001734 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_SPI4_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI4_Init+0x74>)
 800174c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI4_Init+0x74>)
 800175a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800175e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001762:	2202      	movs	r2, #2
 8001764:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001768:	2201      	movs	r2, #1
 800176a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI4_Init+0x74>)
 800176e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001772:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001776:	2218      	movs	r2, #24
 8001778:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI4_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI4_Init+0x74>)
 800178e:	2207      	movs	r2, #7
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_SPI4_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI4_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_SPI4_Init+0x74>)
 80017a0:	f002 fa80 	bl	8003ca4 <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f7ff ffc3 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000023c 	.word	0x2000023c
 80017b8:	40013400 	.word	0x40013400

080017bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_SPI_MspInit+0x8c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12f      	bne.n	800183e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_SPI_MspInit+0x90>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_SPI_MspInit+0x90>)
 80017e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_SPI_MspInit+0x90>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_SPI_MspInit+0x90>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_SPI_MspInit+0x90>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_SPI_MspInit+0x90>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <HAL_SPI_MspInit+0x94>)
 800182a:	f000 fdd1 	bl	80023d0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2054      	movs	r0, #84	; 0x54
 8001834:	f000 fd03 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001838:	2054      	movs	r0, #84	; 0x54
 800183a:	f000 fd1c 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40013400 	.word	0x40013400
 800184c:	40023800 	.word	0x40023800
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x44>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_MspInit+0x44>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_MspInit+0x44>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_MspInit+0x44>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_MspInit+0x44>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_MspInit+0x44>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 fb8a 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM3_IRQHandler+0x10>)
 80018f6:	f003 fb25 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002a4 	.word	0x200002a4

08001904 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM4_IRQHandler+0x10>)
 800190a:	f003 fb1b 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002f0 	.word	0x200002f0

08001918 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <USART3_IRQHandler+0x10>)
 800191e:	f003 ffb5 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000033c 	.word	0x2000033c

0800192c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <SPI4_IRQHandler+0x10>)
 8001932:	f002 ff13 	bl	800475c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000023c 	.word	0x2000023c

08001940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_kill>:

int _kill(int pid, int sig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800195a:	f005 fb15 	bl	8006f88 <__errno>
 800195e:	4603      	mov	r3, r0
 8001960:	2216      	movs	r2, #22
 8001962:	601a      	str	r2, [r3, #0]
	return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_exit>:

void _exit (int status)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe7 	bl	8001950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001982:	e7fe      	b.n	8001982 <_exit+0x12>

08001984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
	}

return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
	}
	return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f005 fa7a 	bl	8006f88 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20080000 	.word	0x20080000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200002a0 	.word	0x200002a0
 8001ac8:	200008e0 	.word	0x200008e0

08001acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <MX_TIM3_Init+0x9c>)
 8001b12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b16:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001b1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b24:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b36:	4814      	ldr	r0, [pc, #80]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b38:	f003 f934 	bl	8004da4 <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b42:	f7ff fdf7 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b54:	f003 fb16 	bl	8005184 <HAL_TIM_ConfigClockSource>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b5e:	f7ff fde9 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <MX_TIM3_Init+0x98>)
 8001b70:	f003 fd34 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b7a:	f7ff fddb 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002a4 	.word	0x200002a4
 8001b8c:	40000400 	.word	0x40000400

08001b90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <MX_TIM4_Init+0x9c>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bb6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001bba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bc4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bd6:	4814      	ldr	r0, [pc, #80]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bd8:	f003 f8e4 	bl	8004da4 <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001be2:	f7ff fda7 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001bf4:	f003 fac6 	bl	8005184 <HAL_TIM_ConfigClockSource>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001bfe:	f7ff fd99 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_TIM4_Init+0x98>)
 8001c10:	f003 fce4 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001c1a:	f7ff fd8b 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200002f0 	.word	0x200002f0
 8001c2c:	40000800 	.word	0x40000800

08001c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_TIM_Base_MspInit+0x78>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_Base_MspInit+0x7c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_TIM_Base_MspInit+0x7c>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_TIM_Base_MspInit+0x7c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	201d      	movs	r0, #29
 8001c60:	f000 faed 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c64:	201d      	movs	r0, #29
 8001c66:	f000 fb06 	bl	8002276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c6a:	e018      	b.n	8001c9e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_TIM_Base_MspInit+0x80>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d113      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_TIM_Base_MspInit+0x7c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0x7c>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_Base_MspInit+0x7c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	201e      	movs	r0, #30
 8001c94:	f000 fad3 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c98:	201e      	movs	r0, #30
 8001c9a:	f000 faec 	bl	8002276 <HAL_NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40000800 	.word	0x40000800

08001cb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_USART3_UART_Init+0x5c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cf8:	f003 fd1c 	bl	8005734 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d02:	f7ff fd17 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000033c 	.word	0x2000033c
 8001d10:	40004800 	.word	0x40004800

08001d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0ae      	sub	sp, #184	; 0xb8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2290      	movs	r2, #144	; 0x90
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 f95f 	bl	8006ff8 <memset>
  if(uartHandle->Instance==USART3)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_UART_MspInit+0xc4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d144      	bne.n	8001dce <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fb7e 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d5e:	f7ff fce9 	bl	8001734 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_UART_MspInit+0xc8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_UART_MspInit+0xc8>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_UART_MspInit+0xc8>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_UART_MspInit+0xc8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_UART_MspInit+0xc8>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_UART_MspInit+0xc8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dac:	2307      	movs	r3, #7
 8001dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <HAL_UART_MspInit+0xcc>)
 8001dba:	f000 fb09 	bl	80023d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2027      	movs	r0, #39	; 0x27
 8001dc4:	f000 fa3b 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dc8:	2027      	movs	r0, #39	; 0x27
 8001dca:	f000 fa54 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	37b8      	adds	r7, #184	; 0xb8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40004800 	.word	0x40004800
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020c00 	.word	0x40020c00

08001de4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2206      	movs	r2, #6
 8001df4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e28:	f000 fc97 	bl	800275a <HAL_PCD_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e32:	f7ff fc7f 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200003c4 	.word	0x200003c4

08001e40 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0ae      	sub	sp, #184	; 0xb8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2290      	movs	r2, #144	; 0x90
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 f8c9 	bl	8006ff8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e6e:	d159      	bne.n	8001f24 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fae7 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e8c:	f7ff fc52 	bl	8001734 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ea8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4818      	ldr	r0, [pc, #96]	; (8001f30 <HAL_PCD_MspInit+0xf0>)
 8001ed0:	f000 fa7e 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4810      	ldr	r0, [pc, #64]	; (8001f30 <HAL_PCD_MspInit+0xf0>)
 8001ef0:	f000 fa6e 	bl	80023d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efe:	6353      	str	r3, [r2, #52]	; 0x34
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f16:	6453      	str	r3, [r2, #68]	; 0x44
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_PCD_MspInit+0xec>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f24:	bf00      	nop
 8001f26:	37b8      	adds	r7, #184	; 0xb8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f3a:	490e      	ldr	r1, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f50:	4c0b      	ldr	r4, [pc, #44]	; (8001f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5e:	f7ff fdb5 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f005 f817 	bl	8006f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7ff fb4d 	bl	8001604 <main>
  bx  lr    
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001f78:	0800a0ac 	.word	0x0800a0ac
  ldr r2, =_sbss
 8001f7c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001f80:	200008e0 	.word	0x200008e0

08001f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC_IRQHandler>

08001f86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f000 f94c 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f805 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f96:	f7ff fc5d 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f967 	bl	8002292 <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f92f 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000003c 	.word	0x2000003c
 8001ff8:	20000044 	.word	0x20000044
 8001ffc:	20000040 	.word	0x20000040

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000044 	.word	0x20000044
 8002024:	200008cc 	.word	0x200008cc

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200008cc 	.word	0x200008cc

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000044 	.word	0x20000044

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <__NVIC_SetPriorityGrouping+0x40>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b6:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <__NVIC_SetPriorityGrouping+0x40>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00
 80020cc:	05fa0000 	.word	0x05fa0000

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff3e 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff31 	bl	80020ec <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff feb6 	bl	8002028 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d008      	beq.n	80022dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e052      	b.n	8002382 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0216 	bic.w	r2, r2, #22
 80022ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <HAL_DMA_Abort+0x62>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0208 	bic.w	r2, r2, #8
 800231a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232c:	e013      	b.n	8002356 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232e:	f7ff fe7b 	bl	8002028 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b05      	cmp	r3, #5
 800233a:	d90c      	bls.n	8002356 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2203      	movs	r2, #3
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e015      	b.n	8002382 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e4      	bne.n	800232e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	223f      	movs	r2, #63	; 0x3f
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e00c      	b.n	80023c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2205      	movs	r2, #5
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e175      	b.n	80026dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	f040 8164 	bne.w	80026d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d005      	beq.n	8002426 <HAL_GPIO_Init+0x56>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d130      	bne.n	8002488 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0201 	and.w	r2, r3, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b03      	cmp	r3, #3
 8002492:	d017      	beq.n	80024c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d123      	bne.n	8002518 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	220f      	movs	r2, #15
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	08da      	lsrs	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3208      	adds	r2, #8
 8002512:	69b9      	ldr	r1, [r7, #24]
 8002514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0203 	and.w	r2, r3, #3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80be 	beq.w	80026d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002572:	4a61      	ldr	r2, [pc, #388]	; (80026f8 <HAL_GPIO_Init+0x328>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_GPIO_Init+0x32c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d037      	beq.n	800260e <HAL_GPIO_Init+0x23e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_GPIO_Init+0x330>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_GPIO_Init+0x23a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x334>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d02b      	beq.n	8002606 <HAL_GPIO_Init+0x236>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_GPIO_Init+0x338>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d025      	beq.n	8002602 <HAL_GPIO_Init+0x232>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_GPIO_Init+0x33c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01f      	beq.n	80025fe <HAL_GPIO_Init+0x22e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a53      	ldr	r2, [pc, #332]	; (8002710 <HAL_GPIO_Init+0x340>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x22a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_GPIO_Init+0x344>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x226>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a51      	ldr	r2, [pc, #324]	; (8002718 <HAL_GPIO_Init+0x348>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x222>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a50      	ldr	r2, [pc, #320]	; (800271c <HAL_GPIO_Init+0x34c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x21e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <HAL_GPIO_Init+0x350>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x21a>
 80025e6:	2309      	movs	r3, #9
 80025e8:	e012      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025ea:	230a      	movs	r3, #10
 80025ec:	e010      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025ee:	2308      	movs	r3, #8
 80025f0:	e00e      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e00c      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00a      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025fa:	2305      	movs	r3, #5
 80025fc:	e008      	b.n	8002610 <HAL_GPIO_Init+0x240>
 80025fe:	2304      	movs	r3, #4
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x240>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x240>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x240>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x240>
 800260e:	2300      	movs	r3, #0
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <HAL_GPIO_Init+0x328>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_GPIO_Init+0x354>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002652:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_GPIO_Init+0x354>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_GPIO_Init+0x354>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800267c:	4a29      	ldr	r2, [pc, #164]	; (8002724 <HAL_GPIO_Init+0x354>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_GPIO_Init+0x354>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <HAL_GPIO_Init+0x354>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_GPIO_Init+0x354>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_GPIO_Init+0x354>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	f67f ae86 	bls.w	80023f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40013800 	.word	0x40013800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40020800 	.word	0x40020800
 8002708:	40020c00 	.word	0x40020c00
 800270c:	40021000 	.word	0x40021000
 8002710:	40021400 	.word	0x40021400
 8002714:	40021800 	.word	0x40021800
 8002718:	40021c00 	.word	0x40021c00
 800271c:	40022000 	.word	0x40022000
 8002720:	40022400 	.word	0x40022400
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800275a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275c:	b08f      	sub	sp, #60	; 0x3c
 800275e:	af0a      	add	r7, sp, #40	; 0x28
 8002760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e116      	b.n	800299a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fb5a 	bl	8001e40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 f950 	bl	8006a50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	687e      	ldr	r6, [r7, #4]
 80027b8:	466d      	mov	r5, sp
 80027ba:	f106 0410 	add.w	r4, r6, #16
 80027be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ce:	1d33      	adds	r3, r6, #4
 80027d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d2:	6838      	ldr	r0, [r7, #0]
 80027d4:	f004 f8e4 	bl	80069a0 <USB_CoreInit>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0d7      	b.n	800299a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 f93e 	bl	8006a72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e04a      	b.n	8002892 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	333d      	adds	r3, #61	; 0x3d
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	333c      	adds	r3, #60	; 0x3c
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	b298      	uxth	r0, r3
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3344      	adds	r3, #68	; 0x44
 8002838:	4602      	mov	r2, r0
 800283a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3340      	adds	r3, #64	; 0x40
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3348      	adds	r3, #72	; 0x48
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	334c      	adds	r3, #76	; 0x4c
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3354      	adds	r3, #84	; 0x54
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	3301      	adds	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	d3af      	bcc.n	80027fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e044      	b.n	800292c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	3301      	adds	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	d3b5      	bcc.n	80028a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	687e      	ldr	r6, [r7, #4]
 800293e:	466d      	mov	r5, sp
 8002940:	f106 0410 	add.w	r4, r6, #16
 8002944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002950:	e885 0003 	stmia.w	r5, {r0, r1}
 8002954:	1d33      	adds	r3, r6, #4
 8002956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002958:	6838      	ldr	r0, [r7, #0]
 800295a:	f004 f8d7 	bl	8006b0c <USB_DevInit>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e014      	b.n	800299a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f80b 	bl	80029a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fa95 	bl	8006ec2 <USB_DevDisconnect>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080029a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	10000003 	.word	0x10000003

080029ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40007000 	.word	0x40007000

08002a0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a3a:	f7ff faf5 	bl	8002028 <HAL_GetTick>
 8002a3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a40:	e009      	b.n	8002a56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a42:	f7ff faf1 	bl	8002028 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a50:	d901      	bls.n	8002a56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e022      	b.n	8002a9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a62:	d1ee      	bne.n	8002a42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a70:	f7ff fada 	bl	8002028 <HAL_GetTick>
 8002a74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a76:	e009      	b.n	8002a8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a78:	f7ff fad6 	bl	8002028 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a86:	d901      	bls.n	8002a8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e007      	b.n	8002a9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a98:	d1ee      	bne.n	8002a78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000

08002aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e29b      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad0:	4b96      	ldr	r3, [pc, #600]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002adc:	4b93      	ldr	r3, [pc, #588]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d112      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
 8002ae8:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af4:	d10b      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	4b8d      	ldr	r3, [pc, #564]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d06c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x130>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d168      	bne.n	8002bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e275      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x7a>
 8002b18:	4b84      	ldr	r3, [pc, #528]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a83      	ldr	r2, [pc, #524]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e02e      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x9c>
 8002b2e:	4b7f      	ldr	r3, [pc, #508]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7e      	ldr	r2, [pc, #504]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7b      	ldr	r2, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a72      	ldr	r2, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6b      	ldr	r2, [pc, #428]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fa4c 	bl	8002028 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fa48 	bl	8002028 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e229      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fa38 	bl	8002028 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff fa34 	bl	8002028 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e215      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x110>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d069      	beq.n	8002cbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x190>
 8002c02:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x17a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1e9      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	493d      	ldr	r1, [pc, #244]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e040      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d023      	beq.n	8002c8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a38      	ldr	r2, [pc, #224]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff f9ea 	bl	8002028 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7ff f9e6 	bl	8002028 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1c7      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4929      	ldr	r1, [pc, #164]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
 8002c8a:	e018      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff f9c6 	bl	8002028 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7ff f9c2 	bl	8002028 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1a3      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d038      	beq.n	8002d3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d019      	beq.n	8002d06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7ff f9a3 	bl	8002028 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7ff f99f 	bl	8002028 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e180      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x23a>
 8002d04:	e01a      	b.n	8002d3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7ff f989 	bl	8002028 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7ff f985 	bl	8002028 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d903      	bls.n	8002d30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e166      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
 8002d2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a4 	beq.w	8002e92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b8c      	ldr	r3, [pc, #560]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a88      	ldr	r2, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b86      	ldr	r3, [pc, #536]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b83      	ldr	r3, [pc, #524]	; (8002f80 <HAL_RCC_OscConfig+0x4d4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d7e:	4b80      	ldr	r3, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x4d4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7f      	ldr	r2, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x4d4>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7ff f94d 	bl	8002028 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7ff f949 	bl	8002028 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	; 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e12a      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da4:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x4d4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x31a>
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e02d      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x33c>
 8002dce:	4b6b      	ldr	r3, [pc, #428]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b68      	ldr	r3, [pc, #416]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a67      	ldr	r2, [pc, #412]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e01c      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x35e>
 8002df0:	4b62      	ldr	r3, [pc, #392]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a61      	ldr	r2, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a5e      	ldr	r2, [pc, #376]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
 8002e0a:	4b5c      	ldr	r3, [pc, #368]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7ff f8fd 	bl	8002028 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7ff f8f9 	bl	8002028 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0d8      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCC_OscConfig+0x386>
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7ff f8e7 	bl	8002028 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7ff f8e3 	bl	8002028 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0c2      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80ae 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d06d      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d14b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7ff f8b4 	bl	8002028 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7ff f8b0 	bl	8002028 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e091      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	491b      	ldr	r1, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff f882 	bl	8002028 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7ff f87e 	bl	8002028 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e05f      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x47c>
 8002f46:	e057      	b.n	8002ff8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7ff f868 	bl	8002028 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7ff f864 	bl	8002028 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e045      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4b0>
 8002f7a:	e03d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x54c>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <HAL_RCC_OscConfig+0x558>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d030      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d129      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d122      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d119      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0d0      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d910      	bls.n	8003050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 020f 	bic.w	r2, r3, #15
 8003036:	4965      	ldr	r1, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d040      	beq.n	800312c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d115      	bne.n	80030ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e073      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06b      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f023 0203 	bic.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4936      	ldr	r1, [pc, #216]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe ff94 	bl	8002028 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fe ff90 	bl	8002028 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e053      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 020c 	and.w	r2, r3, #12
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d1eb      	bne.n	8003104 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d210      	bcs.n	800315c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	4922      	ldr	r1, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1cc>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1d0>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1d4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fef0 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08009cac 	.word	0x08009cac
 80031d8:	2000003c 	.word	0x2000003c
 80031dc:	20000040 	.word	0x20000040

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b094      	sub	sp, #80	; 0x50
 80031e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	2300      	movs	r3, #0
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f0:	2300      	movs	r3, #0
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f8:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d00d      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x40>
 8003204:	2b08      	cmp	r3, #8
 8003206:	f200 80e1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x34>
 800320e:	2b04      	cmp	r3, #4
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x3a>
 8003212:	e0db      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003218:	e0db      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321a:	4b73      	ldr	r3, [pc, #460]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321e:	e0d8      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003236:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	2200      	movs	r2, #0
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
 800324a:	2300      	movs	r3, #0
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
 800324e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0159      	lsls	r1, r3, #5
 8003260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003264:	0150      	lsls	r0, r2, #5
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4621      	mov	r1, r4
 800326c:	1a51      	subs	r1, r2, r1
 800326e:	6139      	str	r1, [r7, #16]
 8003270:	4629      	mov	r1, r5
 8003272:	eb63 0301 	sbc.w	r3, r3, r1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003284:	4659      	mov	r1, fp
 8003286:	018b      	lsls	r3, r1, #6
 8003288:	4651      	mov	r1, sl
 800328a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800328e:	4651      	mov	r1, sl
 8003290:	018a      	lsls	r2, r1, #6
 8003292:	4651      	mov	r1, sl
 8003294:	ebb2 0801 	subs.w	r8, r2, r1
 8003298:	4659      	mov	r1, fp
 800329a:	eb63 0901 	sbc.w	r9, r3, r1
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	eb18 0303 	adds.w	r3, r8, r3
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	462b      	mov	r3, r5
 80032c0:	eb49 0303 	adc.w	r3, r9, r3
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032d2:	4629      	mov	r1, r5
 80032d4:	024b      	lsls	r3, r1, #9
 80032d6:	4621      	mov	r1, r4
 80032d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032dc:	4621      	mov	r1, r4
 80032de:	024a      	lsls	r2, r1, #9
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e6:	2200      	movs	r2, #0
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032f0:	f7fc fffe 	bl	80002f0 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	e058      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	4611      	mov	r1, r2
 800330a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	f04f 0000 	mov.w	r0, #0
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	0159      	lsls	r1, r3, #5
 8003326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332a:	0150      	lsls	r0, r2, #5
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4641      	mov	r1, r8
 8003332:	ebb2 0a01 	subs.w	sl, r2, r1
 8003336:	4649      	mov	r1, r9
 8003338:	eb63 0b01 	sbc.w	fp, r3, r1
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800334c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003350:	ebb2 040a 	subs.w	r4, r2, sl
 8003354:	eb63 050b 	sbc.w	r5, r3, fp
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	00eb      	lsls	r3, r5, #3
 8003362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003366:	00e2      	lsls	r2, r4, #3
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4643      	mov	r3, r8
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	464b      	mov	r3, r9
 8003374:	eb45 0303 	adc.w	r3, r5, r3
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003386:	4629      	mov	r1, r5
 8003388:	028b      	lsls	r3, r1, #10
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003390:	4621      	mov	r1, r4
 8003392:	028a      	lsls	r2, r1, #10
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	61fa      	str	r2, [r7, #28]
 80033a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a4:	f7fc ffa4 	bl	80002f0 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3750      	adds	r7, #80	; 0x50
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000003c 	.word	0x2000003c

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff0 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	08009cbc 	.word	0x08009cbc

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffdc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08009cbc 	.word	0x08009cbc

08003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d012      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003486:	6093      	str	r3, [r2, #8]
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	4964      	ldr	r1, [pc, #400]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	4959      	ldr	r1, [pc, #356]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ea:	4b4e      	ldr	r3, [pc, #312]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	494a      	ldr	r1, [pc, #296]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808b 	beq.w	800364e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	; 0x40
 8003544:	4b37      	ldr	r3, [pc, #220]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe fd64 	bl	8002028 <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe fd60 	bl	8002028 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e38f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003582:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d035      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d02e      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a0:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d114      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fd28 	bl	8002028 <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fd24 	bl	8002028 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e351      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360a:	d111      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800361a:	400b      	ands	r3, r1
 800361c:	4901      	ldr	r1, [pc, #4]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
 8003622:	e00b      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	0ffffcff 	.word	0x0ffffcff
 8003630:	4bac      	ldr	r3, [pc, #688]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4aab      	ldr	r2, [pc, #684]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800363a:	6093      	str	r3, [r2, #8]
 800363c:	4ba9      	ldr	r3, [pc, #676]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003648:	49a6      	ldr	r1, [pc, #664]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	4313      	orrs	r3, r2
 800364c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d010      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800365a:	4ba2      	ldr	r3, [pc, #648]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003660:	4aa0      	ldr	r2, [pc, #640]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800366a:	4b9e      	ldr	r3, [pc, #632]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	499b      	ldr	r1, [pc, #620]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003688:	4b96      	ldr	r3, [pc, #600]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003696:	4993      	ldr	r1, [pc, #588]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036aa:	4b8e      	ldr	r3, [pc, #568]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b8:	498a      	ldr	r1, [pc, #552]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036cc:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	4982      	ldr	r1, [pc, #520]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ee:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4979      	ldr	r1, [pc, #484]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4971      	ldr	r1, [pc, #452]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003732:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f023 020c 	bic.w	r2, r3, #12
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	4968      	ldr	r1, [pc, #416]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003754:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	4960      	ldr	r1, [pc, #384]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	4957      	ldr	r1, [pc, #348]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003798:	4b52      	ldr	r3, [pc, #328]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	494f      	ldr	r1, [pc, #316]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4946      	ldr	r1, [pc, #280]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037dc:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	493e      	ldr	r1, [pc, #248]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380c:	4935      	ldr	r1, [pc, #212]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382e:	492d      	ldr	r1, [pc, #180]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003842:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003850:	4924      	ldr	r1, [pc, #144]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003860:	d101      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003890:	4914      	ldr	r1, [pc, #80]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b4:	490b      	ldr	r1, [pc, #44]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	4902      	ldr	r1, [pc, #8]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038f4:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	4986      	ldr	r1, [pc, #536]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003928:	497d      	ldr	r1, [pc, #500]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d006      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80d6 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003944:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a75      	ldr	r2, [pc, #468]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fe fb6a 	bl	8002028 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003958:	f7fe fb66 	bl	8002028 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e195      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800396a:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d021      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d11d      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003998:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4958      	ldr	r1, [pc, #352]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02e      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f0:	d129      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f2:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a06:	0f1b      	lsrs	r3, r3, #28
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	493e      	ldr	r1, [pc, #248]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	f023 021f 	bic.w	r2, r3, #31
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	4938      	ldr	r1, [pc, #224]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01d      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	0e1b      	lsrs	r3, r3, #24
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a66:	0f1b      	lsrs	r3, r3, #28
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4926      	ldr	r1, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d011      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	491a      	ldr	r1, [pc, #104]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fe faad 	bl	8002028 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ad2:	f7fe faa9 	bl	8002028 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 80ce 	bne.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fe fa90 	bl	8002028 <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b0c:	f7fe fa8c 	bl	8002028 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d904      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0bb      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b24:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b30:	d0ec      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02e      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12a      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b5a:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b68:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	0f1b      	lsrs	r3, r3, #28
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	019a      	lsls	r2, r3, #6
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	4944      	ldr	r1, [pc, #272]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	493d      	ldr	r1, [pc, #244]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d022      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc4:	d11d      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	0f1b      	lsrs	r3, r3, #28
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	019a      	lsls	r2, r3, #6
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	4929      	ldr	r1, [pc, #164]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c1c:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	019a      	lsls	r2, r3, #6
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	071b      	lsls	r3, r3, #28
 8003c42:	4917      	ldr	r1, [pc, #92]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4911      	ldr	r1, [pc, #68]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fe f9dc 	bl	8002028 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c74:	f7fe f9d8 	bl	8002028 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e007      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e09d      	b.n	8003df2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc6:	d009      	beq.n	8003cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
 8003cce:	e005      	b.n	8003cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fd60 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d1c:	d902      	bls.n	8003d24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e002      	b.n	8003d2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_Init+0xa0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d3c:	d002      	beq.n	8003d44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	f003 0204 	and.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dc0:	ea42 0103 	orr.w	r1, r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b088      	sub	sp, #32
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_SPI_Transmit+0x22>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e158      	b.n	80040ce <HAL_SPI_Transmit+0x2d4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e24:	f7fe f900 	bl	8002028 <HAL_GetTick>
 8003e28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e3e:	e13d      	b.n	80040bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_SPI_Transmit+0x52>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e50:	e134      	b.n	80040bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2203      	movs	r2, #3
 8003e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9c:	d10f      	bne.n	8003ebe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d007      	beq.n	8003edc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ee4:	d94b      	bls.n	8003f7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_SPI_Transmit+0xfa>
 8003eee:	8afb      	ldrh	r3, [r7, #22]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d13e      	bne.n	8003f72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	881a      	ldrh	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f18:	e02b      	b.n	8003f72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d112      	bne.n	8003f4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f4c:	e011      	b.n	8003f72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f4e:	f7fe f86b 	bl	8002028 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d803      	bhi.n	8003f66 <HAL_SPI_Transmit+0x16c>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d102      	bne.n	8003f6c <HAL_SPI_Transmit+0x172>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f70:	e0a4      	b.n	80040bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ce      	bne.n	8003f1a <HAL_SPI_Transmit+0x120>
 8003f7c:	e07c      	b.n	8004078 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Transmit+0x192>
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d170      	bne.n	800406e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d912      	bls.n	8003fbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b02      	subs	r3, #2
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fba:	e058      	b.n	800406e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fe2:	e044      	b.n	800406e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d12b      	bne.n	800404a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d912      	bls.n	8004022 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	881a      	ldrh	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	1c9a      	adds	r2, r3, #2
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b02      	subs	r3, #2
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004020:	e025      	b.n	800406e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	7812      	ldrb	r2, [r2, #0]
 800402e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004048:	e011      	b.n	800406e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800404a:	f7fd ffed 	bl	8002028 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d803      	bhi.n	8004062 <HAL_SPI_Transmit+0x268>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d102      	bne.n	8004068 <HAL_SPI_Transmit+0x26e>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800406c:	e026      	b.n	80040bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1b5      	bne.n	8003fe4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fe27 	bl	8004cd0 <SPI_EndRxTxTransaction>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e000      	b.n	80040bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b088      	sub	sp, #32
 80040da:	af02      	add	r7, sp, #8
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f2:	d112      	bne.n	800411a <HAL_SPI_Receive+0x44>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2204      	movs	r2, #4
 8004100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f910 	bl	8004336 <HAL_SPI_TransmitReceive>
 8004116:	4603      	mov	r3, r0
 8004118:	e109      	b.n	800432e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_SPI_Receive+0x52>
 8004124:	2302      	movs	r3, #2
 8004126:	e102      	b.n	800432e <HAL_SPI_Receive+0x258>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004130:	f7fd ff7a 	bl	8002028 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d002      	beq.n	8004148 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004142:	2302      	movs	r3, #2
 8004144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004146:	e0e9      	b.n	800431c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_SPI_Receive+0x7e>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004158:	e0e0      	b.n	800431c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2204      	movs	r2, #4
 800415e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a4:	d908      	bls.n	80041b8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	e007      	b.n	80041c8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d10f      	bne.n	80041f2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d007      	beq.n	8004210 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004218:	d867      	bhi.n	80042ea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800421a:	e030      	b.n	800427e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d117      	bne.n	800425a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f103 020c 	add.w	r2, r3, #12
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	7812      	ldrb	r2, [r2, #0]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004258:	e011      	b.n	800427e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800425a:	f7fd fee5 	bl	8002028 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d803      	bhi.n	8004272 <HAL_SPI_Receive+0x19c>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d102      	bne.n	8004278 <HAL_SPI_Receive+0x1a2>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800427c:	e04e      	b.n	800431c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1c8      	bne.n	800421c <HAL_SPI_Receive+0x146>
 800428a:	e034      	b.n	80042f6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d115      	bne.n	80042c6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	b292      	uxth	r2, r2
 80042a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	1c9a      	adds	r2, r3, #2
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80042c4:	e011      	b.n	80042ea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c6:	f7fd feaf 	bl	8002028 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d803      	bhi.n	80042de <HAL_SPI_Receive+0x208>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Receive+0x20e>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042e8:	e018      	b.n	800431c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ca      	bne.n	800428c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fc6c 	bl	8004bd8 <SPI_EndRxTransaction>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
 8004318:	e000      	b.n	800431c <HAL_SPI_Receive+0x246>
  }

error :
 800431a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08a      	sub	sp, #40	; 0x28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_SPI_TransmitReceive+0x26>
 8004358:	2302      	movs	r3, #2
 800435a:	e1fb      	b.n	8004754 <HAL_SPI_TransmitReceive+0x41e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fd fe60 	bl	8002028 <HAL_GetTick>
 8004368:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004370:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004380:	7efb      	ldrb	r3, [r7, #27]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d00e      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d106      	bne.n	800439c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <HAL_SPI_TransmitReceive+0x66>
 8004396:	7efb      	ldrb	r3, [r7, #27]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d003      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043a2:	e1cd      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x80>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x80>
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043bc:	e1c0      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2205      	movs	r2, #5
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	887a      	ldrh	r2, [r7, #2]
 80043fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004414:	d802      	bhi.n	800441c <HAL_SPI_TransmitReceive+0xe6>
 8004416:	8a3b      	ldrh	r3, [r7, #16]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d908      	bls.n	800442e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	e007      	b.n	800443e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d007      	beq.n	800445c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004464:	d97c      	bls.n	8004560 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x13e>
 800446e:	8a7b      	ldrh	r3, [r7, #18]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d169      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004498:	e056      	b.n	8004548 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11b      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x1aa>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x1aa>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d113      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d11c      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x1f2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	b292      	uxth	r2, r2
 8004506:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	1c9a      	adds	r2, r3, #2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004528:	f7fd fd7e 	bl	8002028 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004534:	429a      	cmp	r2, r3
 8004536:	d807      	bhi.n	8004548 <HAL_SPI_TransmitReceive+0x212>
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004546:	e0fb      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1a3      	bne.n	800449a <HAL_SPI_TransmitReceive+0x164>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d19d      	bne.n	800449a <HAL_SPI_TransmitReceive+0x164>
 800455e:	e0df      	b.n	8004720 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x23a>
 8004568:	8a7b      	ldrh	r3, [r7, #18]
 800456a:	2b01      	cmp	r3, #1
 800456c:	f040 80cb 	bne.w	8004706 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d912      	bls.n	80045a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	881a      	ldrh	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	1c9a      	adds	r2, r3, #2
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b02      	subs	r3, #2
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800459e:	e0b2      	b.n	8004706 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c6:	e09e      	b.n	8004706 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d134      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x30a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02f      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x30a>
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d12c      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d912      	bls.n	8004616 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	881a      	ldrh	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b02      	subs	r3, #2
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004614:	e012      	b.n	800463c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d148      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x3aa>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d042      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d923      	bls.n	80046ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	b292      	uxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b02      	subs	r3, #2
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d81f      	bhi.n	80046dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e016      	b.n	80046dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f103 020c 	add.w	r2, r3, #12
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046dc:	2301      	movs	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e0:	f7fd fca2 	bl	8002028 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d803      	bhi.n	80046f8 <HAL_SPI_TransmitReceive+0x3c2>
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x3c8>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004704:	e01c      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af5b 	bne.w	80045c8 <HAL_SPI_TransmitReceive+0x292>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f47f af54 	bne.w	80045c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fad3 	bl	8004cd0 <SPI_EndRxTxTransaction>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
 800473c:	e000      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800473e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004754:	4618      	mov	r0, r3
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10f      	bne.n	80047a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
    return;
 800479e:	e0d7      	b.n	8004950 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_SPI_IRQHandler+0x66>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
    return;
 80047c0:	e0c6      	b.n	8004950 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <HAL_SPI_IRQHandler+0x8c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80b4 	beq.w	8004950 <HAL_SPI_IRQHandler+0x1f4>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80ad 	beq.w	8004950 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b03      	cmp	r3, #3
 800480c:	d011      	beq.n	8004832 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	e00b      	b.n	800484a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
        return;
 8004848:	e082      	b.n	8004950 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d014      	beq.n	8004880 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	f043 0208 	orr.w	r2, r3, #8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04f      	beq.n	800494e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_SPI_IRQHandler+0x17e>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d034      	beq.n	8004944 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0203 	bic.w	r2, r2, #3
 80048e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d011      	beq.n	8004916 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_SPI_IRQHandler+0x1fc>)
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fd43 	bl	800238a <HAL_DMA_Abort_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	4a0d      	ldr	r2, [pc, #52]	; (8004958 <HAL_SPI_IRQHandler+0x1fc>)
 8004924:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	4618      	mov	r0, r3
 800492c:	f7fd fd2d 	bl	800238a <HAL_DMA_Abort_IT>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004942:	e003      	b.n	800494c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f809 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800494a:	e000      	b.n	800494e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800494c:	bf00      	nop
    return;
 800494e:	bf00      	nop
  }
}
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	08004971 	.word	0x08004971

0800495c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ffe5 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049ac:	f7fd fb3c 	bl	8002028 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049bc:	f7fd fb34 	bl	8002028 <HAL_GetTick>
 80049c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049c2:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	015b      	lsls	r3, r3, #5
 80049c8:	0d1b      	lsrs	r3, r3, #20
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049d2:	e054      	b.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d050      	beq.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049dc:	f7fd fb24 	bl	8002028 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d902      	bls.n	80049f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d13d      	bne.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d111      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a14:	d004      	beq.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1e:	d107      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a38:	d10f      	bne.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e017      	b.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d19b      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000003c 	.word	0x2000003c

08004aac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004abe:	f7fd fab3 	bl	8002028 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ace:	f7fd faab 	bl	8002028 <HAL_GetTick>
 8004ad2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004adc:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00da      	lsls	r2, r3, #3
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	0d1b      	lsrs	r3, r3, #20
 8004aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004af4:	e060      	b.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004afc:	d107      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d050      	beq.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b16:	f7fd fa87 	bl	8002028 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d902      	bls.n	8004b2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d13d      	bne.n	8004ba8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b44:	d111      	bne.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4e:	d004      	beq.n	8004b5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d107      	bne.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	d10f      	bne.n	8004b94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e010      	b.n	8004bca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d196      	bne.n	8004af6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2000003c 	.word	0x2000003c

08004bd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bec:	d111      	bne.n	8004c12 <SPI_EndRxTransaction+0x3a>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d004      	beq.n	8004c02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d107      	bne.n	8004c12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1a:	d112      	bne.n	8004c42 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff feb8 	bl	800499c <SPI_WaitFlagStateUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d021      	beq.n	8004c76 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c36:	f043 0220 	orr.w	r2, r3, #32
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e03d      	b.n	8004cbe <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <SPI_EndRxTransaction+0xf0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a21      	ldr	r2, [pc, #132]	; (8004ccc <SPI_EndRxTransaction+0xf4>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	0d5b      	lsrs	r3, r3, #21
 8004c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d0f2      	beq.n	8004c58 <SPI_EndRxTransaction+0x80>
 8004c72:	e000      	b.n	8004c76 <SPI_EndRxTransaction+0x9e>
        break;
 8004c74:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7e:	d11d      	bne.n	8004cbc <SPI_EndRxTransaction+0xe4>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c88:	d004      	beq.n	8004c94 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d113      	bne.n	8004cbc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff ff03 	bl	8004aac <SPI_WaitFifoStateUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	f043 0220 	orr.w	r2, r3, #32
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e000      	b.n	8004cbe <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000003c 	.word	0x2000003c
 8004ccc:	165e9f81 	.word	0x165e9f81

08004cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff fedf 	bl	8004aac <SPI_WaitFifoStateUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e046      	b.n	8004d92 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <SPI_EndRxTxTransaction+0xcc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <SPI_EndRxTxTransaction+0xd0>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0d5b      	lsrs	r3, r3, #21
 8004d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d22:	d112      	bne.n	8004d4a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2180      	movs	r1, #128	; 0x80
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7ff fe34 	bl	800499c <SPI_WaitFlagStateUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e023      	b.n	8004d92 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b80      	cmp	r3, #128	; 0x80
 8004d62:	d0f2      	beq.n	8004d4a <SPI_EndRxTxTransaction+0x7a>
 8004d64:	e000      	b.n	8004d68 <SPI_EndRxTxTransaction+0x98>
        break;
 8004d66:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fe99 	bl	8004aac <SPI_WaitFifoStateUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e000      	b.n	8004d92 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000003c 	.word	0x2000003c
 8004da0:	165e9f81 	.word	0x165e9f81

08004da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e049      	b.n	8004e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc ff30 	bl	8001c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fac0 	bl	8005368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e054      	b.n	8004f16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d022      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d01d      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d018      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_TIM_Base_Start_IT+0xe8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d115      	bne.n	8004f00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_TIM_Base_Start_IT+0xec>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d015      	beq.n	8004f12 <HAL_TIM_Base_Start_IT+0xbe>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eec:	d011      	beq.n	8004f12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	e008      	b.n	8004f12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40000c00 	.word	0x40000c00
 8004f34:	40010400 	.word	0x40010400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40001800 	.word	0x40001800
 8004f40:	00010007 	.word	0x00010007

08004f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0202 	mvn.w	r2, #2
 8004f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9d0 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9c2 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f9d3 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0204 	mvn.w	r2, #4
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9a6 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f998 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9a9 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f97c 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f96e 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f97f 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f952 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f944 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f955 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0201 	mvn.w	r2, #1
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fa3a 	bl	800153c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb0c 	bl	800570c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	d10e      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 faff 	bl	8005720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d10e      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d107      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f903 	bl	8005354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b20      	cmp	r3, #32
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0220 	mvn.w	r2, #32
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fabf 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_ConfigClockSource+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e0b4      	b.n	800530a <HAL_TIM_ConfigClockSource+0x186>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	4b56      	ldr	r3, [pc, #344]	; (8005314 <HAL_TIM_ConfigClockSource+0x190>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d8:	d03e      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0xd4>
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	f200 8087 	bhi.w	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	f000 8086 	beq.w	80052f6 <HAL_TIM_ConfigClockSource+0x172>
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ee:	d87f      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b70      	cmp	r3, #112	; 0x70
 80051f2:	d01a      	beq.n	800522a <HAL_TIM_ConfigClockSource+0xa6>
 80051f4:	2b70      	cmp	r3, #112	; 0x70
 80051f6:	d87b      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b60      	cmp	r3, #96	; 0x60
 80051fa:	d050      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x11a>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d877      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b50      	cmp	r3, #80	; 0x50
 8005202:	d03c      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xfa>
 8005204:	2b50      	cmp	r3, #80	; 0x50
 8005206:	d873      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d058      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x13a>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d86f      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	d064      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d86b      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b20      	cmp	r3, #32
 800521a:	d060      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d867      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 8005224:	2b10      	cmp	r3, #16
 8005226:	d05a      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	e062      	b.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6899      	ldr	r1, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f000 f9af 	bl	800559c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800524c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
      break;
 8005256:	e04f      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6899      	ldr	r1, [r3, #8]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f000 f998 	bl	800559c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527a:	609a      	str	r2, [r3, #8]
      break;
 800527c:	e03c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	461a      	mov	r2, r3
 800528c:	f000 f90c 	bl	80054a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2150      	movs	r1, #80	; 0x50
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f965 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 800529c:	e02c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 f92b 	bl	8005506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2160      	movs	r1, #96	; 0x60
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f955 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e01c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 f8ec 	bl	80054a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2140      	movs	r1, #64	; 0x40
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f945 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 80052dc:	e00c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f000 f93c 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 80052ee:	e003      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	fffeff88 	.word	0xfffeff88

08005318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a40      	ldr	r2, [pc, #256]	; (800547c <TIM_Base_SetConfig+0x114>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d00f      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3d      	ldr	r2, [pc, #244]	; (8005480 <TIM_Base_SetConfig+0x118>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3c      	ldr	r2, [pc, #240]	; (8005484 <TIM_Base_SetConfig+0x11c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3b      	ldr	r2, [pc, #236]	; (8005488 <TIM_Base_SetConfig+0x120>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3a      	ldr	r2, [pc, #232]	; (800548c <TIM_Base_SetConfig+0x124>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d108      	bne.n	80053ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2f      	ldr	r2, [pc, #188]	; (800547c <TIM_Base_SetConfig+0x114>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d02b      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d027      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2c      	ldr	r2, [pc, #176]	; (8005480 <TIM_Base_SetConfig+0x118>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d023      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <TIM_Base_SetConfig+0x11c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01f      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2a      	ldr	r2, [pc, #168]	; (8005488 <TIM_Base_SetConfig+0x120>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01b      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a29      	ldr	r2, [pc, #164]	; (800548c <TIM_Base_SetConfig+0x124>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d017      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a28      	ldr	r2, [pc, #160]	; (8005490 <TIM_Base_SetConfig+0x128>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a27      	ldr	r2, [pc, #156]	; (8005494 <TIM_Base_SetConfig+0x12c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a26      	ldr	r2, [pc, #152]	; (8005498 <TIM_Base_SetConfig+0x130>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <TIM_Base_SetConfig+0x134>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <TIM_Base_SetConfig+0x138>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <TIM_Base_SetConfig+0x13c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d108      	bne.n	800542c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0a      	ldr	r2, [pc, #40]	; (800547c <TIM_Base_SetConfig+0x114>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_Base_SetConfig+0xf8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <TIM_Base_SetConfig+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d103      	bne.n	8005468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	615a      	str	r2, [r3, #20]
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40010400 	.word	0x40010400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40001800 	.word	0x40001800
 80054a0:	40001c00 	.word	0x40001c00
 80054a4:	40002000 	.word	0x40002000

080054a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f023 0201 	bic.w	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 030a 	bic.w	r3, r3, #10
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005506:	b480      	push	{r7}
 8005508:	b087      	sub	sp, #28
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0210 	bic.w	r2, r3, #16
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	031b      	lsls	r3, r3, #12
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	f043 0307 	orr.w	r3, r3, #7
 8005588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	021a      	lsls	r2, r3, #8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	431a      	orrs	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e06d      	b.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a30      	ldr	r2, [pc, #192]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800562e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a20      	ldr	r2, [pc, #128]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d01d      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1a      	ldr	r2, [pc, #104]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10c      	bne.n	80056be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40001800 	.word	0x40001800

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e040      	b.n	80057c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc fadc 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fb9c 	bl	8005eb0 <UART_SetConfig>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e022      	b.n	80057c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fdf4 	bl	8006378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800579e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fe7b 	bl	80064bc <UART_CheckIdleState>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b08b      	sub	sp, #44	; 0x2c
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d147      	bne.n	8005876 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_UART_Transmit_IT+0x22>
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e040      	b.n	8005878 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2221      	movs	r2, #33	; 0x21
 800581e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d107      	bne.n	800583a <HAL_UART_Transmit_IT+0x6a>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a13      	ldr	r2, [pc, #76]	; (8005884 <HAL_UART_Transmit_IT+0xb4>)
 8005836:	66da      	str	r2, [r3, #108]	; 0x6c
 8005838:	e002      	b.n	8005840 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a12      	ldr	r2, [pc, #72]	; (8005888 <HAL_UART_Transmit_IT+0xb8>)
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	623b      	str	r3, [r7, #32]
 8005860:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	69f9      	ldr	r1, [r7, #28]
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	61bb      	str	r3, [r7, #24]
   return(result);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e000      	b.n	8005878 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005876:	2302      	movs	r3, #2
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	372c      	adds	r7, #44	; 0x2c
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	0800688d 	.word	0x0800688d
 8005888:	080067d7 	.word	0x080067d7

0800588c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b0ba      	sub	sp, #232	; 0xe8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ba:	4013      	ands	r3, r2
 80058bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d115      	bne.n	80058f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00f      	beq.n	80058f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 82ac 	beq.w	8005e42 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
      }
      return;
 80058f2:	e2a6      	b.n	8005e42 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8117 	beq.w	8005b2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800590a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800590e:	4b85      	ldr	r3, [pc, #532]	; (8005b24 <HAL_UART_IRQHandler+0x298>)
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 810a 	beq.w	8005b2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d011      	beq.n	8005948 <HAL_UART_IRQHandler+0xbc>
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2201      	movs	r2, #1
 8005936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d011      	beq.n	8005978 <HAL_UART_IRQHandler+0xec>
 8005954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00b      	beq.n	8005978 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2202      	movs	r2, #2
 8005966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596e:	f043 0204 	orr.w	r2, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_UART_IRQHandler+0x11c>
 8005984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2204      	movs	r2, #4
 8005996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599e:	f043 0202 	orr.w	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d017      	beq.n	80059e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2208      	movs	r2, #8
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059da:	f043 0208 	orr.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <HAL_UART_IRQHandler+0x18a>
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0c:	f043 0220 	orr.w	r2, r3, #32
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8212 	beq.w	8005e46 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d005      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d04f      	beq.n	8005b0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fe37 	bl	80066e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d141      	bne.n	8005b06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1d9      	bne.n	8005a82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ada:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <HAL_UART_IRQHandler+0x29c>)
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc fc51 	bl	800238a <HAL_DMA_Abort_IT>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d017      	beq.n	8005b1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e00f      	b.n	8005b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f9b6 	bl	8005e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e00b      	b.n	8005b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f9b2 	bl	8005e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f9ae 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b1c:	e193      	b.n	8005e46 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1e:	bf00      	nop
    return;
 8005b20:	e191      	b.n	8005e46 <HAL_UART_IRQHandler+0x5ba>
 8005b22:	bf00      	nop
 8005b24:	04000120 	.word	0x04000120
 8005b28:	080067ab 	.word	0x080067ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	f040 814c 	bne.w	8005dce <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8145 	beq.w	8005dce <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 813e 	beq.w	8005dce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2210      	movs	r2, #16
 8005b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	f040 80b6 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8165 	beq.w	8005e4a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	f080 815d 	bcs.w	8005e4a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba4:	f000 8086 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bd6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1da      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e1      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c84:	f023 0310 	bic.w	r3, r3, #16
 8005c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e4      	bne.n	8005c74 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fc fafb 	bl	80022aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8d8 	bl	8005e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd4:	e0b9      	b.n	8005e4a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80ab 	beq.w	8005e4e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80a6 	beq.w	8005e4e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e4      	bne.n	8005d02 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	623b      	str	r3, [r7, #32]
   return(result);
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d5c:	633a      	str	r2, [r7, #48]	; 0x30
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e3      	bne.n	8005d38 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	617b      	str	r3, [r7, #20]
   return(result);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e4      	bne.n	8005d84 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f85c 	bl	8005e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dcc:	e03f      	b.n	8005e4e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00e      	beq.n	8005df8 <HAL_UART_IRQHandler+0x56c>
 8005dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f853 	bl	8005e9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df6:	e02d      	b.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00e      	beq.n	8005e22 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01c      	beq.n	8005e52 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
    }
    return;
 8005e20:	e017      	b.n	8005e52 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d012      	beq.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fd86 	bl	800694c <UART_EndTransmit_IT>
    return;
 8005e40:	e008      	b.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e42:	bf00      	nop
 8005e44:	e006      	b.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e46:	bf00      	nop
 8005e48:	e004      	b.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e52:	bf00      	nop
  }

}
 8005e54:	37e8      	adds	r7, #232	; 0xe8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop

08005e5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4ba6      	ldr	r3, [pc, #664]	; (8006174 <UART_SetConfig+0x2c4>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a94      	ldr	r2, [pc, #592]	; (8006178 <UART_SetConfig+0x2c8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d120      	bne.n	8005f6e <UART_SetConfig+0xbe>
 8005f2c:	4b93      	ldr	r3, [pc, #588]	; (800617c <UART_SetConfig+0x2cc>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d816      	bhi.n	8005f68 <UART_SetConfig+0xb8>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x90>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f57 	.word	0x08005f57
 8005f4c:	08005f63 	.word	0x08005f63
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e150      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f56:	2302      	movs	r3, #2
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e14d      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e14a      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f62:	2308      	movs	r3, #8
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e147      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e144      	b.n	80061f8 <UART_SetConfig+0x348>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a83      	ldr	r2, [pc, #524]	; (8006180 <UART_SetConfig+0x2d0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d132      	bne.n	8005fde <UART_SetConfig+0x12e>
 8005f78:	4b80      	ldr	r3, [pc, #512]	; (800617c <UART_SetConfig+0x2cc>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d828      	bhi.n	8005fd8 <UART_SetConfig+0x128>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0xdc>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fd9 	.word	0x08005fd9
 8005f94:	08005fd9 	.word	0x08005fd9
 8005f98:	08005fd9 	.word	0x08005fd9
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fd9 	.word	0x08005fd9
 8005fa4:	08005fd9 	.word	0x08005fd9
 8005fa8:	08005fd9 	.word	0x08005fd9
 8005fac:	08005fc7 	.word	0x08005fc7
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	08005fd3 	.word	0x08005fd3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e118      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e115      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e112      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e10f      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e10c      	b.n	80061f8 <UART_SetConfig+0x348>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a68      	ldr	r2, [pc, #416]	; (8006184 <UART_SetConfig+0x2d4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d120      	bne.n	800602a <UART_SetConfig+0x17a>
 8005fe8:	4b64      	ldr	r3, [pc, #400]	; (800617c <UART_SetConfig+0x2cc>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ff2:	2b30      	cmp	r3, #48	; 0x30
 8005ff4:	d013      	beq.n	800601e <UART_SetConfig+0x16e>
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d814      	bhi.n	8006024 <UART_SetConfig+0x174>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d009      	beq.n	8006012 <UART_SetConfig+0x162>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d810      	bhi.n	8006024 <UART_SetConfig+0x174>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <UART_SetConfig+0x15c>
 8006006:	2b10      	cmp	r3, #16
 8006008:	d006      	beq.n	8006018 <UART_SetConfig+0x168>
 800600a:	e00b      	b.n	8006024 <UART_SetConfig+0x174>
 800600c:	2300      	movs	r3, #0
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0f2      	b.n	80061f8 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0ef      	b.n	80061f8 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0ec      	b.n	80061f8 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e0e9      	b.n	80061f8 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e0e6      	b.n	80061f8 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a56      	ldr	r2, [pc, #344]	; (8006188 <UART_SetConfig+0x2d8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d120      	bne.n	8006076 <UART_SetConfig+0x1c6>
 8006034:	4b51      	ldr	r3, [pc, #324]	; (800617c <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800603e:	2bc0      	cmp	r3, #192	; 0xc0
 8006040:	d013      	beq.n	800606a <UART_SetConfig+0x1ba>
 8006042:	2bc0      	cmp	r3, #192	; 0xc0
 8006044:	d814      	bhi.n	8006070 <UART_SetConfig+0x1c0>
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d009      	beq.n	800605e <UART_SetConfig+0x1ae>
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d810      	bhi.n	8006070 <UART_SetConfig+0x1c0>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <UART_SetConfig+0x1a8>
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d006      	beq.n	8006064 <UART_SetConfig+0x1b4>
 8006056:	e00b      	b.n	8006070 <UART_SetConfig+0x1c0>
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0cc      	b.n	80061f8 <UART_SetConfig+0x348>
 800605e:	2302      	movs	r3, #2
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0c9      	b.n	80061f8 <UART_SetConfig+0x348>
 8006064:	2304      	movs	r3, #4
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0c6      	b.n	80061f8 <UART_SetConfig+0x348>
 800606a:	2308      	movs	r3, #8
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e0c3      	b.n	80061f8 <UART_SetConfig+0x348>
 8006070:	2310      	movs	r3, #16
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e0c0      	b.n	80061f8 <UART_SetConfig+0x348>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a44      	ldr	r2, [pc, #272]	; (800618c <UART_SetConfig+0x2dc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d125      	bne.n	80060cc <UART_SetConfig+0x21c>
 8006080:	4b3e      	ldr	r3, [pc, #248]	; (800617c <UART_SetConfig+0x2cc>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608e:	d017      	beq.n	80060c0 <UART_SetConfig+0x210>
 8006090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006094:	d817      	bhi.n	80060c6 <UART_SetConfig+0x216>
 8006096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609a:	d00b      	beq.n	80060b4 <UART_SetConfig+0x204>
 800609c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a0:	d811      	bhi.n	80060c6 <UART_SetConfig+0x216>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <UART_SetConfig+0x1fe>
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d006      	beq.n	80060ba <UART_SetConfig+0x20a>
 80060ac:	e00b      	b.n	80060c6 <UART_SetConfig+0x216>
 80060ae:	2300      	movs	r3, #0
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e0a1      	b.n	80061f8 <UART_SetConfig+0x348>
 80060b4:	2302      	movs	r3, #2
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e09e      	b.n	80061f8 <UART_SetConfig+0x348>
 80060ba:	2304      	movs	r3, #4
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e09b      	b.n	80061f8 <UART_SetConfig+0x348>
 80060c0:	2308      	movs	r3, #8
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e098      	b.n	80061f8 <UART_SetConfig+0x348>
 80060c6:	2310      	movs	r3, #16
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e095      	b.n	80061f8 <UART_SetConfig+0x348>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <UART_SetConfig+0x2e0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d125      	bne.n	8006122 <UART_SetConfig+0x272>
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <UART_SetConfig+0x2cc>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e4:	d017      	beq.n	8006116 <UART_SetConfig+0x266>
 80060e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ea:	d817      	bhi.n	800611c <UART_SetConfig+0x26c>
 80060ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f0:	d00b      	beq.n	800610a <UART_SetConfig+0x25a>
 80060f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f6:	d811      	bhi.n	800611c <UART_SetConfig+0x26c>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <UART_SetConfig+0x254>
 80060fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006100:	d006      	beq.n	8006110 <UART_SetConfig+0x260>
 8006102:	e00b      	b.n	800611c <UART_SetConfig+0x26c>
 8006104:	2301      	movs	r3, #1
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e076      	b.n	80061f8 <UART_SetConfig+0x348>
 800610a:	2302      	movs	r3, #2
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e073      	b.n	80061f8 <UART_SetConfig+0x348>
 8006110:	2304      	movs	r3, #4
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e070      	b.n	80061f8 <UART_SetConfig+0x348>
 8006116:	2308      	movs	r3, #8
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e06d      	b.n	80061f8 <UART_SetConfig+0x348>
 800611c:	2310      	movs	r3, #16
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e06a      	b.n	80061f8 <UART_SetConfig+0x348>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <UART_SetConfig+0x2e4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d138      	bne.n	800619e <UART_SetConfig+0x2ee>
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <UART_SetConfig+0x2cc>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006136:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800613a:	d017      	beq.n	800616c <UART_SetConfig+0x2bc>
 800613c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006140:	d82a      	bhi.n	8006198 <UART_SetConfig+0x2e8>
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006146:	d00b      	beq.n	8006160 <UART_SetConfig+0x2b0>
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d824      	bhi.n	8006198 <UART_SetConfig+0x2e8>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <UART_SetConfig+0x2aa>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d006      	beq.n	8006166 <UART_SetConfig+0x2b6>
 8006158:	e01e      	b.n	8006198 <UART_SetConfig+0x2e8>
 800615a:	2300      	movs	r3, #0
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e04b      	b.n	80061f8 <UART_SetConfig+0x348>
 8006160:	2302      	movs	r3, #2
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e048      	b.n	80061f8 <UART_SetConfig+0x348>
 8006166:	2304      	movs	r3, #4
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e045      	b.n	80061f8 <UART_SetConfig+0x348>
 800616c:	2308      	movs	r3, #8
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e042      	b.n	80061f8 <UART_SetConfig+0x348>
 8006172:	bf00      	nop
 8006174:	efff69f3 	.word	0xefff69f3
 8006178:	40011000 	.word	0x40011000
 800617c:	40023800 	.word	0x40023800
 8006180:	40004400 	.word	0x40004400
 8006184:	40004800 	.word	0x40004800
 8006188:	40004c00 	.word	0x40004c00
 800618c:	40005000 	.word	0x40005000
 8006190:	40011400 	.word	0x40011400
 8006194:	40007800 	.word	0x40007800
 8006198:	2310      	movs	r3, #16
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e02c      	b.n	80061f8 <UART_SetConfig+0x348>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a72      	ldr	r2, [pc, #456]	; (800636c <UART_SetConfig+0x4bc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d125      	bne.n	80061f4 <UART_SetConfig+0x344>
 80061a8:	4b71      	ldr	r3, [pc, #452]	; (8006370 <UART_SetConfig+0x4c0>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061b6:	d017      	beq.n	80061e8 <UART_SetConfig+0x338>
 80061b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061bc:	d817      	bhi.n	80061ee <UART_SetConfig+0x33e>
 80061be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c2:	d00b      	beq.n	80061dc <UART_SetConfig+0x32c>
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c8:	d811      	bhi.n	80061ee <UART_SetConfig+0x33e>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <UART_SetConfig+0x326>
 80061ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d2:	d006      	beq.n	80061e2 <UART_SetConfig+0x332>
 80061d4:	e00b      	b.n	80061ee <UART_SetConfig+0x33e>
 80061d6:	2300      	movs	r3, #0
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e00d      	b.n	80061f8 <UART_SetConfig+0x348>
 80061dc:	2302      	movs	r3, #2
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e00a      	b.n	80061f8 <UART_SetConfig+0x348>
 80061e2:	2304      	movs	r3, #4
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e007      	b.n	80061f8 <UART_SetConfig+0x348>
 80061e8:	2308      	movs	r3, #8
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e004      	b.n	80061f8 <UART_SetConfig+0x348>
 80061ee:	2310      	movs	r3, #16
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e001      	b.n	80061f8 <UART_SetConfig+0x348>
 80061f4:	2310      	movs	r3, #16
 80061f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d15b      	bne.n	80062ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006202:	7ffb      	ldrb	r3, [r7, #31]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d828      	bhi.n	800625a <UART_SetConfig+0x3aa>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0x360>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006235 	.word	0x08006235
 8006214:	0800623d 	.word	0x0800623d
 8006218:	08006245 	.word	0x08006245
 800621c:	0800625b 	.word	0x0800625b
 8006220:	0800624b 	.word	0x0800624b
 8006224:	0800625b 	.word	0x0800625b
 8006228:	0800625b 	.word	0x0800625b
 800622c:	0800625b 	.word	0x0800625b
 8006230:	08006253 	.word	0x08006253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fd f8e6 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8006238:	61b8      	str	r0, [r7, #24]
        break;
 800623a:	e013      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800623c:	f7fd f8f6 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8006240:	61b8      	str	r0, [r7, #24]
        break;
 8006242:	e00f      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <UART_SetConfig+0x4c4>)
 8006246:	61bb      	str	r3, [r7, #24]
        break;
 8006248:	e00c      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624a:	f7fc ffc9 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800624e:	61b8      	str	r0, [r7, #24]
        break;
 8006250:	e008      	b.n	8006264 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006256:	61bb      	str	r3, [r7, #24]
        break;
 8006258:	e004      	b.n	8006264 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	77bb      	strb	r3, [r7, #30]
        break;
 8006262:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d074      	beq.n	8006354 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	005a      	lsls	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b0f      	cmp	r3, #15
 8006284:	d916      	bls.n	80062b4 <UART_SetConfig+0x404>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628c:	d212      	bcs.n	80062b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f023 030f 	bic.w	r3, r3, #15
 8006296:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	89fb      	ldrh	r3, [r7, #14]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	89fa      	ldrh	r2, [r7, #14]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	e04f      	b.n	8006354 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	77bb      	strb	r3, [r7, #30]
 80062b8:	e04c      	b.n	8006354 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ba:	7ffb      	ldrb	r3, [r7, #31]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d828      	bhi.n	8006312 <UART_SetConfig+0x462>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x418>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062fd 	.word	0x080062fd
 80062d4:	08006313 	.word	0x08006313
 80062d8:	08006303 	.word	0x08006303
 80062dc:	08006313 	.word	0x08006313
 80062e0:	08006313 	.word	0x08006313
 80062e4:	08006313 	.word	0x08006313
 80062e8:	0800630b 	.word	0x0800630b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fd f88a 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 80062f0:	61b8      	str	r0, [r7, #24]
        break;
 80062f2:	e013      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f4:	f7fd f89a 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 80062f8:	61b8      	str	r0, [r7, #24]
        break;
 80062fa:	e00f      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <UART_SetConfig+0x4c4>)
 80062fe:	61bb      	str	r3, [r7, #24]
        break;
 8006300:	e00c      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006302:	f7fc ff6d 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8006306:	61b8      	str	r0, [r7, #24]
        break;
 8006308:	e008      	b.n	800631c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630e:	61bb      	str	r3, [r7, #24]
        break;
 8006310:	e004      	b.n	800631c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	77bb      	strb	r3, [r7, #30]
        break;
 800631a:	bf00      	nop
    }

    if (pclk != 0U)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d018      	beq.n	8006354 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	085a      	lsrs	r2, r3, #1
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	441a      	add	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b0f      	cmp	r3, #15
 800633a:	d909      	bls.n	8006350 <UART_SetConfig+0x4a0>
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006342:	d205      	bcs.n	8006350 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	e001      	b.n	8006354 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006360:	7fbb      	ldrb	r3, [r7, #30]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40007c00 	.word	0x40007c00
 8006370:	40023800 	.word	0x40023800
 8006374:	00f42400 	.word	0x00f42400

08006378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01a      	beq.n	800648e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006476:	d10a      	bne.n	800648e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	605a      	str	r2, [r3, #4]
  }
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064cc:	f7fb fdac 	bl	8002028 <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d10e      	bne.n	80064fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f831 	bl	8006556 <UART_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e027      	b.n	800654e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b04      	cmp	r3, #4
 800650a:	d10e      	bne.n	800652a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800650c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f81b 	bl	8006556 <UART_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e011      	b.n	800654e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b09c      	sub	sp, #112	; 0x70
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006566:	e0a7      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	f000 80a3 	beq.w	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fb fd59 	bl	8002028 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <UART_WaitOnFlagUntilTimeout+0x32>
 8006582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006584:	2b00      	cmp	r3, #0
 8006586:	d13f      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800659c:	667b      	str	r3, [r7, #100]	; 0x64
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e6      	bne.n	8006588 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	663b      	str	r3, [r7, #96]	; 0x60
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065da:	64ba      	str	r2, [r7, #72]	; 0x48
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e5      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e068      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d050      	beq.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006624:	d148      	bne.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006644:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
 8006650:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e6      	bne.n	8006630 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	613b      	str	r3, [r7, #16]
   return(result);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	66bb      	str	r3, [r7, #104]	; 0x68
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006682:	623a      	str	r2, [r7, #32]
 8006684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	69f9      	ldr	r1, [r7, #28]
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e5      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e010      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4013      	ands	r3, r2
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	f43f af48 	beq.w	8006568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3770      	adds	r7, #112	; 0x70
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b095      	sub	sp, #84	; 0x54
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006708:	643b      	str	r3, [r7, #64]	; 0x40
 800670a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800670e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	61fb      	str	r3, [r7, #28]
   return(result);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800673c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	2b01      	cmp	r3, #1
 8006756:	d118      	bne.n	800678a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	60bb      	str	r3, [r7, #8]
   return(result);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f023 0310 	bic.w	r3, r3, #16
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6979      	ldr	r1, [r7, #20]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	613b      	str	r3, [r7, #16]
   return(result);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e6      	bne.n	8006758 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800679e:	bf00      	nop
 80067a0:	3754      	adds	r7, #84	; 0x54
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff fb51 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b08f      	sub	sp, #60	; 0x3c
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e2:	2b21      	cmp	r3, #33	; 0x21
 80067e4:	d14c      	bne.n	8006880 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d132      	bne.n	8006858 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006812:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e6      	bne.n	80067f2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	60bb      	str	r3, [r7, #8]
   return(result);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006838:	633b      	str	r3, [r7, #48]	; 0x30
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6979      	ldr	r1, [r7, #20]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	613b      	str	r3, [r7, #16]
   return(result);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e6      	bne.n	8006824 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006856:	e013      	b.n	8006880 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006880:	bf00      	nop
 8006882:	373c      	adds	r7, #60	; 0x3c
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b091      	sub	sp, #68	; 0x44
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006898:	2b21      	cmp	r3, #33	; 0x21
 800689a:	d151      	bne.n	8006940 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d132      	bne.n	800690e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	623b      	str	r3, [r7, #32]
   return(result);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	633b      	str	r3, [r7, #48]	; 0x30
 80068c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	617b      	str	r3, [r7, #20]
   return(result);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e6      	bne.n	80068da <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800690c:	e018      	b.n	8006940 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006922:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006940:	bf00      	nop
 8006942:	3744      	adds	r7, #68	; 0x44
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	60bb      	str	r3, [r7, #8]
   return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	613b      	str	r3, [r7, #16]
   return(result);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fa62 	bl	8005e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006998:	bf00      	nop
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a0:	b084      	sub	sp, #16
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	f107 001c 	add.w	r0, r7, #28
 80069ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d120      	bne.n	80069fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	4b20      	ldr	r3, [pc, #128]	; (8006a4c <USB_CoreInit+0xac>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d105      	bne.n	80069ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa96 	bl	8006f20 <USB_CoreReset>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e010      	b.n	8006a1c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa8a 	bl	8006f20 <USB_CoreReset>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10b      	bne.n	8006a3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f043 0206 	orr.w	r2, r3, #6
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f043 0220 	orr.w	r2, r3, #32
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a46:	b004      	add	sp, #16
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	ffbdffbf 	.word	0xffbdffbf

08006a50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f023 0201 	bic.w	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d115      	bne.n	8006ac0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	f7fb facd 	bl	8002040 <HAL_Delay>
      ms++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa29 	bl	8006f04 <USB_GetMode>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d01e      	beq.n	8006af6 <USB_SetCurrentMode+0x84>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b31      	cmp	r3, #49	; 0x31
 8006abc:	d9f0      	bls.n	8006aa0 <USB_SetCurrentMode+0x2e>
 8006abe:	e01a      	b.n	8006af6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d115      	bne.n	8006af2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f7fb fab4 	bl	8002040 <HAL_Delay>
      ms++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa10 	bl	8006f04 <USB_GetMode>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <USB_SetCurrentMode+0x84>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b31      	cmp	r3, #49	; 0x31
 8006aee:	d9f0      	bls.n	8006ad2 <USB_SetCurrentMode+0x60>
 8006af0:	e001      	b.n	8006af6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e005      	b.n	8006b02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b32      	cmp	r3, #50	; 0x32
 8006afa:	d101      	bne.n	8006b00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	e009      	b.n	8006b40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	3340      	adds	r3, #64	; 0x40
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	2200      	movs	r2, #0
 8006b38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b0e      	cmp	r3, #14
 8006b44:	d9f2      	bls.n	8006b2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d11c      	bne.n	8006b86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5a:	f043 0302 	orr.w	r3, r3, #2
 8006b5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e005      	b.n	8006b92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	461a      	mov	r2, r3
 8006bae:	680b      	ldr	r3, [r1, #0]
 8006bb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10c      	bne.n	8006bd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f965 	bl	8006e90 <USB_SetDevSpeed>
 8006bc6:	e008      	b.n	8006bda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bc8:	2101      	movs	r1, #1
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f960 	bl	8006e90 <USB_SetDevSpeed>
 8006bd0:	e003      	b.n	8006bda <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bd2:	2103      	movs	r1, #3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f95b 	bl	8006e90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bda:	2110      	movs	r1, #16
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8f3 	bl	8006dc8 <USB_FlushTxFifo>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f91f 	bl	8006e30 <USB_FlushRxFifo>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	461a      	mov	r2, r3
 8006c04:	2300      	movs	r3, #0
 8006c06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0e:	461a      	mov	r2, r3
 8006c10:	2300      	movs	r3, #0
 8006c12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e043      	b.n	8006cae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3c:	d118      	bne.n	8006c70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e013      	b.n	8006c82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	461a      	mov	r2, r3
 8006c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e008      	b.n	8006c82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	3301      	adds	r3, #1
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d3b7      	bcc.n	8006c26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	e043      	b.n	8006d44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd2:	d118      	bne.n	8006d06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e013      	b.n	8006d18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e008      	b.n	8006d18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d36:	461a      	mov	r2, r3
 8006d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d3b7      	bcc.n	8006cbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f043 0210 	orr.w	r2, r3, #16
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699a      	ldr	r2, [r3, #24]
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <USB_DevInit+0x2b4>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f043 0208 	orr.w	r2, r3, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d105      	bne.n	8006db0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <USB_DevInit+0x2b8>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dbc:	b004      	add	sp, #16
 8006dbe:	4770      	bx	lr
 8006dc0:	803c3800 	.word	0x803c3800
 8006dc4:	40000004 	.word	0x40000004

08006dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a13      	ldr	r2, [pc, #76]	; (8006e2c <USB_FlushTxFifo+0x64>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d901      	bls.n	8006de8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e01b      	b.n	8006e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	daf2      	bge.n	8006dd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	019b      	lsls	r3, r3, #6
 8006df8:	f043 0220 	orr.w	r2, r3, #32
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <USB_FlushTxFifo+0x64>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e006      	b.n	8006e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d0f0      	beq.n	8006e00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	00030d40 	.word	0x00030d40

08006e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a11      	ldr	r2, [pc, #68]	; (8006e8c <USB_FlushRxFifo+0x5c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d901      	bls.n	8006e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e018      	b.n	8006e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	daf2      	bge.n	8006e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <USB_FlushRxFifo+0x5c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d901      	bls.n	8006e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e006      	b.n	8006e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	2b10      	cmp	r3, #16
 8006e7c:	d0f0      	beq.n	8006e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	00030d40 	.word	0x00030d40

08006e90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef0:	f043 0302 	orr.w	r3, r3, #2
 8006ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0301 	and.w	r3, r3, #1
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <USB_CoreReset+0x64>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e01b      	b.n	8006f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	daf2      	bge.n	8006f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f043 0201 	orr.w	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <USB_CoreReset+0x64>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d901      	bls.n	8006f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e006      	b.n	8006f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d0f0      	beq.n	8006f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	00030d40 	.word	0x00030d40

08006f88 <__errno>:
 8006f88:	4b01      	ldr	r3, [pc, #4]	; (8006f90 <__errno+0x8>)
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20000048 	.word	0x20000048

08006f94 <__libc_init_array>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	4d0d      	ldr	r5, [pc, #52]	; (8006fcc <__libc_init_array+0x38>)
 8006f98:	4c0d      	ldr	r4, [pc, #52]	; (8006fd0 <__libc_init_array+0x3c>)
 8006f9a:	1b64      	subs	r4, r4, r5
 8006f9c:	10a4      	asrs	r4, r4, #2
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	42a6      	cmp	r6, r4
 8006fa2:	d109      	bne.n	8006fb8 <__libc_init_array+0x24>
 8006fa4:	4d0b      	ldr	r5, [pc, #44]	; (8006fd4 <__libc_init_array+0x40>)
 8006fa6:	4c0c      	ldr	r4, [pc, #48]	; (8006fd8 <__libc_init_array+0x44>)
 8006fa8:	f002 fe5c 	bl	8009c64 <_init>
 8006fac:	1b64      	subs	r4, r4, r5
 8006fae:	10a4      	asrs	r4, r4, #2
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	42a6      	cmp	r6, r4
 8006fb4:	d105      	bne.n	8006fc2 <__libc_init_array+0x2e>
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbc:	4798      	blx	r3
 8006fbe:	3601      	adds	r6, #1
 8006fc0:	e7ee      	b.n	8006fa0 <__libc_init_array+0xc>
 8006fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc6:	4798      	blx	r3
 8006fc8:	3601      	adds	r6, #1
 8006fca:	e7f2      	b.n	8006fb2 <__libc_init_array+0x1e>
 8006fcc:	0800a0a4 	.word	0x0800a0a4
 8006fd0:	0800a0a4 	.word	0x0800a0a4
 8006fd4:	0800a0a4 	.word	0x0800a0a4
 8006fd8:	0800a0a8 	.word	0x0800a0a8

08006fdc <memcpy>:
 8006fdc:	440a      	add	r2, r1
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe4:	d100      	bne.n	8006fe8 <memcpy+0xc>
 8006fe6:	4770      	bx	lr
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	d1f9      	bne.n	8006fea <memcpy+0xe>
 8006ff6:	bd10      	pop	{r4, pc}

08006ff8 <memset>:
 8006ff8:	4402      	add	r2, r0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d100      	bne.n	8007002 <memset+0xa>
 8007000:	4770      	bx	lr
 8007002:	f803 1b01 	strb.w	r1, [r3], #1
 8007006:	e7f9      	b.n	8006ffc <memset+0x4>

08007008 <__cvt>:
 8007008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700a:	ed2d 8b02 	vpush	{d8}
 800700e:	eeb0 8b40 	vmov.f64	d8, d0
 8007012:	b085      	sub	sp, #20
 8007014:	4617      	mov	r7, r2
 8007016:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007018:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800701a:	ee18 2a90 	vmov	r2, s17
 800701e:	f025 0520 	bic.w	r5, r5, #32
 8007022:	2a00      	cmp	r2, #0
 8007024:	bfb6      	itet	lt
 8007026:	222d      	movlt	r2, #45	; 0x2d
 8007028:	2200      	movge	r2, #0
 800702a:	eeb1 8b40 	vneglt.f64	d8, d0
 800702e:	2d46      	cmp	r5, #70	; 0x46
 8007030:	460c      	mov	r4, r1
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	d004      	beq.n	8007040 <__cvt+0x38>
 8007036:	2d45      	cmp	r5, #69	; 0x45
 8007038:	d100      	bne.n	800703c <__cvt+0x34>
 800703a:	3401      	adds	r4, #1
 800703c:	2102      	movs	r1, #2
 800703e:	e000      	b.n	8007042 <__cvt+0x3a>
 8007040:	2103      	movs	r1, #3
 8007042:	ab03      	add	r3, sp, #12
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	ab02      	add	r3, sp, #8
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	4622      	mov	r2, r4
 800704c:	4633      	mov	r3, r6
 800704e:	eeb0 0b48 	vmov.f64	d0, d8
 8007052:	f000 fcc9 	bl	80079e8 <_dtoa_r>
 8007056:	2d47      	cmp	r5, #71	; 0x47
 8007058:	d101      	bne.n	800705e <__cvt+0x56>
 800705a:	07fb      	lsls	r3, r7, #31
 800705c:	d51a      	bpl.n	8007094 <__cvt+0x8c>
 800705e:	2d46      	cmp	r5, #70	; 0x46
 8007060:	eb00 0204 	add.w	r2, r0, r4
 8007064:	d10c      	bne.n	8007080 <__cvt+0x78>
 8007066:	7803      	ldrb	r3, [r0, #0]
 8007068:	2b30      	cmp	r3, #48	; 0x30
 800706a:	d107      	bne.n	800707c <__cvt+0x74>
 800706c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007074:	bf1c      	itt	ne
 8007076:	f1c4 0401 	rsbne	r4, r4, #1
 800707a:	6034      	strne	r4, [r6, #0]
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	441a      	add	r2, r3
 8007080:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	bf08      	it	eq
 800708a:	9203      	streq	r2, [sp, #12]
 800708c:	2130      	movs	r1, #48	; 0x30
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	4293      	cmp	r3, r2
 8007092:	d307      	bcc.n	80070a4 <__cvt+0x9c>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007098:	1a1b      	subs	r3, r3, r0
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	b005      	add	sp, #20
 800709e:	ecbd 8b02 	vpop	{d8}
 80070a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a4:	1c5c      	adds	r4, r3, #1
 80070a6:	9403      	str	r4, [sp, #12]
 80070a8:	7019      	strb	r1, [r3, #0]
 80070aa:	e7f0      	b.n	800708e <__cvt+0x86>

080070ac <__exponent>:
 80070ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ae:	4603      	mov	r3, r0
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfb8      	it	lt
 80070b4:	4249      	neglt	r1, r1
 80070b6:	f803 2b02 	strb.w	r2, [r3], #2
 80070ba:	bfb4      	ite	lt
 80070bc:	222d      	movlt	r2, #45	; 0x2d
 80070be:	222b      	movge	r2, #43	; 0x2b
 80070c0:	2909      	cmp	r1, #9
 80070c2:	7042      	strb	r2, [r0, #1]
 80070c4:	dd2a      	ble.n	800711c <__exponent+0x70>
 80070c6:	f10d 0407 	add.w	r4, sp, #7
 80070ca:	46a4      	mov	ip, r4
 80070cc:	270a      	movs	r7, #10
 80070ce:	46a6      	mov	lr, r4
 80070d0:	460a      	mov	r2, r1
 80070d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80070d6:	fb07 1516 	mls	r5, r7, r6, r1
 80070da:	3530      	adds	r5, #48	; 0x30
 80070dc:	2a63      	cmp	r2, #99	; 0x63
 80070de:	f104 34ff 	add.w	r4, r4, #4294967295
 80070e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070e6:	4631      	mov	r1, r6
 80070e8:	dcf1      	bgt.n	80070ce <__exponent+0x22>
 80070ea:	3130      	adds	r1, #48	; 0x30
 80070ec:	f1ae 0502 	sub.w	r5, lr, #2
 80070f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070f4:	1c44      	adds	r4, r0, #1
 80070f6:	4629      	mov	r1, r5
 80070f8:	4561      	cmp	r1, ip
 80070fa:	d30a      	bcc.n	8007112 <__exponent+0x66>
 80070fc:	f10d 0209 	add.w	r2, sp, #9
 8007100:	eba2 020e 	sub.w	r2, r2, lr
 8007104:	4565      	cmp	r5, ip
 8007106:	bf88      	it	hi
 8007108:	2200      	movhi	r2, #0
 800710a:	4413      	add	r3, r2
 800710c:	1a18      	subs	r0, r3, r0
 800710e:	b003      	add	sp, #12
 8007110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007116:	f804 2f01 	strb.w	r2, [r4, #1]!
 800711a:	e7ed      	b.n	80070f8 <__exponent+0x4c>
 800711c:	2330      	movs	r3, #48	; 0x30
 800711e:	3130      	adds	r1, #48	; 0x30
 8007120:	7083      	strb	r3, [r0, #2]
 8007122:	70c1      	strb	r1, [r0, #3]
 8007124:	1d03      	adds	r3, r0, #4
 8007126:	e7f1      	b.n	800710c <__exponent+0x60>

08007128 <_printf_float>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	b08b      	sub	sp, #44	; 0x2c
 800712e:	460c      	mov	r4, r1
 8007130:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007134:	4616      	mov	r6, r2
 8007136:	461f      	mov	r7, r3
 8007138:	4605      	mov	r5, r0
 800713a:	f001 f9c3 	bl	80084c4 <_localeconv_r>
 800713e:	f8d0 b000 	ldr.w	fp, [r0]
 8007142:	4658      	mov	r0, fp
 8007144:	f7f9 f87c 	bl	8000240 <strlen>
 8007148:	2300      	movs	r3, #0
 800714a:	9308      	str	r3, [sp, #32]
 800714c:	f8d8 3000 	ldr.w	r3, [r8]
 8007150:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	3307      	adds	r3, #7
 8007158:	f023 0307 	bic.w	r3, r3, #7
 800715c:	f103 0108 	add.w	r1, r3, #8
 8007160:	f8c8 1000 	str.w	r1, [r8]
 8007164:	4682      	mov	sl, r0
 8007166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800716a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800716e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80073d0 <_printf_float+0x2a8>
 8007172:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007176:	eeb0 6bc0 	vabs.f64	d6, d0
 800717a:	eeb4 6b47 	vcmp.f64	d6, d7
 800717e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007182:	dd24      	ble.n	80071ce <_printf_float+0xa6>
 8007184:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	d502      	bpl.n	8007194 <_printf_float+0x6c>
 800718e:	232d      	movs	r3, #45	; 0x2d
 8007190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007194:	4b90      	ldr	r3, [pc, #576]	; (80073d8 <_printf_float+0x2b0>)
 8007196:	4891      	ldr	r0, [pc, #580]	; (80073dc <_printf_float+0x2b4>)
 8007198:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800719c:	bf94      	ite	ls
 800719e:	4698      	movls	r8, r3
 80071a0:	4680      	movhi	r8, r0
 80071a2:	2303      	movs	r3, #3
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	f022 0204 	bic.w	r2, r2, #4
 80071aa:	2300      	movs	r3, #0
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	9700      	str	r7, [sp, #0]
 80071b2:	4633      	mov	r3, r6
 80071b4:	aa09      	add	r2, sp, #36	; 0x24
 80071b6:	4621      	mov	r1, r4
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 f9d3 	bl	8007564 <_printf_common>
 80071be:	3001      	adds	r0, #1
 80071c0:	f040 808a 	bne.w	80072d8 <_printf_float+0x1b0>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b00b      	add	sp, #44	; 0x2c
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80071d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d6:	d709      	bvc.n	80071ec <_printf_float+0xc4>
 80071d8:	ee10 3a90 	vmov	r3, s1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bfbc      	itt	lt
 80071e0:	232d      	movlt	r3, #45	; 0x2d
 80071e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071e6:	487e      	ldr	r0, [pc, #504]	; (80073e0 <_printf_float+0x2b8>)
 80071e8:	4b7e      	ldr	r3, [pc, #504]	; (80073e4 <_printf_float+0x2bc>)
 80071ea:	e7d5      	b.n	8007198 <_printf_float+0x70>
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80071f2:	9104      	str	r1, [sp, #16]
 80071f4:	1c59      	adds	r1, r3, #1
 80071f6:	d13c      	bne.n	8007272 <_printf_float+0x14a>
 80071f8:	2306      	movs	r3, #6
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	2300      	movs	r3, #0
 80071fe:	9303      	str	r3, [sp, #12]
 8007200:	ab08      	add	r3, sp, #32
 8007202:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007206:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800720a:	ab07      	add	r3, sp, #28
 800720c:	6861      	ldr	r1, [r4, #4]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	f10d 031b 	add.w	r3, sp, #27
 8007216:	4628      	mov	r0, r5
 8007218:	f7ff fef6 	bl	8007008 <__cvt>
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	9907      	ldr	r1, [sp, #28]
 8007220:	2b47      	cmp	r3, #71	; 0x47
 8007222:	4680      	mov	r8, r0
 8007224:	d108      	bne.n	8007238 <_printf_float+0x110>
 8007226:	1cc8      	adds	r0, r1, #3
 8007228:	db02      	blt.n	8007230 <_printf_float+0x108>
 800722a:	6863      	ldr	r3, [r4, #4]
 800722c:	4299      	cmp	r1, r3
 800722e:	dd41      	ble.n	80072b4 <_printf_float+0x18c>
 8007230:	f1a9 0902 	sub.w	r9, r9, #2
 8007234:	fa5f f989 	uxtb.w	r9, r9
 8007238:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800723c:	d820      	bhi.n	8007280 <_printf_float+0x158>
 800723e:	3901      	subs	r1, #1
 8007240:	464a      	mov	r2, r9
 8007242:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007246:	9107      	str	r1, [sp, #28]
 8007248:	f7ff ff30 	bl	80070ac <__exponent>
 800724c:	9a08      	ldr	r2, [sp, #32]
 800724e:	9004      	str	r0, [sp, #16]
 8007250:	1813      	adds	r3, r2, r0
 8007252:	2a01      	cmp	r2, #1
 8007254:	6123      	str	r3, [r4, #16]
 8007256:	dc02      	bgt.n	800725e <_printf_float+0x136>
 8007258:	6822      	ldr	r2, [r4, #0]
 800725a:	07d2      	lsls	r2, r2, #31
 800725c:	d501      	bpl.n	8007262 <_printf_float+0x13a>
 800725e:	3301      	adds	r3, #1
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0a2      	beq.n	80071b0 <_printf_float+0x88>
 800726a:	232d      	movs	r3, #45	; 0x2d
 800726c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007270:	e79e      	b.n	80071b0 <_printf_float+0x88>
 8007272:	9904      	ldr	r1, [sp, #16]
 8007274:	2947      	cmp	r1, #71	; 0x47
 8007276:	d1c1      	bne.n	80071fc <_printf_float+0xd4>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1bf      	bne.n	80071fc <_printf_float+0xd4>
 800727c:	2301      	movs	r3, #1
 800727e:	e7bc      	b.n	80071fa <_printf_float+0xd2>
 8007280:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007284:	d118      	bne.n	80072b8 <_printf_float+0x190>
 8007286:	2900      	cmp	r1, #0
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	dd0b      	ble.n	80072a4 <_printf_float+0x17c>
 800728c:	6121      	str	r1, [r4, #16]
 800728e:	b913      	cbnz	r3, 8007296 <_printf_float+0x16e>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	07d0      	lsls	r0, r2, #31
 8007294:	d502      	bpl.n	800729c <_printf_float+0x174>
 8007296:	3301      	adds	r3, #1
 8007298:	440b      	add	r3, r1
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	2300      	movs	r3, #0
 800729e:	65a1      	str	r1, [r4, #88]	; 0x58
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	e7de      	b.n	8007262 <_printf_float+0x13a>
 80072a4:	b913      	cbnz	r3, 80072ac <_printf_float+0x184>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	07d2      	lsls	r2, r2, #31
 80072aa:	d501      	bpl.n	80072b0 <_printf_float+0x188>
 80072ac:	3302      	adds	r3, #2
 80072ae:	e7f4      	b.n	800729a <_printf_float+0x172>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e7f2      	b.n	800729a <_printf_float+0x172>
 80072b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	4299      	cmp	r1, r3
 80072bc:	db05      	blt.n	80072ca <_printf_float+0x1a2>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6121      	str	r1, [r4, #16]
 80072c2:	07d8      	lsls	r0, r3, #31
 80072c4:	d5ea      	bpl.n	800729c <_printf_float+0x174>
 80072c6:	1c4b      	adds	r3, r1, #1
 80072c8:	e7e7      	b.n	800729a <_printf_float+0x172>
 80072ca:	2900      	cmp	r1, #0
 80072cc:	bfd4      	ite	le
 80072ce:	f1c1 0202 	rsble	r2, r1, #2
 80072d2:	2201      	movgt	r2, #1
 80072d4:	4413      	add	r3, r2
 80072d6:	e7e0      	b.n	800729a <_printf_float+0x172>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	055a      	lsls	r2, r3, #21
 80072dc:	d407      	bmi.n	80072ee <_printf_float+0x1c6>
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	4642      	mov	r2, r8
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	d12a      	bne.n	8007342 <_printf_float+0x21a>
 80072ec:	e76a      	b.n	80071c4 <_printf_float+0x9c>
 80072ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072f2:	f240 80e2 	bls.w	80074ba <_printf_float+0x392>
 80072f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80072fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007302:	d133      	bne.n	800736c <_printf_float+0x244>
 8007304:	4a38      	ldr	r2, [pc, #224]	; (80073e8 <_printf_float+0x2c0>)
 8007306:	2301      	movs	r3, #1
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	f43f af58 	beq.w	80071c4 <_printf_float+0x9c>
 8007314:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007318:	429a      	cmp	r2, r3
 800731a:	db02      	blt.n	8007322 <_printf_float+0x1fa>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	07d8      	lsls	r0, r3, #31
 8007320:	d50f      	bpl.n	8007342 <_printf_float+0x21a>
 8007322:	4653      	mov	r3, sl
 8007324:	465a      	mov	r2, fp
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	f43f af49 	beq.w	80071c4 <_printf_float+0x9c>
 8007332:	f04f 0800 	mov.w	r8, #0
 8007336:	f104 091a 	add.w	r9, r4, #26
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	3b01      	subs	r3, #1
 800733e:	4543      	cmp	r3, r8
 8007340:	dc09      	bgt.n	8007356 <_printf_float+0x22e>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	079b      	lsls	r3, r3, #30
 8007346:	f100 8108 	bmi.w	800755a <_printf_float+0x432>
 800734a:	68e0      	ldr	r0, [r4, #12]
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	4298      	cmp	r0, r3
 8007350:	bfb8      	it	lt
 8007352:	4618      	movlt	r0, r3
 8007354:	e738      	b.n	80071c8 <_printf_float+0xa0>
 8007356:	2301      	movs	r3, #1
 8007358:	464a      	mov	r2, r9
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	f43f af2f 	beq.w	80071c4 <_printf_float+0x9c>
 8007366:	f108 0801 	add.w	r8, r8, #1
 800736a:	e7e6      	b.n	800733a <_printf_float+0x212>
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	dc3c      	bgt.n	80073ec <_printf_float+0x2c4>
 8007372:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <_printf_float+0x2c0>)
 8007374:	2301      	movs	r3, #1
 8007376:	4631      	mov	r1, r6
 8007378:	4628      	mov	r0, r5
 800737a:	47b8      	blx	r7
 800737c:	3001      	adds	r0, #1
 800737e:	f43f af21 	beq.w	80071c4 <_printf_float+0x9c>
 8007382:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007386:	4313      	orrs	r3, r2
 8007388:	d102      	bne.n	8007390 <_printf_float+0x268>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	07d9      	lsls	r1, r3, #31
 800738e:	d5d8      	bpl.n	8007342 <_printf_float+0x21a>
 8007390:	4653      	mov	r3, sl
 8007392:	465a      	mov	r2, fp
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f af12 	beq.w	80071c4 <_printf_float+0x9c>
 80073a0:	f04f 0900 	mov.w	r9, #0
 80073a4:	f104 0a1a 	add.w	sl, r4, #26
 80073a8:	9b07      	ldr	r3, [sp, #28]
 80073aa:	425b      	negs	r3, r3
 80073ac:	454b      	cmp	r3, r9
 80073ae:	dc01      	bgt.n	80073b4 <_printf_float+0x28c>
 80073b0:	9b08      	ldr	r3, [sp, #32]
 80073b2:	e795      	b.n	80072e0 <_printf_float+0x1b8>
 80073b4:	2301      	movs	r3, #1
 80073b6:	4652      	mov	r2, sl
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f af00 	beq.w	80071c4 <_printf_float+0x9c>
 80073c4:	f109 0901 	add.w	r9, r9, #1
 80073c8:	e7ee      	b.n	80073a8 <_printf_float+0x280>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	ffffffff 	.word	0xffffffff
 80073d4:	7fefffff 	.word	0x7fefffff
 80073d8:	08009cc8 	.word	0x08009cc8
 80073dc:	08009ccc 	.word	0x08009ccc
 80073e0:	08009cd4 	.word	0x08009cd4
 80073e4:	08009cd0 	.word	0x08009cd0
 80073e8:	08009cd8 	.word	0x08009cd8
 80073ec:	9a08      	ldr	r2, [sp, #32]
 80073ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f0:	429a      	cmp	r2, r3
 80073f2:	bfa8      	it	ge
 80073f4:	461a      	movge	r2, r3
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	4691      	mov	r9, r2
 80073fa:	dc38      	bgt.n	800746e <_printf_float+0x346>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9305      	str	r3, [sp, #20]
 8007400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007404:	f104 021a 	add.w	r2, r4, #26
 8007408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800740a:	9905      	ldr	r1, [sp, #20]
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	eba3 0309 	sub.w	r3, r3, r9
 8007412:	428b      	cmp	r3, r1
 8007414:	dc33      	bgt.n	800747e <_printf_float+0x356>
 8007416:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800741a:	429a      	cmp	r2, r3
 800741c:	db3c      	blt.n	8007498 <_printf_float+0x370>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	07da      	lsls	r2, r3, #31
 8007422:	d439      	bmi.n	8007498 <_printf_float+0x370>
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	9a04      	ldr	r2, [sp, #16]
 8007428:	9907      	ldr	r1, [sp, #28]
 800742a:	1a9a      	subs	r2, r3, r2
 800742c:	eba3 0901 	sub.w	r9, r3, r1
 8007430:	4591      	cmp	r9, r2
 8007432:	bfa8      	it	ge
 8007434:	4691      	movge	r9, r2
 8007436:	f1b9 0f00 	cmp.w	r9, #0
 800743a:	dc35      	bgt.n	80074a8 <_printf_float+0x380>
 800743c:	f04f 0800 	mov.w	r8, #0
 8007440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007444:	f104 0a1a 	add.w	sl, r4, #26
 8007448:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	eba3 0309 	sub.w	r3, r3, r9
 8007452:	4543      	cmp	r3, r8
 8007454:	f77f af75 	ble.w	8007342 <_printf_float+0x21a>
 8007458:	2301      	movs	r3, #1
 800745a:	4652      	mov	r2, sl
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f aeae 	beq.w	80071c4 <_printf_float+0x9c>
 8007468:	f108 0801 	add.w	r8, r8, #1
 800746c:	e7ec      	b.n	8007448 <_printf_float+0x320>
 800746e:	4613      	mov	r3, r2
 8007470:	4631      	mov	r1, r6
 8007472:	4642      	mov	r2, r8
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	d1bf      	bne.n	80073fc <_printf_float+0x2d4>
 800747c:	e6a2      	b.n	80071c4 <_printf_float+0x9c>
 800747e:	2301      	movs	r3, #1
 8007480:	4631      	mov	r1, r6
 8007482:	4628      	mov	r0, r5
 8007484:	9204      	str	r2, [sp, #16]
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	f43f ae9b 	beq.w	80071c4 <_printf_float+0x9c>
 800748e:	9b05      	ldr	r3, [sp, #20]
 8007490:	9a04      	ldr	r2, [sp, #16]
 8007492:	3301      	adds	r3, #1
 8007494:	9305      	str	r3, [sp, #20]
 8007496:	e7b7      	b.n	8007408 <_printf_float+0x2e0>
 8007498:	4653      	mov	r3, sl
 800749a:	465a      	mov	r2, fp
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	d1be      	bne.n	8007424 <_printf_float+0x2fc>
 80074a6:	e68d      	b.n	80071c4 <_printf_float+0x9c>
 80074a8:	9a04      	ldr	r2, [sp, #16]
 80074aa:	464b      	mov	r3, r9
 80074ac:	4442      	add	r2, r8
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d1c1      	bne.n	800743c <_printf_float+0x314>
 80074b8:	e684      	b.n	80071c4 <_printf_float+0x9c>
 80074ba:	9a08      	ldr	r2, [sp, #32]
 80074bc:	2a01      	cmp	r2, #1
 80074be:	dc01      	bgt.n	80074c4 <_printf_float+0x39c>
 80074c0:	07db      	lsls	r3, r3, #31
 80074c2:	d537      	bpl.n	8007534 <_printf_float+0x40c>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4642      	mov	r2, r8
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f ae78 	beq.w	80071c4 <_printf_float+0x9c>
 80074d4:	4653      	mov	r3, sl
 80074d6:	465a      	mov	r2, fp
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f ae70 	beq.w	80071c4 <_printf_float+0x9c>
 80074e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80074e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f0:	d01b      	beq.n	800752a <_printf_float+0x402>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	f108 0201 	add.w	r2, r8, #1
 80074f8:	3b01      	subs	r3, #1
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	d10e      	bne.n	8007522 <_printf_float+0x3fa>
 8007504:	e65e      	b.n	80071c4 <_printf_float+0x9c>
 8007506:	2301      	movs	r3, #1
 8007508:	464a      	mov	r2, r9
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f ae57 	beq.w	80071c4 <_printf_float+0x9c>
 8007516:	f108 0801 	add.w	r8, r8, #1
 800751a:	9b08      	ldr	r3, [sp, #32]
 800751c:	3b01      	subs	r3, #1
 800751e:	4543      	cmp	r3, r8
 8007520:	dcf1      	bgt.n	8007506 <_printf_float+0x3de>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007528:	e6db      	b.n	80072e2 <_printf_float+0x1ba>
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	f104 091a 	add.w	r9, r4, #26
 8007532:	e7f2      	b.n	800751a <_printf_float+0x3f2>
 8007534:	2301      	movs	r3, #1
 8007536:	4642      	mov	r2, r8
 8007538:	e7df      	b.n	80074fa <_printf_float+0x3d2>
 800753a:	2301      	movs	r3, #1
 800753c:	464a      	mov	r2, r9
 800753e:	4631      	mov	r1, r6
 8007540:	4628      	mov	r0, r5
 8007542:	47b8      	blx	r7
 8007544:	3001      	adds	r0, #1
 8007546:	f43f ae3d 	beq.w	80071c4 <_printf_float+0x9c>
 800754a:	f108 0801 	add.w	r8, r8, #1
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	4543      	cmp	r3, r8
 8007556:	dcf0      	bgt.n	800753a <_printf_float+0x412>
 8007558:	e6f7      	b.n	800734a <_printf_float+0x222>
 800755a:	f04f 0800 	mov.w	r8, #0
 800755e:	f104 0919 	add.w	r9, r4, #25
 8007562:	e7f4      	b.n	800754e <_printf_float+0x426>

08007564 <_printf_common>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	4616      	mov	r6, r2
 800756a:	4699      	mov	r9, r3
 800756c:	688a      	ldr	r2, [r1, #8]
 800756e:	690b      	ldr	r3, [r1, #16]
 8007570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007574:	4293      	cmp	r3, r2
 8007576:	bfb8      	it	lt
 8007578:	4613      	movlt	r3, r2
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007580:	4607      	mov	r7, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b10a      	cbz	r2, 800758a <_printf_common+0x26>
 8007586:	3301      	adds	r3, #1
 8007588:	6033      	str	r3, [r6, #0]
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	0699      	lsls	r1, r3, #26
 800758e:	bf42      	ittt	mi
 8007590:	6833      	ldrmi	r3, [r6, #0]
 8007592:	3302      	addmi	r3, #2
 8007594:	6033      	strmi	r3, [r6, #0]
 8007596:	6825      	ldr	r5, [r4, #0]
 8007598:	f015 0506 	ands.w	r5, r5, #6
 800759c:	d106      	bne.n	80075ac <_printf_common+0x48>
 800759e:	f104 0a19 	add.w	sl, r4, #25
 80075a2:	68e3      	ldr	r3, [r4, #12]
 80075a4:	6832      	ldr	r2, [r6, #0]
 80075a6:	1a9b      	subs	r3, r3, r2
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	dc26      	bgt.n	80075fa <_printf_common+0x96>
 80075ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075b0:	1e13      	subs	r3, r2, #0
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	bf18      	it	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	0692      	lsls	r2, r2, #26
 80075ba:	d42b      	bmi.n	8007614 <_printf_common+0xb0>
 80075bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075c0:	4649      	mov	r1, r9
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c0      	blx	r8
 80075c6:	3001      	adds	r0, #1
 80075c8:	d01e      	beq.n	8007608 <_printf_common+0xa4>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	68e5      	ldr	r5, [r4, #12]
 80075ce:	6832      	ldr	r2, [r6, #0]
 80075d0:	f003 0306 	and.w	r3, r3, #6
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	bf08      	it	eq
 80075d8:	1aad      	subeq	r5, r5, r2
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	6922      	ldr	r2, [r4, #16]
 80075de:	bf0c      	ite	eq
 80075e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e4:	2500      	movne	r5, #0
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bfc4      	itt	gt
 80075ea:	1a9b      	subgt	r3, r3, r2
 80075ec:	18ed      	addgt	r5, r5, r3
 80075ee:	2600      	movs	r6, #0
 80075f0:	341a      	adds	r4, #26
 80075f2:	42b5      	cmp	r5, r6
 80075f4:	d11a      	bne.n	800762c <_printf_common+0xc8>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e008      	b.n	800760c <_printf_common+0xa8>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4652      	mov	r2, sl
 80075fe:	4649      	mov	r1, r9
 8007600:	4638      	mov	r0, r7
 8007602:	47c0      	blx	r8
 8007604:	3001      	adds	r0, #1
 8007606:	d103      	bne.n	8007610 <_printf_common+0xac>
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007610:	3501      	adds	r5, #1
 8007612:	e7c6      	b.n	80075a2 <_printf_common+0x3e>
 8007614:	18e1      	adds	r1, r4, r3
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	2030      	movs	r0, #48	; 0x30
 800761a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800761e:	4422      	add	r2, r4
 8007620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007628:	3302      	adds	r3, #2
 800762a:	e7c7      	b.n	80075bc <_printf_common+0x58>
 800762c:	2301      	movs	r3, #1
 800762e:	4622      	mov	r2, r4
 8007630:	4649      	mov	r1, r9
 8007632:	4638      	mov	r0, r7
 8007634:	47c0      	blx	r8
 8007636:	3001      	adds	r0, #1
 8007638:	d0e6      	beq.n	8007608 <_printf_common+0xa4>
 800763a:	3601      	adds	r6, #1
 800763c:	e7d9      	b.n	80075f2 <_printf_common+0x8e>
	...

08007640 <_printf_i>:
 8007640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	7e0f      	ldrb	r7, [r1, #24]
 8007646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007648:	2f78      	cmp	r7, #120	; 0x78
 800764a:	4691      	mov	r9, r2
 800764c:	4680      	mov	r8, r0
 800764e:	460c      	mov	r4, r1
 8007650:	469a      	mov	sl, r3
 8007652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007656:	d807      	bhi.n	8007668 <_printf_i+0x28>
 8007658:	2f62      	cmp	r7, #98	; 0x62
 800765a:	d80a      	bhi.n	8007672 <_printf_i+0x32>
 800765c:	2f00      	cmp	r7, #0
 800765e:	f000 80d8 	beq.w	8007812 <_printf_i+0x1d2>
 8007662:	2f58      	cmp	r7, #88	; 0x58
 8007664:	f000 80a3 	beq.w	80077ae <_printf_i+0x16e>
 8007668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800766c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007670:	e03a      	b.n	80076e8 <_printf_i+0xa8>
 8007672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007676:	2b15      	cmp	r3, #21
 8007678:	d8f6      	bhi.n	8007668 <_printf_i+0x28>
 800767a:	a101      	add	r1, pc, #4	; (adr r1, 8007680 <_printf_i+0x40>)
 800767c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007680:	080076d9 	.word	0x080076d9
 8007684:	080076ed 	.word	0x080076ed
 8007688:	08007669 	.word	0x08007669
 800768c:	08007669 	.word	0x08007669
 8007690:	08007669 	.word	0x08007669
 8007694:	08007669 	.word	0x08007669
 8007698:	080076ed 	.word	0x080076ed
 800769c:	08007669 	.word	0x08007669
 80076a0:	08007669 	.word	0x08007669
 80076a4:	08007669 	.word	0x08007669
 80076a8:	08007669 	.word	0x08007669
 80076ac:	080077f9 	.word	0x080077f9
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	080077db 	.word	0x080077db
 80076b8:	08007669 	.word	0x08007669
 80076bc:	08007669 	.word	0x08007669
 80076c0:	0800781b 	.word	0x0800781b
 80076c4:	08007669 	.word	0x08007669
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007669 	.word	0x08007669
 80076d0:	08007669 	.word	0x08007669
 80076d4:	080077e3 	.word	0x080077e3
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	602a      	str	r2, [r5, #0]
 80076e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0a3      	b.n	8007834 <_printf_i+0x1f4>
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	6829      	ldr	r1, [r5, #0]
 80076f0:	0606      	lsls	r6, r0, #24
 80076f2:	f101 0304 	add.w	r3, r1, #4
 80076f6:	d50a      	bpl.n	800770e <_printf_i+0xce>
 80076f8:	680e      	ldr	r6, [r1, #0]
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	2e00      	cmp	r6, #0
 80076fe:	da03      	bge.n	8007708 <_printf_i+0xc8>
 8007700:	232d      	movs	r3, #45	; 0x2d
 8007702:	4276      	negs	r6, r6
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007708:	485e      	ldr	r0, [pc, #376]	; (8007884 <_printf_i+0x244>)
 800770a:	230a      	movs	r3, #10
 800770c:	e019      	b.n	8007742 <_printf_i+0x102>
 800770e:	680e      	ldr	r6, [r1, #0]
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007716:	bf18      	it	ne
 8007718:	b236      	sxthne	r6, r6
 800771a:	e7ef      	b.n	80076fc <_printf_i+0xbc>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	6820      	ldr	r0, [r4, #0]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	6029      	str	r1, [r5, #0]
 8007724:	0601      	lsls	r1, r0, #24
 8007726:	d501      	bpl.n	800772c <_printf_i+0xec>
 8007728:	681e      	ldr	r6, [r3, #0]
 800772a:	e002      	b.n	8007732 <_printf_i+0xf2>
 800772c:	0646      	lsls	r6, r0, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0xe8>
 8007730:	881e      	ldrh	r6, [r3, #0]
 8007732:	4854      	ldr	r0, [pc, #336]	; (8007884 <_printf_i+0x244>)
 8007734:	2f6f      	cmp	r7, #111	; 0x6f
 8007736:	bf0c      	ite	eq
 8007738:	2308      	moveq	r3, #8
 800773a:	230a      	movne	r3, #10
 800773c:	2100      	movs	r1, #0
 800773e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007742:	6865      	ldr	r5, [r4, #4]
 8007744:	60a5      	str	r5, [r4, #8]
 8007746:	2d00      	cmp	r5, #0
 8007748:	bfa2      	ittt	ge
 800774a:	6821      	ldrge	r1, [r4, #0]
 800774c:	f021 0104 	bicge.w	r1, r1, #4
 8007750:	6021      	strge	r1, [r4, #0]
 8007752:	b90e      	cbnz	r6, 8007758 <_printf_i+0x118>
 8007754:	2d00      	cmp	r5, #0
 8007756:	d04d      	beq.n	80077f4 <_printf_i+0x1b4>
 8007758:	4615      	mov	r5, r2
 800775a:	fbb6 f1f3 	udiv	r1, r6, r3
 800775e:	fb03 6711 	mls	r7, r3, r1, r6
 8007762:	5dc7      	ldrb	r7, [r0, r7]
 8007764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007768:	4637      	mov	r7, r6
 800776a:	42bb      	cmp	r3, r7
 800776c:	460e      	mov	r6, r1
 800776e:	d9f4      	bls.n	800775a <_printf_i+0x11a>
 8007770:	2b08      	cmp	r3, #8
 8007772:	d10b      	bne.n	800778c <_printf_i+0x14c>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	07de      	lsls	r6, r3, #31
 8007778:	d508      	bpl.n	800778c <_printf_i+0x14c>
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	6861      	ldr	r1, [r4, #4]
 800777e:	4299      	cmp	r1, r3
 8007780:	bfde      	ittt	le
 8007782:	2330      	movle	r3, #48	; 0x30
 8007784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800778c:	1b52      	subs	r2, r2, r5
 800778e:	6122      	str	r2, [r4, #16]
 8007790:	f8cd a000 	str.w	sl, [sp]
 8007794:	464b      	mov	r3, r9
 8007796:	aa03      	add	r2, sp, #12
 8007798:	4621      	mov	r1, r4
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff fee2 	bl	8007564 <_printf_common>
 80077a0:	3001      	adds	r0, #1
 80077a2:	d14c      	bne.n	800783e <_printf_i+0x1fe>
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	b004      	add	sp, #16
 80077aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ae:	4835      	ldr	r0, [pc, #212]	; (8007884 <_printf_i+0x244>)
 80077b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077b4:	6829      	ldr	r1, [r5, #0]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80077bc:	6029      	str	r1, [r5, #0]
 80077be:	061d      	lsls	r5, r3, #24
 80077c0:	d514      	bpl.n	80077ec <_printf_i+0x1ac>
 80077c2:	07df      	lsls	r7, r3, #31
 80077c4:	bf44      	itt	mi
 80077c6:	f043 0320 	orrmi.w	r3, r3, #32
 80077ca:	6023      	strmi	r3, [r4, #0]
 80077cc:	b91e      	cbnz	r6, 80077d6 <_printf_i+0x196>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	f023 0320 	bic.w	r3, r3, #32
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	2310      	movs	r3, #16
 80077d8:	e7b0      	b.n	800773c <_printf_i+0xfc>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	f043 0320 	orr.w	r3, r3, #32
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	2378      	movs	r3, #120	; 0x78
 80077e4:	4828      	ldr	r0, [pc, #160]	; (8007888 <_printf_i+0x248>)
 80077e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ea:	e7e3      	b.n	80077b4 <_printf_i+0x174>
 80077ec:	0659      	lsls	r1, r3, #25
 80077ee:	bf48      	it	mi
 80077f0:	b2b6      	uxthmi	r6, r6
 80077f2:	e7e6      	b.n	80077c2 <_printf_i+0x182>
 80077f4:	4615      	mov	r5, r2
 80077f6:	e7bb      	b.n	8007770 <_printf_i+0x130>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6826      	ldr	r6, [r4, #0]
 80077fc:	6961      	ldr	r1, [r4, #20]
 80077fe:	1d18      	adds	r0, r3, #4
 8007800:	6028      	str	r0, [r5, #0]
 8007802:	0635      	lsls	r5, r6, #24
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	d501      	bpl.n	800780c <_printf_i+0x1cc>
 8007808:	6019      	str	r1, [r3, #0]
 800780a:	e002      	b.n	8007812 <_printf_i+0x1d2>
 800780c:	0670      	lsls	r0, r6, #25
 800780e:	d5fb      	bpl.n	8007808 <_printf_i+0x1c8>
 8007810:	8019      	strh	r1, [r3, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	4615      	mov	r5, r2
 8007818:	e7ba      	b.n	8007790 <_printf_i+0x150>
 800781a:	682b      	ldr	r3, [r5, #0]
 800781c:	1d1a      	adds	r2, r3, #4
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	681d      	ldr	r5, [r3, #0]
 8007822:	6862      	ldr	r2, [r4, #4]
 8007824:	2100      	movs	r1, #0
 8007826:	4628      	mov	r0, r5
 8007828:	f7f8 fd12 	bl	8000250 <memchr>
 800782c:	b108      	cbz	r0, 8007832 <_printf_i+0x1f2>
 800782e:	1b40      	subs	r0, r0, r5
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	2300      	movs	r3, #0
 8007838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800783c:	e7a8      	b.n	8007790 <_printf_i+0x150>
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	462a      	mov	r2, r5
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d0ab      	beq.n	80077a4 <_printf_i+0x164>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	079b      	lsls	r3, r3, #30
 8007850:	d413      	bmi.n	800787a <_printf_i+0x23a>
 8007852:	68e0      	ldr	r0, [r4, #12]
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	4298      	cmp	r0, r3
 8007858:	bfb8      	it	lt
 800785a:	4618      	movlt	r0, r3
 800785c:	e7a4      	b.n	80077a8 <_printf_i+0x168>
 800785e:	2301      	movs	r3, #1
 8007860:	4632      	mov	r2, r6
 8007862:	4649      	mov	r1, r9
 8007864:	4640      	mov	r0, r8
 8007866:	47d0      	blx	sl
 8007868:	3001      	adds	r0, #1
 800786a:	d09b      	beq.n	80077a4 <_printf_i+0x164>
 800786c:	3501      	adds	r5, #1
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	9903      	ldr	r1, [sp, #12]
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	42ab      	cmp	r3, r5
 8007876:	dcf2      	bgt.n	800785e <_printf_i+0x21e>
 8007878:	e7eb      	b.n	8007852 <_printf_i+0x212>
 800787a:	2500      	movs	r5, #0
 800787c:	f104 0619 	add.w	r6, r4, #25
 8007880:	e7f5      	b.n	800786e <_printf_i+0x22e>
 8007882:	bf00      	nop
 8007884:	08009cda 	.word	0x08009cda
 8007888:	08009ceb 	.word	0x08009ceb

0800788c <siprintf>:
 800788c:	b40e      	push	{r1, r2, r3}
 800788e:	b500      	push	{lr}
 8007890:	b09c      	sub	sp, #112	; 0x70
 8007892:	ab1d      	add	r3, sp, #116	; 0x74
 8007894:	9002      	str	r0, [sp, #8]
 8007896:	9006      	str	r0, [sp, #24]
 8007898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <siprintf+0x38>)
 800789e:	9107      	str	r1, [sp, #28]
 80078a0:	9104      	str	r1, [sp, #16]
 80078a2:	4909      	ldr	r1, [pc, #36]	; (80078c8 <siprintf+0x3c>)
 80078a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	a902      	add	r1, sp, #8
 80078b0:	f001 faea 	bl	8008e88 <_svfiprintf_r>
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	b01c      	add	sp, #112	; 0x70
 80078bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c0:	b003      	add	sp, #12
 80078c2:	4770      	bx	lr
 80078c4:	20000048 	.word	0x20000048
 80078c8:	ffff0208 	.word	0xffff0208

080078cc <quorem>:
 80078cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	6903      	ldr	r3, [r0, #16]
 80078d2:	690c      	ldr	r4, [r1, #16]
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	4607      	mov	r7, r0
 80078d8:	f2c0 8081 	blt.w	80079de <quorem+0x112>
 80078dc:	3c01      	subs	r4, #1
 80078de:	f101 0814 	add.w	r8, r1, #20
 80078e2:	f100 0514 	add.w	r5, r0, #20
 80078e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f4:	3301      	adds	r3, #1
 80078f6:	429a      	cmp	r2, r3
 80078f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007900:	fbb2 f6f3 	udiv	r6, r2, r3
 8007904:	d331      	bcc.n	800796a <quorem+0x9e>
 8007906:	f04f 0e00 	mov.w	lr, #0
 800790a:	4640      	mov	r0, r8
 800790c:	46ac      	mov	ip, r5
 800790e:	46f2      	mov	sl, lr
 8007910:	f850 2b04 	ldr.w	r2, [r0], #4
 8007914:	b293      	uxth	r3, r2
 8007916:	fb06 e303 	mla	r3, r6, r3, lr
 800791a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800791e:	b29b      	uxth	r3, r3
 8007920:	ebaa 0303 	sub.w	r3, sl, r3
 8007924:	f8dc a000 	ldr.w	sl, [ip]
 8007928:	0c12      	lsrs	r2, r2, #16
 800792a:	fa13 f38a 	uxtah	r3, r3, sl
 800792e:	fb06 e202 	mla	r2, r6, r2, lr
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	9b00      	ldr	r3, [sp, #0]
 8007936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800793a:	b292      	uxth	r2, r2
 800793c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007944:	f8bd 3000 	ldrh.w	r3, [sp]
 8007948:	4581      	cmp	r9, r0
 800794a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794e:	f84c 3b04 	str.w	r3, [ip], #4
 8007952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007956:	d2db      	bcs.n	8007910 <quorem+0x44>
 8007958:	f855 300b 	ldr.w	r3, [r5, fp]
 800795c:	b92b      	cbnz	r3, 800796a <quorem+0x9e>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	3b04      	subs	r3, #4
 8007962:	429d      	cmp	r5, r3
 8007964:	461a      	mov	r2, r3
 8007966:	d32e      	bcc.n	80079c6 <quorem+0xfa>
 8007968:	613c      	str	r4, [r7, #16]
 800796a:	4638      	mov	r0, r7
 800796c:	f001 f838 	bl	80089e0 <__mcmp>
 8007970:	2800      	cmp	r0, #0
 8007972:	db24      	blt.n	80079be <quorem+0xf2>
 8007974:	3601      	adds	r6, #1
 8007976:	4628      	mov	r0, r5
 8007978:	f04f 0c00 	mov.w	ip, #0
 800797c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007980:	f8d0 e000 	ldr.w	lr, [r0]
 8007984:	b293      	uxth	r3, r2
 8007986:	ebac 0303 	sub.w	r3, ip, r3
 800798a:	0c12      	lsrs	r2, r2, #16
 800798c:	fa13 f38e 	uxtah	r3, r3, lr
 8007990:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007998:	b29b      	uxth	r3, r3
 800799a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800799e:	45c1      	cmp	r9, r8
 80079a0:	f840 3b04 	str.w	r3, [r0], #4
 80079a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079a8:	d2e8      	bcs.n	800797c <quorem+0xb0>
 80079aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079b2:	b922      	cbnz	r2, 80079be <quorem+0xf2>
 80079b4:	3b04      	subs	r3, #4
 80079b6:	429d      	cmp	r5, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	d30a      	bcc.n	80079d2 <quorem+0x106>
 80079bc:	613c      	str	r4, [r7, #16]
 80079be:	4630      	mov	r0, r6
 80079c0:	b003      	add	sp, #12
 80079c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	3b04      	subs	r3, #4
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	d1cc      	bne.n	8007968 <quorem+0x9c>
 80079ce:	3c01      	subs	r4, #1
 80079d0:	e7c7      	b.n	8007962 <quorem+0x96>
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	3b04      	subs	r3, #4
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	d1f0      	bne.n	80079bc <quorem+0xf0>
 80079da:	3c01      	subs	r4, #1
 80079dc:	e7eb      	b.n	80079b6 <quorem+0xea>
 80079de:	2000      	movs	r0, #0
 80079e0:	e7ee      	b.n	80079c0 <quorem+0xf4>
 80079e2:	0000      	movs	r0, r0
 80079e4:	0000      	movs	r0, r0
	...

080079e8 <_dtoa_r>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	ed2d 8b02 	vpush	{d8}
 80079f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079f2:	b091      	sub	sp, #68	; 0x44
 80079f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079f8:	ec59 8b10 	vmov	r8, r9, d0
 80079fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80079fe:	9106      	str	r1, [sp, #24]
 8007a00:	4606      	mov	r6, r0
 8007a02:	9208      	str	r2, [sp, #32]
 8007a04:	930c      	str	r3, [sp, #48]	; 0x30
 8007a06:	b975      	cbnz	r5, 8007a26 <_dtoa_r+0x3e>
 8007a08:	2010      	movs	r0, #16
 8007a0a:	f000 fd5f 	bl	80084cc <malloc>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6270      	str	r0, [r6, #36]	; 0x24
 8007a12:	b920      	cbnz	r0, 8007a1e <_dtoa_r+0x36>
 8007a14:	4baa      	ldr	r3, [pc, #680]	; (8007cc0 <_dtoa_r+0x2d8>)
 8007a16:	21ea      	movs	r1, #234	; 0xea
 8007a18:	48aa      	ldr	r0, [pc, #680]	; (8007cc4 <_dtoa_r+0x2dc>)
 8007a1a:	f001 fb45 	bl	80090a8 <__assert_func>
 8007a1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a22:	6005      	str	r5, [r0, #0]
 8007a24:	60c5      	str	r5, [r0, #12]
 8007a26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a28:	6819      	ldr	r1, [r3, #0]
 8007a2a:	b151      	cbz	r1, 8007a42 <_dtoa_r+0x5a>
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	604a      	str	r2, [r1, #4]
 8007a30:	2301      	movs	r3, #1
 8007a32:	4093      	lsls	r3, r2
 8007a34:	608b      	str	r3, [r1, #8]
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 fd90 	bl	800855c <_Bfree>
 8007a3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f1b9 0300 	subs.w	r3, r9, #0
 8007a46:	bfbb      	ittet	lt
 8007a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	9303      	strlt	r3, [sp, #12]
 8007a4e:	2300      	movge	r3, #0
 8007a50:	2201      	movlt	r2, #1
 8007a52:	bfac      	ite	ge
 8007a54:	6023      	strge	r3, [r4, #0]
 8007a56:	6022      	strlt	r2, [r4, #0]
 8007a58:	4b9b      	ldr	r3, [pc, #620]	; (8007cc8 <_dtoa_r+0x2e0>)
 8007a5a:	9c03      	ldr	r4, [sp, #12]
 8007a5c:	43a3      	bics	r3, r4
 8007a5e:	d11c      	bne.n	8007a9a <_dtoa_r+0xb2>
 8007a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007a6c:	ea53 0308 	orrs.w	r3, r3, r8
 8007a70:	f000 84fd 	beq.w	800846e <_dtoa_r+0xa86>
 8007a74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a76:	b963      	cbnz	r3, 8007a92 <_dtoa_r+0xaa>
 8007a78:	4b94      	ldr	r3, [pc, #592]	; (8007ccc <_dtoa_r+0x2e4>)
 8007a7a:	e01f      	b.n	8007abc <_dtoa_r+0xd4>
 8007a7c:	4b94      	ldr	r3, [pc, #592]	; (8007cd0 <_dtoa_r+0x2e8>)
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	3308      	adds	r3, #8
 8007a82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	9801      	ldr	r0, [sp, #4]
 8007a88:	b011      	add	sp, #68	; 0x44
 8007a8a:	ecbd 8b02 	vpop	{d8}
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	4b8e      	ldr	r3, [pc, #568]	; (8007ccc <_dtoa_r+0x2e4>)
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	3303      	adds	r3, #3
 8007a98:	e7f3      	b.n	8007a82 <_dtoa_r+0x9a>
 8007a9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007a9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa6:	d10b      	bne.n	8007ac0 <_dtoa_r+0xd8>
 8007aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aaa:	2301      	movs	r3, #1
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 84d9 	beq.w	8008468 <_dtoa_r+0xa80>
 8007ab6:	4887      	ldr	r0, [pc, #540]	; (8007cd4 <_dtoa_r+0x2ec>)
 8007ab8:	6018      	str	r0, [r3, #0]
 8007aba:	1e43      	subs	r3, r0, #1
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	e7e2      	b.n	8007a86 <_dtoa_r+0x9e>
 8007ac0:	a90f      	add	r1, sp, #60	; 0x3c
 8007ac2:	aa0e      	add	r2, sp, #56	; 0x38
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	eeb0 0b48 	vmov.f64	d0, d8
 8007aca:	f001 f82f 	bl	8008b2c <__d2b>
 8007ace:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d046      	beq.n	8007b68 <_dtoa_r+0x180>
 8007ada:	ee18 4a90 	vmov	r4, s17
 8007ade:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ae2:	ec53 2b18 	vmov	r2, r3, d8
 8007ae6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007aea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007aee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007af2:	2400      	movs	r4, #0
 8007af4:	ec43 2b16 	vmov	d6, r2, r3
 8007af8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007afc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007ca8 <_dtoa_r+0x2c0>
 8007b00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007b04:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007cb0 <_dtoa_r+0x2c8>
 8007b08:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007b0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007cb8 <_dtoa_r+0x2d0>
 8007b10:	ee07 1a90 	vmov	s15, r1
 8007b14:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007b18:	eeb0 7b46 	vmov.f64	d7, d6
 8007b1c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007b20:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	ee16 ba90 	vmov	fp, s13
 8007b30:	940a      	str	r4, [sp, #40]	; 0x28
 8007b32:	d508      	bpl.n	8007b46 <_dtoa_r+0x15e>
 8007b34:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007b38:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b40:	bf18      	it	ne
 8007b42:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007b46:	f1bb 0f16 	cmp.w	fp, #22
 8007b4a:	d82f      	bhi.n	8007bac <_dtoa_r+0x1c4>
 8007b4c:	4b62      	ldr	r3, [pc, #392]	; (8007cd8 <_dtoa_r+0x2f0>)
 8007b4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b52:	ed93 7b00 	vldr	d7, [r3]
 8007b56:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5e:	d501      	bpl.n	8007b64 <_dtoa_r+0x17c>
 8007b60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b64:	2300      	movs	r3, #0
 8007b66:	e022      	b.n	8007bae <_dtoa_r+0x1c6>
 8007b68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b6a:	4401      	add	r1, r0
 8007b6c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	bfc1      	itttt	gt
 8007b74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b78:	fa04 f303 	lslgt.w	r3, r4, r3
 8007b7c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007b80:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007b84:	bfd6      	itet	le
 8007b86:	f1c3 0320 	rsble	r3, r3, #32
 8007b8a:	ea43 0808 	orrgt.w	r8, r3, r8
 8007b8e:	fa08 f803 	lslle.w	r8, r8, r3
 8007b92:	ee07 8a90 	vmov	s15, r8
 8007b96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007b9a:	3901      	subs	r1, #1
 8007b9c:	ee17 4a90 	vmov	r4, s15
 8007ba0:	ec53 2b17 	vmov	r2, r3, d7
 8007ba4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007ba8:	2401      	movs	r4, #1
 8007baa:	e7a3      	b.n	8007af4 <_dtoa_r+0x10c>
 8007bac:	2301      	movs	r3, #1
 8007bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb0:	1a43      	subs	r3, r0, r1
 8007bb2:	1e5a      	subs	r2, r3, #1
 8007bb4:	bf45      	ittet	mi
 8007bb6:	f1c3 0301 	rsbmi	r3, r3, #1
 8007bba:	9304      	strmi	r3, [sp, #16]
 8007bbc:	2300      	movpl	r3, #0
 8007bbe:	2300      	movmi	r3, #0
 8007bc0:	9205      	str	r2, [sp, #20]
 8007bc2:	bf54      	ite	pl
 8007bc4:	9304      	strpl	r3, [sp, #16]
 8007bc6:	9305      	strmi	r3, [sp, #20]
 8007bc8:	f1bb 0f00 	cmp.w	fp, #0
 8007bcc:	db18      	blt.n	8007c00 <_dtoa_r+0x218>
 8007bce:	9b05      	ldr	r3, [sp, #20]
 8007bd0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007bd4:	445b      	add	r3, fp
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9a06      	ldr	r2, [sp, #24]
 8007bdc:	2a09      	cmp	r2, #9
 8007bde:	d849      	bhi.n	8007c74 <_dtoa_r+0x28c>
 8007be0:	2a05      	cmp	r2, #5
 8007be2:	bfc4      	itt	gt
 8007be4:	3a04      	subgt	r2, #4
 8007be6:	9206      	strgt	r2, [sp, #24]
 8007be8:	9a06      	ldr	r2, [sp, #24]
 8007bea:	f1a2 0202 	sub.w	r2, r2, #2
 8007bee:	bfcc      	ite	gt
 8007bf0:	2400      	movgt	r4, #0
 8007bf2:	2401      	movle	r4, #1
 8007bf4:	2a03      	cmp	r2, #3
 8007bf6:	d848      	bhi.n	8007c8a <_dtoa_r+0x2a2>
 8007bf8:	e8df f002 	tbb	[pc, r2]
 8007bfc:	3a2c2e0b 	.word	0x3a2c2e0b
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	2200      	movs	r2, #0
 8007c04:	eba3 030b 	sub.w	r3, r3, fp
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c0c:	f1cb 0300 	rsb	r3, fp, #0
 8007c10:	e7e3      	b.n	8007bda <_dtoa_r+0x1f2>
 8007c12:	2200      	movs	r2, #0
 8007c14:	9207      	str	r2, [sp, #28]
 8007c16:	9a08      	ldr	r2, [sp, #32]
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	dc39      	bgt.n	8007c90 <_dtoa_r+0x2a8>
 8007c1c:	f04f 0a01 	mov.w	sl, #1
 8007c20:	46d1      	mov	r9, sl
 8007c22:	4652      	mov	r2, sl
 8007c24:	f8cd a020 	str.w	sl, [sp, #32]
 8007c28:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	6079      	str	r1, [r7, #4]
 8007c2e:	2004      	movs	r0, #4
 8007c30:	f100 0c14 	add.w	ip, r0, #20
 8007c34:	4594      	cmp	ip, r2
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	d92f      	bls.n	8007c9a <_dtoa_r+0x2b2>
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c3e:	f000 fc4d 	bl	80084dc <_Balloc>
 8007c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c44:	9001      	str	r0, [sp, #4]
 8007c46:	4602      	mov	r2, r0
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d149      	bne.n	8007ce0 <_dtoa_r+0x2f8>
 8007c4c:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <_dtoa_r+0x2f4>)
 8007c4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c52:	e6e1      	b.n	8007a18 <_dtoa_r+0x30>
 8007c54:	2201      	movs	r2, #1
 8007c56:	e7dd      	b.n	8007c14 <_dtoa_r+0x22c>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	9207      	str	r2, [sp, #28]
 8007c5c:	9a08      	ldr	r2, [sp, #32]
 8007c5e:	eb0b 0a02 	add.w	sl, fp, r2
 8007c62:	f10a 0901 	add.w	r9, sl, #1
 8007c66:	464a      	mov	r2, r9
 8007c68:	2a01      	cmp	r2, #1
 8007c6a:	bfb8      	it	lt
 8007c6c:	2201      	movlt	r2, #1
 8007c6e:	e7db      	b.n	8007c28 <_dtoa_r+0x240>
 8007c70:	2201      	movs	r2, #1
 8007c72:	e7f2      	b.n	8007c5a <_dtoa_r+0x272>
 8007c74:	2401      	movs	r4, #1
 8007c76:	2200      	movs	r2, #0
 8007c78:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007c7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c80:	2100      	movs	r1, #0
 8007c82:	46d1      	mov	r9, sl
 8007c84:	2212      	movs	r2, #18
 8007c86:	9108      	str	r1, [sp, #32]
 8007c88:	e7ce      	b.n	8007c28 <_dtoa_r+0x240>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	9207      	str	r2, [sp, #28]
 8007c8e:	e7f5      	b.n	8007c7c <_dtoa_r+0x294>
 8007c90:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007c94:	46d1      	mov	r9, sl
 8007c96:	4652      	mov	r2, sl
 8007c98:	e7c6      	b.n	8007c28 <_dtoa_r+0x240>
 8007c9a:	3101      	adds	r1, #1
 8007c9c:	6079      	str	r1, [r7, #4]
 8007c9e:	0040      	lsls	r0, r0, #1
 8007ca0:	e7c6      	b.n	8007c30 <_dtoa_r+0x248>
 8007ca2:	bf00      	nop
 8007ca4:	f3af 8000 	nop.w
 8007ca8:	636f4361 	.word	0x636f4361
 8007cac:	3fd287a7 	.word	0x3fd287a7
 8007cb0:	8b60c8b3 	.word	0x8b60c8b3
 8007cb4:	3fc68a28 	.word	0x3fc68a28
 8007cb8:	509f79fb 	.word	0x509f79fb
 8007cbc:	3fd34413 	.word	0x3fd34413
 8007cc0:	08009d09 	.word	0x08009d09
 8007cc4:	08009d20 	.word	0x08009d20
 8007cc8:	7ff00000 	.word	0x7ff00000
 8007ccc:	08009d05 	.word	0x08009d05
 8007cd0:	08009cfc 	.word	0x08009cfc
 8007cd4:	08009cd9 	.word	0x08009cd9
 8007cd8:	08009e10 	.word	0x08009e10
 8007cdc:	08009d7b 	.word	0x08009d7b
 8007ce0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007ce2:	9901      	ldr	r1, [sp, #4]
 8007ce4:	6011      	str	r1, [r2, #0]
 8007ce6:	f1b9 0f0e 	cmp.w	r9, #14
 8007cea:	d86c      	bhi.n	8007dc6 <_dtoa_r+0x3de>
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d06a      	beq.n	8007dc6 <_dtoa_r+0x3de>
 8007cf0:	f1bb 0f00 	cmp.w	fp, #0
 8007cf4:	f340 80a0 	ble.w	8007e38 <_dtoa_r+0x450>
 8007cf8:	49c1      	ldr	r1, [pc, #772]	; (8008000 <_dtoa_r+0x618>)
 8007cfa:	f00b 020f 	and.w	r2, fp, #15
 8007cfe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007d02:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d06:	ed92 7b00 	vldr	d7, [r2]
 8007d0a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007d0e:	f000 8087 	beq.w	8007e20 <_dtoa_r+0x438>
 8007d12:	4abc      	ldr	r2, [pc, #752]	; (8008004 <_dtoa_r+0x61c>)
 8007d14:	ed92 6b08 	vldr	d6, [r2, #32]
 8007d18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007d1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d20:	f001 010f 	and.w	r1, r1, #15
 8007d24:	2203      	movs	r2, #3
 8007d26:	48b7      	ldr	r0, [pc, #732]	; (8008004 <_dtoa_r+0x61c>)
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	d17b      	bne.n	8007e24 <_dtoa_r+0x43c>
 8007d2c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	f000 80a2 	beq.w	8007e84 <_dtoa_r+0x49c>
 8007d40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007d44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d50:	f140 8098 	bpl.w	8007e84 <_dtoa_r+0x49c>
 8007d54:	f1b9 0f00 	cmp.w	r9, #0
 8007d58:	f000 8094 	beq.w	8007e84 <_dtoa_r+0x49c>
 8007d5c:	f1ba 0f00 	cmp.w	sl, #0
 8007d60:	dd2f      	ble.n	8007dc2 <_dtoa_r+0x3da>
 8007d62:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007d66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d6e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007d72:	3201      	adds	r2, #1
 8007d74:	4650      	mov	r0, sl
 8007d76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d7a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007d7e:	ee07 2a90 	vmov	s15, r2
 8007d82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d86:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007d8a:	ee15 4a90 	vmov	r4, s11
 8007d8e:	ec52 1b15 	vmov	r1, r2, d5
 8007d92:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d177      	bne.n	8007e8a <_dtoa_r+0x4a2>
 8007d9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007d9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007da2:	ec42 1b17 	vmov	d7, r1, r2
 8007da6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dae:	f300 8263 	bgt.w	8008278 <_dtoa_r+0x890>
 8007db2:	eeb1 7b47 	vneg.f64	d7, d7
 8007db6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbe:	f100 8258 	bmi.w	8008272 <_dtoa_r+0x88a>
 8007dc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	f2c0 811d 	blt.w	8008008 <_dtoa_r+0x620>
 8007dce:	f1bb 0f0e 	cmp.w	fp, #14
 8007dd2:	f300 8119 	bgt.w	8008008 <_dtoa_r+0x620>
 8007dd6:	4b8a      	ldr	r3, [pc, #552]	; (8008000 <_dtoa_r+0x618>)
 8007dd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ddc:	ed93 6b00 	vldr	d6, [r3]
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f280 80b7 	bge.w	8007f56 <_dtoa_r+0x56e>
 8007de8:	f1b9 0f00 	cmp.w	r9, #0
 8007dec:	f300 80b3 	bgt.w	8007f56 <_dtoa_r+0x56e>
 8007df0:	f040 823f 	bne.w	8008272 <_dtoa_r+0x88a>
 8007df4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007df8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007dfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e08:	464c      	mov	r4, r9
 8007e0a:	464f      	mov	r7, r9
 8007e0c:	f280 8215 	bge.w	800823a <_dtoa_r+0x852>
 8007e10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e14:	2331      	movs	r3, #49	; 0x31
 8007e16:	f808 3b01 	strb.w	r3, [r8], #1
 8007e1a:	f10b 0b01 	add.w	fp, fp, #1
 8007e1e:	e211      	b.n	8008244 <_dtoa_r+0x85c>
 8007e20:	2202      	movs	r2, #2
 8007e22:	e780      	b.n	8007d26 <_dtoa_r+0x33e>
 8007e24:	07cc      	lsls	r4, r1, #31
 8007e26:	d504      	bpl.n	8007e32 <_dtoa_r+0x44a>
 8007e28:	ed90 6b00 	vldr	d6, [r0]
 8007e2c:	3201      	adds	r2, #1
 8007e2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e32:	1049      	asrs	r1, r1, #1
 8007e34:	3008      	adds	r0, #8
 8007e36:	e777      	b.n	8007d28 <_dtoa_r+0x340>
 8007e38:	d022      	beq.n	8007e80 <_dtoa_r+0x498>
 8007e3a:	f1cb 0100 	rsb	r1, fp, #0
 8007e3e:	4a70      	ldr	r2, [pc, #448]	; (8008000 <_dtoa_r+0x618>)
 8007e40:	f001 000f 	and.w	r0, r1, #15
 8007e44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007e48:	ed92 7b00 	vldr	d7, [r2]
 8007e4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007e50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e54:	486b      	ldr	r0, [pc, #428]	; (8008004 <_dtoa_r+0x61c>)
 8007e56:	1109      	asrs	r1, r1, #4
 8007e58:	2400      	movs	r4, #0
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	b929      	cbnz	r1, 8007e6a <_dtoa_r+0x482>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	f43f af6a 	beq.w	8007d38 <_dtoa_r+0x350>
 8007e64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e68:	e766      	b.n	8007d38 <_dtoa_r+0x350>
 8007e6a:	07cf      	lsls	r7, r1, #31
 8007e6c:	d505      	bpl.n	8007e7a <_dtoa_r+0x492>
 8007e6e:	ed90 6b00 	vldr	d6, [r0]
 8007e72:	3201      	adds	r2, #1
 8007e74:	2401      	movs	r4, #1
 8007e76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e7a:	1049      	asrs	r1, r1, #1
 8007e7c:	3008      	adds	r0, #8
 8007e7e:	e7ed      	b.n	8007e5c <_dtoa_r+0x474>
 8007e80:	2202      	movs	r2, #2
 8007e82:	e759      	b.n	8007d38 <_dtoa_r+0x350>
 8007e84:	465f      	mov	r7, fp
 8007e86:	4648      	mov	r0, r9
 8007e88:	e775      	b.n	8007d76 <_dtoa_r+0x38e>
 8007e8a:	ec42 1b17 	vmov	d7, r1, r2
 8007e8e:	4a5c      	ldr	r2, [pc, #368]	; (8008000 <_dtoa_r+0x618>)
 8007e90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007e94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007e98:	9a01      	ldr	r2, [sp, #4]
 8007e9a:	1814      	adds	r4, r2, r0
 8007e9c:	9a07      	ldr	r2, [sp, #28]
 8007e9e:	b352      	cbz	r2, 8007ef6 <_dtoa_r+0x50e>
 8007ea0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007ea4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007ea8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007eac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007eb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007eb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007eb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ebc:	ee14 2a90 	vmov	r2, s9
 8007ec0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ec4:	3230      	adds	r2, #48	; 0x30
 8007ec6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007eca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed2:	f808 2b01 	strb.w	r2, [r8], #1
 8007ed6:	d439      	bmi.n	8007f4c <_dtoa_r+0x564>
 8007ed8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007edc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee4:	d472      	bmi.n	8007fcc <_dtoa_r+0x5e4>
 8007ee6:	45a0      	cmp	r8, r4
 8007ee8:	f43f af6b 	beq.w	8007dc2 <_dtoa_r+0x3da>
 8007eec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ef0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ef4:	e7e0      	b.n	8007eb8 <_dtoa_r+0x4d0>
 8007ef6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007efa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007efe:	4621      	mov	r1, r4
 8007f00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007f04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f08:	ee14 2a90 	vmov	r2, s9
 8007f0c:	3230      	adds	r2, #48	; 0x30
 8007f0e:	f808 2b01 	strb.w	r2, [r8], #1
 8007f12:	45a0      	cmp	r8, r4
 8007f14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f1c:	d118      	bne.n	8007f50 <_dtoa_r+0x568>
 8007f1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007f22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007f26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2e:	dc4d      	bgt.n	8007fcc <_dtoa_r+0x5e4>
 8007f30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3c:	f57f af41 	bpl.w	8007dc2 <_dtoa_r+0x3da>
 8007f40:	4688      	mov	r8, r1
 8007f42:	3901      	subs	r1, #1
 8007f44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007f48:	2b30      	cmp	r3, #48	; 0x30
 8007f4a:	d0f9      	beq.n	8007f40 <_dtoa_r+0x558>
 8007f4c:	46bb      	mov	fp, r7
 8007f4e:	e02a      	b.n	8007fa6 <_dtoa_r+0x5be>
 8007f50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f54:	e7d6      	b.n	8007f04 <_dtoa_r+0x51c>
 8007f56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007f5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f6a:	ee15 3a10 	vmov	r3, s10
 8007f6e:	3330      	adds	r3, #48	; 0x30
 8007f70:	f808 3b01 	strb.w	r3, [r8], #1
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	eba8 0303 	sub.w	r3, r8, r3
 8007f7a:	4599      	cmp	r9, r3
 8007f7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007f80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007f84:	d133      	bne.n	8007fee <_dtoa_r+0x606>
 8007f86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007f8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f92:	dc1a      	bgt.n	8007fca <_dtoa_r+0x5e2>
 8007f94:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	d103      	bne.n	8007fa6 <_dtoa_r+0x5be>
 8007f9e:	ee15 3a10 	vmov	r3, s10
 8007fa2:	07d9      	lsls	r1, r3, #31
 8007fa4:	d411      	bmi.n	8007fca <_dtoa_r+0x5e2>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f000 fad7 	bl	800855c <_Bfree>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fb2:	f888 3000 	strb.w	r3, [r8]
 8007fb6:	f10b 0301 	add.w	r3, fp, #1
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f43f ad61 	beq.w	8007a86 <_dtoa_r+0x9e>
 8007fc4:	f8c3 8000 	str.w	r8, [r3]
 8007fc8:	e55d      	b.n	8007a86 <_dtoa_r+0x9e>
 8007fca:	465f      	mov	r7, fp
 8007fcc:	4643      	mov	r3, r8
 8007fce:	4698      	mov	r8, r3
 8007fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fd4:	2a39      	cmp	r2, #57	; 0x39
 8007fd6:	d106      	bne.n	8007fe6 <_dtoa_r+0x5fe>
 8007fd8:	9a01      	ldr	r2, [sp, #4]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d1f7      	bne.n	8007fce <_dtoa_r+0x5e6>
 8007fde:	9901      	ldr	r1, [sp, #4]
 8007fe0:	2230      	movs	r2, #48	; 0x30
 8007fe2:	3701      	adds	r7, #1
 8007fe4:	700a      	strb	r2, [r1, #0]
 8007fe6:	781a      	ldrb	r2, [r3, #0]
 8007fe8:	3201      	adds	r2, #1
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	e7ae      	b.n	8007f4c <_dtoa_r+0x564>
 8007fee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ff2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffa:	d1b2      	bne.n	8007f62 <_dtoa_r+0x57a>
 8007ffc:	e7d3      	b.n	8007fa6 <_dtoa_r+0x5be>
 8007ffe:	bf00      	nop
 8008000:	08009e10 	.word	0x08009e10
 8008004:	08009de8 	.word	0x08009de8
 8008008:	9907      	ldr	r1, [sp, #28]
 800800a:	2900      	cmp	r1, #0
 800800c:	f000 80d0 	beq.w	80081b0 <_dtoa_r+0x7c8>
 8008010:	9906      	ldr	r1, [sp, #24]
 8008012:	2901      	cmp	r1, #1
 8008014:	f300 80b4 	bgt.w	8008180 <_dtoa_r+0x798>
 8008018:	990a      	ldr	r1, [sp, #40]	; 0x28
 800801a:	2900      	cmp	r1, #0
 800801c:	f000 80ac 	beq.w	8008178 <_dtoa_r+0x790>
 8008020:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008024:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008028:	461c      	mov	r4, r3
 800802a:	930a      	str	r3, [sp, #40]	; 0x28
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	4413      	add	r3, r2
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	9b05      	ldr	r3, [sp, #20]
 8008034:	2101      	movs	r1, #1
 8008036:	4413      	add	r3, r2
 8008038:	4630      	mov	r0, r6
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	f000 fb46 	bl	80086cc <__i2b>
 8008040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008042:	4607      	mov	r7, r0
 8008044:	f1b8 0f00 	cmp.w	r8, #0
 8008048:	dd0d      	ble.n	8008066 <_dtoa_r+0x67e>
 800804a:	9a05      	ldr	r2, [sp, #20]
 800804c:	2a00      	cmp	r2, #0
 800804e:	dd0a      	ble.n	8008066 <_dtoa_r+0x67e>
 8008050:	4542      	cmp	r2, r8
 8008052:	9904      	ldr	r1, [sp, #16]
 8008054:	bfa8      	it	ge
 8008056:	4642      	movge	r2, r8
 8008058:	1a89      	subs	r1, r1, r2
 800805a:	9104      	str	r1, [sp, #16]
 800805c:	9905      	ldr	r1, [sp, #20]
 800805e:	eba8 0802 	sub.w	r8, r8, r2
 8008062:	1a8a      	subs	r2, r1, r2
 8008064:	9205      	str	r2, [sp, #20]
 8008066:	b303      	cbz	r3, 80080aa <_dtoa_r+0x6c2>
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	2a00      	cmp	r2, #0
 800806c:	f000 80a5 	beq.w	80081ba <_dtoa_r+0x7d2>
 8008070:	2c00      	cmp	r4, #0
 8008072:	dd13      	ble.n	800809c <_dtoa_r+0x6b4>
 8008074:	4639      	mov	r1, r7
 8008076:	4622      	mov	r2, r4
 8008078:	4630      	mov	r0, r6
 800807a:	930d      	str	r3, [sp, #52]	; 0x34
 800807c:	f000 fbe6 	bl	800884c <__pow5mult>
 8008080:	462a      	mov	r2, r5
 8008082:	4601      	mov	r1, r0
 8008084:	4607      	mov	r7, r0
 8008086:	4630      	mov	r0, r6
 8008088:	f000 fb36 	bl	80086f8 <__multiply>
 800808c:	4629      	mov	r1, r5
 800808e:	900a      	str	r0, [sp, #40]	; 0x28
 8008090:	4630      	mov	r0, r6
 8008092:	f000 fa63 	bl	800855c <_Bfree>
 8008096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800809a:	4615      	mov	r5, r2
 800809c:	1b1a      	subs	r2, r3, r4
 800809e:	d004      	beq.n	80080aa <_dtoa_r+0x6c2>
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 fbd2 	bl	800884c <__pow5mult>
 80080a8:	4605      	mov	r5, r0
 80080aa:	2101      	movs	r1, #1
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 fb0d 	bl	80086cc <__i2b>
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	f340 8081 	ble.w	80081be <_dtoa_r+0x7d6>
 80080bc:	461a      	mov	r2, r3
 80080be:	4601      	mov	r1, r0
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 fbc3 	bl	800884c <__pow5mult>
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	4604      	mov	r4, r0
 80080cc:	dd7a      	ble.n	80081c4 <_dtoa_r+0x7dc>
 80080ce:	2300      	movs	r3, #0
 80080d0:	930a      	str	r3, [sp, #40]	; 0x28
 80080d2:	6922      	ldr	r2, [r4, #16]
 80080d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80080d8:	6910      	ldr	r0, [r2, #16]
 80080da:	f000 faa7 	bl	800862c <__hi0bits>
 80080de:	f1c0 0020 	rsb	r0, r0, #32
 80080e2:	9b05      	ldr	r3, [sp, #20]
 80080e4:	4418      	add	r0, r3
 80080e6:	f010 001f 	ands.w	r0, r0, #31
 80080ea:	f000 808c 	beq.w	8008206 <_dtoa_r+0x81e>
 80080ee:	f1c0 0220 	rsb	r2, r0, #32
 80080f2:	2a04      	cmp	r2, #4
 80080f4:	f340 8085 	ble.w	8008202 <_dtoa_r+0x81a>
 80080f8:	f1c0 001c 	rsb	r0, r0, #28
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	4403      	add	r3, r0
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	9b05      	ldr	r3, [sp, #20]
 8008104:	4403      	add	r3, r0
 8008106:	4480      	add	r8, r0
 8008108:	9305      	str	r3, [sp, #20]
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd05      	ble.n	800811c <_dtoa_r+0x734>
 8008110:	4629      	mov	r1, r5
 8008112:	461a      	mov	r2, r3
 8008114:	4630      	mov	r0, r6
 8008116:	f000 fbf3 	bl	8008900 <__lshift>
 800811a:	4605      	mov	r5, r0
 800811c:	9b05      	ldr	r3, [sp, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dd05      	ble.n	800812e <_dtoa_r+0x746>
 8008122:	4621      	mov	r1, r4
 8008124:	461a      	mov	r2, r3
 8008126:	4630      	mov	r0, r6
 8008128:	f000 fbea 	bl	8008900 <__lshift>
 800812c:	4604      	mov	r4, r0
 800812e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d06a      	beq.n	800820a <_dtoa_r+0x822>
 8008134:	4621      	mov	r1, r4
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fc52 	bl	80089e0 <__mcmp>
 800813c:	2800      	cmp	r0, #0
 800813e:	da64      	bge.n	800820a <_dtoa_r+0x822>
 8008140:	2300      	movs	r3, #0
 8008142:	4629      	mov	r1, r5
 8008144:	220a      	movs	r2, #10
 8008146:	4630      	mov	r0, r6
 8008148:	f000 fa2a 	bl	80085a0 <__multadd>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008152:	4605      	mov	r5, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 8191 	beq.w	800847c <_dtoa_r+0xa94>
 800815a:	4639      	mov	r1, r7
 800815c:	2300      	movs	r3, #0
 800815e:	220a      	movs	r2, #10
 8008160:	4630      	mov	r0, r6
 8008162:	f000 fa1d 	bl	80085a0 <__multadd>
 8008166:	f1ba 0f00 	cmp.w	sl, #0
 800816a:	4607      	mov	r7, r0
 800816c:	f300 808d 	bgt.w	800828a <_dtoa_r+0x8a2>
 8008170:	9b06      	ldr	r3, [sp, #24]
 8008172:	2b02      	cmp	r3, #2
 8008174:	dc50      	bgt.n	8008218 <_dtoa_r+0x830>
 8008176:	e088      	b.n	800828a <_dtoa_r+0x8a2>
 8008178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800817a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800817e:	e751      	b.n	8008024 <_dtoa_r+0x63c>
 8008180:	f109 34ff 	add.w	r4, r9, #4294967295
 8008184:	42a3      	cmp	r3, r4
 8008186:	bfbf      	itttt	lt
 8008188:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800818a:	1ae3      	sublt	r3, r4, r3
 800818c:	18d2      	addlt	r2, r2, r3
 800818e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008190:	bfb6      	itet	lt
 8008192:	4623      	movlt	r3, r4
 8008194:	1b1c      	subge	r4, r3, r4
 8008196:	2400      	movlt	r4, #0
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	bfb5      	itete	lt
 800819e:	9a04      	ldrlt	r2, [sp, #16]
 80081a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80081a4:	eba2 0809 	sublt.w	r8, r2, r9
 80081a8:	464a      	movge	r2, r9
 80081aa:	bfb8      	it	lt
 80081ac:	2200      	movlt	r2, #0
 80081ae:	e73c      	b.n	800802a <_dtoa_r+0x642>
 80081b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80081b4:	9f07      	ldr	r7, [sp, #28]
 80081b6:	461c      	mov	r4, r3
 80081b8:	e744      	b.n	8008044 <_dtoa_r+0x65c>
 80081ba:	461a      	mov	r2, r3
 80081bc:	e770      	b.n	80080a0 <_dtoa_r+0x6b8>
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	dc18      	bgt.n	80081f6 <_dtoa_r+0x80e>
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	b9b3      	cbnz	r3, 80081f6 <_dtoa_r+0x80e>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80081ce:	b9a2      	cbnz	r2, 80081fa <_dtoa_r+0x812>
 80081d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081d4:	0d12      	lsrs	r2, r2, #20
 80081d6:	0512      	lsls	r2, r2, #20
 80081d8:	b18a      	cbz	r2, 80081fe <_dtoa_r+0x816>
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	3301      	adds	r3, #1
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	9b05      	ldr	r3, [sp, #20]
 80081e2:	3301      	adds	r3, #1
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	2301      	movs	r3, #1
 80081e8:	930a      	str	r3, [sp, #40]	; 0x28
 80081ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f af70 	bne.w	80080d2 <_dtoa_r+0x6ea>
 80081f2:	2001      	movs	r0, #1
 80081f4:	e775      	b.n	80080e2 <_dtoa_r+0x6fa>
 80081f6:	2300      	movs	r3, #0
 80081f8:	e7f6      	b.n	80081e8 <_dtoa_r+0x800>
 80081fa:	9b02      	ldr	r3, [sp, #8]
 80081fc:	e7f4      	b.n	80081e8 <_dtoa_r+0x800>
 80081fe:	920a      	str	r2, [sp, #40]	; 0x28
 8008200:	e7f3      	b.n	80081ea <_dtoa_r+0x802>
 8008202:	d082      	beq.n	800810a <_dtoa_r+0x722>
 8008204:	4610      	mov	r0, r2
 8008206:	301c      	adds	r0, #28
 8008208:	e778      	b.n	80080fc <_dtoa_r+0x714>
 800820a:	f1b9 0f00 	cmp.w	r9, #0
 800820e:	dc37      	bgt.n	8008280 <_dtoa_r+0x898>
 8008210:	9b06      	ldr	r3, [sp, #24]
 8008212:	2b02      	cmp	r3, #2
 8008214:	dd34      	ble.n	8008280 <_dtoa_r+0x898>
 8008216:	46ca      	mov	sl, r9
 8008218:	f1ba 0f00 	cmp.w	sl, #0
 800821c:	d10d      	bne.n	800823a <_dtoa_r+0x852>
 800821e:	4621      	mov	r1, r4
 8008220:	4653      	mov	r3, sl
 8008222:	2205      	movs	r2, #5
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f9bb 	bl	80085a0 <__multadd>
 800822a:	4601      	mov	r1, r0
 800822c:	4604      	mov	r4, r0
 800822e:	4628      	mov	r0, r5
 8008230:	f000 fbd6 	bl	80089e0 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	f73f adeb 	bgt.w	8007e10 <_dtoa_r+0x428>
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008240:	ea6f 0b03 	mvn.w	fp, r3
 8008244:	f04f 0900 	mov.w	r9, #0
 8008248:	4621      	mov	r1, r4
 800824a:	4630      	mov	r0, r6
 800824c:	f000 f986 	bl	800855c <_Bfree>
 8008250:	2f00      	cmp	r7, #0
 8008252:	f43f aea8 	beq.w	8007fa6 <_dtoa_r+0x5be>
 8008256:	f1b9 0f00 	cmp.w	r9, #0
 800825a:	d005      	beq.n	8008268 <_dtoa_r+0x880>
 800825c:	45b9      	cmp	r9, r7
 800825e:	d003      	beq.n	8008268 <_dtoa_r+0x880>
 8008260:	4649      	mov	r1, r9
 8008262:	4630      	mov	r0, r6
 8008264:	f000 f97a 	bl	800855c <_Bfree>
 8008268:	4639      	mov	r1, r7
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f976 	bl	800855c <_Bfree>
 8008270:	e699      	b.n	8007fa6 <_dtoa_r+0x5be>
 8008272:	2400      	movs	r4, #0
 8008274:	4627      	mov	r7, r4
 8008276:	e7e0      	b.n	800823a <_dtoa_r+0x852>
 8008278:	46bb      	mov	fp, r7
 800827a:	4604      	mov	r4, r0
 800827c:	4607      	mov	r7, r0
 800827e:	e5c7      	b.n	8007e10 <_dtoa_r+0x428>
 8008280:	9b07      	ldr	r3, [sp, #28]
 8008282:	46ca      	mov	sl, r9
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8100 	beq.w	800848a <_dtoa_r+0xaa2>
 800828a:	f1b8 0f00 	cmp.w	r8, #0
 800828e:	dd05      	ble.n	800829c <_dtoa_r+0x8b4>
 8008290:	4639      	mov	r1, r7
 8008292:	4642      	mov	r2, r8
 8008294:	4630      	mov	r0, r6
 8008296:	f000 fb33 	bl	8008900 <__lshift>
 800829a:	4607      	mov	r7, r0
 800829c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d05d      	beq.n	800835e <_dtoa_r+0x976>
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4630      	mov	r0, r6
 80082a6:	f000 f919 	bl	80084dc <_Balloc>
 80082aa:	4680      	mov	r8, r0
 80082ac:	b928      	cbnz	r0, 80082ba <_dtoa_r+0x8d2>
 80082ae:	4b82      	ldr	r3, [pc, #520]	; (80084b8 <_dtoa_r+0xad0>)
 80082b0:	4602      	mov	r2, r0
 80082b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082b6:	f7ff bbaf 	b.w	8007a18 <_dtoa_r+0x30>
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	3202      	adds	r2, #2
 80082be:	0092      	lsls	r2, r2, #2
 80082c0:	f107 010c 	add.w	r1, r7, #12
 80082c4:	300c      	adds	r0, #12
 80082c6:	f7fe fe89 	bl	8006fdc <memcpy>
 80082ca:	2201      	movs	r2, #1
 80082cc:	4641      	mov	r1, r8
 80082ce:	4630      	mov	r0, r6
 80082d0:	f000 fb16 	bl	8008900 <__lshift>
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	3301      	adds	r3, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9b01      	ldr	r3, [sp, #4]
 80082dc:	4453      	add	r3, sl
 80082de:	9308      	str	r3, [sp, #32]
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	46b9      	mov	r9, r7
 80082e8:	9307      	str	r3, [sp, #28]
 80082ea:	4607      	mov	r7, r0
 80082ec:	9b04      	ldr	r3, [sp, #16]
 80082ee:	4621      	mov	r1, r4
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4628      	mov	r0, r5
 80082f4:	9302      	str	r3, [sp, #8]
 80082f6:	f7ff fae9 	bl	80078cc <quorem>
 80082fa:	4603      	mov	r3, r0
 80082fc:	3330      	adds	r3, #48	; 0x30
 80082fe:	9005      	str	r0, [sp, #20]
 8008300:	4649      	mov	r1, r9
 8008302:	4628      	mov	r0, r5
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	f000 fb6b 	bl	80089e0 <__mcmp>
 800830a:	463a      	mov	r2, r7
 800830c:	4682      	mov	sl, r0
 800830e:	4621      	mov	r1, r4
 8008310:	4630      	mov	r0, r6
 8008312:	f000 fb81 	bl	8008a18 <__mdiff>
 8008316:	68c2      	ldr	r2, [r0, #12]
 8008318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831a:	4680      	mov	r8, r0
 800831c:	bb0a      	cbnz	r2, 8008362 <_dtoa_r+0x97a>
 800831e:	4601      	mov	r1, r0
 8008320:	4628      	mov	r0, r5
 8008322:	f000 fb5d 	bl	80089e0 <__mcmp>
 8008326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008328:	4602      	mov	r2, r0
 800832a:	4641      	mov	r1, r8
 800832c:	4630      	mov	r0, r6
 800832e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008332:	f000 f913 	bl	800855c <_Bfree>
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800833e:	ea43 0102 	orr.w	r1, r3, r2
 8008342:	9b07      	ldr	r3, [sp, #28]
 8008344:	430b      	orrs	r3, r1
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	d10d      	bne.n	8008366 <_dtoa_r+0x97e>
 800834a:	2b39      	cmp	r3, #57	; 0x39
 800834c:	d029      	beq.n	80083a2 <_dtoa_r+0x9ba>
 800834e:	f1ba 0f00 	cmp.w	sl, #0
 8008352:	dd01      	ble.n	8008358 <_dtoa_r+0x970>
 8008354:	9b05      	ldr	r3, [sp, #20]
 8008356:	3331      	adds	r3, #49	; 0x31
 8008358:	9a02      	ldr	r2, [sp, #8]
 800835a:	7013      	strb	r3, [r2, #0]
 800835c:	e774      	b.n	8008248 <_dtoa_r+0x860>
 800835e:	4638      	mov	r0, r7
 8008360:	e7b8      	b.n	80082d4 <_dtoa_r+0x8ec>
 8008362:	2201      	movs	r2, #1
 8008364:	e7e1      	b.n	800832a <_dtoa_r+0x942>
 8008366:	f1ba 0f00 	cmp.w	sl, #0
 800836a:	db06      	blt.n	800837a <_dtoa_r+0x992>
 800836c:	9906      	ldr	r1, [sp, #24]
 800836e:	ea41 0a0a 	orr.w	sl, r1, sl
 8008372:	9907      	ldr	r1, [sp, #28]
 8008374:	ea5a 0101 	orrs.w	r1, sl, r1
 8008378:	d120      	bne.n	80083bc <_dtoa_r+0x9d4>
 800837a:	2a00      	cmp	r2, #0
 800837c:	ddec      	ble.n	8008358 <_dtoa_r+0x970>
 800837e:	4629      	mov	r1, r5
 8008380:	2201      	movs	r2, #1
 8008382:	4630      	mov	r0, r6
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	f000 fabb 	bl	8008900 <__lshift>
 800838a:	4621      	mov	r1, r4
 800838c:	4605      	mov	r5, r0
 800838e:	f000 fb27 	bl	80089e0 <__mcmp>
 8008392:	2800      	cmp	r0, #0
 8008394:	9b04      	ldr	r3, [sp, #16]
 8008396:	dc02      	bgt.n	800839e <_dtoa_r+0x9b6>
 8008398:	d1de      	bne.n	8008358 <_dtoa_r+0x970>
 800839a:	07da      	lsls	r2, r3, #31
 800839c:	d5dc      	bpl.n	8008358 <_dtoa_r+0x970>
 800839e:	2b39      	cmp	r3, #57	; 0x39
 80083a0:	d1d8      	bne.n	8008354 <_dtoa_r+0x96c>
 80083a2:	9a02      	ldr	r2, [sp, #8]
 80083a4:	2339      	movs	r3, #57	; 0x39
 80083a6:	7013      	strb	r3, [r2, #0]
 80083a8:	4643      	mov	r3, r8
 80083aa:	4698      	mov	r8, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80083b2:	2a39      	cmp	r2, #57	; 0x39
 80083b4:	d051      	beq.n	800845a <_dtoa_r+0xa72>
 80083b6:	3201      	adds	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e745      	b.n	8008248 <_dtoa_r+0x860>
 80083bc:	2a00      	cmp	r2, #0
 80083be:	dd03      	ble.n	80083c8 <_dtoa_r+0x9e0>
 80083c0:	2b39      	cmp	r3, #57	; 0x39
 80083c2:	d0ee      	beq.n	80083a2 <_dtoa_r+0x9ba>
 80083c4:	3301      	adds	r3, #1
 80083c6:	e7c7      	b.n	8008358 <_dtoa_r+0x970>
 80083c8:	9a04      	ldr	r2, [sp, #16]
 80083ca:	9908      	ldr	r1, [sp, #32]
 80083cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80083d0:	428a      	cmp	r2, r1
 80083d2:	d02b      	beq.n	800842c <_dtoa_r+0xa44>
 80083d4:	4629      	mov	r1, r5
 80083d6:	2300      	movs	r3, #0
 80083d8:	220a      	movs	r2, #10
 80083da:	4630      	mov	r0, r6
 80083dc:	f000 f8e0 	bl	80085a0 <__multadd>
 80083e0:	45b9      	cmp	r9, r7
 80083e2:	4605      	mov	r5, r0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	f04f 020a 	mov.w	r2, #10
 80083ec:	4649      	mov	r1, r9
 80083ee:	4630      	mov	r0, r6
 80083f0:	d107      	bne.n	8008402 <_dtoa_r+0xa1a>
 80083f2:	f000 f8d5 	bl	80085a0 <__multadd>
 80083f6:	4681      	mov	r9, r0
 80083f8:	4607      	mov	r7, r0
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	3301      	adds	r3, #1
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	e774      	b.n	80082ec <_dtoa_r+0x904>
 8008402:	f000 f8cd 	bl	80085a0 <__multadd>
 8008406:	4639      	mov	r1, r7
 8008408:	4681      	mov	r9, r0
 800840a:	2300      	movs	r3, #0
 800840c:	220a      	movs	r2, #10
 800840e:	4630      	mov	r0, r6
 8008410:	f000 f8c6 	bl	80085a0 <__multadd>
 8008414:	4607      	mov	r7, r0
 8008416:	e7f0      	b.n	80083fa <_dtoa_r+0xa12>
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	9a01      	ldr	r2, [sp, #4]
 800841e:	bfcc      	ite	gt
 8008420:	46d0      	movgt	r8, sl
 8008422:	f04f 0801 	movle.w	r8, #1
 8008426:	4490      	add	r8, r2
 8008428:	f04f 0900 	mov.w	r9, #0
 800842c:	4629      	mov	r1, r5
 800842e:	2201      	movs	r2, #1
 8008430:	4630      	mov	r0, r6
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	f000 fa64 	bl	8008900 <__lshift>
 8008438:	4621      	mov	r1, r4
 800843a:	4605      	mov	r5, r0
 800843c:	f000 fad0 	bl	80089e0 <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	dcb1      	bgt.n	80083a8 <_dtoa_r+0x9c0>
 8008444:	d102      	bne.n	800844c <_dtoa_r+0xa64>
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	07db      	lsls	r3, r3, #31
 800844a:	d4ad      	bmi.n	80083a8 <_dtoa_r+0x9c0>
 800844c:	4643      	mov	r3, r8
 800844e:	4698      	mov	r8, r3
 8008450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008454:	2a30      	cmp	r2, #48	; 0x30
 8008456:	d0fa      	beq.n	800844e <_dtoa_r+0xa66>
 8008458:	e6f6      	b.n	8008248 <_dtoa_r+0x860>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d1a4      	bne.n	80083aa <_dtoa_r+0x9c2>
 8008460:	f10b 0b01 	add.w	fp, fp, #1
 8008464:	2331      	movs	r3, #49	; 0x31
 8008466:	e778      	b.n	800835a <_dtoa_r+0x972>
 8008468:	4b14      	ldr	r3, [pc, #80]	; (80084bc <_dtoa_r+0xad4>)
 800846a:	f7ff bb27 	b.w	8007abc <_dtoa_r+0xd4>
 800846e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008470:	2b00      	cmp	r3, #0
 8008472:	f47f ab03 	bne.w	8007a7c <_dtoa_r+0x94>
 8008476:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <_dtoa_r+0xad8>)
 8008478:	f7ff bb20 	b.w	8007abc <_dtoa_r+0xd4>
 800847c:	f1ba 0f00 	cmp.w	sl, #0
 8008480:	dc03      	bgt.n	800848a <_dtoa_r+0xaa2>
 8008482:	9b06      	ldr	r3, [sp, #24]
 8008484:	2b02      	cmp	r3, #2
 8008486:	f73f aec7 	bgt.w	8008218 <_dtoa_r+0x830>
 800848a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff fa1b 	bl	80078cc <quorem>
 8008496:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800849a:	f808 3b01 	strb.w	r3, [r8], #1
 800849e:	9a01      	ldr	r2, [sp, #4]
 80084a0:	eba8 0202 	sub.w	r2, r8, r2
 80084a4:	4592      	cmp	sl, r2
 80084a6:	ddb7      	ble.n	8008418 <_dtoa_r+0xa30>
 80084a8:	4629      	mov	r1, r5
 80084aa:	2300      	movs	r3, #0
 80084ac:	220a      	movs	r2, #10
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f876 	bl	80085a0 <__multadd>
 80084b4:	4605      	mov	r5, r0
 80084b6:	e7ea      	b.n	800848e <_dtoa_r+0xaa6>
 80084b8:	08009d7b 	.word	0x08009d7b
 80084bc:	08009cd8 	.word	0x08009cd8
 80084c0:	08009cfc 	.word	0x08009cfc

080084c4 <_localeconv_r>:
 80084c4:	4800      	ldr	r0, [pc, #0]	; (80084c8 <_localeconv_r+0x4>)
 80084c6:	4770      	bx	lr
 80084c8:	2000019c 	.word	0x2000019c

080084cc <malloc>:
 80084cc:	4b02      	ldr	r3, [pc, #8]	; (80084d8 <malloc+0xc>)
 80084ce:	4601      	mov	r1, r0
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f000 bc09 	b.w	8008ce8 <_malloc_r>
 80084d6:	bf00      	nop
 80084d8:	20000048 	.word	0x20000048

080084dc <_Balloc>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	b976      	cbnz	r6, 8008504 <_Balloc+0x28>
 80084e6:	2010      	movs	r0, #16
 80084e8:	f7ff fff0 	bl	80084cc <malloc>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6260      	str	r0, [r4, #36]	; 0x24
 80084f0:	b920      	cbnz	r0, 80084fc <_Balloc+0x20>
 80084f2:	4b18      	ldr	r3, [pc, #96]	; (8008554 <_Balloc+0x78>)
 80084f4:	4818      	ldr	r0, [pc, #96]	; (8008558 <_Balloc+0x7c>)
 80084f6:	2166      	movs	r1, #102	; 0x66
 80084f8:	f000 fdd6 	bl	80090a8 <__assert_func>
 80084fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008500:	6006      	str	r6, [r0, #0]
 8008502:	60c6      	str	r6, [r0, #12]
 8008504:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008506:	68f3      	ldr	r3, [r6, #12]
 8008508:	b183      	cbz	r3, 800852c <_Balloc+0x50>
 800850a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008512:	b9b8      	cbnz	r0, 8008544 <_Balloc+0x68>
 8008514:	2101      	movs	r1, #1
 8008516:	fa01 f605 	lsl.w	r6, r1, r5
 800851a:	1d72      	adds	r2, r6, #5
 800851c:	0092      	lsls	r2, r2, #2
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fb60 	bl	8008be4 <_calloc_r>
 8008524:	b160      	cbz	r0, 8008540 <_Balloc+0x64>
 8008526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800852a:	e00e      	b.n	800854a <_Balloc+0x6e>
 800852c:	2221      	movs	r2, #33	; 0x21
 800852e:	2104      	movs	r1, #4
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fb57 	bl	8008be4 <_calloc_r>
 8008536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008538:	60f0      	str	r0, [r6, #12]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e4      	bne.n	800850a <_Balloc+0x2e>
 8008540:	2000      	movs	r0, #0
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	6802      	ldr	r2, [r0, #0]
 8008546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800854a:	2300      	movs	r3, #0
 800854c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008550:	e7f7      	b.n	8008542 <_Balloc+0x66>
 8008552:	bf00      	nop
 8008554:	08009d09 	.word	0x08009d09
 8008558:	08009d8c 	.word	0x08009d8c

0800855c <_Bfree>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b976      	cbnz	r6, 8008584 <_Bfree+0x28>
 8008566:	2010      	movs	r0, #16
 8008568:	f7ff ffb0 	bl	80084cc <malloc>
 800856c:	4602      	mov	r2, r0
 800856e:	6268      	str	r0, [r5, #36]	; 0x24
 8008570:	b920      	cbnz	r0, 800857c <_Bfree+0x20>
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <_Bfree+0x3c>)
 8008574:	4809      	ldr	r0, [pc, #36]	; (800859c <_Bfree+0x40>)
 8008576:	218a      	movs	r1, #138	; 0x8a
 8008578:	f000 fd96 	bl	80090a8 <__assert_func>
 800857c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008580:	6006      	str	r6, [r0, #0]
 8008582:	60c6      	str	r6, [r0, #12]
 8008584:	b13c      	cbz	r4, 8008596 <_Bfree+0x3a>
 8008586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008588:	6862      	ldr	r2, [r4, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008590:	6021      	str	r1, [r4, #0]
 8008592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	08009d09 	.word	0x08009d09
 800859c:	08009d8c 	.word	0x08009d8c

080085a0 <__multadd>:
 80085a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a4:	690d      	ldr	r5, [r1, #16]
 80085a6:	4607      	mov	r7, r0
 80085a8:	460c      	mov	r4, r1
 80085aa:	461e      	mov	r6, r3
 80085ac:	f101 0c14 	add.w	ip, r1, #20
 80085b0:	2000      	movs	r0, #0
 80085b2:	f8dc 3000 	ldr.w	r3, [ip]
 80085b6:	b299      	uxth	r1, r3
 80085b8:	fb02 6101 	mla	r1, r2, r1, r6
 80085bc:	0c1e      	lsrs	r6, r3, #16
 80085be:	0c0b      	lsrs	r3, r1, #16
 80085c0:	fb02 3306 	mla	r3, r2, r6, r3
 80085c4:	b289      	uxth	r1, r1
 80085c6:	3001      	adds	r0, #1
 80085c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085cc:	4285      	cmp	r5, r0
 80085ce:	f84c 1b04 	str.w	r1, [ip], #4
 80085d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085d6:	dcec      	bgt.n	80085b2 <__multadd+0x12>
 80085d8:	b30e      	cbz	r6, 800861e <__multadd+0x7e>
 80085da:	68a3      	ldr	r3, [r4, #8]
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dc19      	bgt.n	8008614 <__multadd+0x74>
 80085e0:	6861      	ldr	r1, [r4, #4]
 80085e2:	4638      	mov	r0, r7
 80085e4:	3101      	adds	r1, #1
 80085e6:	f7ff ff79 	bl	80084dc <_Balloc>
 80085ea:	4680      	mov	r8, r0
 80085ec:	b928      	cbnz	r0, 80085fa <__multadd+0x5a>
 80085ee:	4602      	mov	r2, r0
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <__multadd+0x84>)
 80085f2:	480d      	ldr	r0, [pc, #52]	; (8008628 <__multadd+0x88>)
 80085f4:	21b5      	movs	r1, #181	; 0xb5
 80085f6:	f000 fd57 	bl	80090a8 <__assert_func>
 80085fa:	6922      	ldr	r2, [r4, #16]
 80085fc:	3202      	adds	r2, #2
 80085fe:	f104 010c 	add.w	r1, r4, #12
 8008602:	0092      	lsls	r2, r2, #2
 8008604:	300c      	adds	r0, #12
 8008606:	f7fe fce9 	bl	8006fdc <memcpy>
 800860a:	4621      	mov	r1, r4
 800860c:	4638      	mov	r0, r7
 800860e:	f7ff ffa5 	bl	800855c <_Bfree>
 8008612:	4644      	mov	r4, r8
 8008614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008618:	3501      	adds	r5, #1
 800861a:	615e      	str	r6, [r3, #20]
 800861c:	6125      	str	r5, [r4, #16]
 800861e:	4620      	mov	r0, r4
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	08009d7b 	.word	0x08009d7b
 8008628:	08009d8c 	.word	0x08009d8c

0800862c <__hi0bits>:
 800862c:	0c03      	lsrs	r3, r0, #16
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	b9d3      	cbnz	r3, 8008668 <__hi0bits+0x3c>
 8008632:	0400      	lsls	r0, r0, #16
 8008634:	2310      	movs	r3, #16
 8008636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800863a:	bf04      	itt	eq
 800863c:	0200      	lsleq	r0, r0, #8
 800863e:	3308      	addeq	r3, #8
 8008640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008644:	bf04      	itt	eq
 8008646:	0100      	lsleq	r0, r0, #4
 8008648:	3304      	addeq	r3, #4
 800864a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800864e:	bf04      	itt	eq
 8008650:	0080      	lsleq	r0, r0, #2
 8008652:	3302      	addeq	r3, #2
 8008654:	2800      	cmp	r0, #0
 8008656:	db05      	blt.n	8008664 <__hi0bits+0x38>
 8008658:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800865c:	f103 0301 	add.w	r3, r3, #1
 8008660:	bf08      	it	eq
 8008662:	2320      	moveq	r3, #32
 8008664:	4618      	mov	r0, r3
 8008666:	4770      	bx	lr
 8008668:	2300      	movs	r3, #0
 800866a:	e7e4      	b.n	8008636 <__hi0bits+0xa>

0800866c <__lo0bits>:
 800866c:	6803      	ldr	r3, [r0, #0]
 800866e:	f013 0207 	ands.w	r2, r3, #7
 8008672:	4601      	mov	r1, r0
 8008674:	d00b      	beq.n	800868e <__lo0bits+0x22>
 8008676:	07da      	lsls	r2, r3, #31
 8008678:	d423      	bmi.n	80086c2 <__lo0bits+0x56>
 800867a:	0798      	lsls	r0, r3, #30
 800867c:	bf49      	itett	mi
 800867e:	085b      	lsrmi	r3, r3, #1
 8008680:	089b      	lsrpl	r3, r3, #2
 8008682:	2001      	movmi	r0, #1
 8008684:	600b      	strmi	r3, [r1, #0]
 8008686:	bf5c      	itt	pl
 8008688:	600b      	strpl	r3, [r1, #0]
 800868a:	2002      	movpl	r0, #2
 800868c:	4770      	bx	lr
 800868e:	b298      	uxth	r0, r3
 8008690:	b9a8      	cbnz	r0, 80086be <__lo0bits+0x52>
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	2010      	movs	r0, #16
 8008696:	b2da      	uxtb	r2, r3
 8008698:	b90a      	cbnz	r2, 800869e <__lo0bits+0x32>
 800869a:	3008      	adds	r0, #8
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	071a      	lsls	r2, r3, #28
 80086a0:	bf04      	itt	eq
 80086a2:	091b      	lsreq	r3, r3, #4
 80086a4:	3004      	addeq	r0, #4
 80086a6:	079a      	lsls	r2, r3, #30
 80086a8:	bf04      	itt	eq
 80086aa:	089b      	lsreq	r3, r3, #2
 80086ac:	3002      	addeq	r0, #2
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d403      	bmi.n	80086ba <__lo0bits+0x4e>
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	f100 0001 	add.w	r0, r0, #1
 80086b8:	d005      	beq.n	80086c6 <__lo0bits+0x5a>
 80086ba:	600b      	str	r3, [r1, #0]
 80086bc:	4770      	bx	lr
 80086be:	4610      	mov	r0, r2
 80086c0:	e7e9      	b.n	8008696 <__lo0bits+0x2a>
 80086c2:	2000      	movs	r0, #0
 80086c4:	4770      	bx	lr
 80086c6:	2020      	movs	r0, #32
 80086c8:	4770      	bx	lr
	...

080086cc <__i2b>:
 80086cc:	b510      	push	{r4, lr}
 80086ce:	460c      	mov	r4, r1
 80086d0:	2101      	movs	r1, #1
 80086d2:	f7ff ff03 	bl	80084dc <_Balloc>
 80086d6:	4602      	mov	r2, r0
 80086d8:	b928      	cbnz	r0, 80086e6 <__i2b+0x1a>
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <__i2b+0x24>)
 80086dc:	4805      	ldr	r0, [pc, #20]	; (80086f4 <__i2b+0x28>)
 80086de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086e2:	f000 fce1 	bl	80090a8 <__assert_func>
 80086e6:	2301      	movs	r3, #1
 80086e8:	6144      	str	r4, [r0, #20]
 80086ea:	6103      	str	r3, [r0, #16]
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	bf00      	nop
 80086f0:	08009d7b 	.word	0x08009d7b
 80086f4:	08009d8c 	.word	0x08009d8c

080086f8 <__multiply>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4691      	mov	r9, r2
 80086fe:	690a      	ldr	r2, [r1, #16]
 8008700:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008704:	429a      	cmp	r2, r3
 8008706:	bfb8      	it	lt
 8008708:	460b      	movlt	r3, r1
 800870a:	460c      	mov	r4, r1
 800870c:	bfbc      	itt	lt
 800870e:	464c      	movlt	r4, r9
 8008710:	4699      	movlt	r9, r3
 8008712:	6927      	ldr	r7, [r4, #16]
 8008714:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008718:	68a3      	ldr	r3, [r4, #8]
 800871a:	6861      	ldr	r1, [r4, #4]
 800871c:	eb07 060a 	add.w	r6, r7, sl
 8008720:	42b3      	cmp	r3, r6
 8008722:	b085      	sub	sp, #20
 8008724:	bfb8      	it	lt
 8008726:	3101      	addlt	r1, #1
 8008728:	f7ff fed8 	bl	80084dc <_Balloc>
 800872c:	b930      	cbnz	r0, 800873c <__multiply+0x44>
 800872e:	4602      	mov	r2, r0
 8008730:	4b44      	ldr	r3, [pc, #272]	; (8008844 <__multiply+0x14c>)
 8008732:	4845      	ldr	r0, [pc, #276]	; (8008848 <__multiply+0x150>)
 8008734:	f240 115d 	movw	r1, #349	; 0x15d
 8008738:	f000 fcb6 	bl	80090a8 <__assert_func>
 800873c:	f100 0514 	add.w	r5, r0, #20
 8008740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008744:	462b      	mov	r3, r5
 8008746:	2200      	movs	r2, #0
 8008748:	4543      	cmp	r3, r8
 800874a:	d321      	bcc.n	8008790 <__multiply+0x98>
 800874c:	f104 0314 	add.w	r3, r4, #20
 8008750:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008754:	f109 0314 	add.w	r3, r9, #20
 8008758:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800875c:	9202      	str	r2, [sp, #8]
 800875e:	1b3a      	subs	r2, r7, r4
 8008760:	3a15      	subs	r2, #21
 8008762:	f022 0203 	bic.w	r2, r2, #3
 8008766:	3204      	adds	r2, #4
 8008768:	f104 0115 	add.w	r1, r4, #21
 800876c:	428f      	cmp	r7, r1
 800876e:	bf38      	it	cc
 8008770:	2204      	movcc	r2, #4
 8008772:	9201      	str	r2, [sp, #4]
 8008774:	9a02      	ldr	r2, [sp, #8]
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	429a      	cmp	r2, r3
 800877a:	d80c      	bhi.n	8008796 <__multiply+0x9e>
 800877c:	2e00      	cmp	r6, #0
 800877e:	dd03      	ble.n	8008788 <__multiply+0x90>
 8008780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05a      	beq.n	800883e <__multiply+0x146>
 8008788:	6106      	str	r6, [r0, #16]
 800878a:	b005      	add	sp, #20
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	f843 2b04 	str.w	r2, [r3], #4
 8008794:	e7d8      	b.n	8008748 <__multiply+0x50>
 8008796:	f8b3 a000 	ldrh.w	sl, [r3]
 800879a:	f1ba 0f00 	cmp.w	sl, #0
 800879e:	d024      	beq.n	80087ea <__multiply+0xf2>
 80087a0:	f104 0e14 	add.w	lr, r4, #20
 80087a4:	46a9      	mov	r9, r5
 80087a6:	f04f 0c00 	mov.w	ip, #0
 80087aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087ae:	f8d9 1000 	ldr.w	r1, [r9]
 80087b2:	fa1f fb82 	uxth.w	fp, r2
 80087b6:	b289      	uxth	r1, r1
 80087b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80087bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087c0:	f8d9 2000 	ldr.w	r2, [r9]
 80087c4:	4461      	add	r1, ip
 80087c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80087ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087d2:	b289      	uxth	r1, r1
 80087d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087d8:	4577      	cmp	r7, lr
 80087da:	f849 1b04 	str.w	r1, [r9], #4
 80087de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087e2:	d8e2      	bhi.n	80087aa <__multiply+0xb2>
 80087e4:	9a01      	ldr	r2, [sp, #4]
 80087e6:	f845 c002 	str.w	ip, [r5, r2]
 80087ea:	9a03      	ldr	r2, [sp, #12]
 80087ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087f0:	3304      	adds	r3, #4
 80087f2:	f1b9 0f00 	cmp.w	r9, #0
 80087f6:	d020      	beq.n	800883a <__multiply+0x142>
 80087f8:	6829      	ldr	r1, [r5, #0]
 80087fa:	f104 0c14 	add.w	ip, r4, #20
 80087fe:	46ae      	mov	lr, r5
 8008800:	f04f 0a00 	mov.w	sl, #0
 8008804:	f8bc b000 	ldrh.w	fp, [ip]
 8008808:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800880c:	fb09 220b 	mla	r2, r9, fp, r2
 8008810:	4492      	add	sl, r2
 8008812:	b289      	uxth	r1, r1
 8008814:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008818:	f84e 1b04 	str.w	r1, [lr], #4
 800881c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008820:	f8be 1000 	ldrh.w	r1, [lr]
 8008824:	0c12      	lsrs	r2, r2, #16
 8008826:	fb09 1102 	mla	r1, r9, r2, r1
 800882a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800882e:	4567      	cmp	r7, ip
 8008830:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008834:	d8e6      	bhi.n	8008804 <__multiply+0x10c>
 8008836:	9a01      	ldr	r2, [sp, #4]
 8008838:	50a9      	str	r1, [r5, r2]
 800883a:	3504      	adds	r5, #4
 800883c:	e79a      	b.n	8008774 <__multiply+0x7c>
 800883e:	3e01      	subs	r6, #1
 8008840:	e79c      	b.n	800877c <__multiply+0x84>
 8008842:	bf00      	nop
 8008844:	08009d7b 	.word	0x08009d7b
 8008848:	08009d8c 	.word	0x08009d8c

0800884c <__pow5mult>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	4615      	mov	r5, r2
 8008852:	f012 0203 	ands.w	r2, r2, #3
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	d007      	beq.n	800886c <__pow5mult+0x20>
 800885c:	4c25      	ldr	r4, [pc, #148]	; (80088f4 <__pow5mult+0xa8>)
 800885e:	3a01      	subs	r2, #1
 8008860:	2300      	movs	r3, #0
 8008862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008866:	f7ff fe9b 	bl	80085a0 <__multadd>
 800886a:	4607      	mov	r7, r0
 800886c:	10ad      	asrs	r5, r5, #2
 800886e:	d03d      	beq.n	80088ec <__pow5mult+0xa0>
 8008870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008872:	b97c      	cbnz	r4, 8008894 <__pow5mult+0x48>
 8008874:	2010      	movs	r0, #16
 8008876:	f7ff fe29 	bl	80084cc <malloc>
 800887a:	4602      	mov	r2, r0
 800887c:	6270      	str	r0, [r6, #36]	; 0x24
 800887e:	b928      	cbnz	r0, 800888c <__pow5mult+0x40>
 8008880:	4b1d      	ldr	r3, [pc, #116]	; (80088f8 <__pow5mult+0xac>)
 8008882:	481e      	ldr	r0, [pc, #120]	; (80088fc <__pow5mult+0xb0>)
 8008884:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008888:	f000 fc0e 	bl	80090a8 <__assert_func>
 800888c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008890:	6004      	str	r4, [r0, #0]
 8008892:	60c4      	str	r4, [r0, #12]
 8008894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800889c:	b94c      	cbnz	r4, 80088b2 <__pow5mult+0x66>
 800889e:	f240 2171 	movw	r1, #625	; 0x271
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7ff ff12 	bl	80086cc <__i2b>
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ae:	4604      	mov	r4, r0
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	07eb      	lsls	r3, r5, #31
 80088b8:	d50a      	bpl.n	80088d0 <__pow5mult+0x84>
 80088ba:	4639      	mov	r1, r7
 80088bc:	4622      	mov	r2, r4
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff ff1a 	bl	80086f8 <__multiply>
 80088c4:	4639      	mov	r1, r7
 80088c6:	4680      	mov	r8, r0
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff fe47 	bl	800855c <_Bfree>
 80088ce:	4647      	mov	r7, r8
 80088d0:	106d      	asrs	r5, r5, #1
 80088d2:	d00b      	beq.n	80088ec <__pow5mult+0xa0>
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	b938      	cbnz	r0, 80088e8 <__pow5mult+0x9c>
 80088d8:	4622      	mov	r2, r4
 80088da:	4621      	mov	r1, r4
 80088dc:	4630      	mov	r0, r6
 80088de:	f7ff ff0b 	bl	80086f8 <__multiply>
 80088e2:	6020      	str	r0, [r4, #0]
 80088e4:	f8c0 9000 	str.w	r9, [r0]
 80088e8:	4604      	mov	r4, r0
 80088ea:	e7e4      	b.n	80088b6 <__pow5mult+0x6a>
 80088ec:	4638      	mov	r0, r7
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	bf00      	nop
 80088f4:	08009ed8 	.word	0x08009ed8
 80088f8:	08009d09 	.word	0x08009d09
 80088fc:	08009d8c 	.word	0x08009d8c

08008900 <__lshift>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	460c      	mov	r4, r1
 8008906:	6849      	ldr	r1, [r1, #4]
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800890e:	68a3      	ldr	r3, [r4, #8]
 8008910:	4607      	mov	r7, r0
 8008912:	4691      	mov	r9, r2
 8008914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008918:	f108 0601 	add.w	r6, r8, #1
 800891c:	42b3      	cmp	r3, r6
 800891e:	db0b      	blt.n	8008938 <__lshift+0x38>
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff fddb 	bl	80084dc <_Balloc>
 8008926:	4605      	mov	r5, r0
 8008928:	b948      	cbnz	r0, 800893e <__lshift+0x3e>
 800892a:	4602      	mov	r2, r0
 800892c:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <__lshift+0xd8>)
 800892e:	482b      	ldr	r0, [pc, #172]	; (80089dc <__lshift+0xdc>)
 8008930:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008934:	f000 fbb8 	bl	80090a8 <__assert_func>
 8008938:	3101      	adds	r1, #1
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	e7ee      	b.n	800891c <__lshift+0x1c>
 800893e:	2300      	movs	r3, #0
 8008940:	f100 0114 	add.w	r1, r0, #20
 8008944:	f100 0210 	add.w	r2, r0, #16
 8008948:	4618      	mov	r0, r3
 800894a:	4553      	cmp	r3, sl
 800894c:	db37      	blt.n	80089be <__lshift+0xbe>
 800894e:	6920      	ldr	r0, [r4, #16]
 8008950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008954:	f104 0314 	add.w	r3, r4, #20
 8008958:	f019 091f 	ands.w	r9, r9, #31
 800895c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008960:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008964:	d02f      	beq.n	80089c6 <__lshift+0xc6>
 8008966:	f1c9 0e20 	rsb	lr, r9, #32
 800896a:	468a      	mov	sl, r1
 800896c:	f04f 0c00 	mov.w	ip, #0
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	fa02 f209 	lsl.w	r2, r2, r9
 8008976:	ea42 020c 	orr.w	r2, r2, ip
 800897a:	f84a 2b04 	str.w	r2, [sl], #4
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	4298      	cmp	r0, r3
 8008984:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008988:	d8f2      	bhi.n	8008970 <__lshift+0x70>
 800898a:	1b03      	subs	r3, r0, r4
 800898c:	3b15      	subs	r3, #21
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	3304      	adds	r3, #4
 8008994:	f104 0215 	add.w	r2, r4, #21
 8008998:	4290      	cmp	r0, r2
 800899a:	bf38      	it	cc
 800899c:	2304      	movcc	r3, #4
 800899e:	f841 c003 	str.w	ip, [r1, r3]
 80089a2:	f1bc 0f00 	cmp.w	ip, #0
 80089a6:	d001      	beq.n	80089ac <__lshift+0xac>
 80089a8:	f108 0602 	add.w	r6, r8, #2
 80089ac:	3e01      	subs	r6, #1
 80089ae:	4638      	mov	r0, r7
 80089b0:	612e      	str	r6, [r5, #16]
 80089b2:	4621      	mov	r1, r4
 80089b4:	f7ff fdd2 	bl	800855c <_Bfree>
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089be:	f842 0f04 	str.w	r0, [r2, #4]!
 80089c2:	3301      	adds	r3, #1
 80089c4:	e7c1      	b.n	800894a <__lshift+0x4a>
 80089c6:	3904      	subs	r1, #4
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80089d0:	4298      	cmp	r0, r3
 80089d2:	d8f9      	bhi.n	80089c8 <__lshift+0xc8>
 80089d4:	e7ea      	b.n	80089ac <__lshift+0xac>
 80089d6:	bf00      	nop
 80089d8:	08009d7b 	.word	0x08009d7b
 80089dc:	08009d8c 	.word	0x08009d8c

080089e0 <__mcmp>:
 80089e0:	b530      	push	{r4, r5, lr}
 80089e2:	6902      	ldr	r2, [r0, #16]
 80089e4:	690c      	ldr	r4, [r1, #16]
 80089e6:	1b12      	subs	r2, r2, r4
 80089e8:	d10e      	bne.n	8008a08 <__mcmp+0x28>
 80089ea:	f100 0314 	add.w	r3, r0, #20
 80089ee:	3114      	adds	r1, #20
 80089f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a00:	42a5      	cmp	r5, r4
 8008a02:	d003      	beq.n	8008a0c <__mcmp+0x2c>
 8008a04:	d305      	bcc.n	8008a12 <__mcmp+0x32>
 8008a06:	2201      	movs	r2, #1
 8008a08:	4610      	mov	r0, r2
 8008a0a:	bd30      	pop	{r4, r5, pc}
 8008a0c:	4283      	cmp	r3, r0
 8008a0e:	d3f3      	bcc.n	80089f8 <__mcmp+0x18>
 8008a10:	e7fa      	b.n	8008a08 <__mcmp+0x28>
 8008a12:	f04f 32ff 	mov.w	r2, #4294967295
 8008a16:	e7f7      	b.n	8008a08 <__mcmp+0x28>

08008a18 <__mdiff>:
 8008a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	4606      	mov	r6, r0
 8008a20:	4611      	mov	r1, r2
 8008a22:	4620      	mov	r0, r4
 8008a24:	4690      	mov	r8, r2
 8008a26:	f7ff ffdb 	bl	80089e0 <__mcmp>
 8008a2a:	1e05      	subs	r5, r0, #0
 8008a2c:	d110      	bne.n	8008a50 <__mdiff+0x38>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff fd53 	bl	80084dc <_Balloc>
 8008a36:	b930      	cbnz	r0, 8008a46 <__mdiff+0x2e>
 8008a38:	4b3a      	ldr	r3, [pc, #232]	; (8008b24 <__mdiff+0x10c>)
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	f240 2132 	movw	r1, #562	; 0x232
 8008a40:	4839      	ldr	r0, [pc, #228]	; (8008b28 <__mdiff+0x110>)
 8008a42:	f000 fb31 	bl	80090a8 <__assert_func>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	bfa4      	itt	ge
 8008a52:	4643      	movge	r3, r8
 8008a54:	46a0      	movge	r8, r4
 8008a56:	4630      	mov	r0, r6
 8008a58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a5c:	bfa6      	itte	ge
 8008a5e:	461c      	movge	r4, r3
 8008a60:	2500      	movge	r5, #0
 8008a62:	2501      	movlt	r5, #1
 8008a64:	f7ff fd3a 	bl	80084dc <_Balloc>
 8008a68:	b920      	cbnz	r0, 8008a74 <__mdiff+0x5c>
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <__mdiff+0x10c>)
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a72:	e7e5      	b.n	8008a40 <__mdiff+0x28>
 8008a74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a78:	6926      	ldr	r6, [r4, #16]
 8008a7a:	60c5      	str	r5, [r0, #12]
 8008a7c:	f104 0914 	add.w	r9, r4, #20
 8008a80:	f108 0514 	add.w	r5, r8, #20
 8008a84:	f100 0e14 	add.w	lr, r0, #20
 8008a88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a90:	f108 0210 	add.w	r2, r8, #16
 8008a94:	46f2      	mov	sl, lr
 8008a96:	2100      	movs	r1, #0
 8008a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008aa0:	fa1f f883 	uxth.w	r8, r3
 8008aa4:	fa11 f18b 	uxtah	r1, r1, fp
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	eba1 0808 	sub.w	r8, r1, r8
 8008aae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ab2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ab6:	fa1f f888 	uxth.w	r8, r8
 8008aba:	1419      	asrs	r1, r3, #16
 8008abc:	454e      	cmp	r6, r9
 8008abe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ac6:	d8e7      	bhi.n	8008a98 <__mdiff+0x80>
 8008ac8:	1b33      	subs	r3, r6, r4
 8008aca:	3b15      	subs	r3, #21
 8008acc:	f023 0303 	bic.w	r3, r3, #3
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	3415      	adds	r4, #21
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	bf38      	it	cc
 8008ad8:	2304      	movcc	r3, #4
 8008ada:	441d      	add	r5, r3
 8008adc:	4473      	add	r3, lr
 8008ade:	469e      	mov	lr, r3
 8008ae0:	462e      	mov	r6, r5
 8008ae2:	4566      	cmp	r6, ip
 8008ae4:	d30e      	bcc.n	8008b04 <__mdiff+0xec>
 8008ae6:	f10c 0203 	add.w	r2, ip, #3
 8008aea:	1b52      	subs	r2, r2, r5
 8008aec:	f022 0203 	bic.w	r2, r2, #3
 8008af0:	3d03      	subs	r5, #3
 8008af2:	45ac      	cmp	ip, r5
 8008af4:	bf38      	it	cc
 8008af6:	2200      	movcc	r2, #0
 8008af8:	441a      	add	r2, r3
 8008afa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008afe:	b17b      	cbz	r3, 8008b20 <__mdiff+0x108>
 8008b00:	6107      	str	r7, [r0, #16]
 8008b02:	e7a3      	b.n	8008a4c <__mdiff+0x34>
 8008b04:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b08:	fa11 f288 	uxtah	r2, r1, r8
 8008b0c:	1414      	asrs	r4, r2, #16
 8008b0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b12:	b292      	uxth	r2, r2
 8008b14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b18:	f84e 2b04 	str.w	r2, [lr], #4
 8008b1c:	1421      	asrs	r1, r4, #16
 8008b1e:	e7e0      	b.n	8008ae2 <__mdiff+0xca>
 8008b20:	3f01      	subs	r7, #1
 8008b22:	e7ea      	b.n	8008afa <__mdiff+0xe2>
 8008b24:	08009d7b 	.word	0x08009d7b
 8008b28:	08009d8c 	.word	0x08009d8c

08008b2c <__d2b>:
 8008b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b30:	4689      	mov	r9, r1
 8008b32:	2101      	movs	r1, #1
 8008b34:	ec57 6b10 	vmov	r6, r7, d0
 8008b38:	4690      	mov	r8, r2
 8008b3a:	f7ff fccf 	bl	80084dc <_Balloc>
 8008b3e:	4604      	mov	r4, r0
 8008b40:	b930      	cbnz	r0, 8008b50 <__d2b+0x24>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b25      	ldr	r3, [pc, #148]	; (8008bdc <__d2b+0xb0>)
 8008b46:	4826      	ldr	r0, [pc, #152]	; (8008be0 <__d2b+0xb4>)
 8008b48:	f240 310a 	movw	r1, #778	; 0x30a
 8008b4c:	f000 faac 	bl	80090a8 <__assert_func>
 8008b50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b58:	bb35      	cbnz	r5, 8008ba8 <__d2b+0x7c>
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	d028      	beq.n	8008bb2 <__d2b+0x86>
 8008b60:	4668      	mov	r0, sp
 8008b62:	9600      	str	r6, [sp, #0]
 8008b64:	f7ff fd82 	bl	800866c <__lo0bits>
 8008b68:	9900      	ldr	r1, [sp, #0]
 8008b6a:	b300      	cbz	r0, 8008bae <__d2b+0x82>
 8008b6c:	9a01      	ldr	r2, [sp, #4]
 8008b6e:	f1c0 0320 	rsb	r3, r0, #32
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	430b      	orrs	r3, r1
 8008b78:	40c2      	lsrs	r2, r0
 8008b7a:	6163      	str	r3, [r4, #20]
 8008b7c:	9201      	str	r2, [sp, #4]
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	61a3      	str	r3, [r4, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	bf14      	ite	ne
 8008b86:	2202      	movne	r2, #2
 8008b88:	2201      	moveq	r2, #1
 8008b8a:	6122      	str	r2, [r4, #16]
 8008b8c:	b1d5      	cbz	r5, 8008bc4 <__d2b+0x98>
 8008b8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b92:	4405      	add	r5, r0
 8008b94:	f8c9 5000 	str.w	r5, [r9]
 8008b98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b9c:	f8c8 0000 	str.w	r0, [r8]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	b003      	add	sp, #12
 8008ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bac:	e7d5      	b.n	8008b5a <__d2b+0x2e>
 8008bae:	6161      	str	r1, [r4, #20]
 8008bb0:	e7e5      	b.n	8008b7e <__d2b+0x52>
 8008bb2:	a801      	add	r0, sp, #4
 8008bb4:	f7ff fd5a 	bl	800866c <__lo0bits>
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	6163      	str	r3, [r4, #20]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	6122      	str	r2, [r4, #16]
 8008bc0:	3020      	adds	r0, #32
 8008bc2:	e7e3      	b.n	8008b8c <__d2b+0x60>
 8008bc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bcc:	f8c9 0000 	str.w	r0, [r9]
 8008bd0:	6918      	ldr	r0, [r3, #16]
 8008bd2:	f7ff fd2b 	bl	800862c <__hi0bits>
 8008bd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bda:	e7df      	b.n	8008b9c <__d2b+0x70>
 8008bdc:	08009d7b 	.word	0x08009d7b
 8008be0:	08009d8c 	.word	0x08009d8c

08008be4 <_calloc_r>:
 8008be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008be6:	fba1 2402 	umull	r2, r4, r1, r2
 8008bea:	b94c      	cbnz	r4, 8008c00 <_calloc_r+0x1c>
 8008bec:	4611      	mov	r1, r2
 8008bee:	9201      	str	r2, [sp, #4]
 8008bf0:	f000 f87a 	bl	8008ce8 <_malloc_r>
 8008bf4:	9a01      	ldr	r2, [sp, #4]
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b930      	cbnz	r0, 8008c08 <_calloc_r+0x24>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	220c      	movs	r2, #12
 8008c02:	6002      	str	r2, [r0, #0]
 8008c04:	2500      	movs	r5, #0
 8008c06:	e7f8      	b.n	8008bfa <_calloc_r+0x16>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	f7fe f9f5 	bl	8006ff8 <memset>
 8008c0e:	e7f4      	b.n	8008bfa <_calloc_r+0x16>

08008c10 <_free_r>:
 8008c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c12:	2900      	cmp	r1, #0
 8008c14:	d044      	beq.n	8008ca0 <_free_r+0x90>
 8008c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c1a:	9001      	str	r0, [sp, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c22:	bfb8      	it	lt
 8008c24:	18e4      	addlt	r4, r4, r3
 8008c26:	f000 fa9b 	bl	8009160 <__malloc_lock>
 8008c2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ca4 <_free_r+0x94>)
 8008c2c:	9801      	ldr	r0, [sp, #4]
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	b933      	cbnz	r3, 8008c40 <_free_r+0x30>
 8008c32:	6063      	str	r3, [r4, #4]
 8008c34:	6014      	str	r4, [r2, #0]
 8008c36:	b003      	add	sp, #12
 8008c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c3c:	f000 ba96 	b.w	800916c <__malloc_unlock>
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	d908      	bls.n	8008c56 <_free_r+0x46>
 8008c44:	6825      	ldr	r5, [r4, #0]
 8008c46:	1961      	adds	r1, r4, r5
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf01      	itttt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	1949      	addeq	r1, r1, r5
 8008c52:	6021      	streq	r1, [r4, #0]
 8008c54:	e7ed      	b.n	8008c32 <_free_r+0x22>
 8008c56:	461a      	mov	r2, r3
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	b10b      	cbz	r3, 8008c60 <_free_r+0x50>
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d9fa      	bls.n	8008c56 <_free_r+0x46>
 8008c60:	6811      	ldr	r1, [r2, #0]
 8008c62:	1855      	adds	r5, r2, r1
 8008c64:	42a5      	cmp	r5, r4
 8008c66:	d10b      	bne.n	8008c80 <_free_r+0x70>
 8008c68:	6824      	ldr	r4, [r4, #0]
 8008c6a:	4421      	add	r1, r4
 8008c6c:	1854      	adds	r4, r2, r1
 8008c6e:	42a3      	cmp	r3, r4
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	d1e0      	bne.n	8008c36 <_free_r+0x26>
 8008c74:	681c      	ldr	r4, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	6053      	str	r3, [r2, #4]
 8008c7a:	4421      	add	r1, r4
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	e7da      	b.n	8008c36 <_free_r+0x26>
 8008c80:	d902      	bls.n	8008c88 <_free_r+0x78>
 8008c82:	230c      	movs	r3, #12
 8008c84:	6003      	str	r3, [r0, #0]
 8008c86:	e7d6      	b.n	8008c36 <_free_r+0x26>
 8008c88:	6825      	ldr	r5, [r4, #0]
 8008c8a:	1961      	adds	r1, r4, r5
 8008c8c:	428b      	cmp	r3, r1
 8008c8e:	bf04      	itt	eq
 8008c90:	6819      	ldreq	r1, [r3, #0]
 8008c92:	685b      	ldreq	r3, [r3, #4]
 8008c94:	6063      	str	r3, [r4, #4]
 8008c96:	bf04      	itt	eq
 8008c98:	1949      	addeq	r1, r1, r5
 8008c9a:	6021      	streq	r1, [r4, #0]
 8008c9c:	6054      	str	r4, [r2, #4]
 8008c9e:	e7ca      	b.n	8008c36 <_free_r+0x26>
 8008ca0:	b003      	add	sp, #12
 8008ca2:	bd30      	pop	{r4, r5, pc}
 8008ca4:	200008d0 	.word	0x200008d0

08008ca8 <sbrk_aligned>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	4e0e      	ldr	r6, [pc, #56]	; (8008ce4 <sbrk_aligned+0x3c>)
 8008cac:	460c      	mov	r4, r1
 8008cae:	6831      	ldr	r1, [r6, #0]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	b911      	cbnz	r1, 8008cba <sbrk_aligned+0x12>
 8008cb4:	f000 f9e8 	bl	8009088 <_sbrk_r>
 8008cb8:	6030      	str	r0, [r6, #0]
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f9e3 	bl	8009088 <_sbrk_r>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	d00a      	beq.n	8008cdc <sbrk_aligned+0x34>
 8008cc6:	1cc4      	adds	r4, r0, #3
 8008cc8:	f024 0403 	bic.w	r4, r4, #3
 8008ccc:	42a0      	cmp	r0, r4
 8008cce:	d007      	beq.n	8008ce0 <sbrk_aligned+0x38>
 8008cd0:	1a21      	subs	r1, r4, r0
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f9d8 	bl	8009088 <_sbrk_r>
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d101      	bne.n	8008ce0 <sbrk_aligned+0x38>
 8008cdc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	200008d4 	.word	0x200008d4

08008ce8 <_malloc_r>:
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	1ccd      	adds	r5, r1, #3
 8008cee:	f025 0503 	bic.w	r5, r5, #3
 8008cf2:	3508      	adds	r5, #8
 8008cf4:	2d0c      	cmp	r5, #12
 8008cf6:	bf38      	it	cc
 8008cf8:	250c      	movcc	r5, #12
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	db01      	blt.n	8008d04 <_malloc_r+0x1c>
 8008d00:	42a9      	cmp	r1, r5
 8008d02:	d905      	bls.n	8008d10 <_malloc_r+0x28>
 8008d04:	230c      	movs	r3, #12
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	2600      	movs	r6, #0
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d10:	4e2e      	ldr	r6, [pc, #184]	; (8008dcc <_malloc_r+0xe4>)
 8008d12:	f000 fa25 	bl	8009160 <__malloc_lock>
 8008d16:	6833      	ldr	r3, [r6, #0]
 8008d18:	461c      	mov	r4, r3
 8008d1a:	bb34      	cbnz	r4, 8008d6a <_malloc_r+0x82>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f7ff ffc2 	bl	8008ca8 <sbrk_aligned>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	4604      	mov	r4, r0
 8008d28:	d14d      	bne.n	8008dc6 <_malloc_r+0xde>
 8008d2a:	6834      	ldr	r4, [r6, #0]
 8008d2c:	4626      	mov	r6, r4
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	d140      	bne.n	8008db4 <_malloc_r+0xcc>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	4631      	mov	r1, r6
 8008d36:	4638      	mov	r0, r7
 8008d38:	eb04 0803 	add.w	r8, r4, r3
 8008d3c:	f000 f9a4 	bl	8009088 <_sbrk_r>
 8008d40:	4580      	cmp	r8, r0
 8008d42:	d13a      	bne.n	8008dba <_malloc_r+0xd2>
 8008d44:	6821      	ldr	r1, [r4, #0]
 8008d46:	3503      	adds	r5, #3
 8008d48:	1a6d      	subs	r5, r5, r1
 8008d4a:	f025 0503 	bic.w	r5, r5, #3
 8008d4e:	3508      	adds	r5, #8
 8008d50:	2d0c      	cmp	r5, #12
 8008d52:	bf38      	it	cc
 8008d54:	250c      	movcc	r5, #12
 8008d56:	4629      	mov	r1, r5
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f7ff ffa5 	bl	8008ca8 <sbrk_aligned>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d02b      	beq.n	8008dba <_malloc_r+0xd2>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	442b      	add	r3, r5
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	e00e      	b.n	8008d88 <_malloc_r+0xa0>
 8008d6a:	6822      	ldr	r2, [r4, #0]
 8008d6c:	1b52      	subs	r2, r2, r5
 8008d6e:	d41e      	bmi.n	8008dae <_malloc_r+0xc6>
 8008d70:	2a0b      	cmp	r2, #11
 8008d72:	d916      	bls.n	8008da2 <_malloc_r+0xba>
 8008d74:	1961      	adds	r1, r4, r5
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	6025      	str	r5, [r4, #0]
 8008d7a:	bf18      	it	ne
 8008d7c:	6059      	strne	r1, [r3, #4]
 8008d7e:	6863      	ldr	r3, [r4, #4]
 8008d80:	bf08      	it	eq
 8008d82:	6031      	streq	r1, [r6, #0]
 8008d84:	5162      	str	r2, [r4, r5]
 8008d86:	604b      	str	r3, [r1, #4]
 8008d88:	4638      	mov	r0, r7
 8008d8a:	f104 060b 	add.w	r6, r4, #11
 8008d8e:	f000 f9ed 	bl	800916c <__malloc_unlock>
 8008d92:	f026 0607 	bic.w	r6, r6, #7
 8008d96:	1d23      	adds	r3, r4, #4
 8008d98:	1af2      	subs	r2, r6, r3
 8008d9a:	d0b6      	beq.n	8008d0a <_malloc_r+0x22>
 8008d9c:	1b9b      	subs	r3, r3, r6
 8008d9e:	50a3      	str	r3, [r4, r2]
 8008da0:	e7b3      	b.n	8008d0a <_malloc_r+0x22>
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	bf0c      	ite	eq
 8008da8:	6032      	streq	r2, [r6, #0]
 8008daa:	605a      	strne	r2, [r3, #4]
 8008dac:	e7ec      	b.n	8008d88 <_malloc_r+0xa0>
 8008dae:	4623      	mov	r3, r4
 8008db0:	6864      	ldr	r4, [r4, #4]
 8008db2:	e7b2      	b.n	8008d1a <_malloc_r+0x32>
 8008db4:	4634      	mov	r4, r6
 8008db6:	6876      	ldr	r6, [r6, #4]
 8008db8:	e7b9      	b.n	8008d2e <_malloc_r+0x46>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f000 f9d4 	bl	800916c <__malloc_unlock>
 8008dc4:	e7a1      	b.n	8008d0a <_malloc_r+0x22>
 8008dc6:	6025      	str	r5, [r4, #0]
 8008dc8:	e7de      	b.n	8008d88 <_malloc_r+0xa0>
 8008dca:	bf00      	nop
 8008dcc:	200008d0 	.word	0x200008d0

08008dd0 <__ssputs_r>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	688e      	ldr	r6, [r1, #8]
 8008dd6:	429e      	cmp	r6, r3
 8008dd8:	4682      	mov	sl, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	4690      	mov	r8, r2
 8008dde:	461f      	mov	r7, r3
 8008de0:	d838      	bhi.n	8008e54 <__ssputs_r+0x84>
 8008de2:	898a      	ldrh	r2, [r1, #12]
 8008de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008de8:	d032      	beq.n	8008e50 <__ssputs_r+0x80>
 8008dea:	6825      	ldr	r5, [r4, #0]
 8008dec:	6909      	ldr	r1, [r1, #16]
 8008dee:	eba5 0901 	sub.w	r9, r5, r1
 8008df2:	6965      	ldr	r5, [r4, #20]
 8008df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	444b      	add	r3, r9
 8008e00:	106d      	asrs	r5, r5, #1
 8008e02:	429d      	cmp	r5, r3
 8008e04:	bf38      	it	cc
 8008e06:	461d      	movcc	r5, r3
 8008e08:	0553      	lsls	r3, r2, #21
 8008e0a:	d531      	bpl.n	8008e70 <__ssputs_r+0xa0>
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7ff ff6b 	bl	8008ce8 <_malloc_r>
 8008e12:	4606      	mov	r6, r0
 8008e14:	b950      	cbnz	r0, 8008e2c <__ssputs_r+0x5c>
 8008e16:	230c      	movs	r3, #12
 8008e18:	f8ca 3000 	str.w	r3, [sl]
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	6921      	ldr	r1, [r4, #16]
 8008e2e:	464a      	mov	r2, r9
 8008e30:	f7fe f8d4 	bl	8006fdc <memcpy>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	6126      	str	r6, [r4, #16]
 8008e42:	6165      	str	r5, [r4, #20]
 8008e44:	444e      	add	r6, r9
 8008e46:	eba5 0509 	sub.w	r5, r5, r9
 8008e4a:	6026      	str	r6, [r4, #0]
 8008e4c:	60a5      	str	r5, [r4, #8]
 8008e4e:	463e      	mov	r6, r7
 8008e50:	42be      	cmp	r6, r7
 8008e52:	d900      	bls.n	8008e56 <__ssputs_r+0x86>
 8008e54:	463e      	mov	r6, r7
 8008e56:	6820      	ldr	r0, [r4, #0]
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	f000 f966 	bl	800912c <memmove>
 8008e60:	68a3      	ldr	r3, [r4, #8]
 8008e62:	1b9b      	subs	r3, r3, r6
 8008e64:	60a3      	str	r3, [r4, #8]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	4433      	add	r3, r6
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e7db      	b.n	8008e28 <__ssputs_r+0x58>
 8008e70:	462a      	mov	r2, r5
 8008e72:	f000 f981 	bl	8009178 <_realloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1e1      	bne.n	8008e40 <__ssputs_r+0x70>
 8008e7c:	6921      	ldr	r1, [r4, #16]
 8008e7e:	4650      	mov	r0, sl
 8008e80:	f7ff fec6 	bl	8008c10 <_free_r>
 8008e84:	e7c7      	b.n	8008e16 <__ssputs_r+0x46>
	...

08008e88 <_svfiprintf_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4698      	mov	r8, r3
 8008e8e:	898b      	ldrh	r3, [r1, #12]
 8008e90:	061b      	lsls	r3, r3, #24
 8008e92:	b09d      	sub	sp, #116	; 0x74
 8008e94:	4607      	mov	r7, r0
 8008e96:	460d      	mov	r5, r1
 8008e98:	4614      	mov	r4, r2
 8008e9a:	d50e      	bpl.n	8008eba <_svfiprintf_r+0x32>
 8008e9c:	690b      	ldr	r3, [r1, #16]
 8008e9e:	b963      	cbnz	r3, 8008eba <_svfiprintf_r+0x32>
 8008ea0:	2140      	movs	r1, #64	; 0x40
 8008ea2:	f7ff ff21 	bl	8008ce8 <_malloc_r>
 8008ea6:	6028      	str	r0, [r5, #0]
 8008ea8:	6128      	str	r0, [r5, #16]
 8008eaa:	b920      	cbnz	r0, 8008eb6 <_svfiprintf_r+0x2e>
 8008eac:	230c      	movs	r3, #12
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	e0d1      	b.n	800905a <_svfiprintf_r+0x1d2>
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	616b      	str	r3, [r5, #20]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	2320      	movs	r3, #32
 8008ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec8:	2330      	movs	r3, #48	; 0x30
 8008eca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009074 <_svfiprintf_r+0x1ec>
 8008ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ed2:	f04f 0901 	mov.w	r9, #1
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	469a      	mov	sl, r3
 8008eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ede:	b10a      	cbz	r2, 8008ee4 <_svfiprintf_r+0x5c>
 8008ee0:	2a25      	cmp	r2, #37	; 0x25
 8008ee2:	d1f9      	bne.n	8008ed8 <_svfiprintf_r+0x50>
 8008ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee8:	d00b      	beq.n	8008f02 <_svfiprintf_r+0x7a>
 8008eea:	465b      	mov	r3, fp
 8008eec:	4622      	mov	r2, r4
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff ff6d 	bl	8008dd0 <__ssputs_r>
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f000 80aa 	beq.w	8009050 <_svfiprintf_r+0x1c8>
 8008efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efe:	445a      	add	r2, fp
 8008f00:	9209      	str	r2, [sp, #36]	; 0x24
 8008f02:	f89a 3000 	ldrb.w	r3, [sl]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 80a2 	beq.w	8009050 <_svfiprintf_r+0x1c8>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f16:	f10a 0a01 	add.w	sl, sl, #1
 8008f1a:	9304      	str	r3, [sp, #16]
 8008f1c:	9307      	str	r3, [sp, #28]
 8008f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f22:	931a      	str	r3, [sp, #104]	; 0x68
 8008f24:	4654      	mov	r4, sl
 8008f26:	2205      	movs	r2, #5
 8008f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2c:	4851      	ldr	r0, [pc, #324]	; (8009074 <_svfiprintf_r+0x1ec>)
 8008f2e:	f7f7 f98f 	bl	8000250 <memchr>
 8008f32:	9a04      	ldr	r2, [sp, #16]
 8008f34:	b9d8      	cbnz	r0, 8008f6e <_svfiprintf_r+0xe6>
 8008f36:	06d0      	lsls	r0, r2, #27
 8008f38:	bf44      	itt	mi
 8008f3a:	2320      	movmi	r3, #32
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f40:	0711      	lsls	r1, r2, #28
 8008f42:	bf44      	itt	mi
 8008f44:	232b      	movmi	r3, #43	; 0x2b
 8008f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d015      	beq.n	8008f7e <_svfiprintf_r+0xf6>
 8008f52:	9a07      	ldr	r2, [sp, #28]
 8008f54:	4654      	mov	r4, sl
 8008f56:	2000      	movs	r0, #0
 8008f58:	f04f 0c0a 	mov.w	ip, #10
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f62:	3b30      	subs	r3, #48	; 0x30
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d94e      	bls.n	8009006 <_svfiprintf_r+0x17e>
 8008f68:	b1b0      	cbz	r0, 8008f98 <_svfiprintf_r+0x110>
 8008f6a:	9207      	str	r2, [sp, #28]
 8008f6c:	e014      	b.n	8008f98 <_svfiprintf_r+0x110>
 8008f6e:	eba0 0308 	sub.w	r3, r0, r8
 8008f72:	fa09 f303 	lsl.w	r3, r9, r3
 8008f76:	4313      	orrs	r3, r2
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	46a2      	mov	sl, r4
 8008f7c:	e7d2      	b.n	8008f24 <_svfiprintf_r+0x9c>
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	1d19      	adds	r1, r3, #4
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	9103      	str	r1, [sp, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfbb      	ittet	lt
 8008f8a:	425b      	neglt	r3, r3
 8008f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f90:	9307      	strge	r3, [sp, #28]
 8008f92:	9307      	strlt	r3, [sp, #28]
 8008f94:	bfb8      	it	lt
 8008f96:	9204      	strlt	r2, [sp, #16]
 8008f98:	7823      	ldrb	r3, [r4, #0]
 8008f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f9c:	d10c      	bne.n	8008fb8 <_svfiprintf_r+0x130>
 8008f9e:	7863      	ldrb	r3, [r4, #1]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d135      	bne.n	8009010 <_svfiprintf_r+0x188>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	9203      	str	r2, [sp, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bfb8      	it	lt
 8008fb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fb4:	3402      	adds	r4, #2
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009084 <_svfiprintf_r+0x1fc>
 8008fbc:	7821      	ldrb	r1, [r4, #0]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f7f7 f945 	bl	8000250 <memchr>
 8008fc6:	b140      	cbz	r0, 8008fda <_svfiprintf_r+0x152>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	eba0 000a 	sub.w	r0, r0, sl
 8008fce:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	4303      	orrs	r3, r0
 8008fd6:	3401      	adds	r4, #1
 8008fd8:	9304      	str	r3, [sp, #16]
 8008fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fde:	4826      	ldr	r0, [pc, #152]	; (8009078 <_svfiprintf_r+0x1f0>)
 8008fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fe4:	2206      	movs	r2, #6
 8008fe6:	f7f7 f933 	bl	8000250 <memchr>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d038      	beq.n	8009060 <_svfiprintf_r+0x1d8>
 8008fee:	4b23      	ldr	r3, [pc, #140]	; (800907c <_svfiprintf_r+0x1f4>)
 8008ff0:	bb1b      	cbnz	r3, 800903a <_svfiprintf_r+0x1b2>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	3307      	adds	r3, #7
 8008ff6:	f023 0307 	bic.w	r3, r3, #7
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	4433      	add	r3, r6
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	e767      	b.n	8008ed6 <_svfiprintf_r+0x4e>
 8009006:	fb0c 3202 	mla	r2, ip, r2, r3
 800900a:	460c      	mov	r4, r1
 800900c:	2001      	movs	r0, #1
 800900e:	e7a5      	b.n	8008f5c <_svfiprintf_r+0xd4>
 8009010:	2300      	movs	r3, #0
 8009012:	3401      	adds	r4, #1
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	4619      	mov	r1, r3
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4620      	mov	r0, r4
 800901e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009022:	3a30      	subs	r2, #48	; 0x30
 8009024:	2a09      	cmp	r2, #9
 8009026:	d903      	bls.n	8009030 <_svfiprintf_r+0x1a8>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0c5      	beq.n	8008fb8 <_svfiprintf_r+0x130>
 800902c:	9105      	str	r1, [sp, #20]
 800902e:	e7c3      	b.n	8008fb8 <_svfiprintf_r+0x130>
 8009030:	fb0c 2101 	mla	r1, ip, r1, r2
 8009034:	4604      	mov	r4, r0
 8009036:	2301      	movs	r3, #1
 8009038:	e7f0      	b.n	800901c <_svfiprintf_r+0x194>
 800903a:	ab03      	add	r3, sp, #12
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	462a      	mov	r2, r5
 8009040:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <_svfiprintf_r+0x1f8>)
 8009042:	a904      	add	r1, sp, #16
 8009044:	4638      	mov	r0, r7
 8009046:	f7fe f86f 	bl	8007128 <_printf_float>
 800904a:	1c42      	adds	r2, r0, #1
 800904c:	4606      	mov	r6, r0
 800904e:	d1d6      	bne.n	8008ffe <_svfiprintf_r+0x176>
 8009050:	89ab      	ldrh	r3, [r5, #12]
 8009052:	065b      	lsls	r3, r3, #25
 8009054:	f53f af2c 	bmi.w	8008eb0 <_svfiprintf_r+0x28>
 8009058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800905a:	b01d      	add	sp, #116	; 0x74
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	ab03      	add	r3, sp, #12
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	462a      	mov	r2, r5
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <_svfiprintf_r+0x1f8>)
 8009068:	a904      	add	r1, sp, #16
 800906a:	4638      	mov	r0, r7
 800906c:	f7fe fae8 	bl	8007640 <_printf_i>
 8009070:	e7eb      	b.n	800904a <_svfiprintf_r+0x1c2>
 8009072:	bf00      	nop
 8009074:	08009ee4 	.word	0x08009ee4
 8009078:	08009eee 	.word	0x08009eee
 800907c:	08007129 	.word	0x08007129
 8009080:	08008dd1 	.word	0x08008dd1
 8009084:	08009eea 	.word	0x08009eea

08009088 <_sbrk_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	; (80090a4 <_sbrk_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f8 fce4 	bl	8001a60 <_sbrk>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_sbrk_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_sbrk_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200008d8 	.word	0x200008d8

080090a8 <__assert_func>:
 80090a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090aa:	4614      	mov	r4, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <__assert_func+0x2c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4605      	mov	r5, r0
 80090b4:	68d8      	ldr	r0, [r3, #12]
 80090b6:	b14c      	cbz	r4, 80090cc <__assert_func+0x24>
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <__assert_func+0x30>)
 80090ba:	9100      	str	r1, [sp, #0]
 80090bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090c0:	4906      	ldr	r1, [pc, #24]	; (80090dc <__assert_func+0x34>)
 80090c2:	462b      	mov	r3, r5
 80090c4:	f000 f80e 	bl	80090e4 <fiprintf>
 80090c8:	f000 faac 	bl	8009624 <abort>
 80090cc:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <__assert_func+0x38>)
 80090ce:	461c      	mov	r4, r3
 80090d0:	e7f3      	b.n	80090ba <__assert_func+0x12>
 80090d2:	bf00      	nop
 80090d4:	20000048 	.word	0x20000048
 80090d8:	08009ef5 	.word	0x08009ef5
 80090dc:	08009f02 	.word	0x08009f02
 80090e0:	08009f30 	.word	0x08009f30

080090e4 <fiprintf>:
 80090e4:	b40e      	push	{r1, r2, r3}
 80090e6:	b503      	push	{r0, r1, lr}
 80090e8:	4601      	mov	r1, r0
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	4805      	ldr	r0, [pc, #20]	; (8009104 <fiprintf+0x20>)
 80090ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f2:	6800      	ldr	r0, [r0, #0]
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f000 f897 	bl	8009228 <_vfiprintf_r>
 80090fa:	b002      	add	sp, #8
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	20000048 	.word	0x20000048

08009108 <__ascii_mbtowc>:
 8009108:	b082      	sub	sp, #8
 800910a:	b901      	cbnz	r1, 800910e <__ascii_mbtowc+0x6>
 800910c:	a901      	add	r1, sp, #4
 800910e:	b142      	cbz	r2, 8009122 <__ascii_mbtowc+0x1a>
 8009110:	b14b      	cbz	r3, 8009126 <__ascii_mbtowc+0x1e>
 8009112:	7813      	ldrb	r3, [r2, #0]
 8009114:	600b      	str	r3, [r1, #0]
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	1e10      	subs	r0, r2, #0
 800911a:	bf18      	it	ne
 800911c:	2001      	movne	r0, #1
 800911e:	b002      	add	sp, #8
 8009120:	4770      	bx	lr
 8009122:	4610      	mov	r0, r2
 8009124:	e7fb      	b.n	800911e <__ascii_mbtowc+0x16>
 8009126:	f06f 0001 	mvn.w	r0, #1
 800912a:	e7f8      	b.n	800911e <__ascii_mbtowc+0x16>

0800912c <memmove>:
 800912c:	4288      	cmp	r0, r1
 800912e:	b510      	push	{r4, lr}
 8009130:	eb01 0402 	add.w	r4, r1, r2
 8009134:	d902      	bls.n	800913c <memmove+0x10>
 8009136:	4284      	cmp	r4, r0
 8009138:	4623      	mov	r3, r4
 800913a:	d807      	bhi.n	800914c <memmove+0x20>
 800913c:	1e43      	subs	r3, r0, #1
 800913e:	42a1      	cmp	r1, r4
 8009140:	d008      	beq.n	8009154 <memmove+0x28>
 8009142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800914a:	e7f8      	b.n	800913e <memmove+0x12>
 800914c:	4402      	add	r2, r0
 800914e:	4601      	mov	r1, r0
 8009150:	428a      	cmp	r2, r1
 8009152:	d100      	bne.n	8009156 <memmove+0x2a>
 8009154:	bd10      	pop	{r4, pc}
 8009156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800915a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800915e:	e7f7      	b.n	8009150 <memmove+0x24>

08009160 <__malloc_lock>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__malloc_lock+0x8>)
 8009162:	f000 bc1f 	b.w	80099a4 <__retarget_lock_acquire_recursive>
 8009166:	bf00      	nop
 8009168:	200008dc 	.word	0x200008dc

0800916c <__malloc_unlock>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__malloc_unlock+0x8>)
 800916e:	f000 bc1a 	b.w	80099a6 <__retarget_lock_release_recursive>
 8009172:	bf00      	nop
 8009174:	200008dc 	.word	0x200008dc

08009178 <_realloc_r>:
 8009178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917c:	4680      	mov	r8, r0
 800917e:	4614      	mov	r4, r2
 8009180:	460e      	mov	r6, r1
 8009182:	b921      	cbnz	r1, 800918e <_realloc_r+0x16>
 8009184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	4611      	mov	r1, r2
 800918a:	f7ff bdad 	b.w	8008ce8 <_malloc_r>
 800918e:	b92a      	cbnz	r2, 800919c <_realloc_r+0x24>
 8009190:	f7ff fd3e 	bl	8008c10 <_free_r>
 8009194:	4625      	mov	r5, r4
 8009196:	4628      	mov	r0, r5
 8009198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800919c:	f000 fc6a 	bl	8009a74 <_malloc_usable_size_r>
 80091a0:	4284      	cmp	r4, r0
 80091a2:	4607      	mov	r7, r0
 80091a4:	d802      	bhi.n	80091ac <_realloc_r+0x34>
 80091a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091aa:	d812      	bhi.n	80091d2 <_realloc_r+0x5a>
 80091ac:	4621      	mov	r1, r4
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff fd9a 	bl	8008ce8 <_malloc_r>
 80091b4:	4605      	mov	r5, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0ed      	beq.n	8009196 <_realloc_r+0x1e>
 80091ba:	42bc      	cmp	r4, r7
 80091bc:	4622      	mov	r2, r4
 80091be:	4631      	mov	r1, r6
 80091c0:	bf28      	it	cs
 80091c2:	463a      	movcs	r2, r7
 80091c4:	f7fd ff0a 	bl	8006fdc <memcpy>
 80091c8:	4631      	mov	r1, r6
 80091ca:	4640      	mov	r0, r8
 80091cc:	f7ff fd20 	bl	8008c10 <_free_r>
 80091d0:	e7e1      	b.n	8009196 <_realloc_r+0x1e>
 80091d2:	4635      	mov	r5, r6
 80091d4:	e7df      	b.n	8009196 <_realloc_r+0x1e>

080091d6 <__sfputc_r>:
 80091d6:	6893      	ldr	r3, [r2, #8]
 80091d8:	3b01      	subs	r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	b410      	push	{r4}
 80091de:	6093      	str	r3, [r2, #8]
 80091e0:	da08      	bge.n	80091f4 <__sfputc_r+0x1e>
 80091e2:	6994      	ldr	r4, [r2, #24]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	db01      	blt.n	80091ec <__sfputc_r+0x16>
 80091e8:	290a      	cmp	r1, #10
 80091ea:	d103      	bne.n	80091f4 <__sfputc_r+0x1e>
 80091ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f0:	f000 b94a 	b.w	8009488 <__swbuf_r>
 80091f4:	6813      	ldr	r3, [r2, #0]
 80091f6:	1c58      	adds	r0, r3, #1
 80091f8:	6010      	str	r0, [r2, #0]
 80091fa:	7019      	strb	r1, [r3, #0]
 80091fc:	4608      	mov	r0, r1
 80091fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009202:	4770      	bx	lr

08009204 <__sfputs_r>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	4614      	mov	r4, r2
 800920c:	18d5      	adds	r5, r2, r3
 800920e:	42ac      	cmp	r4, r5
 8009210:	d101      	bne.n	8009216 <__sfputs_r+0x12>
 8009212:	2000      	movs	r0, #0
 8009214:	e007      	b.n	8009226 <__sfputs_r+0x22>
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	463a      	mov	r2, r7
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff ffda 	bl	80091d6 <__sfputc_r>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	d1f3      	bne.n	800920e <__sfputs_r+0xa>
 8009226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009228 <_vfiprintf_r>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	460d      	mov	r5, r1
 800922e:	b09d      	sub	sp, #116	; 0x74
 8009230:	4614      	mov	r4, r2
 8009232:	4698      	mov	r8, r3
 8009234:	4606      	mov	r6, r0
 8009236:	b118      	cbz	r0, 8009240 <_vfiprintf_r+0x18>
 8009238:	6983      	ldr	r3, [r0, #24]
 800923a:	b90b      	cbnz	r3, 8009240 <_vfiprintf_r+0x18>
 800923c:	f000 fb14 	bl	8009868 <__sinit>
 8009240:	4b89      	ldr	r3, [pc, #548]	; (8009468 <_vfiprintf_r+0x240>)
 8009242:	429d      	cmp	r5, r3
 8009244:	d11b      	bne.n	800927e <_vfiprintf_r+0x56>
 8009246:	6875      	ldr	r5, [r6, #4]
 8009248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800924a:	07d9      	lsls	r1, r3, #31
 800924c:	d405      	bmi.n	800925a <_vfiprintf_r+0x32>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	059a      	lsls	r2, r3, #22
 8009252:	d402      	bmi.n	800925a <_vfiprintf_r+0x32>
 8009254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009256:	f000 fba5 	bl	80099a4 <__retarget_lock_acquire_recursive>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	071b      	lsls	r3, r3, #28
 800925e:	d501      	bpl.n	8009264 <_vfiprintf_r+0x3c>
 8009260:	692b      	ldr	r3, [r5, #16]
 8009262:	b9eb      	cbnz	r3, 80092a0 <_vfiprintf_r+0x78>
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f000 f96e 	bl	8009548 <__swsetup_r>
 800926c:	b1c0      	cbz	r0, 80092a0 <_vfiprintf_r+0x78>
 800926e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009270:	07dc      	lsls	r4, r3, #31
 8009272:	d50e      	bpl.n	8009292 <_vfiprintf_r+0x6a>
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	b01d      	add	sp, #116	; 0x74
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	4b7b      	ldr	r3, [pc, #492]	; (800946c <_vfiprintf_r+0x244>)
 8009280:	429d      	cmp	r5, r3
 8009282:	d101      	bne.n	8009288 <_vfiprintf_r+0x60>
 8009284:	68b5      	ldr	r5, [r6, #8]
 8009286:	e7df      	b.n	8009248 <_vfiprintf_r+0x20>
 8009288:	4b79      	ldr	r3, [pc, #484]	; (8009470 <_vfiprintf_r+0x248>)
 800928a:	429d      	cmp	r5, r3
 800928c:	bf08      	it	eq
 800928e:	68f5      	ldreq	r5, [r6, #12]
 8009290:	e7da      	b.n	8009248 <_vfiprintf_r+0x20>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	0598      	lsls	r0, r3, #22
 8009296:	d4ed      	bmi.n	8009274 <_vfiprintf_r+0x4c>
 8009298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800929a:	f000 fb84 	bl	80099a6 <__retarget_lock_release_recursive>
 800929e:	e7e9      	b.n	8009274 <_vfiprintf_r+0x4c>
 80092a0:	2300      	movs	r3, #0
 80092a2:	9309      	str	r3, [sp, #36]	; 0x24
 80092a4:	2320      	movs	r3, #32
 80092a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ae:	2330      	movs	r3, #48	; 0x30
 80092b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009474 <_vfiprintf_r+0x24c>
 80092b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092b8:	f04f 0901 	mov.w	r9, #1
 80092bc:	4623      	mov	r3, r4
 80092be:	469a      	mov	sl, r3
 80092c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c4:	b10a      	cbz	r2, 80092ca <_vfiprintf_r+0xa2>
 80092c6:	2a25      	cmp	r2, #37	; 0x25
 80092c8:	d1f9      	bne.n	80092be <_vfiprintf_r+0x96>
 80092ca:	ebba 0b04 	subs.w	fp, sl, r4
 80092ce:	d00b      	beq.n	80092e8 <_vfiprintf_r+0xc0>
 80092d0:	465b      	mov	r3, fp
 80092d2:	4622      	mov	r2, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff ff94 	bl	8009204 <__sfputs_r>
 80092dc:	3001      	adds	r0, #1
 80092de:	f000 80aa 	beq.w	8009436 <_vfiprintf_r+0x20e>
 80092e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e4:	445a      	add	r2, fp
 80092e6:	9209      	str	r2, [sp, #36]	; 0x24
 80092e8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80a2 	beq.w	8009436 <_vfiprintf_r+0x20e>
 80092f2:	2300      	movs	r3, #0
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295
 80092f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092fc:	f10a 0a01 	add.w	sl, sl, #1
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9307      	str	r3, [sp, #28]
 8009304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009308:	931a      	str	r3, [sp, #104]	; 0x68
 800930a:	4654      	mov	r4, sl
 800930c:	2205      	movs	r2, #5
 800930e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009312:	4858      	ldr	r0, [pc, #352]	; (8009474 <_vfiprintf_r+0x24c>)
 8009314:	f7f6 ff9c 	bl	8000250 <memchr>
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	b9d8      	cbnz	r0, 8009354 <_vfiprintf_r+0x12c>
 800931c:	06d1      	lsls	r1, r2, #27
 800931e:	bf44      	itt	mi
 8009320:	2320      	movmi	r3, #32
 8009322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009326:	0713      	lsls	r3, r2, #28
 8009328:	bf44      	itt	mi
 800932a:	232b      	movmi	r3, #43	; 0x2b
 800932c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009330:	f89a 3000 	ldrb.w	r3, [sl]
 8009334:	2b2a      	cmp	r3, #42	; 0x2a
 8009336:	d015      	beq.n	8009364 <_vfiprintf_r+0x13c>
 8009338:	9a07      	ldr	r2, [sp, #28]
 800933a:	4654      	mov	r4, sl
 800933c:	2000      	movs	r0, #0
 800933e:	f04f 0c0a 	mov.w	ip, #10
 8009342:	4621      	mov	r1, r4
 8009344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009348:	3b30      	subs	r3, #48	; 0x30
 800934a:	2b09      	cmp	r3, #9
 800934c:	d94e      	bls.n	80093ec <_vfiprintf_r+0x1c4>
 800934e:	b1b0      	cbz	r0, 800937e <_vfiprintf_r+0x156>
 8009350:	9207      	str	r2, [sp, #28]
 8009352:	e014      	b.n	800937e <_vfiprintf_r+0x156>
 8009354:	eba0 0308 	sub.w	r3, r0, r8
 8009358:	fa09 f303 	lsl.w	r3, r9, r3
 800935c:	4313      	orrs	r3, r2
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	46a2      	mov	sl, r4
 8009362:	e7d2      	b.n	800930a <_vfiprintf_r+0xe2>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	1d19      	adds	r1, r3, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	9103      	str	r1, [sp, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	bfbb      	ittet	lt
 8009370:	425b      	neglt	r3, r3
 8009372:	f042 0202 	orrlt.w	r2, r2, #2
 8009376:	9307      	strge	r3, [sp, #28]
 8009378:	9307      	strlt	r3, [sp, #28]
 800937a:	bfb8      	it	lt
 800937c:	9204      	strlt	r2, [sp, #16]
 800937e:	7823      	ldrb	r3, [r4, #0]
 8009380:	2b2e      	cmp	r3, #46	; 0x2e
 8009382:	d10c      	bne.n	800939e <_vfiprintf_r+0x176>
 8009384:	7863      	ldrb	r3, [r4, #1]
 8009386:	2b2a      	cmp	r3, #42	; 0x2a
 8009388:	d135      	bne.n	80093f6 <_vfiprintf_r+0x1ce>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9203      	str	r2, [sp, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfb8      	it	lt
 8009396:	f04f 33ff 	movlt.w	r3, #4294967295
 800939a:	3402      	adds	r4, #2
 800939c:	9305      	str	r3, [sp, #20]
 800939e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009484 <_vfiprintf_r+0x25c>
 80093a2:	7821      	ldrb	r1, [r4, #0]
 80093a4:	2203      	movs	r2, #3
 80093a6:	4650      	mov	r0, sl
 80093a8:	f7f6 ff52 	bl	8000250 <memchr>
 80093ac:	b140      	cbz	r0, 80093c0 <_vfiprintf_r+0x198>
 80093ae:	2340      	movs	r3, #64	; 0x40
 80093b0:	eba0 000a 	sub.w	r0, r0, sl
 80093b4:	fa03 f000 	lsl.w	r0, r3, r0
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	4303      	orrs	r3, r0
 80093bc:	3401      	adds	r4, #1
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c4:	482c      	ldr	r0, [pc, #176]	; (8009478 <_vfiprintf_r+0x250>)
 80093c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ca:	2206      	movs	r2, #6
 80093cc:	f7f6 ff40 	bl	8000250 <memchr>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d03f      	beq.n	8009454 <_vfiprintf_r+0x22c>
 80093d4:	4b29      	ldr	r3, [pc, #164]	; (800947c <_vfiprintf_r+0x254>)
 80093d6:	bb1b      	cbnz	r3, 8009420 <_vfiprintf_r+0x1f8>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	3307      	adds	r3, #7
 80093dc:	f023 0307 	bic.w	r3, r3, #7
 80093e0:	3308      	adds	r3, #8
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	443b      	add	r3, r7
 80093e8:	9309      	str	r3, [sp, #36]	; 0x24
 80093ea:	e767      	b.n	80092bc <_vfiprintf_r+0x94>
 80093ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f0:	460c      	mov	r4, r1
 80093f2:	2001      	movs	r0, #1
 80093f4:	e7a5      	b.n	8009342 <_vfiprintf_r+0x11a>
 80093f6:	2300      	movs	r3, #0
 80093f8:	3401      	adds	r4, #1
 80093fa:	9305      	str	r3, [sp, #20]
 80093fc:	4619      	mov	r1, r3
 80093fe:	f04f 0c0a 	mov.w	ip, #10
 8009402:	4620      	mov	r0, r4
 8009404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009408:	3a30      	subs	r2, #48	; 0x30
 800940a:	2a09      	cmp	r2, #9
 800940c:	d903      	bls.n	8009416 <_vfiprintf_r+0x1ee>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0c5      	beq.n	800939e <_vfiprintf_r+0x176>
 8009412:	9105      	str	r1, [sp, #20]
 8009414:	e7c3      	b.n	800939e <_vfiprintf_r+0x176>
 8009416:	fb0c 2101 	mla	r1, ip, r1, r2
 800941a:	4604      	mov	r4, r0
 800941c:	2301      	movs	r3, #1
 800941e:	e7f0      	b.n	8009402 <_vfiprintf_r+0x1da>
 8009420:	ab03      	add	r3, sp, #12
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	462a      	mov	r2, r5
 8009426:	4b16      	ldr	r3, [pc, #88]	; (8009480 <_vfiprintf_r+0x258>)
 8009428:	a904      	add	r1, sp, #16
 800942a:	4630      	mov	r0, r6
 800942c:	f7fd fe7c 	bl	8007128 <_printf_float>
 8009430:	4607      	mov	r7, r0
 8009432:	1c78      	adds	r0, r7, #1
 8009434:	d1d6      	bne.n	80093e4 <_vfiprintf_r+0x1bc>
 8009436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009438:	07d9      	lsls	r1, r3, #31
 800943a:	d405      	bmi.n	8009448 <_vfiprintf_r+0x220>
 800943c:	89ab      	ldrh	r3, [r5, #12]
 800943e:	059a      	lsls	r2, r3, #22
 8009440:	d402      	bmi.n	8009448 <_vfiprintf_r+0x220>
 8009442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009444:	f000 faaf 	bl	80099a6 <__retarget_lock_release_recursive>
 8009448:	89ab      	ldrh	r3, [r5, #12]
 800944a:	065b      	lsls	r3, r3, #25
 800944c:	f53f af12 	bmi.w	8009274 <_vfiprintf_r+0x4c>
 8009450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009452:	e711      	b.n	8009278 <_vfiprintf_r+0x50>
 8009454:	ab03      	add	r3, sp, #12
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	462a      	mov	r2, r5
 800945a:	4b09      	ldr	r3, [pc, #36]	; (8009480 <_vfiprintf_r+0x258>)
 800945c:	a904      	add	r1, sp, #16
 800945e:	4630      	mov	r0, r6
 8009460:	f7fe f8ee 	bl	8007640 <_printf_i>
 8009464:	e7e4      	b.n	8009430 <_vfiprintf_r+0x208>
 8009466:	bf00      	nop
 8009468:	0800a05c 	.word	0x0800a05c
 800946c:	0800a07c 	.word	0x0800a07c
 8009470:	0800a03c 	.word	0x0800a03c
 8009474:	08009ee4 	.word	0x08009ee4
 8009478:	08009eee 	.word	0x08009eee
 800947c:	08007129 	.word	0x08007129
 8009480:	08009205 	.word	0x08009205
 8009484:	08009eea 	.word	0x08009eea

08009488 <__swbuf_r>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	460e      	mov	r6, r1
 800948c:	4614      	mov	r4, r2
 800948e:	4605      	mov	r5, r0
 8009490:	b118      	cbz	r0, 800949a <__swbuf_r+0x12>
 8009492:	6983      	ldr	r3, [r0, #24]
 8009494:	b90b      	cbnz	r3, 800949a <__swbuf_r+0x12>
 8009496:	f000 f9e7 	bl	8009868 <__sinit>
 800949a:	4b21      	ldr	r3, [pc, #132]	; (8009520 <__swbuf_r+0x98>)
 800949c:	429c      	cmp	r4, r3
 800949e:	d12b      	bne.n	80094f8 <__swbuf_r+0x70>
 80094a0:	686c      	ldr	r4, [r5, #4]
 80094a2:	69a3      	ldr	r3, [r4, #24]
 80094a4:	60a3      	str	r3, [r4, #8]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	071a      	lsls	r2, r3, #28
 80094aa:	d52f      	bpl.n	800950c <__swbuf_r+0x84>
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	b36b      	cbz	r3, 800950c <__swbuf_r+0x84>
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	1ac0      	subs	r0, r0, r3
 80094b6:	6963      	ldr	r3, [r4, #20]
 80094b8:	b2f6      	uxtb	r6, r6
 80094ba:	4283      	cmp	r3, r0
 80094bc:	4637      	mov	r7, r6
 80094be:	dc04      	bgt.n	80094ca <__swbuf_r+0x42>
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 f93c 	bl	8009740 <_fflush_r>
 80094c8:	bb30      	cbnz	r0, 8009518 <__swbuf_r+0x90>
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	60a3      	str	r3, [r4, #8]
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	701e      	strb	r6, [r3, #0]
 80094d8:	6963      	ldr	r3, [r4, #20]
 80094da:	3001      	adds	r0, #1
 80094dc:	4283      	cmp	r3, r0
 80094de:	d004      	beq.n	80094ea <__swbuf_r+0x62>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	07db      	lsls	r3, r3, #31
 80094e4:	d506      	bpl.n	80094f4 <__swbuf_r+0x6c>
 80094e6:	2e0a      	cmp	r6, #10
 80094e8:	d104      	bne.n	80094f4 <__swbuf_r+0x6c>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4628      	mov	r0, r5
 80094ee:	f000 f927 	bl	8009740 <_fflush_r>
 80094f2:	b988      	cbnz	r0, 8009518 <__swbuf_r+0x90>
 80094f4:	4638      	mov	r0, r7
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <__swbuf_r+0x9c>)
 80094fa:	429c      	cmp	r4, r3
 80094fc:	d101      	bne.n	8009502 <__swbuf_r+0x7a>
 80094fe:	68ac      	ldr	r4, [r5, #8]
 8009500:	e7cf      	b.n	80094a2 <__swbuf_r+0x1a>
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <__swbuf_r+0xa0>)
 8009504:	429c      	cmp	r4, r3
 8009506:	bf08      	it	eq
 8009508:	68ec      	ldreq	r4, [r5, #12]
 800950a:	e7ca      	b.n	80094a2 <__swbuf_r+0x1a>
 800950c:	4621      	mov	r1, r4
 800950e:	4628      	mov	r0, r5
 8009510:	f000 f81a 	bl	8009548 <__swsetup_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	d0cb      	beq.n	80094b0 <__swbuf_r+0x28>
 8009518:	f04f 37ff 	mov.w	r7, #4294967295
 800951c:	e7ea      	b.n	80094f4 <__swbuf_r+0x6c>
 800951e:	bf00      	nop
 8009520:	0800a05c 	.word	0x0800a05c
 8009524:	0800a07c 	.word	0x0800a07c
 8009528:	0800a03c 	.word	0x0800a03c

0800952c <__ascii_wctomb>:
 800952c:	b149      	cbz	r1, 8009542 <__ascii_wctomb+0x16>
 800952e:	2aff      	cmp	r2, #255	; 0xff
 8009530:	bf85      	ittet	hi
 8009532:	238a      	movhi	r3, #138	; 0x8a
 8009534:	6003      	strhi	r3, [r0, #0]
 8009536:	700a      	strbls	r2, [r1, #0]
 8009538:	f04f 30ff 	movhi.w	r0, #4294967295
 800953c:	bf98      	it	ls
 800953e:	2001      	movls	r0, #1
 8009540:	4770      	bx	lr
 8009542:	4608      	mov	r0, r1
 8009544:	4770      	bx	lr
	...

08009548 <__swsetup_r>:
 8009548:	4b32      	ldr	r3, [pc, #200]	; (8009614 <__swsetup_r+0xcc>)
 800954a:	b570      	push	{r4, r5, r6, lr}
 800954c:	681d      	ldr	r5, [r3, #0]
 800954e:	4606      	mov	r6, r0
 8009550:	460c      	mov	r4, r1
 8009552:	b125      	cbz	r5, 800955e <__swsetup_r+0x16>
 8009554:	69ab      	ldr	r3, [r5, #24]
 8009556:	b913      	cbnz	r3, 800955e <__swsetup_r+0x16>
 8009558:	4628      	mov	r0, r5
 800955a:	f000 f985 	bl	8009868 <__sinit>
 800955e:	4b2e      	ldr	r3, [pc, #184]	; (8009618 <__swsetup_r+0xd0>)
 8009560:	429c      	cmp	r4, r3
 8009562:	d10f      	bne.n	8009584 <__swsetup_r+0x3c>
 8009564:	686c      	ldr	r4, [r5, #4]
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800956c:	0719      	lsls	r1, r3, #28
 800956e:	d42c      	bmi.n	80095ca <__swsetup_r+0x82>
 8009570:	06dd      	lsls	r5, r3, #27
 8009572:	d411      	bmi.n	8009598 <__swsetup_r+0x50>
 8009574:	2309      	movs	r3, #9
 8009576:	6033      	str	r3, [r6, #0]
 8009578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	f04f 30ff 	mov.w	r0, #4294967295
 8009582:	e03e      	b.n	8009602 <__swsetup_r+0xba>
 8009584:	4b25      	ldr	r3, [pc, #148]	; (800961c <__swsetup_r+0xd4>)
 8009586:	429c      	cmp	r4, r3
 8009588:	d101      	bne.n	800958e <__swsetup_r+0x46>
 800958a:	68ac      	ldr	r4, [r5, #8]
 800958c:	e7eb      	b.n	8009566 <__swsetup_r+0x1e>
 800958e:	4b24      	ldr	r3, [pc, #144]	; (8009620 <__swsetup_r+0xd8>)
 8009590:	429c      	cmp	r4, r3
 8009592:	bf08      	it	eq
 8009594:	68ec      	ldreq	r4, [r5, #12]
 8009596:	e7e6      	b.n	8009566 <__swsetup_r+0x1e>
 8009598:	0758      	lsls	r0, r3, #29
 800959a:	d512      	bpl.n	80095c2 <__swsetup_r+0x7a>
 800959c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959e:	b141      	cbz	r1, 80095b2 <__swsetup_r+0x6a>
 80095a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a4:	4299      	cmp	r1, r3
 80095a6:	d002      	beq.n	80095ae <__swsetup_r+0x66>
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff fb31 	bl	8008c10 <_free_r>
 80095ae:	2300      	movs	r3, #0
 80095b0:	6363      	str	r3, [r4, #52]	; 0x34
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	2300      	movs	r3, #0
 80095bc:	6063      	str	r3, [r4, #4]
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f043 0308 	orr.w	r3, r3, #8
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	b94b      	cbnz	r3, 80095e2 <__swsetup_r+0x9a>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095d8:	d003      	beq.n	80095e2 <__swsetup_r+0x9a>
 80095da:	4621      	mov	r1, r4
 80095dc:	4630      	mov	r0, r6
 80095de:	f000 fa09 	bl	80099f4 <__smakebuf_r>
 80095e2:	89a0      	ldrh	r0, [r4, #12]
 80095e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095e8:	f010 0301 	ands.w	r3, r0, #1
 80095ec:	d00a      	beq.n	8009604 <__swsetup_r+0xbc>
 80095ee:	2300      	movs	r3, #0
 80095f0:	60a3      	str	r3, [r4, #8]
 80095f2:	6963      	ldr	r3, [r4, #20]
 80095f4:	425b      	negs	r3, r3
 80095f6:	61a3      	str	r3, [r4, #24]
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	b943      	cbnz	r3, 800960e <__swsetup_r+0xc6>
 80095fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009600:	d1ba      	bne.n	8009578 <__swsetup_r+0x30>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	0781      	lsls	r1, r0, #30
 8009606:	bf58      	it	pl
 8009608:	6963      	ldrpl	r3, [r4, #20]
 800960a:	60a3      	str	r3, [r4, #8]
 800960c:	e7f4      	b.n	80095f8 <__swsetup_r+0xb0>
 800960e:	2000      	movs	r0, #0
 8009610:	e7f7      	b.n	8009602 <__swsetup_r+0xba>
 8009612:	bf00      	nop
 8009614:	20000048 	.word	0x20000048
 8009618:	0800a05c 	.word	0x0800a05c
 800961c:	0800a07c 	.word	0x0800a07c
 8009620:	0800a03c 	.word	0x0800a03c

08009624 <abort>:
 8009624:	b508      	push	{r3, lr}
 8009626:	2006      	movs	r0, #6
 8009628:	f000 fa54 	bl	8009ad4 <raise>
 800962c:	2001      	movs	r0, #1
 800962e:	f7f8 f99f 	bl	8001970 <_exit>
	...

08009634 <__sflush_r>:
 8009634:	898a      	ldrh	r2, [r1, #12]
 8009636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963a:	4605      	mov	r5, r0
 800963c:	0710      	lsls	r0, r2, #28
 800963e:	460c      	mov	r4, r1
 8009640:	d458      	bmi.n	80096f4 <__sflush_r+0xc0>
 8009642:	684b      	ldr	r3, [r1, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	dc05      	bgt.n	8009654 <__sflush_r+0x20>
 8009648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800964a:	2b00      	cmp	r3, #0
 800964c:	dc02      	bgt.n	8009654 <__sflush_r+0x20>
 800964e:	2000      	movs	r0, #0
 8009650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009656:	2e00      	cmp	r6, #0
 8009658:	d0f9      	beq.n	800964e <__sflush_r+0x1a>
 800965a:	2300      	movs	r3, #0
 800965c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009660:	682f      	ldr	r7, [r5, #0]
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	d032      	beq.n	80096cc <__sflush_r+0x98>
 8009666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	075a      	lsls	r2, r3, #29
 800966c:	d505      	bpl.n	800967a <__sflush_r+0x46>
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	1ac0      	subs	r0, r0, r3
 8009672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009674:	b10b      	cbz	r3, 800967a <__sflush_r+0x46>
 8009676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009678:	1ac0      	subs	r0, r0, r3
 800967a:	2300      	movs	r3, #0
 800967c:	4602      	mov	r2, r0
 800967e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009680:	6a21      	ldr	r1, [r4, #32]
 8009682:	4628      	mov	r0, r5
 8009684:	47b0      	blx	r6
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	d106      	bne.n	800969a <__sflush_r+0x66>
 800968c:	6829      	ldr	r1, [r5, #0]
 800968e:	291d      	cmp	r1, #29
 8009690:	d82c      	bhi.n	80096ec <__sflush_r+0xb8>
 8009692:	4a2a      	ldr	r2, [pc, #168]	; (800973c <__sflush_r+0x108>)
 8009694:	40ca      	lsrs	r2, r1
 8009696:	07d6      	lsls	r6, r2, #31
 8009698:	d528      	bpl.n	80096ec <__sflush_r+0xb8>
 800969a:	2200      	movs	r2, #0
 800969c:	6062      	str	r2, [r4, #4]
 800969e:	04d9      	lsls	r1, r3, #19
 80096a0:	6922      	ldr	r2, [r4, #16]
 80096a2:	6022      	str	r2, [r4, #0]
 80096a4:	d504      	bpl.n	80096b0 <__sflush_r+0x7c>
 80096a6:	1c42      	adds	r2, r0, #1
 80096a8:	d101      	bne.n	80096ae <__sflush_r+0x7a>
 80096aa:	682b      	ldr	r3, [r5, #0]
 80096ac:	b903      	cbnz	r3, 80096b0 <__sflush_r+0x7c>
 80096ae:	6560      	str	r0, [r4, #84]	; 0x54
 80096b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096b2:	602f      	str	r7, [r5, #0]
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d0ca      	beq.n	800964e <__sflush_r+0x1a>
 80096b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096bc:	4299      	cmp	r1, r3
 80096be:	d002      	beq.n	80096c6 <__sflush_r+0x92>
 80096c0:	4628      	mov	r0, r5
 80096c2:	f7ff faa5 	bl	8008c10 <_free_r>
 80096c6:	2000      	movs	r0, #0
 80096c8:	6360      	str	r0, [r4, #52]	; 0x34
 80096ca:	e7c1      	b.n	8009650 <__sflush_r+0x1c>
 80096cc:	6a21      	ldr	r1, [r4, #32]
 80096ce:	2301      	movs	r3, #1
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b0      	blx	r6
 80096d4:	1c41      	adds	r1, r0, #1
 80096d6:	d1c7      	bne.n	8009668 <__sflush_r+0x34>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0c4      	beq.n	8009668 <__sflush_r+0x34>
 80096de:	2b1d      	cmp	r3, #29
 80096e0:	d001      	beq.n	80096e6 <__sflush_r+0xb2>
 80096e2:	2b16      	cmp	r3, #22
 80096e4:	d101      	bne.n	80096ea <__sflush_r+0xb6>
 80096e6:	602f      	str	r7, [r5, #0]
 80096e8:	e7b1      	b.n	800964e <__sflush_r+0x1a>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	e7ad      	b.n	8009650 <__sflush_r+0x1c>
 80096f4:	690f      	ldr	r7, [r1, #16]
 80096f6:	2f00      	cmp	r7, #0
 80096f8:	d0a9      	beq.n	800964e <__sflush_r+0x1a>
 80096fa:	0793      	lsls	r3, r2, #30
 80096fc:	680e      	ldr	r6, [r1, #0]
 80096fe:	bf08      	it	eq
 8009700:	694b      	ldreq	r3, [r1, #20]
 8009702:	600f      	str	r7, [r1, #0]
 8009704:	bf18      	it	ne
 8009706:	2300      	movne	r3, #0
 8009708:	eba6 0807 	sub.w	r8, r6, r7
 800970c:	608b      	str	r3, [r1, #8]
 800970e:	f1b8 0f00 	cmp.w	r8, #0
 8009712:	dd9c      	ble.n	800964e <__sflush_r+0x1a>
 8009714:	6a21      	ldr	r1, [r4, #32]
 8009716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009718:	4643      	mov	r3, r8
 800971a:	463a      	mov	r2, r7
 800971c:	4628      	mov	r0, r5
 800971e:	47b0      	blx	r6
 8009720:	2800      	cmp	r0, #0
 8009722:	dc06      	bgt.n	8009732 <__sflush_r+0xfe>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	e78e      	b.n	8009650 <__sflush_r+0x1c>
 8009732:	4407      	add	r7, r0
 8009734:	eba8 0800 	sub.w	r8, r8, r0
 8009738:	e7e9      	b.n	800970e <__sflush_r+0xda>
 800973a:	bf00      	nop
 800973c:	20400001 	.word	0x20400001

08009740 <_fflush_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	690b      	ldr	r3, [r1, #16]
 8009744:	4605      	mov	r5, r0
 8009746:	460c      	mov	r4, r1
 8009748:	b913      	cbnz	r3, 8009750 <_fflush_r+0x10>
 800974a:	2500      	movs	r5, #0
 800974c:	4628      	mov	r0, r5
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	b118      	cbz	r0, 800975a <_fflush_r+0x1a>
 8009752:	6983      	ldr	r3, [r0, #24]
 8009754:	b90b      	cbnz	r3, 800975a <_fflush_r+0x1a>
 8009756:	f000 f887 	bl	8009868 <__sinit>
 800975a:	4b14      	ldr	r3, [pc, #80]	; (80097ac <_fflush_r+0x6c>)
 800975c:	429c      	cmp	r4, r3
 800975e:	d11b      	bne.n	8009798 <_fflush_r+0x58>
 8009760:	686c      	ldr	r4, [r5, #4]
 8009762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0ef      	beq.n	800974a <_fflush_r+0xa>
 800976a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800976c:	07d0      	lsls	r0, r2, #31
 800976e:	d404      	bmi.n	800977a <_fflush_r+0x3a>
 8009770:	0599      	lsls	r1, r3, #22
 8009772:	d402      	bmi.n	800977a <_fflush_r+0x3a>
 8009774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009776:	f000 f915 	bl	80099a4 <__retarget_lock_acquire_recursive>
 800977a:	4628      	mov	r0, r5
 800977c:	4621      	mov	r1, r4
 800977e:	f7ff ff59 	bl	8009634 <__sflush_r>
 8009782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009784:	07da      	lsls	r2, r3, #31
 8009786:	4605      	mov	r5, r0
 8009788:	d4e0      	bmi.n	800974c <_fflush_r+0xc>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	059b      	lsls	r3, r3, #22
 800978e:	d4dd      	bmi.n	800974c <_fflush_r+0xc>
 8009790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009792:	f000 f908 	bl	80099a6 <__retarget_lock_release_recursive>
 8009796:	e7d9      	b.n	800974c <_fflush_r+0xc>
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <_fflush_r+0x70>)
 800979a:	429c      	cmp	r4, r3
 800979c:	d101      	bne.n	80097a2 <_fflush_r+0x62>
 800979e:	68ac      	ldr	r4, [r5, #8]
 80097a0:	e7df      	b.n	8009762 <_fflush_r+0x22>
 80097a2:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <_fflush_r+0x74>)
 80097a4:	429c      	cmp	r4, r3
 80097a6:	bf08      	it	eq
 80097a8:	68ec      	ldreq	r4, [r5, #12]
 80097aa:	e7da      	b.n	8009762 <_fflush_r+0x22>
 80097ac:	0800a05c 	.word	0x0800a05c
 80097b0:	0800a07c 	.word	0x0800a07c
 80097b4:	0800a03c 	.word	0x0800a03c

080097b8 <std>:
 80097b8:	2300      	movs	r3, #0
 80097ba:	b510      	push	{r4, lr}
 80097bc:	4604      	mov	r4, r0
 80097be:	e9c0 3300 	strd	r3, r3, [r0]
 80097c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097c6:	6083      	str	r3, [r0, #8]
 80097c8:	8181      	strh	r1, [r0, #12]
 80097ca:	6643      	str	r3, [r0, #100]	; 0x64
 80097cc:	81c2      	strh	r2, [r0, #14]
 80097ce:	6183      	str	r3, [r0, #24]
 80097d0:	4619      	mov	r1, r3
 80097d2:	2208      	movs	r2, #8
 80097d4:	305c      	adds	r0, #92	; 0x5c
 80097d6:	f7fd fc0f 	bl	8006ff8 <memset>
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <std+0x38>)
 80097dc:	6263      	str	r3, [r4, #36]	; 0x24
 80097de:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <std+0x3c>)
 80097e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80097e2:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <std+0x40>)
 80097e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <std+0x44>)
 80097e8:	6224      	str	r4, [r4, #32]
 80097ea:	6323      	str	r3, [r4, #48]	; 0x30
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	bf00      	nop
 80097f0:	08009b0d 	.word	0x08009b0d
 80097f4:	08009b2f 	.word	0x08009b2f
 80097f8:	08009b67 	.word	0x08009b67
 80097fc:	08009b8b 	.word	0x08009b8b

08009800 <_cleanup_r>:
 8009800:	4901      	ldr	r1, [pc, #4]	; (8009808 <_cleanup_r+0x8>)
 8009802:	f000 b8af 	b.w	8009964 <_fwalk_reent>
 8009806:	bf00      	nop
 8009808:	08009741 	.word	0x08009741

0800980c <__sfmoreglue>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	2268      	movs	r2, #104	; 0x68
 8009810:	1e4d      	subs	r5, r1, #1
 8009812:	4355      	muls	r5, r2
 8009814:	460e      	mov	r6, r1
 8009816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800981a:	f7ff fa65 	bl	8008ce8 <_malloc_r>
 800981e:	4604      	mov	r4, r0
 8009820:	b140      	cbz	r0, 8009834 <__sfmoreglue+0x28>
 8009822:	2100      	movs	r1, #0
 8009824:	e9c0 1600 	strd	r1, r6, [r0]
 8009828:	300c      	adds	r0, #12
 800982a:	60a0      	str	r0, [r4, #8]
 800982c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009830:	f7fd fbe2 	bl	8006ff8 <memset>
 8009834:	4620      	mov	r0, r4
 8009836:	bd70      	pop	{r4, r5, r6, pc}

08009838 <__sfp_lock_acquire>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__sfp_lock_acquire+0x8>)
 800983a:	f000 b8b3 	b.w	80099a4 <__retarget_lock_acquire_recursive>
 800983e:	bf00      	nop
 8009840:	200008dd 	.word	0x200008dd

08009844 <__sfp_lock_release>:
 8009844:	4801      	ldr	r0, [pc, #4]	; (800984c <__sfp_lock_release+0x8>)
 8009846:	f000 b8ae 	b.w	80099a6 <__retarget_lock_release_recursive>
 800984a:	bf00      	nop
 800984c:	200008dd 	.word	0x200008dd

08009850 <__sinit_lock_acquire>:
 8009850:	4801      	ldr	r0, [pc, #4]	; (8009858 <__sinit_lock_acquire+0x8>)
 8009852:	f000 b8a7 	b.w	80099a4 <__retarget_lock_acquire_recursive>
 8009856:	bf00      	nop
 8009858:	200008de 	.word	0x200008de

0800985c <__sinit_lock_release>:
 800985c:	4801      	ldr	r0, [pc, #4]	; (8009864 <__sinit_lock_release+0x8>)
 800985e:	f000 b8a2 	b.w	80099a6 <__retarget_lock_release_recursive>
 8009862:	bf00      	nop
 8009864:	200008de 	.word	0x200008de

08009868 <__sinit>:
 8009868:	b510      	push	{r4, lr}
 800986a:	4604      	mov	r4, r0
 800986c:	f7ff fff0 	bl	8009850 <__sinit_lock_acquire>
 8009870:	69a3      	ldr	r3, [r4, #24]
 8009872:	b11b      	cbz	r3, 800987c <__sinit+0x14>
 8009874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009878:	f7ff bff0 	b.w	800985c <__sinit_lock_release>
 800987c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009880:	6523      	str	r3, [r4, #80]	; 0x50
 8009882:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <__sinit+0x68>)
 8009884:	4a13      	ldr	r2, [pc, #76]	; (80098d4 <__sinit+0x6c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	62a2      	str	r2, [r4, #40]	; 0x28
 800988a:	42a3      	cmp	r3, r4
 800988c:	bf04      	itt	eq
 800988e:	2301      	moveq	r3, #1
 8009890:	61a3      	streq	r3, [r4, #24]
 8009892:	4620      	mov	r0, r4
 8009894:	f000 f820 	bl	80098d8 <__sfp>
 8009898:	6060      	str	r0, [r4, #4]
 800989a:	4620      	mov	r0, r4
 800989c:	f000 f81c 	bl	80098d8 <__sfp>
 80098a0:	60a0      	str	r0, [r4, #8]
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 f818 	bl	80098d8 <__sfp>
 80098a8:	2200      	movs	r2, #0
 80098aa:	60e0      	str	r0, [r4, #12]
 80098ac:	2104      	movs	r1, #4
 80098ae:	6860      	ldr	r0, [r4, #4]
 80098b0:	f7ff ff82 	bl	80097b8 <std>
 80098b4:	68a0      	ldr	r0, [r4, #8]
 80098b6:	2201      	movs	r2, #1
 80098b8:	2109      	movs	r1, #9
 80098ba:	f7ff ff7d 	bl	80097b8 <std>
 80098be:	68e0      	ldr	r0, [r4, #12]
 80098c0:	2202      	movs	r2, #2
 80098c2:	2112      	movs	r1, #18
 80098c4:	f7ff ff78 	bl	80097b8 <std>
 80098c8:	2301      	movs	r3, #1
 80098ca:	61a3      	str	r3, [r4, #24]
 80098cc:	e7d2      	b.n	8009874 <__sinit+0xc>
 80098ce:	bf00      	nop
 80098d0:	08009cc4 	.word	0x08009cc4
 80098d4:	08009801 	.word	0x08009801

080098d8 <__sfp>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	4607      	mov	r7, r0
 80098dc:	f7ff ffac 	bl	8009838 <__sfp_lock_acquire>
 80098e0:	4b1e      	ldr	r3, [pc, #120]	; (800995c <__sfp+0x84>)
 80098e2:	681e      	ldr	r6, [r3, #0]
 80098e4:	69b3      	ldr	r3, [r6, #24]
 80098e6:	b913      	cbnz	r3, 80098ee <__sfp+0x16>
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7ff ffbd 	bl	8009868 <__sinit>
 80098ee:	3648      	adds	r6, #72	; 0x48
 80098f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	d503      	bpl.n	8009900 <__sfp+0x28>
 80098f8:	6833      	ldr	r3, [r6, #0]
 80098fa:	b30b      	cbz	r3, 8009940 <__sfp+0x68>
 80098fc:	6836      	ldr	r6, [r6, #0]
 80098fe:	e7f7      	b.n	80098f0 <__sfp+0x18>
 8009900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009904:	b9d5      	cbnz	r5, 800993c <__sfp+0x64>
 8009906:	4b16      	ldr	r3, [pc, #88]	; (8009960 <__sfp+0x88>)
 8009908:	60e3      	str	r3, [r4, #12]
 800990a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800990e:	6665      	str	r5, [r4, #100]	; 0x64
 8009910:	f000 f847 	bl	80099a2 <__retarget_lock_init_recursive>
 8009914:	f7ff ff96 	bl	8009844 <__sfp_lock_release>
 8009918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800991c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009920:	6025      	str	r5, [r4, #0]
 8009922:	61a5      	str	r5, [r4, #24]
 8009924:	2208      	movs	r2, #8
 8009926:	4629      	mov	r1, r5
 8009928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800992c:	f7fd fb64 	bl	8006ff8 <memset>
 8009930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009938:	4620      	mov	r0, r4
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	3468      	adds	r4, #104	; 0x68
 800993e:	e7d9      	b.n	80098f4 <__sfp+0x1c>
 8009940:	2104      	movs	r1, #4
 8009942:	4638      	mov	r0, r7
 8009944:	f7ff ff62 	bl	800980c <__sfmoreglue>
 8009948:	4604      	mov	r4, r0
 800994a:	6030      	str	r0, [r6, #0]
 800994c:	2800      	cmp	r0, #0
 800994e:	d1d5      	bne.n	80098fc <__sfp+0x24>
 8009950:	f7ff ff78 	bl	8009844 <__sfp_lock_release>
 8009954:	230c      	movs	r3, #12
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	e7ee      	b.n	8009938 <__sfp+0x60>
 800995a:	bf00      	nop
 800995c:	08009cc4 	.word	0x08009cc4
 8009960:	ffff0001 	.word	0xffff0001

08009964 <_fwalk_reent>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	4606      	mov	r6, r0
 800996a:	4688      	mov	r8, r1
 800996c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009970:	2700      	movs	r7, #0
 8009972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009976:	f1b9 0901 	subs.w	r9, r9, #1
 800997a:	d505      	bpl.n	8009988 <_fwalk_reent+0x24>
 800997c:	6824      	ldr	r4, [r4, #0]
 800997e:	2c00      	cmp	r4, #0
 8009980:	d1f7      	bne.n	8009972 <_fwalk_reent+0xe>
 8009982:	4638      	mov	r0, r7
 8009984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009988:	89ab      	ldrh	r3, [r5, #12]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d907      	bls.n	800999e <_fwalk_reent+0x3a>
 800998e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009992:	3301      	adds	r3, #1
 8009994:	d003      	beq.n	800999e <_fwalk_reent+0x3a>
 8009996:	4629      	mov	r1, r5
 8009998:	4630      	mov	r0, r6
 800999a:	47c0      	blx	r8
 800999c:	4307      	orrs	r7, r0
 800999e:	3568      	adds	r5, #104	; 0x68
 80099a0:	e7e9      	b.n	8009976 <_fwalk_reent+0x12>

080099a2 <__retarget_lock_init_recursive>:
 80099a2:	4770      	bx	lr

080099a4 <__retarget_lock_acquire_recursive>:
 80099a4:	4770      	bx	lr

080099a6 <__retarget_lock_release_recursive>:
 80099a6:	4770      	bx	lr

080099a8 <__swhatbuf_r>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	460e      	mov	r6, r1
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	2900      	cmp	r1, #0
 80099b2:	b096      	sub	sp, #88	; 0x58
 80099b4:	4614      	mov	r4, r2
 80099b6:	461d      	mov	r5, r3
 80099b8:	da08      	bge.n	80099cc <__swhatbuf_r+0x24>
 80099ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	061a      	lsls	r2, r3, #24
 80099c4:	d410      	bmi.n	80099e8 <__swhatbuf_r+0x40>
 80099c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ca:	e00e      	b.n	80099ea <__swhatbuf_r+0x42>
 80099cc:	466a      	mov	r2, sp
 80099ce:	f000 f903 	bl	8009bd8 <_fstat_r>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	dbf1      	blt.n	80099ba <__swhatbuf_r+0x12>
 80099d6:	9a01      	ldr	r2, [sp, #4]
 80099d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e0:	425a      	negs	r2, r3
 80099e2:	415a      	adcs	r2, r3
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	e7ee      	b.n	80099c6 <__swhatbuf_r+0x1e>
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	2000      	movs	r0, #0
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	b016      	add	sp, #88	; 0x58
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099f4 <__smakebuf_r>:
 80099f4:	898b      	ldrh	r3, [r1, #12]
 80099f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099f8:	079d      	lsls	r5, r3, #30
 80099fa:	4606      	mov	r6, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	d507      	bpl.n	8009a10 <__smakebuf_r+0x1c>
 8009a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	6123      	str	r3, [r4, #16]
 8009a08:	2301      	movs	r3, #1
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	b002      	add	sp, #8
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	ab01      	add	r3, sp, #4
 8009a12:	466a      	mov	r2, sp
 8009a14:	f7ff ffc8 	bl	80099a8 <__swhatbuf_r>
 8009a18:	9900      	ldr	r1, [sp, #0]
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff f963 	bl	8008ce8 <_malloc_r>
 8009a22:	b948      	cbnz	r0, 8009a38 <__smakebuf_r+0x44>
 8009a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a28:	059a      	lsls	r2, r3, #22
 8009a2a:	d4ef      	bmi.n	8009a0c <__smakebuf_r+0x18>
 8009a2c:	f023 0303 	bic.w	r3, r3, #3
 8009a30:	f043 0302 	orr.w	r3, r3, #2
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	e7e3      	b.n	8009a00 <__smakebuf_r+0xc>
 8009a38:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <__smakebuf_r+0x7c>)
 8009a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	6020      	str	r0, [r4, #0]
 8009a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	9b00      	ldr	r3, [sp, #0]
 8009a48:	6163      	str	r3, [r4, #20]
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	6120      	str	r0, [r4, #16]
 8009a4e:	b15b      	cbz	r3, 8009a68 <__smakebuf_r+0x74>
 8009a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 f8d1 	bl	8009bfc <_isatty_r>
 8009a5a:	b128      	cbz	r0, 8009a68 <__smakebuf_r+0x74>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	89a0      	ldrh	r0, [r4, #12]
 8009a6a:	4305      	orrs	r5, r0
 8009a6c:	81a5      	strh	r5, [r4, #12]
 8009a6e:	e7cd      	b.n	8009a0c <__smakebuf_r+0x18>
 8009a70:	08009801 	.word	0x08009801

08009a74 <_malloc_usable_size_r>:
 8009a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a78:	1f18      	subs	r0, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfbc      	itt	lt
 8009a7e:	580b      	ldrlt	r3, [r1, r0]
 8009a80:	18c0      	addlt	r0, r0, r3
 8009a82:	4770      	bx	lr

08009a84 <_raise_r>:
 8009a84:	291f      	cmp	r1, #31
 8009a86:	b538      	push	{r3, r4, r5, lr}
 8009a88:	4604      	mov	r4, r0
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	d904      	bls.n	8009a98 <_raise_r+0x14>
 8009a8e:	2316      	movs	r3, #22
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a9a:	b112      	cbz	r2, 8009aa2 <_raise_r+0x1e>
 8009a9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009aa0:	b94b      	cbnz	r3, 8009ab6 <_raise_r+0x32>
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f830 	bl	8009b08 <_getpid_r>
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4601      	mov	r1, r0
 8009aac:	4620      	mov	r0, r4
 8009aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab2:	f000 b817 	b.w	8009ae4 <_kill_r>
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d00a      	beq.n	8009ad0 <_raise_r+0x4c>
 8009aba:	1c59      	adds	r1, r3, #1
 8009abc:	d103      	bne.n	8009ac6 <_raise_r+0x42>
 8009abe:	2316      	movs	r3, #22
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	e7e7      	b.n	8009a96 <_raise_r+0x12>
 8009ac6:	2400      	movs	r4, #0
 8009ac8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009acc:	4628      	mov	r0, r5
 8009ace:	4798      	blx	r3
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e7e0      	b.n	8009a96 <_raise_r+0x12>

08009ad4 <raise>:
 8009ad4:	4b02      	ldr	r3, [pc, #8]	; (8009ae0 <raise+0xc>)
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	f7ff bfd3 	b.w	8009a84 <_raise_r>
 8009ade:	bf00      	nop
 8009ae0:	20000048 	.word	0x20000048

08009ae4 <_kill_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	; (8009b04 <_kill_r+0x20>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	f7f7 ff2d 	bl	8001950 <_kill>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	d102      	bne.n	8009b00 <_kill_r+0x1c>
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	b103      	cbz	r3, 8009b00 <_kill_r+0x1c>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	bf00      	nop
 8009b04:	200008d8 	.word	0x200008d8

08009b08 <_getpid_r>:
 8009b08:	f7f7 bf1a 	b.w	8001940 <_getpid>

08009b0c <__sread>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	460c      	mov	r4, r1
 8009b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b14:	f000 f894 	bl	8009c40 <_read_r>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	bfab      	itete	ge
 8009b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b20:	181b      	addge	r3, r3, r0
 8009b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b26:	bfac      	ite	ge
 8009b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b2a:	81a3      	strhlt	r3, [r4, #12]
 8009b2c:	bd10      	pop	{r4, pc}

08009b2e <__swrite>:
 8009b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b32:	461f      	mov	r7, r3
 8009b34:	898b      	ldrh	r3, [r1, #12]
 8009b36:	05db      	lsls	r3, r3, #23
 8009b38:	4605      	mov	r5, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4616      	mov	r6, r2
 8009b3e:	d505      	bpl.n	8009b4c <__swrite+0x1e>
 8009b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b44:	2302      	movs	r3, #2
 8009b46:	2200      	movs	r2, #0
 8009b48:	f000 f868 	bl	8009c1c <_lseek_r>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b56:	81a3      	strh	r3, [r4, #12]
 8009b58:	4632      	mov	r2, r6
 8009b5a:	463b      	mov	r3, r7
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b62:	f000 b817 	b.w	8009b94 <_write_r>

08009b66 <__sseek>:
 8009b66:	b510      	push	{r4, lr}
 8009b68:	460c      	mov	r4, r1
 8009b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6e:	f000 f855 	bl	8009c1c <_lseek_r>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	bf15      	itete	ne
 8009b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b82:	81a3      	strheq	r3, [r4, #12]
 8009b84:	bf18      	it	ne
 8009b86:	81a3      	strhne	r3, [r4, #12]
 8009b88:	bd10      	pop	{r4, pc}

08009b8a <__sclose>:
 8009b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8e:	f000 b813 	b.w	8009bb8 <_close_r>
	...

08009b94 <_write_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d07      	ldr	r5, [pc, #28]	; (8009bb4 <_write_r+0x20>)
 8009b98:	4604      	mov	r4, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f7 ff0b 	bl	80019be <_write>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_write_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_write_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	200008d8 	.word	0x200008d8

08009bb8 <_close_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_close_r+0x1c>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7f7 ff17 	bl	80019f6 <_close>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_close_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_close_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	200008d8 	.word	0x200008d8

08009bd8 <_fstat_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	; (8009bf8 <_fstat_r+0x20>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f7 ff12 	bl	8001a0e <_fstat>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_fstat_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_fstat_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	200008d8 	.word	0x200008d8

08009bfc <_isatty_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	; (8009c18 <_isatty_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f7 ff11 	bl	8001a2e <_isatty>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_isatty_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_isatty_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	200008d8 	.word	0x200008d8

08009c1c <_lseek_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d07      	ldr	r5, [pc, #28]	; (8009c3c <_lseek_r+0x20>)
 8009c20:	4604      	mov	r4, r0
 8009c22:	4608      	mov	r0, r1
 8009c24:	4611      	mov	r1, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7f7 ff0a 	bl	8001a44 <_lseek>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_lseek_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_lseek_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	200008d8 	.word	0x200008d8

08009c40 <_read_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	4d07      	ldr	r5, [pc, #28]	; (8009c60 <_read_r+0x20>)
 8009c44:	4604      	mov	r4, r0
 8009c46:	4608      	mov	r0, r1
 8009c48:	4611      	mov	r1, r2
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	602a      	str	r2, [r5, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f7f7 fe98 	bl	8001984 <_read>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_read_r+0x1e>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_read_r+0x1e>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	200008d8 	.word	0x200008d8

08009c64 <_init>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr

08009c70 <_fini>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	bf00      	nop
 8009c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c76:	bc08      	pop	{r3}
 8009c78:	469e      	mov	lr, r3
 8009c7a:	4770      	bx	lr
