
SM_LABY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009504  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009708  08009708  00019708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b24  08009b24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b2c  08009b2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b30  08009b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001e0  08009d10  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08009d10  00020918  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c95c  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d11  00000000  00000000  0003cb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00040878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00041f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b516  00000000  00000000  000433e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3ce  00000000  00000000  0006e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107563  00000000  00000000  0008bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d78  00000000  00000000  00193278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080096ec 	.word	0x080096ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080096ec 	.word	0x080096ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <MX_ADC1_Init+0xb8>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_ADC1_Init+0xb4>)
 800060e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000612:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_ADC1_Init+0xb4>)
 800061c:	2201      	movs	r2, #1
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_ADC1_Init+0xb4>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000642:	2202      	movs	r2, #2
 8000644:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000648:	2201      	movs	r2, #1
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000656:	f001 f837 	bl	80016c8 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000660:	f000 fbe2 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000664:	2303      	movs	r3, #3
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800066c:	2306      	movs	r3, #6
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000676:	f001 fa93 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000680:	f000 fbd2 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_ADC1_Init+0xc0>)
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000688:	2302      	movs	r3, #2
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_ADC1_Init+0xb4>)
 8000692:	f001 fa85 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fbc4 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200001fc 	.word	0x200001fc
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001
 80006b4:	10000012 	.word	0x10000012

080006b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a31      	ldr	r2, [pc, #196]	; (800079c <HAL_ADC_MspInit+0xe4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d15b      	bne.n	8000792 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <HAL_ADC_MspInit+0xe8>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <HAL_ADC_MspInit+0xe8>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e4:	6453      	str	r3, [r2, #68]	; 0x44
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <HAL_ADC_MspInit+0xe8>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <HAL_ADC_MspInit+0xe8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <HAL_ADC_MspInit+0xe8>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <HAL_ADC_MspInit+0xe8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800070a:	2308      	movs	r3, #8
 800070c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070e:	2303      	movs	r3, #3
 8000710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4821      	ldr	r0, [pc, #132]	; (80007a4 <HAL_ADC_MspInit+0xec>)
 800071e:	f002 fa37 	bl	8002b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 8000726:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 800073c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000740:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000748:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 800074c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000750:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000758:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 8000768:	f001 fe08 	bl	800237c <HAL_DMA_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000772:	f000 fb59 	bl	8000e28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 800077a:	639a      	str	r2, [r3, #56]	; 0x38
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2012      	movs	r0, #18
 8000788:	f001 fdc1 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800078c:	2012      	movs	r0, #18
 800078e:	f001 fdda 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40012000 	.word	0x40012000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	20000244 	.word	0x20000244
 80007ac:	40026410 	.word	0x40026410

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_DMA_Init+0x38>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <MX_DMA_Init+0x38>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_DMA_Init+0x38>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2038      	movs	r0, #56	; 0x38
 80007d4:	f001 fd9b 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007d8:	2038      	movs	r0, #56	; 0x38
 80007da:	f001 fdb4 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a7a      	ldr	r2, [pc, #488]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b78      	ldr	r3, [pc, #480]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b75      	ldr	r3, [pc, #468]	; (80009f0 <MX_GPIO_Init+0x204>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a74      	ldr	r2, [pc, #464]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <MX_GPIO_Init+0x204>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a68      	ldr	r2, [pc, #416]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b63      	ldr	r3, [pc, #396]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a62      	ldr	r2, [pc, #392]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <MX_GPIO_Init+0x204>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a5c      	ldr	r2, [pc, #368]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	4b57      	ldr	r3, [pc, #348]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a56      	ldr	r2, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x204>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <MX_GPIO_Init+0x204>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2110      	movs	r1, #16
 80008ae:	4851      	ldr	r0, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x208>)
 80008b0:	f002 fb1a 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ba:	484f      	ldr	r0, [pc, #316]	; (80009f8 <MX_GPIO_Init+0x20c>)
 80008bc:	f002 fb14 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	484d      	ldr	r0, [pc, #308]	; (80009fc <MX_GPIO_Init+0x210>)
 80008c6:	f002 fb0f 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80008ca:	2310      	movs	r3, #16
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x208>)
 80008e2:	f002 f955 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4840      	ldr	r0, [pc, #256]	; (8000a00 <MX_GPIO_Init+0x214>)
 80008fe:	f002 f947 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000902:	2332      	movs	r3, #50	; 0x32
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000912:	230b      	movs	r3, #11
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4838      	ldr	r0, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x214>)
 800091e:	f002 f937 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000922:	2386      	movs	r3, #134	; 0x86
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000932:	230b      	movs	r3, #11
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4831      	ldr	r0, [pc, #196]	; (8000a04 <MX_GPIO_Init+0x218>)
 800093e:	f002 f927 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000942:	f244 0381 	movw	r3, #16513	; 0x4081
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4827      	ldr	r0, [pc, #156]	; (80009f8 <MX_GPIO_Init+0x20c>)
 800095c:	f002 f918 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000972:	230b      	movs	r3, #11
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	481e      	ldr	r0, [pc, #120]	; (80009f8 <MX_GPIO_Init+0x20c>)
 800097e:	f002 f907 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_GPIO_Init+0x210>)
 800099a:	f002 f8f9 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0x210>)
 80009b2:	f002 f8ed 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c8:	230b      	movs	r3, #11
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	480a      	ldr	r0, [pc, #40]	; (80009fc <MX_GPIO_Init+0x210>)
 80009d4:	f002 f8dc 	bl	8002b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f001 fc96 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e2:	2028      	movs	r0, #40	; 0x28
 80009e4:	f001 fcaf 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 80009e8:	bf00      	nop
 80009ea:	3730      	adds	r7, #48	; 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40021800 	.word	0x40021800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020000 	.word	0x40020000

08000a08 <LED_line>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void LED_line(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	if(voltage[0] < 1.0f)
 8000a0c:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <LED_line+0x10c>)
 8000a0e:	edd3 7a00 	vldr	s15, [r3]
 8000a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1e:	d510      	bpl.n	8000a42 <LED_line+0x3a>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2101      	movs	r1, #1
 8000a24:	483c      	ldr	r0, [pc, #240]	; (8000b18 <LED_line+0x110>)
 8000a26:	f002 fa5f 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	483a      	ldr	r0, [pc, #232]	; (8000b18 <LED_line+0x110>)
 8000a30:	f002 fa5a 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	4837      	ldr	r0, [pc, #220]	; (8000b18 <LED_line+0x110>)
 8000a3c:	f002 fa54 	bl	8002ee8 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
	}
}
 8000a40:	e065      	b.n	8000b0e <LED_line+0x106>
	else if (voltage[0] >= 1.0f && voltage[0] < 2.0f)
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <LED_line+0x10c>)
 8000a44:	edd3 7a00 	vldr	s15, [r3]
 8000a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a54:	db1a      	blt.n	8000a8c <LED_line+0x84>
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <LED_line+0x10c>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	d510      	bpl.n	8000a8c <LED_line+0x84>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	482a      	ldr	r0, [pc, #168]	; (8000b18 <LED_line+0x110>)
 8000a70:	f002 fa3a 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	4827      	ldr	r0, [pc, #156]	; (8000b18 <LED_line+0x110>)
 8000a7a:	f002 fa35 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	4824      	ldr	r0, [pc, #144]	; (8000b18 <LED_line+0x110>)
 8000a86:	f002 fa2f 	bl	8002ee8 <HAL_GPIO_WritePin>
 8000a8a:	e040      	b.n	8000b0e <LED_line+0x106>
	else if (voltage[0] >= 2.0f && voltage[0] < 3.0f)
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <LED_line+0x10c>)
 8000a8e:	edd3 7a00 	vldr	s15, [r3]
 8000a92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9e:	db1a      	blt.n	8000ad6 <LED_line+0xce>
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <LED_line+0x10c>)
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab2:	d510      	bpl.n	8000ad6 <LED_line+0xce>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <LED_line+0x110>)
 8000aba:	f002 fa15 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	4815      	ldr	r0, [pc, #84]	; (8000b18 <LED_line+0x110>)
 8000ac4:	f002 fa10 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <LED_line+0x110>)
 8000ad0:	f002 fa0a 	bl	8002ee8 <HAL_GPIO_WritePin>
 8000ad4:	e01b      	b.n	8000b0e <LED_line+0x106>
	else if (voltage[0] > 3.0f)
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <LED_line+0x10c>)
 8000ad8:	edd3 7a00 	vldr	s15, [r3]
 8000adc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae8:	dc00      	bgt.n	8000aec <LED_line+0xe4>
}
 8000aea:	e010      	b.n	8000b0e <LED_line+0x106>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <LED_line+0x110>)
 8000af2:	f002 f9f9 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <LED_line+0x110>)
 8000afc:	f002 f9f4 	bl	8002ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <LED_line+0x110>)
 8000b08:	f002 f9ee 	bl	8002ee8 <HAL_GPIO_WritePin>
}
 8000b0c:	e7ff      	b.n	8000b0e <LED_line+0x106>
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200002ac 	.word	0x200002ac
 8000b18:	40020400 	.word	0x40020400

08000b1c <calculate_voltage>:

float calculate_voltage(uint32_t measure)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	// wpisać 6.0f zeby sprawdzić diody
	return 3.27f * measure / 4096.0f;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b2e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000b50 <calculate_voltage+0x34>
 8000b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b36:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b54 <calculate_voltage+0x38>
 8000b3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b3e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000b42:	eeb0 0a67 	vmov.f32	s0, s15
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	405147ae 	.word	0x405147ae
 8000b54:	45800000 	.word	0x45800000

08000b58 <calculate_temp>:

float calculate_temp(float sensor_voltage)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (sensor_voltage - 0.76f) / 0.0025f + 25.0f;
 8000b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b66:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000b8c <calculate_temp+0x34>
 8000b6a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b6e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000b90 <calculate_temp+0x38>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	3f428f5c 	.word	0x3f428f5c
 8000b90:	3b23d70a 	.word	0x3b23d70a

08000b94 <calculate_resistance>:

float calculate_resistance(float sensor_voltage)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	ed87 0a01 	vstr	s0, [r7, #4]
	sensor_voltage = 3.3f - sensor_voltage;
 8000b9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000bd8 <calculate_resistance+0x44>
 8000ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000baa:	edc7 7a01 	vstr	s15, [r7, #4]
	return (5000 / sensor_voltage)*(3.3f - sensor_voltage);
 8000bae:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000bdc <calculate_resistance+0x48>
 8000bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bba:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000bd8 <calculate_resistance+0x44>
 8000bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40533333 	.word	0x40533333
 8000bdc:	459c4000 	.word	0x459c4000

08000be0 <HAL_TIM_PeriodElapsedCallback>:

// timers callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	 //nie blokuajcy przerwania
//	HAL_ADC_Start_IT(&hadc1);

	// nie blokujacy DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)odczyt, 2);
 8000be8:	2202      	movs	r2, #2
 8000bea:	4904      	ldr	r1, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bee:	f000 febf 	bl	8001970 <HAL_ADC_Start_DMA>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002a8 	.word	0x200002a8
 8000c00:	200001fc 	.word	0x200001fc

08000c04 <HAL_GPIO_EXTI_Callback>:

// GPIO callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]

//	HAL_ADC_Start_IT(&hadc1);


	char str_buffer[32];
	sprintf(str_buffer, "Volage: ADC = %u  (%.3f V)\r\n", odczyt[0], voltage[0]);
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c18:	edd3 7a00 	vldr	s15, [r3]
 8000c1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	ed8d 7b00 	vstr	d7, [sp]
 8000c28:	4908      	ldr	r1, [pc, #32]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x48>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 fb72 	bl	8007314 <siprintf>
	send_string(str_buffer);
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f80b 	bl	8000c50 <send_string>

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200002a8 	.word	0x200002a8
 8000c48:	200002ac 	.word	0x200002ac
 8000c4c:	08009708 	.word	0x08009708

08000c50 <send_string>:

void send_string(char* s)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)s, strlen(s));
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff faf1 	bl	8000240 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <send_string+0x24>)
 8000c68:	f004 faf4 	bl	8005254 <HAL_UART_Transmit_IT>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000374 	.word	0x20000374

08000c78 <HAL_ADC_ConvCpltCallback>:
{

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d134      	bne.n	8000cf2 <HAL_ADC_ConvCpltCallback+0x7a>
//			hadc->NbrOfCurrentConversionRank = 0;
//			LED_line();
//		}

		// DMA
		for (int i = 0; i < 2; i++ )
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e012      	b.n	8000cb4 <HAL_ADC_ConvCpltCallback+0x3c>
		{
			voltage[i] = calculate_voltage(odczyt[i]);
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff3f 	bl	8000b1c <calculate_voltage>
 8000c9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ca2:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 2; i++ )
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	dde9      	ble.n	8000c8e <HAL_ADC_ConvCpltCallback+0x16>
		}
		Temp = calculate_temp(voltage[1]);
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc4:	f7ff ff48 	bl	8000b58 <calculate_temp>
 8000cc8:	eef0 7a40 	vmov.f32	s15, s0
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_ADC_ConvCpltCallback+0x90>)
 8000cce:	edc3 7a00 	vstr	s15, [r3]
		res = calculate_resistance(voltage[0]);
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cdc:	f7ff ff5a 	bl	8000b94 <calculate_resistance>
 8000ce0:	eef0 7a40 	vmov.f32	s15, s0
 8000ce4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_ADC_ConvCpltCallback+0x94>)
 8000cea:	ed83 7b00 	vstr	d7, [r3]
		LED_line();
 8000cee:	f7ff fe8b 	bl	8000a08 <LED_line>


	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001fc 	.word	0x200001fc
 8000d00:	200002a8 	.word	0x200002a8
 8000d04:	200002ac 	.word	0x200002ac
 8000d08:	200002a4 	.word	0x200002a4
 8000d0c:	200002b8 	.word	0x200002b8

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fc57 	bl	80015c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f814 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fd66 	bl	80007ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d20:	f000 fae8 	bl	80012f4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000d24:	f7ff fd44 	bl	80007b0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d28:	f000 fb7c 	bl	8001424 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8000d2c:	f000 f882 	bl	8000e34 <MX_SPI4_Init>
  MX_ADC1_Init();
 8000d30:	f7ff fc60 	bl	80005f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d34:	f000 fa68 	bl	8001208 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim3);
 8000d38:	4801      	ldr	r0, [pc, #4]	; (8000d40 <main+0x30>)
 8000d3a:	f003 fdcd 	bl	80048d8 <HAL_TIM_Base_Start_IT>
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <main+0x2e>
 8000d40:	20000328 	.word	0x20000328

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	; 0x50
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2234      	movs	r2, #52	; 0x34
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f005 fe92 	bl	8006a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d68:	f002 fa38 	bl	80031dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <SystemClock_Config+0xdc>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <SystemClock_Config+0xdc>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <SystemClock_Config+0xdc>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <SystemClock_Config+0xe0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d8c:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <SystemClock_Config+0xe0>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <SystemClock_Config+0xe0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000da4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000daa:	2302      	movs	r3, #2
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db4:	2304      	movs	r3, #4
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000db8:	2360      	movs	r3, #96	; 0x60
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fa65 	bl	800329c <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dd8:	f000 f826 	bl	8000e28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ddc:	f002 fa0e 	bl	80031fc <HAL_PWREx_EnableOverDrive>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000de6:	f000 f81f 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2103      	movs	r1, #3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fcf6 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e12:	f000 f809 	bl	8000e28 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3750      	adds	r7, #80	; 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <MX_SPI4_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e44:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e52:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e66:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e6a:	2218      	movs	r2, #24
 8000e6c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e82:	2207      	movs	r2, #7
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_SPI4_Init+0x74>)
 8000e94:	f003 fafe 	bl	8004494 <HAL_SPI_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f7ff ffc3 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200002c0 	.word	0x200002c0
 8000eac:	40013400 	.word	0x40013400

08000eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_SPI_MspInit+0x8c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12f      	bne.n	8000f32 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_SPI_MspInit+0x90>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <HAL_SPI_MspInit+0x90>)
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_SPI_MspInit+0x90>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_SPI_MspInit+0x90>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_SPI_MspInit+0x90>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_SPI_MspInit+0x90>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f12:	2305      	movs	r3, #5
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <HAL_SPI_MspInit+0x94>)
 8000f1e:	f001 fe37 	bl	8002b90 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	2054      	movs	r0, #84	; 0x54
 8000f28:	f001 f9f1 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000f2c:	2054      	movs	r0, #84	; 0x54
 8000f2e:	f001 fa0a 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013400 	.word	0x40013400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 fb30 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <ADC_IRQHandler+0x10>)
 8000fea:	f000 fbb1 	bl	8001750 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001fc 	.word	0x200001fc

08000ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM3_IRQHandler+0x10>)
 8000ffe:	f003 fce3 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000328 	.word	0x20000328

0800100c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <USART3_IRQHandler+0x10>)
 8001012:	f004 f97d 	bl	8005310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000374 	.word	0x20000374

08001020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001024:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001028:	f001 ff78 	bl	8002f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA2_Stream0_IRQHandler+0x10>)
 8001036:	f001 fb41 	bl	80026bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000244 	.word	0x20000244

08001044 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <SPI4_IRQHandler+0x10>)
 800104a:	f003 facf 	bl	80045ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002c0 	.word	0x200002c0

08001058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_kill>:

int _kill(int pid, int sig)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001072:	f005 fccb 	bl	8006a0c <__errno>
 8001076:	4603      	mov	r3, r0
 8001078:	2216      	movs	r2, #22
 800107a:	601a      	str	r2, [r3, #0]
	return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe7 	bl	8001068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800109a:	e7fe      	b.n	800109a <_exit+0x12>

0800109c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
	}

return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
	}
	return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f005 fc30 	bl	8006a0c <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20080000 	.word	0x20080000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	20000324 	.word	0x20000324
 80011e0:	20000918 	.word	0x20000918

080011e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_TIM3_Init+0x98>)
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <MX_TIM3_Init+0x9c>)
 800122a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM3_Init+0x98>)
 800122e:	f242 527f 	movw	r2, #9599	; 0x257f
 8001232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM3_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_TIM3_Init+0x98>)
 800123c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_TIM3_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM3_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <MX_TIM3_Init+0x98>)
 8001250:	f003 faeb 	bl	800482a <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800125a:	f7ff fde5 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM3_Init+0x98>)
 800126c:	f003 fccc 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001276:	f7ff fdd7 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM3_Init+0x98>)
 8001288:	f003 feea 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001292:	f7ff fdc9 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000328 	.word	0x20000328
 80012a4:	40000400 	.word	0x40000400

080012a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_TIM_Base_MspInit+0x44>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d113      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_TIM_Base_MspInit+0x48>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_TIM_Base_MspInit+0x48>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_Base_MspInit+0x48>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201d      	movs	r0, #29
 80012d8:	f001 f819 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012dc:	201d      	movs	r0, #29
 80012de:	f001 f832 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40000400 	.word	0x40000400
 80012f0:	40023800 	.word	0x40023800

080012f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART3_UART_Init+0x58>)
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_USART3_UART_Init+0x5c>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001304:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USART3_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART3_UART_Init+0x58>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART3_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART3_UART_Init+0x58>)
 8001338:	f003 ff3e 	bl	80051b8 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001342:	f7ff fd71 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000374 	.word	0x20000374
 8001350:	40004800 	.word	0x40004800

08001354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ae      	sub	sp, #184	; 0xb8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2290      	movs	r2, #144	; 0x90
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fb81 	bl	8006a7c <memset>
  if(uartHandle->Instance==USART3)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a26      	ldr	r2, [pc, #152]	; (8001418 <HAL_UART_MspInit+0xc4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d144      	bne.n	800140e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800138a:	2300      	movs	r3, #0
 800138c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fc56 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139e:	f7ff fd43 	bl	8000e28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0xc8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <HAL_UART_MspInit+0xcc>)
 80013fa:	f001 fbc9 	bl	8002b90 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2027      	movs	r0, #39	; 0x27
 8001404:	f000 ff83 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001408:	2027      	movs	r0, #39	; 0x27
 800140a:	f000 ff9c 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800140e:	bf00      	nop
 8001410:	37b8      	adds	r7, #184	; 0xb8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004800 	.word	0x40004800
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00

08001424 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800142e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2206      	movs	r2, #6
 8001434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2202      	movs	r2, #2
 800143a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2202      	movs	r2, #2
 8001446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145c:	2201      	movs	r2, #1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	f001 fd70 	bl	8002f4c <HAL_PCD_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001472:	f7ff fcd9 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003fc 	.word	0x200003fc

08001480 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0ae      	sub	sp, #184	; 0xb8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2290      	movs	r2, #144	; 0x90
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 faeb 	bl	8006a7c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ae:	d159      	bne.n	8001564 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fbbf 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014cc:	f7ff fcac 	bl	8000e28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_PCD_MspInit+0xec>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_PCD_MspInit+0xec>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_PCD_MspInit+0xec>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001502:	230a      	movs	r3, #10
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800150c:	4619      	mov	r1, r3
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <HAL_PCD_MspInit+0xf0>)
 8001510:	f001 fb3e 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152c:	4619      	mov	r1, r3
 800152e:	4810      	ldr	r0, [pc, #64]	; (8001570 <HAL_PCD_MspInit+0xf0>)
 8001530:	f001 fb2e 	bl	8002b90 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_PCD_MspInit+0xec>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_PCD_MspInit+0xec>)
 800153a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153e:	6353      	str	r3, [r2, #52]	; 0x34
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_PCD_MspInit+0xec>)
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_PCD_MspInit+0xec>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_PCD_MspInit+0xec>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6453      	str	r3, [r2, #68]	; 0x44
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_PCD_MspInit+0xec>)
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	37b8      	adds	r7, #184	; 0xb8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001590:	4c0b      	ldr	r4, [pc, #44]	; (80015c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159e:	f7ff fe21 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f005 fa39 	bl	8006a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff fbb3 	bl	8000d10 <main>
  bx  lr    
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015b8:	08009b34 	.word	0x08009b34
  ldr r2, =_sbss
 80015bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80015c0:	20000918 	.word	0x20000918

080015c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <CAN1_RX0_IRQHandler>

080015c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 fe94 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 f805 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d6:	f7ff fcb7 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 feaf 	bl	8002362 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 fe77 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000
 8001638:	20000008 	.word	0x20000008
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008
 8001664:	20000904 	.word	0x20000904

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000904 	.word	0x20000904

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008

080016c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e031      	b.n	8001742 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe ffe6 	bl	80006b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_ADC_Init+0x84>)
 800170c:	4013      	ands	r3, r2
 800170e:	f043 0202 	orr.w	r2, r3, #2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fb98 	bl	8001e4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
 8001732:	e001      	b.n	8001738 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	ffffeefd 	.word	0xffffeefd

08001750 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d049      	beq.n	800181a <HAL_ADC_IRQHandler+0xca>
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d046      	beq.n	800181a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d12b      	bne.n	800180a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d127      	bne.n	800180a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0220 	bic.w	r2, r2, #32
 80017e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fa34 	bl	8000c78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0212 	mvn.w	r2, #18
 8001818:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d057      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x190>
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d054      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d139      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001874:	2b00      	cmp	r3, #0
 8001876:	d12b      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d124      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11d      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001898:	2b00      	cmp	r3, #0
 800189a:	d119      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fc37 	bl	8002144 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f06f 020c 	mvn.w	r2, #12
 80018de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ee:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d017      	beq.n	8001926 <HAL_ADC_IRQHandler+0x1d6>
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d014      	beq.n	8001926 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d10d      	bne.n	8001926 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f92e 	bl	8001b78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0201 	mvn.w	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001934:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d015      	beq.n	8001968 <HAL_ADC_IRQHandler+0x218>
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f043 0202 	orr.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f06f 0220 	mvn.w	r2, #32
 8001956:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f917 	bl	8001b8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0220 	mvn.w	r2, #32
 8001966:	601a      	str	r2, [r3, #0]
  }
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_ADC_Start_DMA+0x1e>
 800198a:	2302      	movs	r3, #2
 800198c:	e0d4      	b.n	8001b38 <HAL_ADC_Start_DMA+0x1c8>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d018      	beq.n	80019d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019b4:	4b62      	ldr	r3, [pc, #392]	; (8001b40 <HAL_ADC_Start_DMA+0x1d0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a62      	ldr	r2, [pc, #392]	; (8001b44 <HAL_ADC_Start_DMA+0x1d4>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9a      	lsrs	r2, r3, #18
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	f040 809c 	bne.w	8001b1e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ea:	4b57      	ldr	r3, [pc, #348]	; (8001b48 <HAL_ADC_Start_DMA+0x1d8>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a20:	d106      	bne.n	8001a30 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f023 0206 	bic.w	r2, r3, #6
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a2e:	e002      	b.n	8001a36 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_ADC_Start_DMA+0x1dc>)
 8001a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	4a41      	ldr	r2, [pc, #260]	; (8001b50 <HAL_ADC_Start_DMA+0x1e0>)
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a52:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_ADC_Start_DMA+0x1e4>)
 8001a54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	334c      	adds	r3, #76	; 0x4c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f000 fd22 	bl	80024d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_ADC_Start_DMA+0x1e8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d143      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	e03a      	b.n	8001b36 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <HAL_ADC_Start_DMA+0x1ec>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0x178>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_ADC_Start_DMA+0x1e8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d120      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_ADC_Start_DMA+0x1f0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11b      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x1c6>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d114      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e00b      	b.n	8001b36 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0210 	orr.w	r2, r3, #16
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83
 8001b48:	fffff8fe 	.word	0xfffff8fe
 8001b4c:	08002041 	.word	0x08002041
 8001b50:	080020fb 	.word	0x080020fb
 8001b54:	08002117 	.word	0x08002117
 8001b58:	40012300 	.word	0x40012300
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	40012200 	.word	0x40012200

08001b64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e136      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x28a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d93a      	bls.n	8001c42 <HAL_ADC_ConfigChannel+0xa2>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bd4:	d035      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68d9      	ldr	r1, [r3, #12]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	3b1e      	subs	r3, #30
 8001bec:	2207      	movs	r2, #7
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a8d      	ldr	r2, [pc, #564]	; (8001e38 <HAL_ADC_ConfigChannel+0x298>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10a      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68d9      	ldr	r1, [r3, #12]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	061a      	lsls	r2, r3, #24
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c1a:	e035      	b.n	8001c88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68d9      	ldr	r1, [r3, #12]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4403      	add	r3, r0
 8001c34:	3b1e      	subs	r3, #30
 8001c36:	409a      	lsls	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c40:	e022      	b.n	8001c88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6919      	ldr	r1, [r3, #16]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4403      	add	r3, r0
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d824      	bhi.n	8001cda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b05      	subs	r3, #5
 8001ca2:	221f      	movs	r2, #31
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	400a      	ands	r2, r1
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b05      	subs	r3, #5
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd8:	e04c      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d824      	bhi.n	8001d2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b23      	subs	r3, #35	; 0x23
 8001cf4:	221f      	movs	r2, #31
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	400a      	ands	r2, r1
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b23      	subs	r3, #35	; 0x23
 8001d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2a:	e023      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b41      	subs	r3, #65	; 0x41
 8001d3e:	221f      	movs	r2, #31
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43da      	mvns	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b41      	subs	r3, #65	; 0x41
 8001d68:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a30      	ldr	r2, [pc, #192]	; (8001e3c <HAL_ADC_ConfigChannel+0x29c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1f4>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <HAL_ADC_ConfigChannel+0x29c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10f      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x21e>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d10b      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001db0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dbc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_ADC_ConfigChannel+0x29c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d12b      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x280>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_ADC_ConfigChannel+0x298>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d003      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x23a>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b11      	cmp	r3, #17
 8001dd8:	d122      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001de4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001df0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_ADC_ConfigChannel+0x298>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_ADC_ConfigChannel+0x2a4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9a      	lsrs	r2, r3, #18
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e12:	e002      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	10000012 	.word	0x10000012
 8001e3c:	40012000 	.word	0x40012000
 8001e40:	40012300 	.word	0x40012300
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83

08001e4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e54:	4b78      	ldr	r3, [pc, #480]	; (8002038 <ADC_Init+0x1ec>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <ADC_Init+0x1ec>)
 8001e5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e60:	4b75      	ldr	r3, [pc, #468]	; (8002038 <ADC_Init+0x1ec>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4973      	ldr	r1, [pc, #460]	; (8002038 <ADC_Init+0x1ec>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	4a58      	ldr	r2, [pc, #352]	; (800203c <ADC_Init+0x1f0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e00f      	b.n	8001f46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0202 	bic.w	r2, r2, #2
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	005a      	lsls	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	035a      	lsls	r2, r3, #13
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	e007      	b.n	8001fbc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	051a      	lsls	r2, r3, #20
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffe:	025a      	lsls	r2, r3, #9
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	029a      	lsls	r2, r3, #10
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40012300 	.word	0x40012300
 800203c:	0f000001 	.word	0x0f000001

08002040 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002056:	2b00      	cmp	r3, #0
 8002058:	d13c      	bne.n	80020d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12b      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d127      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002094:	2b00      	cmp	r3, #0
 8002096:	d119      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0220 	bic.w	r2, r2, #32
 80020a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7fe fdd3 	bl	8000c78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020d2:	e00e      	b.n	80020f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff fd53 	bl	8001b8c <HAL_ADC_ErrorCallback>
}
 80020e6:	e004      	b.n	80020f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff fd2b 	bl	8001b64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f043 0204 	orr.w	r2, r3, #4
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff fd28 	bl	8001b8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <__NVIC_SetPriorityGrouping+0x40>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	4313      	orrs	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x40>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	05fa0000 	.word	0x05fa0000

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	; (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff29 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff3e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff31 	bl	80021bc <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa2 	bl	80022b4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff f96e 	bl	8001668 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e099      	b.n	80024cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b8:	e00f      	b.n	80023da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ba:	f7ff f955 	bl	8001668 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d908      	bls.n	80023da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2203      	movs	r2, #3
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e078      	b.n	80024cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e8      	bne.n	80023ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_DMA_Init+0x158>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b04      	cmp	r3, #4
 8002432:	d107      	bne.n	8002444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b04      	cmp	r3, #4
 800246c:	d117      	bne.n	800249e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb09 	bl	8002a98 <DMA_CheckFifoParam>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800249a:	2301      	movs	r3, #1
 800249c:	e016      	b.n	80024cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fac0 	bl	8002a2c <DMA_CalcBaseAndBitshift>
 80024ac:	4603      	mov	r3, r0
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	e010803f 	.word	0xe010803f

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_DMA_Start_IT+0x26>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e048      	b.n	8002590 <HAL_DMA_Start_IT+0xb8>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d137      	bne.n	8002582 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa52 	bl	80029d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0216 	orr.w	r2, r2, #22
 8002546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002556:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025a6:	f7ff f85f 	bl	8001668 <HAL_GetTick>
 80025aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d008      	beq.n	80025ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e052      	b.n	8002670 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0216 	bic.w	r2, r2, #22
 80025d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <HAL_DMA_Abort+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0208 	bic.w	r2, r2, #8
 8002608:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261a:	e013      	b.n	8002644 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800261c:	f7ff f824 	bl	8001668 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b05      	cmp	r3, #5
 8002628:	d90c      	bls.n	8002644 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2203      	movs	r2, #3
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e015      	b.n	8002670 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e4      	bne.n	800261c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	223f      	movs	r2, #63	; 0x3f
 8002658:	409a      	lsls	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d004      	beq.n	8002696 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00c      	b.n	80026b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2205      	movs	r2, #5
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026c8:	4b8e      	ldr	r3, [pc, #568]	; (8002904 <HAL_DMA_IRQHandler+0x248>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a8e      	ldr	r2, [pc, #568]	; (8002908 <HAL_DMA_IRQHandler+0x24c>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0a9b      	lsrs	r3, r3, #10
 80026d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2208      	movs	r2, #8
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01a      	beq.n	8002728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0204 	bic.w	r2, r2, #4
 800270e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	2208      	movs	r2, #8
 8002716:	409a      	lsls	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2201      	movs	r2, #1
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d012      	beq.n	800275e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2201      	movs	r2, #1
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0202 	orr.w	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2204      	movs	r2, #4
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2204      	movs	r2, #4
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2210      	movs	r2, #16
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d043      	beq.n	800282c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d03c      	beq.n	800282c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2210      	movs	r2, #16
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d018      	beq.n	80027fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d024      	beq.n	800282c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e01f      	b.n	800282c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
 80027fc:	e016      	b.n	800282c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0208 	bic.w	r2, r2, #8
 800281a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	2220      	movs	r2, #32
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 808f 	beq.w	800295c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8087 	beq.w	800295c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2220      	movs	r2, #32
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b05      	cmp	r3, #5
 8002864:	d136      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0216 	bic.w	r2, r2, #22
 8002874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <HAL_DMA_IRQHandler+0x1da>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0208 	bic.w	r2, r2, #8
 80028a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	223f      	movs	r2, #63	; 0x3f
 80028ac:	409a      	lsls	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d07e      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
        }
        return;
 80028d2:	e079      	b.n	80029c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01d      	beq.n	800291e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d031      	beq.n	800295c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
 8002900:	e02c      	b.n	800295c <HAL_DMA_IRQHandler+0x2a0>
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000
 8002908:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d023      	beq.n	800295c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
 800291c:	e01e      	b.n	800295c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10f      	bne.n	800294c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0210 	bic.w	r2, r2, #16
 800293a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	2b00      	cmp	r3, #0
 8002962:	d032      	beq.n	80029ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d022      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2205      	movs	r2, #5
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	d307      	bcc.n	80029a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f2      	bne.n	8002988 <HAL_DMA_IRQHandler+0x2cc>
 80029a2:	e000      	b.n	80029a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
 80029c6:	e000      	b.n	80029ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80029c8:	bf00      	nop
    }
  }
}
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d108      	bne.n	8002a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a0e:	e007      	b.n	8002a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3b10      	subs	r3, #16
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <DMA_CalcBaseAndBitshift+0x60>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <DMA_CalcBaseAndBitshift+0x64>)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d908      	bls.n	8002a6c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <DMA_CalcBaseAndBitshift+0x68>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	1d1a      	adds	r2, r3, #4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58
 8002a6a:	e006      	b.n	8002a7a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <DMA_CalcBaseAndBitshift+0x68>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	aaaaaaab 	.word	0xaaaaaaab
 8002a90:	08009740 	.word	0x08009740
 8002a94:	fffffc00 	.word	0xfffffc00

08002a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11f      	bne.n	8002af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d856      	bhi.n	8002b66 <DMA_CheckFifoParam+0xce>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <DMA_CheckFifoParam+0x28>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002ae3 	.word	0x08002ae3
 8002ac8:	08002ad1 	.word	0x08002ad1
 8002acc:	08002b67 	.word	0x08002b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d046      	beq.n	8002b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e043      	b.n	8002b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aea:	d140      	bne.n	8002b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e03d      	b.n	8002b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	d121      	bne.n	8002b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d837      	bhi.n	8002b72 <DMA_CheckFifoParam+0xda>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <DMA_CheckFifoParam+0x70>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b1f 	.word	0x08002b1f
 8002b10:	08002b19 	.word	0x08002b19
 8002b14:	08002b31 	.word	0x08002b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e030      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d025      	beq.n	8002b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2e:	e022      	b.n	8002b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b38:	d11f      	bne.n	8002b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b3e:	e01c      	b.n	8002b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d903      	bls.n	8002b4e <DMA_CheckFifoParam+0xb6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d003      	beq.n	8002b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b4c:	e018      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      break;
 8002b52:	e015      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e00b      	b.n	8002b7e <DMA_CheckFifoParam+0xe6>
      break;
 8002b66:	bf00      	nop
 8002b68:	e00a      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e008      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e006      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e175      	b.n	8002e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8164 	bne.w	8002e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x56>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80be 	beq.w	8002e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d32:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d037      	beq.n	8002dce <HAL_GPIO_Init+0x23e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_GPIO_Init+0x23a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x236>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <HAL_GPIO_Init+0x338>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x232>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a54      	ldr	r2, [pc, #336]	; (8002ecc <HAL_GPIO_Init+0x33c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x22e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <HAL_GPIO_Init+0x340>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x22a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_GPIO_Init+0x344>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x348>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x34c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x350>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x21a>
 8002da6:	2309      	movs	r3, #9
 8002da8:	e012      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002daa:	230a      	movs	r3, #10
 8002dac:	e010      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dae:	2308      	movs	r3, #8
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae86 	bls.w	8002bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fe62 	bl	8000c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4e:	b08f      	sub	sp, #60	; 0x3c
 8002f50:	af0a      	add	r7, sp, #40	; 0x28
 8002f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e116      	b.n	800318c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe fa81 	bl	8001480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fa99 	bl	80064d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	687e      	ldr	r6, [r7, #4]
 8002faa:	466d      	mov	r5, sp
 8002fac:	f106 0410 	add.w	r4, r6, #16
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc0:	1d33      	adds	r3, r6, #4
 8002fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f003 fa2d 	bl	8006424 <USB_CoreInit>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0d7      	b.n	800318c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fa87 	bl	80064f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	e04a      	b.n	8003084 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	333d      	adds	r3, #61	; 0x3d
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	333c      	adds	r3, #60	; 0x3c
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	b298      	uxth	r0, r3
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3344      	adds	r3, #68	; 0x44
 800302a:	4602      	mov	r2, r0
 800302c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3340      	adds	r3, #64	; 0x40
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3348      	adds	r3, #72	; 0x48
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	334c      	adds	r3, #76	; 0x4c
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3354      	adds	r3, #84	; 0x54
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	3301      	adds	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d3af      	bcc.n	8002fee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e044      	b.n	800311e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030d6:	7bfa      	ldrb	r2, [r7, #15]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	3301      	adds	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d3b5      	bcc.n	8003094 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	687e      	ldr	r6, [r7, #4]
 8003130:	466d      	mov	r5, sp
 8003132:	f106 0410 	add.w	r4, r6, #16
 8003136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003142:	e885 0003 	stmia.w	r5, {r0, r1}
 8003146:	1d33      	adds	r3, r6, #4
 8003148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314a:	6838      	ldr	r0, [r7, #0]
 800314c:	f003 fa20 	bl	8006590 <USB_DevInit>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e014      	b.n	800318c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f80a 	bl	8003194 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fbde 	bl	8006946 <USB_DevDisconnect>

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003194 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	10000003 	.word	0x10000003

080031dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40007000 	.word	0x40007000

080031fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_PWREx_EnableOverDrive+0x98>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800322a:	f7fe fa1d 	bl	8001668 <HAL_GetTick>
 800322e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003230:	e009      	b.n	8003246 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003232:	f7fe fa19 	bl	8001668 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003240:	d901      	bls.n	8003246 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e022      	b.n	800328c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d1ee      	bne.n	8003232 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800325a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003260:	f7fe fa02 	bl	8001668 <HAL_GetTick>
 8003264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003266:	e009      	b.n	800327c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003268:	f7fe f9fe 	bl	8001668 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003276:	d901      	bls.n	800327c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e007      	b.n	800328c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003288:	d1ee      	bne.n	8003268 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000

0800329c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e29b      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8087 	beq.w	80033ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c0:	4b96      	ldr	r3, [pc, #600]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d00c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032cc:	4b93      	ldr	r3, [pc, #588]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_OscConfig+0x62>
 80032d8:	4b90      	ldr	r3, [pc, #576]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	4b8d      	ldr	r3, [pc, #564]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06c      	beq.n	80033cc <HAL_RCC_OscConfig+0x130>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e275      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x7a>
 8003308:	4b84      	ldr	r3, [pc, #528]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a83      	ldr	r2, [pc, #524]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e02e      	b.n	8003374 <HAL_RCC_OscConfig+0xd8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x9c>
 800331e:	4b7f      	ldr	r3, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7e      	ldr	r2, [pc, #504]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b7c      	ldr	r3, [pc, #496]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7b      	ldr	r2, [pc, #492]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xd8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0xc0>
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a75      	ldr	r2, [pc, #468]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b73      	ldr	r3, [pc, #460]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a72      	ldr	r2, [pc, #456]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xd8>
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6e      	ldr	r2, [pc, #440]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6b      	ldr	r2, [pc, #428]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe f974 	bl	8001668 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f970 	bl	8001668 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e229      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe f960 	bl	8001668 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe f95c 	bl	8001668 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e215      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b57      	ldr	r3, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x110>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d069      	beq.n	80034ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b4d      	ldr	r3, [pc, #308]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x190>
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x17a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1e9      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	493d      	ldr	r1, [pc, #244]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e040      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a38      	ldr	r2, [pc, #224]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f912 	bl	8001668 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe f90e 	bl	8001668 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4929      	ldr	r1, [pc, #164]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
 800347a:	e018      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347c:	4b27      	ldr	r3, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x280>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a26      	ldr	r2, [pc, #152]	; (800351c <HAL_RCC_OscConfig+0x280>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe f8ee 	bl	8001668 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7fe f8ea 	bl	8001668 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1a3      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1e      	ldr	r3, [pc, #120]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d038      	beq.n	800352c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d019      	beq.n	80034f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80034c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe f8cb 	bl	8001668 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d6:	f7fe f8c7 	bl	8001668 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e180      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x23a>
 80034f4:	e01a      	b.n	800352c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <HAL_RCC_OscConfig+0x280>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fe f8b1 	bl	8001668 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350a:	f7fe f8ad 	bl	8001668 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d903      	bls.n	8003520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e166      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
 800351c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b92      	ldr	r3, [pc, #584]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ee      	bne.n	800350a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a4 	beq.w	8003682 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b89      	ldr	r3, [pc, #548]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a88      	ldr	r2, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b86      	ldr	r3, [pc, #536]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003562:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d118      	bne.n	80035a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7f      	ldr	r2, [pc, #508]	; (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7fe f875 	bl	8001668 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003582:	f7fe f871 	bl	8001668 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b64      	cmp	r3, #100	; 0x64
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e12a      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x4d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_OscConfig+0x31a>
 80035a8:	4b70      	ldr	r3, [pc, #448]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a6f      	ldr	r2, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	e02d      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x33c>
 80035be:	4b6b      	ldr	r3, [pc, #428]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a6a      	ldr	r2, [pc, #424]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	4b68      	ldr	r3, [pc, #416]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a67      	ldr	r2, [pc, #412]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	e01c      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d10c      	bne.n	80035fa <HAL_RCC_OscConfig+0x35e>
 80035e0:	4b62      	ldr	r3, [pc, #392]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a61      	ldr	r2, [pc, #388]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	4b5f      	ldr	r3, [pc, #380]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	4a5e      	ldr	r2, [pc, #376]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	; 0x70
 80035f8:	e00b      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
 80035fa:	4b5c      	ldr	r3, [pc, #368]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5b      	ldr	r2, [pc, #364]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe f825 	bl	8001668 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fe f821 	bl	8001668 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0d8      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	4b4c      	ldr	r3, [pc, #304]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ee      	beq.n	8003622 <HAL_RCC_OscConfig+0x386>
 8003644:	e014      	b.n	8003670 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe f80f 	bl	8001668 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe f80b 	bl	8001668 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0c2      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ee      	bne.n	800364e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a3c      	ldr	r2, [pc, #240]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800367c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80ae 	beq.w	80037e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d06d      	beq.n	8003774 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d14b      	bne.n	8003738 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b32      	ldr	r3, [pc, #200]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a31      	ldr	r2, [pc, #196]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd ffdc 	bl	8001668 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd ffd8 	bl	8001668 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e091      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	491b      	ldr	r1, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd ffaa 	bl	8001668 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd ffa6 	bl	8001668 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e05f      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x47c>
 8003736:	e057      	b.n	80037e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd ff90 	bl	8001668 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd ff8c 	bl	8001668 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_RCC_OscConfig+0x4d0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x4b0>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x54c>
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_RCC_OscConfig+0x558>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d030      	beq.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d129      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d122      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d119      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d10f      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d0      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d910      	bls.n	8003840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 020f 	bic.w	r2, r3, #15
 8003826:	4965      	ldr	r1, [pc, #404]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b63      	ldr	r3, [pc, #396]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003870:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800387a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	494d      	ldr	r1, [pc, #308]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d040      	beq.n	800391c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d115      	bne.n	80038da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e073      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4936      	ldr	r1, [pc, #216]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fd febc 	bl	8001668 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd feb8 	bl	8001668 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e053      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d210      	bcs.n	800394c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 020f 	bic.w	r2, r3, #15
 8003932:	4922      	ldr	r1, [pc, #136]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e032      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4916      	ldr	r1, [pc, #88]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	490e      	ldr	r1, [pc, #56]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398a:	f000 f821 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 800398e:	4602      	mov	r2, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	490a      	ldr	r1, [pc, #40]	; (80039c4 <HAL_RCC_ClockConfig+0x1cc>)
 800399c:	5ccb      	ldrb	r3, [r1, r3]
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1d0>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1d4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fe18 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023c00 	.word	0x40023c00
 80039c0:	40023800 	.word	0x40023800
 80039c4:	08009728 	.word	0x08009728
 80039c8:	20000000 	.word	0x20000000
 80039cc:	20000004 	.word	0x20000004

080039d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d4:	b094      	sub	sp, #80	; 0x50
 80039d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	647b      	str	r3, [r7, #68]	; 0x44
 80039dc:	2300      	movs	r3, #0
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e0:	2300      	movs	r3, #0
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e8:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d00d      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x40>
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	f200 80e1 	bhi.w	8003bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x34>
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a02:	e0db      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a08:	e0db      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0a:	4b73      	ldr	r3, [pc, #460]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a0e:	e0d8      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a10:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a18:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d063      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a26:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	099b      	lsrs	r3, r3, #6
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	f04f 0000 	mov.w	r0, #0
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	0159      	lsls	r1, r3, #5
 8003a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a54:	0150      	lsls	r0, r2, #5
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	1a51      	subs	r1, r2, r1
 8003a5e:	6139      	str	r1, [r7, #16]
 8003a60:	4629      	mov	r1, r5
 8003a62:	eb63 0301 	sbc.w	r3, r3, r1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a74:	4659      	mov	r1, fp
 8003a76:	018b      	lsls	r3, r1, #6
 8003a78:	4651      	mov	r1, sl
 8003a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a7e:	4651      	mov	r1, sl
 8003a80:	018a      	lsls	r2, r1, #6
 8003a82:	4651      	mov	r1, sl
 8003a84:	ebb2 0801 	subs.w	r8, r2, r1
 8003a88:	4659      	mov	r1, fp
 8003a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aa2:	4690      	mov	r8, r2
 8003aa4:	4699      	mov	r9, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	eb18 0303 	adds.w	r3, r8, r3
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	462b      	mov	r3, r5
 8003ab0:	eb49 0303 	adc.w	r3, r9, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	024b      	lsls	r3, r1, #9
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003acc:	4621      	mov	r1, r4
 8003ace:	024a      	lsls	r2, r1, #9
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ae0:	f7fc fc06 	bl	80002f0 <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4613      	mov	r3, r2
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aec:	e058      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aee:	4b38      	ldr	r3, [pc, #224]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	099b      	lsrs	r3, r3, #6
 8003af4:	2200      	movs	r2, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	4611      	mov	r1, r2
 8003afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003afe:	623b      	str	r3, [r7, #32]
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
 8003b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	0159      	lsls	r1, r3, #5
 8003b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b1a:	0150      	lsls	r0, r2, #5
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4641      	mov	r1, r8
 8003b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b26:	4649      	mov	r1, r9
 8003b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b40:	ebb2 040a 	subs.w	r4, r2, sl
 8003b44:	eb63 050b 	sbc.w	r5, r3, fp
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	00eb      	lsls	r3, r5, #3
 8003b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b56:	00e2      	lsls	r2, r4, #3
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	18e3      	adds	r3, r4, r3
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	464b      	mov	r3, r9
 8003b64:	eb45 0303 	adc.w	r3, r5, r3
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b76:	4629      	mov	r1, r5
 8003b78:	028b      	lsls	r3, r1, #10
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b80:	4621      	mov	r1, r4
 8003b82:	028a      	lsls	r2, r1, #10
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	61fa      	str	r2, [r7, #28]
 8003b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b94:	f7fc fbac 	bl	80002f0 <__aeabi_uldivmod>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3750      	adds	r7, #80	; 0x50
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0a9b      	lsrs	r3, r3, #10
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	08009738 	.word	0x08009738

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c20:	f7ff ffdc 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0b5b      	lsrs	r3, r3, #13
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	08009738 	.word	0x08009738

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c6c:	4b69      	ldr	r3, [pc, #420]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a68      	ldr	r2, [pc, #416]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c76:	6093      	str	r3, [r2, #8]
 8003c78:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	4964      	ldr	r1, [pc, #400]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	4959      	ldr	r1, [pc, #356]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d017      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cda:	4b4e      	ldr	r3, [pc, #312]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	494a      	ldr	r1, [pc, #296]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 808b 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d28:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
 8003d34:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fd fc8c 	bl	8001668 <HAL_GetTick>
 8003d50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d54:	f7fd fc88 	bl	8001668 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e38f      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d66:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d035      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d02e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d114      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fc50 	bl	8001668 <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fc4c 	bl	8001668 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e351      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ee      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfa:	d111      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	4901      	ldr	r1, [pc, #4]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	0ffffcff 	.word	0x0ffffcff
 8003e20:	4bac      	ldr	r3, [pc, #688]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4aab      	ldr	r2, [pc, #684]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	4ba9      	ldr	r3, [pc, #676]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e38:	49a6      	ldr	r1, [pc, #664]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e4a:	4ba2      	ldr	r3, [pc, #648]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e50:	4aa0      	ldr	r2, [pc, #640]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	499b      	ldr	r1, [pc, #620]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e78:	4b96      	ldr	r3, [pc, #600]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e86:	4993      	ldr	r1, [pc, #588]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e9a:	4b8e      	ldr	r3, [pc, #568]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea8:	498a      	ldr	r1, [pc, #552]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ebc:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eca:	4982      	ldr	r1, [pc, #520]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ede:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4979      	ldr	r1, [pc, #484]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f00:	4b74      	ldr	r3, [pc, #464]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	4971      	ldr	r1, [pc, #452]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f22:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f023 020c 	bic.w	r2, r3, #12
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f30:	4968      	ldr	r1, [pc, #416]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f44:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	4960      	ldr	r1, [pc, #384]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f66:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	4957      	ldr	r1, [pc, #348]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f88:	4b52      	ldr	r3, [pc, #328]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	494f      	ldr	r1, [pc, #316]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003faa:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	4946      	ldr	r1, [pc, #280]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fcc:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	493e      	ldr	r1, [pc, #248]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	4935      	ldr	r1, [pc, #212]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004010:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401e:	492d      	ldr	r1, [pc, #180]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004032:	4b28      	ldr	r3, [pc, #160]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004040:	4924      	ldr	r1, [pc, #144]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004050:	d101      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	4914      	ldr	r1, [pc, #80]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a4:	490b      	ldr	r1, [pc, #44]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c8:	4902      	ldr	r1, [pc, #8]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040d0:	e002      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040e4:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	4986      	ldr	r1, [pc, #536]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004108:	4b81      	ldr	r3, [pc, #516]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004118:	497d      	ldr	r1, [pc, #500]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d006      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80d6 	beq.w	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004134:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a75      	ldr	r2, [pc, #468]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800413e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004140:	f7fd fa92 	bl	8001668 <HAL_GetTick>
 8004144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004148:	f7fd fa8e 	bl	8001668 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e195      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d021      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11d      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004188:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418e:	0e1b      	lsrs	r3, r3, #24
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	019a      	lsls	r2, r3, #6
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	061b      	lsls	r3, r3, #24
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	071b      	lsls	r3, r3, #28
 80041ae:	4958      	ldr	r1, [pc, #352]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e0:	d129      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041e2:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041f0:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f6:	0f1b      	lsrs	r3, r3, #28
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	019a      	lsls	r2, r3, #6
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	493e      	ldr	r1, [pc, #248]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800421e:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004224:	f023 021f 	bic.w	r2, r3, #31
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	3b01      	subs	r3, #1
 800422e:	4938      	ldr	r1, [pc, #224]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004242:	4b33      	ldr	r3, [pc, #204]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	0e1b      	lsrs	r3, r3, #24
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004250:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004256:	0f1b      	lsrs	r3, r3, #28
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	019a      	lsls	r2, r3, #6
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4926      	ldr	r1, [pc, #152]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	019a      	lsls	r2, r3, #6
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ba:	f7fd f9d5 	bl	8001668 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042c2:	f7fd f9d1 	bl	8001668 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b64      	cmp	r3, #100	; 0x64
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0d8      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 80ce 	bne.w	8004484 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a08      	ldr	r2, [pc, #32]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fd f9b8 	bl	8001668 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042fa:	e00b      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042fc:	f7fd f9b4 	bl	8001668 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d904      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0bb      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004314:	4b5e      	ldr	r3, [pc, #376]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004320:	d0ec      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02e      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d12a      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800434a:	4b51      	ldr	r3, [pc, #324]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004358:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	0f1b      	lsrs	r3, r3, #28
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	019a      	lsls	r2, r3, #6
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	071b      	lsls	r3, r3, #28
 800437e:	4944      	ldr	r1, [pc, #272]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004386:	4b42      	ldr	r3, [pc, #264]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	3b01      	subs	r3, #1
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	493d      	ldr	r1, [pc, #244]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d022      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b4:	d11d      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	0e1b      	lsrs	r3, r3, #24
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043c4:	4b32      	ldr	r3, [pc, #200]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	0f1b      	lsrs	r3, r3, #28
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	019a      	lsls	r2, r3, #6
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	431a      	orrs	r2, r3
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	061b      	lsls	r3, r3, #24
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	4929      	ldr	r1, [pc, #164]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d028      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	4917      	ldr	r1, [pc, #92]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4911      	ldr	r1, [pc, #68]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445c:	f7fd f904 	bl	8001668 <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004464:	f7fd f900 	bl	8001668 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e007      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004482:	d1ef      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800

08004494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e09d      	b.n	80045e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b6:	d009      	beq.n	80044cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	61da      	str	r2, [r3, #28]
 80044be:	e005      	b.n	80044cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fc fce2 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004502:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800450c:	d902      	bls.n	8004514 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e002      	b.n	800451a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004518:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004522:	d007      	beq.n	8004534 <HAL_SPI_Init+0xa0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	ea42 0103 	orr.w	r1, r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f003 0204 	and.w	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045b0:	ea42 0103 	orr.w	r1, r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
    return;
 800462e:	e0d7      	b.n	80047e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_SPI_IRQHandler+0x66>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	09db      	lsrs	r3, r3, #7
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
    return;
 8004650:	e0c6      	b.n	80047e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10c      	bne.n	8004678 <HAL_SPI_IRQHandler+0x8c>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80b4 	beq.w	80047e0 <HAL_SPI_IRQHandler+0x1f4>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80ad 	beq.w	80047e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d023      	beq.n	80046da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b03      	cmp	r3, #3
 800469c:	d011      	beq.n	80046c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a2:	f043 0204 	orr.w	r2, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	e00b      	b.n	80046da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
        return;
 80046d8:	e082      	b.n	80047e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d014      	beq.n	8004710 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004720:	f043 0208 	orr.w	r2, r3, #8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473a:	2b00      	cmp	r3, #0
 800473c:	d04f      	beq.n	80047de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800474c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_SPI_IRQHandler+0x17e>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d034      	beq.n	80047d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0203 	bic.w	r2, r2, #3
 8004778:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_SPI_IRQHandler+0x1fc>)
 8004788:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	4618      	mov	r0, r3
 8004790:	f7fd ff72 	bl	8002678 <HAL_DMA_Abort_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d016      	beq.n	80047dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <HAL_SPI_IRQHandler+0x1fc>)
 80047b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd ff5c 	bl	8002678 <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80047d2:	e003      	b.n	80047dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f809 	bl	80047ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047da:	e000      	b.n	80047de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80047dc:	bf00      	nop
    return;
 80047de:	bf00      	nop
  }
}
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	08004801 	.word	0x08004801

080047ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff ffe5 	bl	80047ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e049      	b.n	80048d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fc fd29 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 fabf 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e054      	b.n	800499a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d01d      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_TIM_Base_Start_IT+0xe4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x80>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d115      	bne.n	8004984 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_TIM_Base_Start_IT+0xec>)
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d015      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0xbe>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d011      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	e008      	b.n	8004996 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e000      	b.n	8004998 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40001800 	.word	0x40001800
 80049c4:	00010007 	.word	0x00010007

080049c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0202 	mvn.w	r2, #2
 80049f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9d0 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9c2 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9d3 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0204 	mvn.w	r2, #4
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9a6 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f998 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f9a9 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0208 	mvn.w	r2, #8
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f97c 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f96e 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f97f 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0210 	mvn.w	r2, #16
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2208      	movs	r2, #8
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f952 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f944 	bl	8004d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f955 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0201 	mvn.w	r2, #1
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc f84a 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fb0c 	bl	8005190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	d10e      	bne.n	8004ba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d107      	bne.n	8004ba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 faff 	bl	80051a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d10e      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d107      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f903 	bl	8004dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d10e      	bne.n	8004bfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d107      	bne.n	8004bfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f06f 0220 	mvn.w	r2, #32
 8004bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fabf 	bl	800517c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_ConfigClockSource+0x1c>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0b4      	b.n	8004d8e <HAL_TIM_ConfigClockSource+0x186>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_TIM_ConfigClockSource+0x190>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	d03e      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd4>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c62:	f200 8087 	bhi.w	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	f000 8086 	beq.w	8004d7a <HAL_TIM_ConfigClockSource+0x172>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d87f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d01a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xa6>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d87b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d050      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x11a>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d877      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d03c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xfa>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d873      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d058      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x13a>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d86f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d064      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d86b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d060      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d867      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d05a      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	e062      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f000 f9af 	bl	8005020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
      break;
 8004cda:	e04f      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f000 f998 	bl	8005020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfe:	609a      	str	r2, [r3, #8]
      break;
 8004d00:	e03c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 f90c 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2150      	movs	r1, #80	; 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f965 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d20:	e02c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 f92b 	bl	8004f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2160      	movs	r1, #96	; 0x60
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f955 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d40:	e01c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 f8ec 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f945 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d60:	e00c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 f93c 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d72:	e003      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	fffeff88 	.word	0xfffeff88

08004d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0a:	d00f      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3d      	ldr	r2, [pc, #244]	; (8004f04 <TIM_Base_SetConfig+0x118>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <TIM_Base_SetConfig+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3b      	ldr	r2, [pc, #236]	; (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2f      	ldr	r2, [pc, #188]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d027      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <TIM_Base_SetConfig+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d023      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <TIM_Base_SetConfig+0x11c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a28      	ldr	r2, [pc, #160]	; (8004f14 <TIM_Base_SetConfig+0x128>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <TIM_Base_SetConfig+0x12c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <TIM_Base_SetConfig+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0xf8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800
 8004f20:	40001800 	.word	0x40001800
 8004f24:	40001c00 	.word	0x40001c00
 8004f28:	40002000 	.word	0x40002000

08004f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 030a 	bic.w	r3, r3, #10
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0210 	bic.w	r2, r3, #16
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	031b      	lsls	r3, r3, #12
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	f043 0307 	orr.w	r3, r3, #7
 800500c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	431a      	orrs	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e06d      	b.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a30      	ldr	r2, [pc, #192]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2f      	ldr	r2, [pc, #188]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d108      	bne.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a20      	ldr	r2, [pc, #128]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d01d      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1c      	ldr	r2, [pc, #112]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d10c      	bne.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40014000 	.word	0x40014000
 8005178:	40001800 	.word	0x40001800

0800517c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e040      	b.n	800524c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc f8ba 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	; 0x24
 80051e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fb9c 	bl	8005934 <UART_SetConfig>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e022      	b.n	800524c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fdf4 	bl	8005dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fe7b 	bl	8005f40 <UART_CheckIdleState>
 800524a:	4603      	mov	r3, r0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005254:	b480      	push	{r7}
 8005256:	b08b      	sub	sp, #44	; 0x2c
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005266:	2b20      	cmp	r3, #32
 8005268:	d147      	bne.n	80052fa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_Transmit_IT+0x22>
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e040      	b.n	80052fc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2221      	movs	r2, #33	; 0x21
 80052a2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	d107      	bne.n	80052be <HAL_UART_Transmit_IT+0x6a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a13      	ldr	r2, [pc, #76]	; (8005308 <HAL_UART_Transmit_IT+0xb4>)
 80052ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80052bc:	e002      	b.n	80052c4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_UART_Transmit_IT+0xb8>)
 80052c2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	613b      	str	r3, [r7, #16]
   return(result);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69f9      	ldr	r1, [r7, #28]
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e6      	bne.n	80052c4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e000      	b.n	80052fc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	372c      	adds	r7, #44	; 0x2c
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	08006311 	.word	0x08006311
 800530c:	0800625b 	.word	0x0800625b

08005310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b0ba      	sub	sp, #232	; 0xe8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005336:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800533a:	f640 030f 	movw	r3, #2063	; 0x80f
 800533e:	4013      	ands	r3, r2
 8005340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d115      	bne.n	8005378 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00f      	beq.n	8005378 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 82ac 	beq.w	80058c6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
      }
      return;
 8005376:	e2a6      	b.n	80058c6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8117 	beq.w	80055b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800538e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005392:	4b85      	ldr	r3, [pc, #532]	; (80055a8 <HAL_UART_IRQHandler+0x298>)
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 810a 	beq.w	80055b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <HAL_UART_IRQHandler+0xbc>
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2201      	movs	r2, #1
 80053ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d011      	beq.n	80053fc <HAL_UART_IRQHandler+0xec>
 80053d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2202      	movs	r2, #2
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <HAL_UART_IRQHandler+0x11c>
 8005408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2204      	movs	r2, #4
 800541a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800542c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d017      	beq.n	8005468 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2208      	movs	r2, #8
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545e:	f043 0208 	orr.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005470:	2b00      	cmp	r3, #0
 8005472:	d012      	beq.n	800549a <HAL_UART_IRQHandler+0x18a>
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00c      	beq.n	800549a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005488:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8212 	beq.w	80058ca <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d04f      	beq.n	8005592 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fe37 	bl	8006166 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d141      	bne.n	800558a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3308      	adds	r3, #8
 800550c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800551c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800553e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800554a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1d9      	bne.n	8005506 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005556:	2b00      	cmp	r3, #0
 8005558:	d013      	beq.n	8005582 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_UART_IRQHandler+0x29c>)
 8005560:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005566:	4618      	mov	r0, r3
 8005568:	f7fd f886 	bl	8002678 <HAL_DMA_Abort_IT>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d017      	beq.n	80055a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e00f      	b.n	80055a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9b6 	bl	80058f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e00b      	b.n	80055a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f9b2 	bl	80058f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e007      	b.n	80055a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9ae 	bl	80058f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80055a0:	e193      	b.n	80058ca <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a2:	bf00      	nop
    return;
 80055a4:	e191      	b.n	80058ca <HAL_UART_IRQHandler+0x5ba>
 80055a6:	bf00      	nop
 80055a8:	04000120 	.word	0x04000120
 80055ac:	0800622f 	.word	0x0800622f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 814c 	bne.w	8005852 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8145 	beq.w	8005852 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 813e 	beq.w	8005852 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2210      	movs	r2, #16
 80055dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	f040 80b6 	bne.w	800575a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8165 	beq.w	80058ce <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800560a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800560e:	429a      	cmp	r2, r3
 8005610:	f080 815d 	bcs.w	80058ce <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800561a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005628:	f000 8086 	beq.w	8005738 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800565a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800566e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1da      	bne.n	800562c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3308      	adds	r3, #8
 8005696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800569a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800569e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e1      	bne.n	8005676 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e3      	bne.n	80056b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005708:	f023 0310 	bic.w	r3, r3, #16
 800570c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800571a:	65bb      	str	r3, [r7, #88]	; 0x58
 800571c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e4      	bne.n	80056f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005732:	4618      	mov	r0, r3
 8005734:	f7fc ff30 	bl	8002598 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800574a:	b29b      	uxth	r3, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8d8 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005758:	e0b9      	b.n	80058ce <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005766:	b29b      	uxth	r3, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80ab 	beq.w	80058d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800577c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a6 	beq.w	80058d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800579a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057a8:	647b      	str	r3, [r7, #68]	; 0x44
 80057aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e4      	bne.n	8005786 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	623b      	str	r3, [r7, #32]
   return(result);
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057e0:	633a      	str	r2, [r7, #48]	; 0x30
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e3      	bne.n	80057bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	60fb      	str	r3, [r7, #12]
   return(result);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f023 0310 	bic.w	r3, r3, #16
 800581c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	69b9      	ldr	r1, [r7, #24]
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	617b      	str	r3, [r7, #20]
   return(result);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e4      	bne.n	8005808 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f85c 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005850:	e03f      	b.n	80058d2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00e      	beq.n	800587c <HAL_UART_IRQHandler+0x56c>
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f853 	bl	8005920 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800587a:	e02d      	b.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01c      	beq.n	80058d6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
    }
    return;
 80058a4:	e017      	b.n	80058d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00c      	beq.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fd86 	bl	80063d0 <UART_EndTransmit_IT>
    return;
 80058c4:	e008      	b.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80058c6:	bf00      	nop
 80058c8:	e006      	b.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80058ca:	bf00      	nop
 80058cc:	e004      	b.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80058ce:	bf00      	nop
 80058d0:	e002      	b.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80058d6:	bf00      	nop
  }

}
 80058d8:	37e8      	adds	r7, #232	; 0xe8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop

080058e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4ba6      	ldr	r3, [pc, #664]	; (8005bf8 <UART_SetConfig+0x2c4>)
 8005960:	4013      	ands	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	430b      	orrs	r3, r1
 800596a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a94      	ldr	r2, [pc, #592]	; (8005bfc <UART_SetConfig+0x2c8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d120      	bne.n	80059f2 <UART_SetConfig+0xbe>
 80059b0:	4b93      	ldr	r3, [pc, #588]	; (8005c00 <UART_SetConfig+0x2cc>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d816      	bhi.n	80059ec <UART_SetConfig+0xb8>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x90>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059e1 	.word	0x080059e1
 80059cc:	080059db 	.word	0x080059db
 80059d0:	080059e7 	.word	0x080059e7
 80059d4:	2301      	movs	r3, #1
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e150      	b.n	8005c7c <UART_SetConfig+0x348>
 80059da:	2302      	movs	r3, #2
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e14d      	b.n	8005c7c <UART_SetConfig+0x348>
 80059e0:	2304      	movs	r3, #4
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e14a      	b.n	8005c7c <UART_SetConfig+0x348>
 80059e6:	2308      	movs	r3, #8
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e147      	b.n	8005c7c <UART_SetConfig+0x348>
 80059ec:	2310      	movs	r3, #16
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e144      	b.n	8005c7c <UART_SetConfig+0x348>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a83      	ldr	r2, [pc, #524]	; (8005c04 <UART_SetConfig+0x2d0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d132      	bne.n	8005a62 <UART_SetConfig+0x12e>
 80059fc:	4b80      	ldr	r3, [pc, #512]	; (8005c00 <UART_SetConfig+0x2cc>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b0c      	cmp	r3, #12
 8005a08:	d828      	bhi.n	8005a5c <UART_SetConfig+0x128>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0xdc>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a45 	.word	0x08005a45
 8005a14:	08005a5d 	.word	0x08005a5d
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a51 	.word	0x08005a51
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a5d 	.word	0x08005a5d
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a4b 	.word	0x08005a4b
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005a57 	.word	0x08005a57
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e118      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e115      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a50:	2304      	movs	r3, #4
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e112      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a56:	2308      	movs	r3, #8
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e10f      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e10c      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a68      	ldr	r2, [pc, #416]	; (8005c08 <UART_SetConfig+0x2d4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d120      	bne.n	8005aae <UART_SetConfig+0x17a>
 8005a6c:	4b64      	ldr	r3, [pc, #400]	; (8005c00 <UART_SetConfig+0x2cc>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a76:	2b30      	cmp	r3, #48	; 0x30
 8005a78:	d013      	beq.n	8005aa2 <UART_SetConfig+0x16e>
 8005a7a:	2b30      	cmp	r3, #48	; 0x30
 8005a7c:	d814      	bhi.n	8005aa8 <UART_SetConfig+0x174>
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d009      	beq.n	8005a96 <UART_SetConfig+0x162>
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d810      	bhi.n	8005aa8 <UART_SetConfig+0x174>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <UART_SetConfig+0x15c>
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d006      	beq.n	8005a9c <UART_SetConfig+0x168>
 8005a8e:	e00b      	b.n	8005aa8 <UART_SetConfig+0x174>
 8005a90:	2300      	movs	r3, #0
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e0f2      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a96:	2302      	movs	r3, #2
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e0ef      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e0ec      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e0e9      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e0e6      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a56      	ldr	r2, [pc, #344]	; (8005c0c <UART_SetConfig+0x2d8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d120      	bne.n	8005afa <UART_SetConfig+0x1c6>
 8005ab8:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <UART_SetConfig+0x2cc>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac4:	d013      	beq.n	8005aee <UART_SetConfig+0x1ba>
 8005ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac8:	d814      	bhi.n	8005af4 <UART_SetConfig+0x1c0>
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d009      	beq.n	8005ae2 <UART_SetConfig+0x1ae>
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d810      	bhi.n	8005af4 <UART_SetConfig+0x1c0>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <UART_SetConfig+0x1a8>
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d006      	beq.n	8005ae8 <UART_SetConfig+0x1b4>
 8005ada:	e00b      	b.n	8005af4 <UART_SetConfig+0x1c0>
 8005adc:	2300      	movs	r3, #0
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e0cc      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e0c9      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e0c6      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aee:	2308      	movs	r3, #8
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e0c3      	b.n	8005c7c <UART_SetConfig+0x348>
 8005af4:	2310      	movs	r3, #16
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e0c0      	b.n	8005c7c <UART_SetConfig+0x348>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a44      	ldr	r2, [pc, #272]	; (8005c10 <UART_SetConfig+0x2dc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d125      	bne.n	8005b50 <UART_SetConfig+0x21c>
 8005b04:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <UART_SetConfig+0x2cc>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b12:	d017      	beq.n	8005b44 <UART_SetConfig+0x210>
 8005b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b18:	d817      	bhi.n	8005b4a <UART_SetConfig+0x216>
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1e:	d00b      	beq.n	8005b38 <UART_SetConfig+0x204>
 8005b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b24:	d811      	bhi.n	8005b4a <UART_SetConfig+0x216>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <UART_SetConfig+0x1fe>
 8005b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2e:	d006      	beq.n	8005b3e <UART_SetConfig+0x20a>
 8005b30:	e00b      	b.n	8005b4a <UART_SetConfig+0x216>
 8005b32:	2300      	movs	r3, #0
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e0a1      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e09e      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e09b      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b44:	2308      	movs	r3, #8
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e098      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b4a:	2310      	movs	r3, #16
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e095      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	; (8005c14 <UART_SetConfig+0x2e0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d125      	bne.n	8005ba6 <UART_SetConfig+0x272>
 8005b5a:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <UART_SetConfig+0x2cc>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b68:	d017      	beq.n	8005b9a <UART_SetConfig+0x266>
 8005b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b6e:	d817      	bhi.n	8005ba0 <UART_SetConfig+0x26c>
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d00b      	beq.n	8005b8e <UART_SetConfig+0x25a>
 8005b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b7a:	d811      	bhi.n	8005ba0 <UART_SetConfig+0x26c>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <UART_SetConfig+0x254>
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b84:	d006      	beq.n	8005b94 <UART_SetConfig+0x260>
 8005b86:	e00b      	b.n	8005ba0 <UART_SetConfig+0x26c>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e076      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e073      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b94:	2304      	movs	r3, #4
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e070      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e06d      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e06a      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <UART_SetConfig+0x2e4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d138      	bne.n	8005c22 <UART_SetConfig+0x2ee>
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <UART_SetConfig+0x2cc>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bbe:	d017      	beq.n	8005bf0 <UART_SetConfig+0x2bc>
 8005bc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bc4:	d82a      	bhi.n	8005c1c <UART_SetConfig+0x2e8>
 8005bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bca:	d00b      	beq.n	8005be4 <UART_SetConfig+0x2b0>
 8005bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd0:	d824      	bhi.n	8005c1c <UART_SetConfig+0x2e8>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <UART_SetConfig+0x2aa>
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	d006      	beq.n	8005bea <UART_SetConfig+0x2b6>
 8005bdc:	e01e      	b.n	8005c1c <UART_SetConfig+0x2e8>
 8005bde:	2300      	movs	r3, #0
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e04b      	b.n	8005c7c <UART_SetConfig+0x348>
 8005be4:	2302      	movs	r3, #2
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e048      	b.n	8005c7c <UART_SetConfig+0x348>
 8005bea:	2304      	movs	r3, #4
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e045      	b.n	8005c7c <UART_SetConfig+0x348>
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e042      	b.n	8005c7c <UART_SetConfig+0x348>
 8005bf6:	bf00      	nop
 8005bf8:	efff69f3 	.word	0xefff69f3
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	40023800 	.word	0x40023800
 8005c04:	40004400 	.word	0x40004400
 8005c08:	40004800 	.word	0x40004800
 8005c0c:	40004c00 	.word	0x40004c00
 8005c10:	40005000 	.word	0x40005000
 8005c14:	40011400 	.word	0x40011400
 8005c18:	40007800 	.word	0x40007800
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e02c      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a72      	ldr	r2, [pc, #456]	; (8005df0 <UART_SetConfig+0x4bc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d125      	bne.n	8005c78 <UART_SetConfig+0x344>
 8005c2c:	4b71      	ldr	r3, [pc, #452]	; (8005df4 <UART_SetConfig+0x4c0>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c3a:	d017      	beq.n	8005c6c <UART_SetConfig+0x338>
 8005c3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c40:	d817      	bhi.n	8005c72 <UART_SetConfig+0x33e>
 8005c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c46:	d00b      	beq.n	8005c60 <UART_SetConfig+0x32c>
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	d811      	bhi.n	8005c72 <UART_SetConfig+0x33e>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <UART_SetConfig+0x326>
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c56:	d006      	beq.n	8005c66 <UART_SetConfig+0x332>
 8005c58:	e00b      	b.n	8005c72 <UART_SetConfig+0x33e>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e00d      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c60:	2302      	movs	r3, #2
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e00a      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c66:	2304      	movs	r3, #4
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e007      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c72:	2310      	movs	r3, #16
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e001      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	d15b      	bne.n	8005d3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d828      	bhi.n	8005cde <UART_SetConfig+0x3aa>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x360>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005cdf 	.word	0x08005cdf
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005cd7 	.word	0x08005cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fd ff9c 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61b8      	str	r0, [r7, #24]
        break;
 8005cbe:	e013      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7fd ffac 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005cc4:	61b8      	str	r0, [r7, #24]
        break;
 8005cc6:	e00f      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b4b      	ldr	r3, [pc, #300]	; (8005df8 <UART_SetConfig+0x4c4>)
 8005cca:	61bb      	str	r3, [r7, #24]
        break;
 8005ccc:	e00c      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fd fe7f 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8005cd2:	61b8      	str	r0, [r7, #24]
        break;
 8005cd4:	e008      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cda:	61bb      	str	r3, [r7, #24]
        break;
 8005cdc:	e004      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d074      	beq.n	8005dd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	005a      	lsls	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d916      	bls.n	8005d38 <UART_SetConfig+0x404>
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d212      	bcs.n	8005d38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f023 030f 	bic.w	r3, r3, #15
 8005d1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	89fa      	ldrh	r2, [r7, #14]
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	e04f      	b.n	8005dd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	77bb      	strb	r3, [r7, #30]
 8005d3c:	e04c      	b.n	8005dd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d3e:	7ffb      	ldrb	r3, [r7, #31]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d828      	bhi.n	8005d96 <UART_SetConfig+0x462>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x418>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d97 	.word	0x08005d97
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d97 	.word	0x08005d97
 8005d64:	08005d97 	.word	0x08005d97
 8005d68:	08005d97 	.word	0x08005d97
 8005d6c:	08005d8f 	.word	0x08005d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fd ff40 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8005d74:	61b8      	str	r0, [r7, #24]
        break;
 8005d76:	e013      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fd ff50 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005d7c:	61b8      	str	r0, [r7, #24]
        break;
 8005d7e:	e00f      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <UART_SetConfig+0x4c4>)
 8005d82:	61bb      	str	r3, [r7, #24]
        break;
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fd fe23 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 8005d8a:	61b8      	str	r0, [r7, #24]
        break;
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d92:	61bb      	str	r3, [r7, #24]
        break;
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	085a      	lsrs	r2, r3, #1
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	441a      	add	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b0f      	cmp	r3, #15
 8005dbe:	d909      	bls.n	8005dd4 <UART_SetConfig+0x4a0>
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc6:	d205      	bcs.n	8005dd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	e001      	b.n	8005dd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005de4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40007c00 	.word	0x40007c00
 8005df4:	40023800 	.word	0x40023800
 8005df8:	00f42400 	.word	0x00f42400

08005dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efa:	d10a      	bne.n	8005f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f50:	f7fb fb8a 	bl	8001668 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f831 	bl	8005fda <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e027      	b.n	8005fd2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d10e      	bne.n	8005fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f81b 	bl	8005fda <UART_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e011      	b.n	8005fd2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b09c      	sub	sp, #112	; 0x70
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	603b      	str	r3, [r7, #0]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fea:	e0a7      	b.n	800613c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	f000 80a3 	beq.w	800613c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fb fb37 	bl	8001668 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <UART_WaitOnFlagUntilTimeout+0x32>
 8006006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006008:	2b00      	cmp	r3, #0
 800600a:	d13f      	bne.n	800608c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800601a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006020:	667b      	str	r3, [r7, #100]	; 0x64
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800602c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006030:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e6      	bne.n	800600c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3308      	adds	r3, #8
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	663b      	str	r3, [r7, #96]	; 0x60
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800605e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800606c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e5      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e068      	b.n	800615e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d050      	beq.n	800613c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a8:	d148      	bne.n	800613c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
 80060d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e6      	bne.n	80060b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006106:	623a      	str	r2, [r7, #32]
 8006108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	69f9      	ldr	r1, [r7, #28]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	61bb      	str	r3, [r7, #24]
   return(result);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e010      	b.n	800615e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4013      	ands	r3, r2
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	429a      	cmp	r2, r3
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	429a      	cmp	r2, r3
 8006158:	f43f af48 	beq.w	8005fec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3770      	adds	r7, #112	; 0x70
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006166:	b480      	push	{r7}
 8006168:	b095      	sub	sp, #84	; 0x54
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618c:	643b      	str	r3, [r7, #64]	; 0x40
 800618e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e5      	bne.n	80061a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d118      	bne.n	800620e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f023 0310 	bic.w	r3, r3, #16
 80061f0:	647b      	str	r3, [r7, #68]	; 0x44
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6979      	ldr	r1, [r7, #20]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	613b      	str	r3, [r7, #16]
   return(result);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e6      	bne.n	80061dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006222:	bf00      	nop
 8006224:	3754      	adds	r7, #84	; 0x54
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fb51 	bl	80058f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800625a:	b480      	push	{r7}
 800625c:	b08f      	sub	sp, #60	; 0x3c
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	2b21      	cmp	r3, #33	; 0x21
 8006268:	d14c      	bne.n	8006304 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d132      	bne.n	80062dc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	61fb      	str	r3, [r7, #28]
   return(result);
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	637b      	str	r3, [r7, #52]	; 0x34
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006296:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800629a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e6      	bne.n	8006276 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062bc:	633b      	str	r3, [r7, #48]	; 0x30
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	613b      	str	r3, [r7, #16]
   return(result);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80062da:	e013      	b.n	8006304 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e0:	781a      	ldrb	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006304:	bf00      	nop
 8006306:	373c      	adds	r7, #60	; 0x3c
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b091      	sub	sp, #68	; 0x44
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800631c:	2b21      	cmp	r3, #33	; 0x21
 800631e:	d151      	bne.n	80063c4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d132      	bne.n	8006392 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	623b      	str	r3, [r7, #32]
   return(result);
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
 800634c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e6      	bne.n	800632c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60fb      	str	r3, [r7, #12]
   return(result);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	617b      	str	r3, [r7, #20]
   return(result);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006390:	e018      	b.n	80063c4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80063c4:	bf00      	nop
 80063c6:	3744      	adds	r7, #68	; 0x44
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	613b      	str	r3, [r7, #16]
   return(result);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e6      	bne.n	80063d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fa62 	bl	80058e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006424:	b084      	sub	sp, #16
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	f107 001c 	add.w	r0, r7, #28
 8006432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	2b01      	cmp	r3, #1
 800643a:	d120      	bne.n	800647e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <USB_CoreInit+0xac>)
 800644e:	4013      	ands	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d105      	bne.n	8006472 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa96 	bl	80069a4 <USB_CoreReset>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
 800647c:	e010      	b.n	80064a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa8a 	bl	80069a4 <USB_CoreReset>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10b      	bne.n	80064be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f043 0206 	orr.w	r2, r3, #6
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f043 0220 	orr.w	r2, r3, #32
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ca:	b004      	add	sp, #16
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	ffbdffbf 	.word	0xffbdffbf

080064d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f023 0201 	bic.w	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d115      	bne.n	8006544 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006524:	2001      	movs	r0, #1
 8006526:	f7fb f8ab 	bl	8001680 <HAL_Delay>
      ms++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa29 	bl	8006988 <USB_GetMode>
 8006536:	4603      	mov	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d01e      	beq.n	800657a <USB_SetCurrentMode+0x84>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b31      	cmp	r3, #49	; 0x31
 8006540:	d9f0      	bls.n	8006524 <USB_SetCurrentMode+0x2e>
 8006542:	e01a      	b.n	800657a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d115      	bne.n	8006576 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006556:	2001      	movs	r0, #1
 8006558:	f7fb f892 	bl	8001680 <HAL_Delay>
      ms++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa10 	bl	8006988 <USB_GetMode>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <USB_SetCurrentMode+0x84>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b31      	cmp	r3, #49	; 0x31
 8006572:	d9f0      	bls.n	8006556 <USB_SetCurrentMode+0x60>
 8006574:	e001      	b.n	800657a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e005      	b.n	8006586 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b32      	cmp	r3, #50	; 0x32
 800657e:	d101      	bne.n	8006584 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006590:	b084      	sub	sp, #16
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800659e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	e009      	b.n	80065c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3340      	adds	r3, #64	; 0x40
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3301      	adds	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0e      	cmp	r3, #14
 80065c8:	d9f2      	bls.n	80065b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d11c      	bne.n	800660a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065de:	f043 0302 	orr.w	r3, r3, #2
 80065e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e005      	b.n	8006616 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800661c:	461a      	mov	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006628:	4619      	mov	r1, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006630:	461a      	mov	r2, r3
 8006632:	680b      	ldr	r3, [r1, #0]
 8006634:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	2b01      	cmp	r3, #1
 800663a:	d10c      	bne.n	8006656 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006642:	2100      	movs	r1, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f965 	bl	8006914 <USB_SetDevSpeed>
 800664a:	e008      	b.n	800665e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800664c:	2101      	movs	r1, #1
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f960 	bl	8006914 <USB_SetDevSpeed>
 8006654:	e003      	b.n	800665e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006656:	2103      	movs	r1, #3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f95b 	bl	8006914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800665e:	2110      	movs	r1, #16
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8f3 	bl	800684c <USB_FlushTxFifo>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f91f 	bl	80068b4 <USB_FlushRxFifo>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	461a      	mov	r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e043      	b.n	8006732 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c0:	d118      	bne.n	80066f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	461a      	mov	r2, r3
 80066d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e013      	b.n	8006706 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	461a      	mov	r2, r3
 80066ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e008      	b.n	8006706 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	461a      	mov	r2, r3
 8006726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800672a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d3b7      	bcc.n	80066aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e043      	b.n	80067c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006756:	d118      	bne.n	800678a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	461a      	mov	r2, r3
 800676c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e013      	b.n	800679c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	461a      	mov	r2, r3
 8006782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e008      	b.n	800679c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	461a      	mov	r2, r3
 80067aa:	2300      	movs	r3, #0
 80067ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	461a      	mov	r2, r3
 80067bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3301      	adds	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d3b7      	bcc.n	8006740 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f043 0210 	orr.w	r2, r3, #16
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <USB_DevInit+0x2b4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f043 0208 	orr.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d105      	bne.n	8006834 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <USB_DevInit+0x2b8>)
 800682e:	4313      	orrs	r3, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006840:	b004      	add	sp, #16
 8006842:	4770      	bx	lr
 8006844:	803c3800 	.word	0x803c3800
 8006848:	40000004 	.word	0x40000004

0800684c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <USB_FlushTxFifo+0x64>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e01b      	b.n	80068a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	daf2      	bge.n	800685a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	019b      	lsls	r3, r3, #6
 800687c:	f043 0220 	orr.w	r2, r3, #32
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <USB_FlushTxFifo+0x64>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e006      	b.n	80068a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d0f0      	beq.n	8006884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	00030d40 	.word	0x00030d40

080068b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a11      	ldr	r2, [pc, #68]	; (8006910 <USB_FlushRxFifo+0x5c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d901      	bls.n	80068d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e018      	b.n	8006904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	daf2      	bge.n	80068c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2210      	movs	r2, #16
 80068e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a08      	ldr	r2, [pc, #32]	; (8006910 <USB_FlushRxFifo+0x5c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e006      	b.n	8006904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d0f0      	beq.n	80068e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	00030d40 	.word	0x00030d40

08006914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006934:	4313      	orrs	r3, r2
 8006936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006960:	f023 0303 	bic.w	r3, r3, #3
 8006964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <USB_CoreReset+0x64>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e01b      	b.n	80069fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	daf2      	bge.n	80069b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f043 0201 	orr.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <USB_CoreReset+0x64>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d901      	bls.n	80069ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e006      	b.n	80069fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d0f0      	beq.n	80069da <USB_CoreReset+0x36>

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	00030d40 	.word	0x00030d40

08006a0c <__errno>:
 8006a0c:	4b01      	ldr	r3, [pc, #4]	; (8006a14 <__errno+0x8>)
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <__libc_init_array>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	4d0d      	ldr	r5, [pc, #52]	; (8006a50 <__libc_init_array+0x38>)
 8006a1c:	4c0d      	ldr	r4, [pc, #52]	; (8006a54 <__libc_init_array+0x3c>)
 8006a1e:	1b64      	subs	r4, r4, r5
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	2600      	movs	r6, #0
 8006a24:	42a6      	cmp	r6, r4
 8006a26:	d109      	bne.n	8006a3c <__libc_init_array+0x24>
 8006a28:	4d0b      	ldr	r5, [pc, #44]	; (8006a58 <__libc_init_array+0x40>)
 8006a2a:	4c0c      	ldr	r4, [pc, #48]	; (8006a5c <__libc_init_array+0x44>)
 8006a2c:	f002 fe5e 	bl	80096ec <_init>
 8006a30:	1b64      	subs	r4, r4, r5
 8006a32:	10a4      	asrs	r4, r4, #2
 8006a34:	2600      	movs	r6, #0
 8006a36:	42a6      	cmp	r6, r4
 8006a38:	d105      	bne.n	8006a46 <__libc_init_array+0x2e>
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a40:	4798      	blx	r3
 8006a42:	3601      	adds	r6, #1
 8006a44:	e7ee      	b.n	8006a24 <__libc_init_array+0xc>
 8006a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4a:	4798      	blx	r3
 8006a4c:	3601      	adds	r6, #1
 8006a4e:	e7f2      	b.n	8006a36 <__libc_init_array+0x1e>
 8006a50:	08009b2c 	.word	0x08009b2c
 8006a54:	08009b2c 	.word	0x08009b2c
 8006a58:	08009b2c 	.word	0x08009b2c
 8006a5c:	08009b30 	.word	0x08009b30

08006a60 <memcpy>:
 8006a60:	440a      	add	r2, r1
 8006a62:	4291      	cmp	r1, r2
 8006a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a68:	d100      	bne.n	8006a6c <memcpy+0xc>
 8006a6a:	4770      	bx	lr
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a76:	4291      	cmp	r1, r2
 8006a78:	d1f9      	bne.n	8006a6e <memcpy+0xe>
 8006a7a:	bd10      	pop	{r4, pc}

08006a7c <memset>:
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d100      	bne.n	8006a86 <memset+0xa>
 8006a84:	4770      	bx	lr
 8006a86:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8a:	e7f9      	b.n	8006a80 <memset+0x4>

08006a8c <__cvt>:
 8006a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8e:	ed2d 8b02 	vpush	{d8}
 8006a92:	eeb0 8b40 	vmov.f64	d8, d0
 8006a96:	b085      	sub	sp, #20
 8006a98:	4617      	mov	r7, r2
 8006a9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006a9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a9e:	ee18 2a90 	vmov	r2, s17
 8006aa2:	f025 0520 	bic.w	r5, r5, #32
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	bfb6      	itet	lt
 8006aaa:	222d      	movlt	r2, #45	; 0x2d
 8006aac:	2200      	movge	r2, #0
 8006aae:	eeb1 8b40 	vneglt.f64	d8, d0
 8006ab2:	2d46      	cmp	r5, #70	; 0x46
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	d004      	beq.n	8006ac4 <__cvt+0x38>
 8006aba:	2d45      	cmp	r5, #69	; 0x45
 8006abc:	d100      	bne.n	8006ac0 <__cvt+0x34>
 8006abe:	3401      	adds	r4, #1
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	e000      	b.n	8006ac6 <__cvt+0x3a>
 8006ac4:	2103      	movs	r1, #3
 8006ac6:	ab03      	add	r3, sp, #12
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	ab02      	add	r3, sp, #8
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4622      	mov	r2, r4
 8006ad0:	4633      	mov	r3, r6
 8006ad2:	eeb0 0b48 	vmov.f64	d0, d8
 8006ad6:	f000 fccb 	bl	8007470 <_dtoa_r>
 8006ada:	2d47      	cmp	r5, #71	; 0x47
 8006adc:	d101      	bne.n	8006ae2 <__cvt+0x56>
 8006ade:	07fb      	lsls	r3, r7, #31
 8006ae0:	d51a      	bpl.n	8006b18 <__cvt+0x8c>
 8006ae2:	2d46      	cmp	r5, #70	; 0x46
 8006ae4:	eb00 0204 	add.w	r2, r0, r4
 8006ae8:	d10c      	bne.n	8006b04 <__cvt+0x78>
 8006aea:	7803      	ldrb	r3, [r0, #0]
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d107      	bne.n	8006b00 <__cvt+0x74>
 8006af0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	bf1c      	itt	ne
 8006afa:	f1c4 0401 	rsbne	r4, r4, #1
 8006afe:	6034      	strne	r4, [r6, #0]
 8006b00:	6833      	ldr	r3, [r6, #0]
 8006b02:	441a      	add	r2, r3
 8006b04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0c:	bf08      	it	eq
 8006b0e:	9203      	streq	r2, [sp, #12]
 8006b10:	2130      	movs	r1, #48	; 0x30
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d307      	bcc.n	8006b28 <__cvt+0x9c>
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b1c:	1a1b      	subs	r3, r3, r0
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	b005      	add	sp, #20
 8006b22:	ecbd 8b02 	vpop	{d8}
 8006b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b28:	1c5c      	adds	r4, r3, #1
 8006b2a:	9403      	str	r4, [sp, #12]
 8006b2c:	7019      	strb	r1, [r3, #0]
 8006b2e:	e7f0      	b.n	8006b12 <__cvt+0x86>

08006b30 <__exponent>:
 8006b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b32:	4603      	mov	r3, r0
 8006b34:	2900      	cmp	r1, #0
 8006b36:	bfb8      	it	lt
 8006b38:	4249      	neglt	r1, r1
 8006b3a:	f803 2b02 	strb.w	r2, [r3], #2
 8006b3e:	bfb4      	ite	lt
 8006b40:	222d      	movlt	r2, #45	; 0x2d
 8006b42:	222b      	movge	r2, #43	; 0x2b
 8006b44:	2909      	cmp	r1, #9
 8006b46:	7042      	strb	r2, [r0, #1]
 8006b48:	dd2a      	ble.n	8006ba0 <__exponent+0x70>
 8006b4a:	f10d 0407 	add.w	r4, sp, #7
 8006b4e:	46a4      	mov	ip, r4
 8006b50:	270a      	movs	r7, #10
 8006b52:	46a6      	mov	lr, r4
 8006b54:	460a      	mov	r2, r1
 8006b56:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b5a:	fb07 1516 	mls	r5, r7, r6, r1
 8006b5e:	3530      	adds	r5, #48	; 0x30
 8006b60:	2a63      	cmp	r2, #99	; 0x63
 8006b62:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	dcf1      	bgt.n	8006b52 <__exponent+0x22>
 8006b6e:	3130      	adds	r1, #48	; 0x30
 8006b70:	f1ae 0502 	sub.w	r5, lr, #2
 8006b74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b78:	1c44      	adds	r4, r0, #1
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4561      	cmp	r1, ip
 8006b7e:	d30a      	bcc.n	8006b96 <__exponent+0x66>
 8006b80:	f10d 0209 	add.w	r2, sp, #9
 8006b84:	eba2 020e 	sub.w	r2, r2, lr
 8006b88:	4565      	cmp	r5, ip
 8006b8a:	bf88      	it	hi
 8006b8c:	2200      	movhi	r2, #0
 8006b8e:	4413      	add	r3, r2
 8006b90:	1a18      	subs	r0, r3, r0
 8006b92:	b003      	add	sp, #12
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b9e:	e7ed      	b.n	8006b7c <__exponent+0x4c>
 8006ba0:	2330      	movs	r3, #48	; 0x30
 8006ba2:	3130      	adds	r1, #48	; 0x30
 8006ba4:	7083      	strb	r3, [r0, #2]
 8006ba6:	70c1      	strb	r1, [r0, #3]
 8006ba8:	1d03      	adds	r3, r0, #4
 8006baa:	e7f1      	b.n	8006b90 <__exponent+0x60>
 8006bac:	0000      	movs	r0, r0
	...

08006bb0 <_printf_float>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	b08b      	sub	sp, #44	; 0x2c
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	f001 f9c3 	bl	8007f4c <_localeconv_r>
 8006bc6:	f8d0 b000 	ldr.w	fp, [r0]
 8006bca:	4658      	mov	r0, fp
 8006bcc:	f7f9 fb38 	bl	8000240 <strlen>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9308      	str	r3, [sp, #32]
 8006bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	3307      	adds	r3, #7
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	f103 0108 	add.w	r1, r3, #8
 8006be8:	f8c8 1000 	str.w	r1, [r8]
 8006bec:	4682      	mov	sl, r0
 8006bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bf2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006bf6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006e58 <_printf_float+0x2a8>
 8006bfa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006bfe:	eeb0 6bc0 	vabs.f64	d6, d0
 8006c02:	eeb4 6b47 	vcmp.f64	d6, d7
 8006c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0a:	dd24      	ble.n	8006c56 <_printf_float+0xa6>
 8006c0c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c14:	d502      	bpl.n	8006c1c <_printf_float+0x6c>
 8006c16:	232d      	movs	r3, #45	; 0x2d
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	4b90      	ldr	r3, [pc, #576]	; (8006e60 <_printf_float+0x2b0>)
 8006c1e:	4891      	ldr	r0, [pc, #580]	; (8006e64 <_printf_float+0x2b4>)
 8006c20:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c24:	bf94      	ite	ls
 8006c26:	4698      	movls	r8, r3
 8006c28:	4680      	movhi	r8, r0
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	f022 0204 	bic.w	r2, r2, #4
 8006c32:	2300      	movs	r3, #0
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	9700      	str	r7, [sp, #0]
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	aa09      	add	r2, sp, #36	; 0x24
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 f9d3 	bl	8006fec <_printf_common>
 8006c46:	3001      	adds	r0, #1
 8006c48:	f040 808a 	bne.w	8006d60 <_printf_float+0x1b0>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	b00b      	add	sp, #44	; 0x2c
 8006c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c56:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d709      	bvc.n	8006c74 <_printf_float+0xc4>
 8006c60:	ee10 3a90 	vmov	r3, s1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfbc      	itt	lt
 8006c68:	232d      	movlt	r3, #45	; 0x2d
 8006c6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c6e:	487e      	ldr	r0, [pc, #504]	; (8006e68 <_printf_float+0x2b8>)
 8006c70:	4b7e      	ldr	r3, [pc, #504]	; (8006e6c <_printf_float+0x2bc>)
 8006c72:	e7d5      	b.n	8006c20 <_printf_float+0x70>
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c7a:	9104      	str	r1, [sp, #16]
 8006c7c:	1c59      	adds	r1, r3, #1
 8006c7e:	d13c      	bne.n	8006cfa <_printf_float+0x14a>
 8006c80:	2306      	movs	r3, #6
 8006c82:	6063      	str	r3, [r4, #4]
 8006c84:	2300      	movs	r3, #0
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	ab08      	add	r3, sp, #32
 8006c8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c92:	ab07      	add	r3, sp, #28
 8006c94:	6861      	ldr	r1, [r4, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	f10d 031b 	add.w	r3, sp, #27
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f7ff fef4 	bl	8006a8c <__cvt>
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	9907      	ldr	r1, [sp, #28]
 8006ca8:	2b47      	cmp	r3, #71	; 0x47
 8006caa:	4680      	mov	r8, r0
 8006cac:	d108      	bne.n	8006cc0 <_printf_float+0x110>
 8006cae:	1cc8      	adds	r0, r1, #3
 8006cb0:	db02      	blt.n	8006cb8 <_printf_float+0x108>
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	dd41      	ble.n	8006d3c <_printf_float+0x18c>
 8006cb8:	f1a9 0902 	sub.w	r9, r9, #2
 8006cbc:	fa5f f989 	uxtb.w	r9, r9
 8006cc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cc4:	d820      	bhi.n	8006d08 <_printf_float+0x158>
 8006cc6:	3901      	subs	r1, #1
 8006cc8:	464a      	mov	r2, r9
 8006cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cce:	9107      	str	r1, [sp, #28]
 8006cd0:	f7ff ff2e 	bl	8006b30 <__exponent>
 8006cd4:	9a08      	ldr	r2, [sp, #32]
 8006cd6:	9004      	str	r0, [sp, #16]
 8006cd8:	1813      	adds	r3, r2, r0
 8006cda:	2a01      	cmp	r2, #1
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	dc02      	bgt.n	8006ce6 <_printf_float+0x136>
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	07d2      	lsls	r2, r2, #31
 8006ce4:	d501      	bpl.n	8006cea <_printf_float+0x13a>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0a2      	beq.n	8006c38 <_printf_float+0x88>
 8006cf2:	232d      	movs	r3, #45	; 0x2d
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	e79e      	b.n	8006c38 <_printf_float+0x88>
 8006cfa:	9904      	ldr	r1, [sp, #16]
 8006cfc:	2947      	cmp	r1, #71	; 0x47
 8006cfe:	d1c1      	bne.n	8006c84 <_printf_float+0xd4>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1bf      	bne.n	8006c84 <_printf_float+0xd4>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e7bc      	b.n	8006c82 <_printf_float+0xd2>
 8006d08:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d0c:	d118      	bne.n	8006d40 <_printf_float+0x190>
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	dd0b      	ble.n	8006d2c <_printf_float+0x17c>
 8006d14:	6121      	str	r1, [r4, #16]
 8006d16:	b913      	cbnz	r3, 8006d1e <_printf_float+0x16e>
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	07d0      	lsls	r0, r2, #31
 8006d1c:	d502      	bpl.n	8006d24 <_printf_float+0x174>
 8006d1e:	3301      	adds	r3, #1
 8006d20:	440b      	add	r3, r1
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	2300      	movs	r3, #0
 8006d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	e7de      	b.n	8006cea <_printf_float+0x13a>
 8006d2c:	b913      	cbnz	r3, 8006d34 <_printf_float+0x184>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	07d2      	lsls	r2, r2, #31
 8006d32:	d501      	bpl.n	8006d38 <_printf_float+0x188>
 8006d34:	3302      	adds	r3, #2
 8006d36:	e7f4      	b.n	8006d22 <_printf_float+0x172>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e7f2      	b.n	8006d22 <_printf_float+0x172>
 8006d3c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	4299      	cmp	r1, r3
 8006d44:	db05      	blt.n	8006d52 <_printf_float+0x1a2>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	6121      	str	r1, [r4, #16]
 8006d4a:	07d8      	lsls	r0, r3, #31
 8006d4c:	d5ea      	bpl.n	8006d24 <_printf_float+0x174>
 8006d4e:	1c4b      	adds	r3, r1, #1
 8006d50:	e7e7      	b.n	8006d22 <_printf_float+0x172>
 8006d52:	2900      	cmp	r1, #0
 8006d54:	bfd4      	ite	le
 8006d56:	f1c1 0202 	rsble	r2, r1, #2
 8006d5a:	2201      	movgt	r2, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	e7e0      	b.n	8006d22 <_printf_float+0x172>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	055a      	lsls	r2, r3, #21
 8006d64:	d407      	bmi.n	8006d76 <_printf_float+0x1c6>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	4642      	mov	r2, r8
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	d12a      	bne.n	8006dca <_printf_float+0x21a>
 8006d74:	e76a      	b.n	8006c4c <_printf_float+0x9c>
 8006d76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d7a:	f240 80e2 	bls.w	8006f42 <_printf_float+0x392>
 8006d7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006d82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8a:	d133      	bne.n	8006df4 <_printf_float+0x244>
 8006d8c:	4a38      	ldr	r2, [pc, #224]	; (8006e70 <_printf_float+0x2c0>)
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af58 	beq.w	8006c4c <_printf_float+0x9c>
 8006d9c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	db02      	blt.n	8006daa <_printf_float+0x1fa>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	07d8      	lsls	r0, r3, #31
 8006da8:	d50f      	bpl.n	8006dca <_printf_float+0x21a>
 8006daa:	4653      	mov	r3, sl
 8006dac:	465a      	mov	r2, fp
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f af49 	beq.w	8006c4c <_printf_float+0x9c>
 8006dba:	f04f 0800 	mov.w	r8, #0
 8006dbe:	f104 091a 	add.w	r9, r4, #26
 8006dc2:	9b08      	ldr	r3, [sp, #32]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	4543      	cmp	r3, r8
 8006dc8:	dc09      	bgt.n	8006dde <_printf_float+0x22e>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	079b      	lsls	r3, r3, #30
 8006dce:	f100 8108 	bmi.w	8006fe2 <_printf_float+0x432>
 8006dd2:	68e0      	ldr	r0, [r4, #12]
 8006dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	bfb8      	it	lt
 8006dda:	4618      	movlt	r0, r3
 8006ddc:	e738      	b.n	8006c50 <_printf_float+0xa0>
 8006dde:	2301      	movs	r3, #1
 8006de0:	464a      	mov	r2, r9
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	f43f af2f 	beq.w	8006c4c <_printf_float+0x9c>
 8006dee:	f108 0801 	add.w	r8, r8, #1
 8006df2:	e7e6      	b.n	8006dc2 <_printf_float+0x212>
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dc3c      	bgt.n	8006e74 <_printf_float+0x2c4>
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <_printf_float+0x2c0>)
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f af21 	beq.w	8006c4c <_printf_float+0x9c>
 8006e0a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d102      	bne.n	8006e18 <_printf_float+0x268>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d5d8      	bpl.n	8006dca <_printf_float+0x21a>
 8006e18:	4653      	mov	r3, sl
 8006e1a:	465a      	mov	r2, fp
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f af12 	beq.w	8006c4c <_printf_float+0x9c>
 8006e28:	f04f 0900 	mov.w	r9, #0
 8006e2c:	f104 0a1a 	add.w	sl, r4, #26
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	425b      	negs	r3, r3
 8006e34:	454b      	cmp	r3, r9
 8006e36:	dc01      	bgt.n	8006e3c <_printf_float+0x28c>
 8006e38:	9b08      	ldr	r3, [sp, #32]
 8006e3a:	e795      	b.n	8006d68 <_printf_float+0x1b8>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4652      	mov	r2, sl
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f af00 	beq.w	8006c4c <_printf_float+0x9c>
 8006e4c:	f109 0901 	add.w	r9, r9, #1
 8006e50:	e7ee      	b.n	8006e30 <_printf_float+0x280>
 8006e52:	bf00      	nop
 8006e54:	f3af 8000 	nop.w
 8006e58:	ffffffff 	.word	0xffffffff
 8006e5c:	7fefffff 	.word	0x7fefffff
 8006e60:	0800974c 	.word	0x0800974c
 8006e64:	08009750 	.word	0x08009750
 8006e68:	08009758 	.word	0x08009758
 8006e6c:	08009754 	.word	0x08009754
 8006e70:	0800975c 	.word	0x0800975c
 8006e74:	9a08      	ldr	r2, [sp, #32]
 8006e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	bfa8      	it	ge
 8006e7c:	461a      	movge	r2, r3
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	4691      	mov	r9, r2
 8006e82:	dc38      	bgt.n	8006ef6 <_printf_float+0x346>
 8006e84:	2300      	movs	r3, #0
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8c:	f104 021a 	add.w	r2, r4, #26
 8006e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e92:	9905      	ldr	r1, [sp, #20]
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	eba3 0309 	sub.w	r3, r3, r9
 8006e9a:	428b      	cmp	r3, r1
 8006e9c:	dc33      	bgt.n	8006f06 <_printf_float+0x356>
 8006e9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	db3c      	blt.n	8006f20 <_printf_float+0x370>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	07da      	lsls	r2, r3, #31
 8006eaa:	d439      	bmi.n	8006f20 <_printf_float+0x370>
 8006eac:	9b08      	ldr	r3, [sp, #32]
 8006eae:	9a04      	ldr	r2, [sp, #16]
 8006eb0:	9907      	ldr	r1, [sp, #28]
 8006eb2:	1a9a      	subs	r2, r3, r2
 8006eb4:	eba3 0901 	sub.w	r9, r3, r1
 8006eb8:	4591      	cmp	r9, r2
 8006eba:	bfa8      	it	ge
 8006ebc:	4691      	movge	r9, r2
 8006ebe:	f1b9 0f00 	cmp.w	r9, #0
 8006ec2:	dc35      	bgt.n	8006f30 <_printf_float+0x380>
 8006ec4:	f04f 0800 	mov.w	r8, #0
 8006ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ecc:	f104 0a1a 	add.w	sl, r4, #26
 8006ed0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	eba3 0309 	sub.w	r3, r3, r9
 8006eda:	4543      	cmp	r3, r8
 8006edc:	f77f af75 	ble.w	8006dca <_printf_float+0x21a>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	f43f aeae 	beq.w	8006c4c <_printf_float+0x9c>
 8006ef0:	f108 0801 	add.w	r8, r8, #1
 8006ef4:	e7ec      	b.n	8006ed0 <_printf_float+0x320>
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4642      	mov	r2, r8
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1bf      	bne.n	8006e84 <_printf_float+0x2d4>
 8006f04:	e6a2      	b.n	8006c4c <_printf_float+0x9c>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	9204      	str	r2, [sp, #16]
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f ae9b 	beq.w	8006c4c <_printf_float+0x9c>
 8006f16:	9b05      	ldr	r3, [sp, #20]
 8006f18:	9a04      	ldr	r2, [sp, #16]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	e7b7      	b.n	8006e90 <_printf_float+0x2e0>
 8006f20:	4653      	mov	r3, sl
 8006f22:	465a      	mov	r2, fp
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d1be      	bne.n	8006eac <_printf_float+0x2fc>
 8006f2e:	e68d      	b.n	8006c4c <_printf_float+0x9c>
 8006f30:	9a04      	ldr	r2, [sp, #16]
 8006f32:	464b      	mov	r3, r9
 8006f34:	4442      	add	r2, r8
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d1c1      	bne.n	8006ec4 <_printf_float+0x314>
 8006f40:	e684      	b.n	8006c4c <_printf_float+0x9c>
 8006f42:	9a08      	ldr	r2, [sp, #32]
 8006f44:	2a01      	cmp	r2, #1
 8006f46:	dc01      	bgt.n	8006f4c <_printf_float+0x39c>
 8006f48:	07db      	lsls	r3, r3, #31
 8006f4a:	d537      	bpl.n	8006fbc <_printf_float+0x40c>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f ae78 	beq.w	8006c4c <_printf_float+0x9c>
 8006f5c:	4653      	mov	r3, sl
 8006f5e:	465a      	mov	r2, fp
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f ae70 	beq.w	8006c4c <_printf_float+0x9c>
 8006f6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006f70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f78:	d01b      	beq.n	8006fb2 <_printf_float+0x402>
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	f108 0201 	add.w	r2, r8, #1
 8006f80:	3b01      	subs	r3, #1
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d10e      	bne.n	8006faa <_printf_float+0x3fa>
 8006f8c:	e65e      	b.n	8006c4c <_printf_float+0x9c>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	464a      	mov	r2, r9
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f ae57 	beq.w	8006c4c <_printf_float+0x9c>
 8006f9e:	f108 0801 	add.w	r8, r8, #1
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	4543      	cmp	r3, r8
 8006fa8:	dcf1      	bgt.n	8006f8e <_printf_float+0x3de>
 8006faa:	9b04      	ldr	r3, [sp, #16]
 8006fac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fb0:	e6db      	b.n	8006d6a <_printf_float+0x1ba>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	f104 091a 	add.w	r9, r4, #26
 8006fba:	e7f2      	b.n	8006fa2 <_printf_float+0x3f2>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4642      	mov	r2, r8
 8006fc0:	e7df      	b.n	8006f82 <_printf_float+0x3d2>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	464a      	mov	r2, r9
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f43f ae3d 	beq.w	8006c4c <_printf_float+0x9c>
 8006fd2:	f108 0801 	add.w	r8, r8, #1
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fda:	1a5b      	subs	r3, r3, r1
 8006fdc:	4543      	cmp	r3, r8
 8006fde:	dcf0      	bgt.n	8006fc2 <_printf_float+0x412>
 8006fe0:	e6f7      	b.n	8006dd2 <_printf_float+0x222>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	f104 0919 	add.w	r9, r4, #25
 8006fea:	e7f4      	b.n	8006fd6 <_printf_float+0x426>

08006fec <_printf_common>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	4699      	mov	r9, r3
 8006ff4:	688a      	ldr	r2, [r1, #8]
 8006ff6:	690b      	ldr	r3, [r1, #16]
 8006ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	bfb8      	it	lt
 8007000:	4613      	movlt	r3, r2
 8007002:	6033      	str	r3, [r6, #0]
 8007004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007008:	4607      	mov	r7, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b10a      	cbz	r2, 8007012 <_printf_common+0x26>
 800700e:	3301      	adds	r3, #1
 8007010:	6033      	str	r3, [r6, #0]
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	0699      	lsls	r1, r3, #26
 8007016:	bf42      	ittt	mi
 8007018:	6833      	ldrmi	r3, [r6, #0]
 800701a:	3302      	addmi	r3, #2
 800701c:	6033      	strmi	r3, [r6, #0]
 800701e:	6825      	ldr	r5, [r4, #0]
 8007020:	f015 0506 	ands.w	r5, r5, #6
 8007024:	d106      	bne.n	8007034 <_printf_common+0x48>
 8007026:	f104 0a19 	add.w	sl, r4, #25
 800702a:	68e3      	ldr	r3, [r4, #12]
 800702c:	6832      	ldr	r2, [r6, #0]
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	42ab      	cmp	r3, r5
 8007032:	dc26      	bgt.n	8007082 <_printf_common+0x96>
 8007034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007038:	1e13      	subs	r3, r2, #0
 800703a:	6822      	ldr	r2, [r4, #0]
 800703c:	bf18      	it	ne
 800703e:	2301      	movne	r3, #1
 8007040:	0692      	lsls	r2, r2, #26
 8007042:	d42b      	bmi.n	800709c <_printf_common+0xb0>
 8007044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007048:	4649      	mov	r1, r9
 800704a:	4638      	mov	r0, r7
 800704c:	47c0      	blx	r8
 800704e:	3001      	adds	r0, #1
 8007050:	d01e      	beq.n	8007090 <_printf_common+0xa4>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	68e5      	ldr	r5, [r4, #12]
 8007056:	6832      	ldr	r2, [r6, #0]
 8007058:	f003 0306 	and.w	r3, r3, #6
 800705c:	2b04      	cmp	r3, #4
 800705e:	bf08      	it	eq
 8007060:	1aad      	subeq	r5, r5, r2
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	6922      	ldr	r2, [r4, #16]
 8007066:	bf0c      	ite	eq
 8007068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800706c:	2500      	movne	r5, #0
 800706e:	4293      	cmp	r3, r2
 8007070:	bfc4      	itt	gt
 8007072:	1a9b      	subgt	r3, r3, r2
 8007074:	18ed      	addgt	r5, r5, r3
 8007076:	2600      	movs	r6, #0
 8007078:	341a      	adds	r4, #26
 800707a:	42b5      	cmp	r5, r6
 800707c:	d11a      	bne.n	80070b4 <_printf_common+0xc8>
 800707e:	2000      	movs	r0, #0
 8007080:	e008      	b.n	8007094 <_printf_common+0xa8>
 8007082:	2301      	movs	r3, #1
 8007084:	4652      	mov	r2, sl
 8007086:	4649      	mov	r1, r9
 8007088:	4638      	mov	r0, r7
 800708a:	47c0      	blx	r8
 800708c:	3001      	adds	r0, #1
 800708e:	d103      	bne.n	8007098 <_printf_common+0xac>
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	3501      	adds	r5, #1
 800709a:	e7c6      	b.n	800702a <_printf_common+0x3e>
 800709c:	18e1      	adds	r1, r4, r3
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	2030      	movs	r0, #48	; 0x30
 80070a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070a6:	4422      	add	r2, r4
 80070a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070b0:	3302      	adds	r3, #2
 80070b2:	e7c7      	b.n	8007044 <_printf_common+0x58>
 80070b4:	2301      	movs	r3, #1
 80070b6:	4622      	mov	r2, r4
 80070b8:	4649      	mov	r1, r9
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c0      	blx	r8
 80070be:	3001      	adds	r0, #1
 80070c0:	d0e6      	beq.n	8007090 <_printf_common+0xa4>
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7d9      	b.n	800707a <_printf_common+0x8e>
	...

080070c8 <_printf_i>:
 80070c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	7e0f      	ldrb	r7, [r1, #24]
 80070ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070d0:	2f78      	cmp	r7, #120	; 0x78
 80070d2:	4691      	mov	r9, r2
 80070d4:	4680      	mov	r8, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	469a      	mov	sl, r3
 80070da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070de:	d807      	bhi.n	80070f0 <_printf_i+0x28>
 80070e0:	2f62      	cmp	r7, #98	; 0x62
 80070e2:	d80a      	bhi.n	80070fa <_printf_i+0x32>
 80070e4:	2f00      	cmp	r7, #0
 80070e6:	f000 80d8 	beq.w	800729a <_printf_i+0x1d2>
 80070ea:	2f58      	cmp	r7, #88	; 0x58
 80070ec:	f000 80a3 	beq.w	8007236 <_printf_i+0x16e>
 80070f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070f8:	e03a      	b.n	8007170 <_printf_i+0xa8>
 80070fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070fe:	2b15      	cmp	r3, #21
 8007100:	d8f6      	bhi.n	80070f0 <_printf_i+0x28>
 8007102:	a101      	add	r1, pc, #4	; (adr r1, 8007108 <_printf_i+0x40>)
 8007104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007108:	08007161 	.word	0x08007161
 800710c:	08007175 	.word	0x08007175
 8007110:	080070f1 	.word	0x080070f1
 8007114:	080070f1 	.word	0x080070f1
 8007118:	080070f1 	.word	0x080070f1
 800711c:	080070f1 	.word	0x080070f1
 8007120:	08007175 	.word	0x08007175
 8007124:	080070f1 	.word	0x080070f1
 8007128:	080070f1 	.word	0x080070f1
 800712c:	080070f1 	.word	0x080070f1
 8007130:	080070f1 	.word	0x080070f1
 8007134:	08007281 	.word	0x08007281
 8007138:	080071a5 	.word	0x080071a5
 800713c:	08007263 	.word	0x08007263
 8007140:	080070f1 	.word	0x080070f1
 8007144:	080070f1 	.word	0x080070f1
 8007148:	080072a3 	.word	0x080072a3
 800714c:	080070f1 	.word	0x080070f1
 8007150:	080071a5 	.word	0x080071a5
 8007154:	080070f1 	.word	0x080070f1
 8007158:	080070f1 	.word	0x080070f1
 800715c:	0800726b 	.word	0x0800726b
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	1d1a      	adds	r2, r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800716c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007170:	2301      	movs	r3, #1
 8007172:	e0a3      	b.n	80072bc <_printf_i+0x1f4>
 8007174:	6820      	ldr	r0, [r4, #0]
 8007176:	6829      	ldr	r1, [r5, #0]
 8007178:	0606      	lsls	r6, r0, #24
 800717a:	f101 0304 	add.w	r3, r1, #4
 800717e:	d50a      	bpl.n	8007196 <_printf_i+0xce>
 8007180:	680e      	ldr	r6, [r1, #0]
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	2e00      	cmp	r6, #0
 8007186:	da03      	bge.n	8007190 <_printf_i+0xc8>
 8007188:	232d      	movs	r3, #45	; 0x2d
 800718a:	4276      	negs	r6, r6
 800718c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007190:	485e      	ldr	r0, [pc, #376]	; (800730c <_printf_i+0x244>)
 8007192:	230a      	movs	r3, #10
 8007194:	e019      	b.n	80071ca <_printf_i+0x102>
 8007196:	680e      	ldr	r6, [r1, #0]
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800719e:	bf18      	it	ne
 80071a0:	b236      	sxthne	r6, r6
 80071a2:	e7ef      	b.n	8007184 <_printf_i+0xbc>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	6820      	ldr	r0, [r4, #0]
 80071a8:	1d19      	adds	r1, r3, #4
 80071aa:	6029      	str	r1, [r5, #0]
 80071ac:	0601      	lsls	r1, r0, #24
 80071ae:	d501      	bpl.n	80071b4 <_printf_i+0xec>
 80071b0:	681e      	ldr	r6, [r3, #0]
 80071b2:	e002      	b.n	80071ba <_printf_i+0xf2>
 80071b4:	0646      	lsls	r6, r0, #25
 80071b6:	d5fb      	bpl.n	80071b0 <_printf_i+0xe8>
 80071b8:	881e      	ldrh	r6, [r3, #0]
 80071ba:	4854      	ldr	r0, [pc, #336]	; (800730c <_printf_i+0x244>)
 80071bc:	2f6f      	cmp	r7, #111	; 0x6f
 80071be:	bf0c      	ite	eq
 80071c0:	2308      	moveq	r3, #8
 80071c2:	230a      	movne	r3, #10
 80071c4:	2100      	movs	r1, #0
 80071c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ca:	6865      	ldr	r5, [r4, #4]
 80071cc:	60a5      	str	r5, [r4, #8]
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	bfa2      	ittt	ge
 80071d2:	6821      	ldrge	r1, [r4, #0]
 80071d4:	f021 0104 	bicge.w	r1, r1, #4
 80071d8:	6021      	strge	r1, [r4, #0]
 80071da:	b90e      	cbnz	r6, 80071e0 <_printf_i+0x118>
 80071dc:	2d00      	cmp	r5, #0
 80071de:	d04d      	beq.n	800727c <_printf_i+0x1b4>
 80071e0:	4615      	mov	r5, r2
 80071e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80071e6:	fb03 6711 	mls	r7, r3, r1, r6
 80071ea:	5dc7      	ldrb	r7, [r0, r7]
 80071ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071f0:	4637      	mov	r7, r6
 80071f2:	42bb      	cmp	r3, r7
 80071f4:	460e      	mov	r6, r1
 80071f6:	d9f4      	bls.n	80071e2 <_printf_i+0x11a>
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d10b      	bne.n	8007214 <_printf_i+0x14c>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	07de      	lsls	r6, r3, #31
 8007200:	d508      	bpl.n	8007214 <_printf_i+0x14c>
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	6861      	ldr	r1, [r4, #4]
 8007206:	4299      	cmp	r1, r3
 8007208:	bfde      	ittt	le
 800720a:	2330      	movle	r3, #48	; 0x30
 800720c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007214:	1b52      	subs	r2, r2, r5
 8007216:	6122      	str	r2, [r4, #16]
 8007218:	f8cd a000 	str.w	sl, [sp]
 800721c:	464b      	mov	r3, r9
 800721e:	aa03      	add	r2, sp, #12
 8007220:	4621      	mov	r1, r4
 8007222:	4640      	mov	r0, r8
 8007224:	f7ff fee2 	bl	8006fec <_printf_common>
 8007228:	3001      	adds	r0, #1
 800722a:	d14c      	bne.n	80072c6 <_printf_i+0x1fe>
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	b004      	add	sp, #16
 8007232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007236:	4835      	ldr	r0, [pc, #212]	; (800730c <_printf_i+0x244>)
 8007238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800723c:	6829      	ldr	r1, [r5, #0]
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	f851 6b04 	ldr.w	r6, [r1], #4
 8007244:	6029      	str	r1, [r5, #0]
 8007246:	061d      	lsls	r5, r3, #24
 8007248:	d514      	bpl.n	8007274 <_printf_i+0x1ac>
 800724a:	07df      	lsls	r7, r3, #31
 800724c:	bf44      	itt	mi
 800724e:	f043 0320 	orrmi.w	r3, r3, #32
 8007252:	6023      	strmi	r3, [r4, #0]
 8007254:	b91e      	cbnz	r6, 800725e <_printf_i+0x196>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f023 0320 	bic.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	2310      	movs	r3, #16
 8007260:	e7b0      	b.n	80071c4 <_printf_i+0xfc>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	f043 0320 	orr.w	r3, r3, #32
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	2378      	movs	r3, #120	; 0x78
 800726c:	4828      	ldr	r0, [pc, #160]	; (8007310 <_printf_i+0x248>)
 800726e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007272:	e7e3      	b.n	800723c <_printf_i+0x174>
 8007274:	0659      	lsls	r1, r3, #25
 8007276:	bf48      	it	mi
 8007278:	b2b6      	uxthmi	r6, r6
 800727a:	e7e6      	b.n	800724a <_printf_i+0x182>
 800727c:	4615      	mov	r5, r2
 800727e:	e7bb      	b.n	80071f8 <_printf_i+0x130>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	6826      	ldr	r6, [r4, #0]
 8007284:	6961      	ldr	r1, [r4, #20]
 8007286:	1d18      	adds	r0, r3, #4
 8007288:	6028      	str	r0, [r5, #0]
 800728a:	0635      	lsls	r5, r6, #24
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	d501      	bpl.n	8007294 <_printf_i+0x1cc>
 8007290:	6019      	str	r1, [r3, #0]
 8007292:	e002      	b.n	800729a <_printf_i+0x1d2>
 8007294:	0670      	lsls	r0, r6, #25
 8007296:	d5fb      	bpl.n	8007290 <_printf_i+0x1c8>
 8007298:	8019      	strh	r1, [r3, #0]
 800729a:	2300      	movs	r3, #0
 800729c:	6123      	str	r3, [r4, #16]
 800729e:	4615      	mov	r5, r2
 80072a0:	e7ba      	b.n	8007218 <_printf_i+0x150>
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	1d1a      	adds	r2, r3, #4
 80072a6:	602a      	str	r2, [r5, #0]
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	6862      	ldr	r2, [r4, #4]
 80072ac:	2100      	movs	r1, #0
 80072ae:	4628      	mov	r0, r5
 80072b0:	f7f8 ffce 	bl	8000250 <memchr>
 80072b4:	b108      	cbz	r0, 80072ba <_printf_i+0x1f2>
 80072b6:	1b40      	subs	r0, r0, r5
 80072b8:	6060      	str	r0, [r4, #4]
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	2300      	movs	r3, #0
 80072c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c4:	e7a8      	b.n	8007218 <_printf_i+0x150>
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	462a      	mov	r2, r5
 80072ca:	4649      	mov	r1, r9
 80072cc:	4640      	mov	r0, r8
 80072ce:	47d0      	blx	sl
 80072d0:	3001      	adds	r0, #1
 80072d2:	d0ab      	beq.n	800722c <_printf_i+0x164>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	079b      	lsls	r3, r3, #30
 80072d8:	d413      	bmi.n	8007302 <_printf_i+0x23a>
 80072da:	68e0      	ldr	r0, [r4, #12]
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	4298      	cmp	r0, r3
 80072e0:	bfb8      	it	lt
 80072e2:	4618      	movlt	r0, r3
 80072e4:	e7a4      	b.n	8007230 <_printf_i+0x168>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4632      	mov	r2, r6
 80072ea:	4649      	mov	r1, r9
 80072ec:	4640      	mov	r0, r8
 80072ee:	47d0      	blx	sl
 80072f0:	3001      	adds	r0, #1
 80072f2:	d09b      	beq.n	800722c <_printf_i+0x164>
 80072f4:	3501      	adds	r5, #1
 80072f6:	68e3      	ldr	r3, [r4, #12]
 80072f8:	9903      	ldr	r1, [sp, #12]
 80072fa:	1a5b      	subs	r3, r3, r1
 80072fc:	42ab      	cmp	r3, r5
 80072fe:	dcf2      	bgt.n	80072e6 <_printf_i+0x21e>
 8007300:	e7eb      	b.n	80072da <_printf_i+0x212>
 8007302:	2500      	movs	r5, #0
 8007304:	f104 0619 	add.w	r6, r4, #25
 8007308:	e7f5      	b.n	80072f6 <_printf_i+0x22e>
 800730a:	bf00      	nop
 800730c:	0800975e 	.word	0x0800975e
 8007310:	0800976f 	.word	0x0800976f

08007314 <siprintf>:
 8007314:	b40e      	push	{r1, r2, r3}
 8007316:	b500      	push	{lr}
 8007318:	b09c      	sub	sp, #112	; 0x70
 800731a:	ab1d      	add	r3, sp, #116	; 0x74
 800731c:	9002      	str	r0, [sp, #8]
 800731e:	9006      	str	r0, [sp, #24]
 8007320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007324:	4809      	ldr	r0, [pc, #36]	; (800734c <siprintf+0x38>)
 8007326:	9107      	str	r1, [sp, #28]
 8007328:	9104      	str	r1, [sp, #16]
 800732a:	4909      	ldr	r1, [pc, #36]	; (8007350 <siprintf+0x3c>)
 800732c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007330:	9105      	str	r1, [sp, #20]
 8007332:	6800      	ldr	r0, [r0, #0]
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	a902      	add	r1, sp, #8
 8007338:	f001 faea 	bl	8008910 <_svfiprintf_r>
 800733c:	9b02      	ldr	r3, [sp, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	b01c      	add	sp, #112	; 0x70
 8007344:	f85d eb04 	ldr.w	lr, [sp], #4
 8007348:	b003      	add	sp, #12
 800734a:	4770      	bx	lr
 800734c:	2000000c 	.word	0x2000000c
 8007350:	ffff0208 	.word	0xffff0208

08007354 <quorem>:
 8007354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	6903      	ldr	r3, [r0, #16]
 800735a:	690c      	ldr	r4, [r1, #16]
 800735c:	42a3      	cmp	r3, r4
 800735e:	4607      	mov	r7, r0
 8007360:	f2c0 8081 	blt.w	8007466 <quorem+0x112>
 8007364:	3c01      	subs	r4, #1
 8007366:	f101 0814 	add.w	r8, r1, #20
 800736a:	f100 0514 	add.w	r5, r0, #20
 800736e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007378:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800737c:	3301      	adds	r3, #1
 800737e:	429a      	cmp	r2, r3
 8007380:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007384:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007388:	fbb2 f6f3 	udiv	r6, r2, r3
 800738c:	d331      	bcc.n	80073f2 <quorem+0x9e>
 800738e:	f04f 0e00 	mov.w	lr, #0
 8007392:	4640      	mov	r0, r8
 8007394:	46ac      	mov	ip, r5
 8007396:	46f2      	mov	sl, lr
 8007398:	f850 2b04 	ldr.w	r2, [r0], #4
 800739c:	b293      	uxth	r3, r2
 800739e:	fb06 e303 	mla	r3, r6, r3, lr
 80073a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ebaa 0303 	sub.w	r3, sl, r3
 80073ac:	f8dc a000 	ldr.w	sl, [ip]
 80073b0:	0c12      	lsrs	r2, r2, #16
 80073b2:	fa13 f38a 	uxtah	r3, r3, sl
 80073b6:	fb06 e202 	mla	r2, r6, r2, lr
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	9b00      	ldr	r3, [sp, #0]
 80073be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073c2:	b292      	uxth	r2, r2
 80073c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80073d0:	4581      	cmp	r9, r0
 80073d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073d6:	f84c 3b04 	str.w	r3, [ip], #4
 80073da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073de:	d2db      	bcs.n	8007398 <quorem+0x44>
 80073e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80073e4:	b92b      	cbnz	r3, 80073f2 <quorem+0x9e>
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	3b04      	subs	r3, #4
 80073ea:	429d      	cmp	r5, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	d32e      	bcc.n	800744e <quorem+0xfa>
 80073f0:	613c      	str	r4, [r7, #16]
 80073f2:	4638      	mov	r0, r7
 80073f4:	f001 f838 	bl	8008468 <__mcmp>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	db24      	blt.n	8007446 <quorem+0xf2>
 80073fc:	3601      	adds	r6, #1
 80073fe:	4628      	mov	r0, r5
 8007400:	f04f 0c00 	mov.w	ip, #0
 8007404:	f858 2b04 	ldr.w	r2, [r8], #4
 8007408:	f8d0 e000 	ldr.w	lr, [r0]
 800740c:	b293      	uxth	r3, r2
 800740e:	ebac 0303 	sub.w	r3, ip, r3
 8007412:	0c12      	lsrs	r2, r2, #16
 8007414:	fa13 f38e 	uxtah	r3, r3, lr
 8007418:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800741c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007420:	b29b      	uxth	r3, r3
 8007422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007426:	45c1      	cmp	r9, r8
 8007428:	f840 3b04 	str.w	r3, [r0], #4
 800742c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007430:	d2e8      	bcs.n	8007404 <quorem+0xb0>
 8007432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800743a:	b922      	cbnz	r2, 8007446 <quorem+0xf2>
 800743c:	3b04      	subs	r3, #4
 800743e:	429d      	cmp	r5, r3
 8007440:	461a      	mov	r2, r3
 8007442:	d30a      	bcc.n	800745a <quorem+0x106>
 8007444:	613c      	str	r4, [r7, #16]
 8007446:	4630      	mov	r0, r6
 8007448:	b003      	add	sp, #12
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	3b04      	subs	r3, #4
 8007452:	2a00      	cmp	r2, #0
 8007454:	d1cc      	bne.n	80073f0 <quorem+0x9c>
 8007456:	3c01      	subs	r4, #1
 8007458:	e7c7      	b.n	80073ea <quorem+0x96>
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	3b04      	subs	r3, #4
 800745e:	2a00      	cmp	r2, #0
 8007460:	d1f0      	bne.n	8007444 <quorem+0xf0>
 8007462:	3c01      	subs	r4, #1
 8007464:	e7eb      	b.n	800743e <quorem+0xea>
 8007466:	2000      	movs	r0, #0
 8007468:	e7ee      	b.n	8007448 <quorem+0xf4>
 800746a:	0000      	movs	r0, r0
 800746c:	0000      	movs	r0, r0
	...

08007470 <_dtoa_r>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	ed2d 8b02 	vpush	{d8}
 8007478:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800747a:	b091      	sub	sp, #68	; 0x44
 800747c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007480:	ec59 8b10 	vmov	r8, r9, d0
 8007484:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007486:	9106      	str	r1, [sp, #24]
 8007488:	4606      	mov	r6, r0
 800748a:	9208      	str	r2, [sp, #32]
 800748c:	930c      	str	r3, [sp, #48]	; 0x30
 800748e:	b975      	cbnz	r5, 80074ae <_dtoa_r+0x3e>
 8007490:	2010      	movs	r0, #16
 8007492:	f000 fd5f 	bl	8007f54 <malloc>
 8007496:	4602      	mov	r2, r0
 8007498:	6270      	str	r0, [r6, #36]	; 0x24
 800749a:	b920      	cbnz	r0, 80074a6 <_dtoa_r+0x36>
 800749c:	4baa      	ldr	r3, [pc, #680]	; (8007748 <_dtoa_r+0x2d8>)
 800749e:	21ea      	movs	r1, #234	; 0xea
 80074a0:	48aa      	ldr	r0, [pc, #680]	; (800774c <_dtoa_r+0x2dc>)
 80074a2:	f001 fb45 	bl	8008b30 <__assert_func>
 80074a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074aa:	6005      	str	r5, [r0, #0]
 80074ac:	60c5      	str	r5, [r0, #12]
 80074ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074b0:	6819      	ldr	r1, [r3, #0]
 80074b2:	b151      	cbz	r1, 80074ca <_dtoa_r+0x5a>
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	604a      	str	r2, [r1, #4]
 80074b8:	2301      	movs	r3, #1
 80074ba:	4093      	lsls	r3, r2
 80074bc:	608b      	str	r3, [r1, #8]
 80074be:	4630      	mov	r0, r6
 80074c0:	f000 fd90 	bl	8007fe4 <_Bfree>
 80074c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	f1b9 0300 	subs.w	r3, r9, #0
 80074ce:	bfbb      	ittet	lt
 80074d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	9303      	strlt	r3, [sp, #12]
 80074d6:	2300      	movge	r3, #0
 80074d8:	2201      	movlt	r2, #1
 80074da:	bfac      	ite	ge
 80074dc:	6023      	strge	r3, [r4, #0]
 80074de:	6022      	strlt	r2, [r4, #0]
 80074e0:	4b9b      	ldr	r3, [pc, #620]	; (8007750 <_dtoa_r+0x2e0>)
 80074e2:	9c03      	ldr	r4, [sp, #12]
 80074e4:	43a3      	bics	r3, r4
 80074e6:	d11c      	bne.n	8007522 <_dtoa_r+0xb2>
 80074e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80074f4:	ea53 0308 	orrs.w	r3, r3, r8
 80074f8:	f000 84fd 	beq.w	8007ef6 <_dtoa_r+0xa86>
 80074fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074fe:	b963      	cbnz	r3, 800751a <_dtoa_r+0xaa>
 8007500:	4b94      	ldr	r3, [pc, #592]	; (8007754 <_dtoa_r+0x2e4>)
 8007502:	e01f      	b.n	8007544 <_dtoa_r+0xd4>
 8007504:	4b94      	ldr	r3, [pc, #592]	; (8007758 <_dtoa_r+0x2e8>)
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	3308      	adds	r3, #8
 800750a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	9801      	ldr	r0, [sp, #4]
 8007510:	b011      	add	sp, #68	; 0x44
 8007512:	ecbd 8b02 	vpop	{d8}
 8007516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751a:	4b8e      	ldr	r3, [pc, #568]	; (8007754 <_dtoa_r+0x2e4>)
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	3303      	adds	r3, #3
 8007520:	e7f3      	b.n	800750a <_dtoa_r+0x9a>
 8007522:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007526:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752e:	d10b      	bne.n	8007548 <_dtoa_r+0xd8>
 8007530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007532:	2301      	movs	r3, #1
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 84d9 	beq.w	8007ef0 <_dtoa_r+0xa80>
 800753e:	4887      	ldr	r0, [pc, #540]	; (800775c <_dtoa_r+0x2ec>)
 8007540:	6018      	str	r0, [r3, #0]
 8007542:	1e43      	subs	r3, r0, #1
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	e7e2      	b.n	800750e <_dtoa_r+0x9e>
 8007548:	a90f      	add	r1, sp, #60	; 0x3c
 800754a:	aa0e      	add	r2, sp, #56	; 0x38
 800754c:	4630      	mov	r0, r6
 800754e:	eeb0 0b48 	vmov.f64	d0, d8
 8007552:	f001 f82f 	bl	80085b4 <__d2b>
 8007556:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800755a:	4605      	mov	r5, r0
 800755c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800755e:	2900      	cmp	r1, #0
 8007560:	d046      	beq.n	80075f0 <_dtoa_r+0x180>
 8007562:	ee18 4a90 	vmov	r4, s17
 8007566:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800756a:	ec53 2b18 	vmov	r2, r3, d8
 800756e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007572:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007576:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800757a:	2400      	movs	r4, #0
 800757c:	ec43 2b16 	vmov	d6, r2, r3
 8007580:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007584:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007730 <_dtoa_r+0x2c0>
 8007588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800758c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007738 <_dtoa_r+0x2c8>
 8007590:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007594:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007740 <_dtoa_r+0x2d0>
 8007598:	ee07 1a90 	vmov	s15, r1
 800759c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80075a0:	eeb0 7b46 	vmov.f64	d7, d6
 80075a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80075a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80075ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	ee16 ba90 	vmov	fp, s13
 80075b8:	940a      	str	r4, [sp, #40]	; 0x28
 80075ba:	d508      	bpl.n	80075ce <_dtoa_r+0x15e>
 80075bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80075c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	bf18      	it	ne
 80075ca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80075ce:	f1bb 0f16 	cmp.w	fp, #22
 80075d2:	d82f      	bhi.n	8007634 <_dtoa_r+0x1c4>
 80075d4:	4b62      	ldr	r3, [pc, #392]	; (8007760 <_dtoa_r+0x2f0>)
 80075d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075da:	ed93 7b00 	vldr	d7, [r3]
 80075de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80075e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e6:	d501      	bpl.n	80075ec <_dtoa_r+0x17c>
 80075e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075ec:	2300      	movs	r3, #0
 80075ee:	e022      	b.n	8007636 <_dtoa_r+0x1c6>
 80075f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075f2:	4401      	add	r1, r0
 80075f4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	bfc1      	itttt	gt
 80075fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007600:	fa04 f303 	lslgt.w	r3, r4, r3
 8007604:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007608:	fa28 f804 	lsrgt.w	r8, r8, r4
 800760c:	bfd6      	itet	le
 800760e:	f1c3 0320 	rsble	r3, r3, #32
 8007612:	ea43 0808 	orrgt.w	r8, r3, r8
 8007616:	fa08 f803 	lslle.w	r8, r8, r3
 800761a:	ee07 8a90 	vmov	s15, r8
 800761e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007622:	3901      	subs	r1, #1
 8007624:	ee17 4a90 	vmov	r4, s15
 8007628:	ec53 2b17 	vmov	r2, r3, d7
 800762c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007630:	2401      	movs	r4, #1
 8007632:	e7a3      	b.n	800757c <_dtoa_r+0x10c>
 8007634:	2301      	movs	r3, #1
 8007636:	930b      	str	r3, [sp, #44]	; 0x2c
 8007638:	1a43      	subs	r3, r0, r1
 800763a:	1e5a      	subs	r2, r3, #1
 800763c:	bf45      	ittet	mi
 800763e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007642:	9304      	strmi	r3, [sp, #16]
 8007644:	2300      	movpl	r3, #0
 8007646:	2300      	movmi	r3, #0
 8007648:	9205      	str	r2, [sp, #20]
 800764a:	bf54      	ite	pl
 800764c:	9304      	strpl	r3, [sp, #16]
 800764e:	9305      	strmi	r3, [sp, #20]
 8007650:	f1bb 0f00 	cmp.w	fp, #0
 8007654:	db18      	blt.n	8007688 <_dtoa_r+0x218>
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800765c:	445b      	add	r3, fp
 800765e:	9305      	str	r3, [sp, #20]
 8007660:	2300      	movs	r3, #0
 8007662:	9a06      	ldr	r2, [sp, #24]
 8007664:	2a09      	cmp	r2, #9
 8007666:	d849      	bhi.n	80076fc <_dtoa_r+0x28c>
 8007668:	2a05      	cmp	r2, #5
 800766a:	bfc4      	itt	gt
 800766c:	3a04      	subgt	r2, #4
 800766e:	9206      	strgt	r2, [sp, #24]
 8007670:	9a06      	ldr	r2, [sp, #24]
 8007672:	f1a2 0202 	sub.w	r2, r2, #2
 8007676:	bfcc      	ite	gt
 8007678:	2400      	movgt	r4, #0
 800767a:	2401      	movle	r4, #1
 800767c:	2a03      	cmp	r2, #3
 800767e:	d848      	bhi.n	8007712 <_dtoa_r+0x2a2>
 8007680:	e8df f002 	tbb	[pc, r2]
 8007684:	3a2c2e0b 	.word	0x3a2c2e0b
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	2200      	movs	r2, #0
 800768c:	eba3 030b 	sub.w	r3, r3, fp
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	9209      	str	r2, [sp, #36]	; 0x24
 8007694:	f1cb 0300 	rsb	r3, fp, #0
 8007698:	e7e3      	b.n	8007662 <_dtoa_r+0x1f2>
 800769a:	2200      	movs	r2, #0
 800769c:	9207      	str	r2, [sp, #28]
 800769e:	9a08      	ldr	r2, [sp, #32]
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	dc39      	bgt.n	8007718 <_dtoa_r+0x2a8>
 80076a4:	f04f 0a01 	mov.w	sl, #1
 80076a8:	46d1      	mov	r9, sl
 80076aa:	4652      	mov	r2, sl
 80076ac:	f8cd a020 	str.w	sl, [sp, #32]
 80076b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80076b2:	2100      	movs	r1, #0
 80076b4:	6079      	str	r1, [r7, #4]
 80076b6:	2004      	movs	r0, #4
 80076b8:	f100 0c14 	add.w	ip, r0, #20
 80076bc:	4594      	cmp	ip, r2
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	d92f      	bls.n	8007722 <_dtoa_r+0x2b2>
 80076c2:	4630      	mov	r0, r6
 80076c4:	930d      	str	r3, [sp, #52]	; 0x34
 80076c6:	f000 fc4d 	bl	8007f64 <_Balloc>
 80076ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076cc:	9001      	str	r0, [sp, #4]
 80076ce:	4602      	mov	r2, r0
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d149      	bne.n	8007768 <_dtoa_r+0x2f8>
 80076d4:	4b23      	ldr	r3, [pc, #140]	; (8007764 <_dtoa_r+0x2f4>)
 80076d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076da:	e6e1      	b.n	80074a0 <_dtoa_r+0x30>
 80076dc:	2201      	movs	r2, #1
 80076de:	e7dd      	b.n	800769c <_dtoa_r+0x22c>
 80076e0:	2200      	movs	r2, #0
 80076e2:	9207      	str	r2, [sp, #28]
 80076e4:	9a08      	ldr	r2, [sp, #32]
 80076e6:	eb0b 0a02 	add.w	sl, fp, r2
 80076ea:	f10a 0901 	add.w	r9, sl, #1
 80076ee:	464a      	mov	r2, r9
 80076f0:	2a01      	cmp	r2, #1
 80076f2:	bfb8      	it	lt
 80076f4:	2201      	movlt	r2, #1
 80076f6:	e7db      	b.n	80076b0 <_dtoa_r+0x240>
 80076f8:	2201      	movs	r2, #1
 80076fa:	e7f2      	b.n	80076e2 <_dtoa_r+0x272>
 80076fc:	2401      	movs	r4, #1
 80076fe:	2200      	movs	r2, #0
 8007700:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007704:	f04f 3aff 	mov.w	sl, #4294967295
 8007708:	2100      	movs	r1, #0
 800770a:	46d1      	mov	r9, sl
 800770c:	2212      	movs	r2, #18
 800770e:	9108      	str	r1, [sp, #32]
 8007710:	e7ce      	b.n	80076b0 <_dtoa_r+0x240>
 8007712:	2201      	movs	r2, #1
 8007714:	9207      	str	r2, [sp, #28]
 8007716:	e7f5      	b.n	8007704 <_dtoa_r+0x294>
 8007718:	f8dd a020 	ldr.w	sl, [sp, #32]
 800771c:	46d1      	mov	r9, sl
 800771e:	4652      	mov	r2, sl
 8007720:	e7c6      	b.n	80076b0 <_dtoa_r+0x240>
 8007722:	3101      	adds	r1, #1
 8007724:	6079      	str	r1, [r7, #4]
 8007726:	0040      	lsls	r0, r0, #1
 8007728:	e7c6      	b.n	80076b8 <_dtoa_r+0x248>
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w
 8007730:	636f4361 	.word	0x636f4361
 8007734:	3fd287a7 	.word	0x3fd287a7
 8007738:	8b60c8b3 	.word	0x8b60c8b3
 800773c:	3fc68a28 	.word	0x3fc68a28
 8007740:	509f79fb 	.word	0x509f79fb
 8007744:	3fd34413 	.word	0x3fd34413
 8007748:	0800978d 	.word	0x0800978d
 800774c:	080097a4 	.word	0x080097a4
 8007750:	7ff00000 	.word	0x7ff00000
 8007754:	08009789 	.word	0x08009789
 8007758:	08009780 	.word	0x08009780
 800775c:	0800975d 	.word	0x0800975d
 8007760:	08009898 	.word	0x08009898
 8007764:	080097ff 	.word	0x080097ff
 8007768:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800776a:	9901      	ldr	r1, [sp, #4]
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	f1b9 0f0e 	cmp.w	r9, #14
 8007772:	d86c      	bhi.n	800784e <_dtoa_r+0x3de>
 8007774:	2c00      	cmp	r4, #0
 8007776:	d06a      	beq.n	800784e <_dtoa_r+0x3de>
 8007778:	f1bb 0f00 	cmp.w	fp, #0
 800777c:	f340 80a0 	ble.w	80078c0 <_dtoa_r+0x450>
 8007780:	49c1      	ldr	r1, [pc, #772]	; (8007a88 <_dtoa_r+0x618>)
 8007782:	f00b 020f 	and.w	r2, fp, #15
 8007786:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800778a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800778e:	ed92 7b00 	vldr	d7, [r2]
 8007792:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007796:	f000 8087 	beq.w	80078a8 <_dtoa_r+0x438>
 800779a:	4abc      	ldr	r2, [pc, #752]	; (8007a8c <_dtoa_r+0x61c>)
 800779c:	ed92 6b08 	vldr	d6, [r2, #32]
 80077a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80077a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80077a8:	f001 010f 	and.w	r1, r1, #15
 80077ac:	2203      	movs	r2, #3
 80077ae:	48b7      	ldr	r0, [pc, #732]	; (8007a8c <_dtoa_r+0x61c>)
 80077b0:	2900      	cmp	r1, #0
 80077b2:	d17b      	bne.n	80078ac <_dtoa_r+0x43c>
 80077b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80077b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80077bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077c2:	2900      	cmp	r1, #0
 80077c4:	f000 80a2 	beq.w	800790c <_dtoa_r+0x49c>
 80077c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80077cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80077d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d8:	f140 8098 	bpl.w	800790c <_dtoa_r+0x49c>
 80077dc:	f1b9 0f00 	cmp.w	r9, #0
 80077e0:	f000 8094 	beq.w	800790c <_dtoa_r+0x49c>
 80077e4:	f1ba 0f00 	cmp.w	sl, #0
 80077e8:	dd2f      	ble.n	800784a <_dtoa_r+0x3da>
 80077ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80077ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077f6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80077fa:	3201      	adds	r2, #1
 80077fc:	4650      	mov	r0, sl
 80077fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007802:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007806:	ee07 2a90 	vmov	s15, r2
 800780a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800780e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007812:	ee15 4a90 	vmov	r4, s11
 8007816:	ec52 1b15 	vmov	r1, r2, d5
 800781a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800781e:	2800      	cmp	r0, #0
 8007820:	d177      	bne.n	8007912 <_dtoa_r+0x4a2>
 8007822:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007826:	ee36 6b47 	vsub.f64	d6, d6, d7
 800782a:	ec42 1b17 	vmov	d7, r1, r2
 800782e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007836:	f300 8263 	bgt.w	8007d00 <_dtoa_r+0x890>
 800783a:	eeb1 7b47 	vneg.f64	d7, d7
 800783e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007846:	f100 8258 	bmi.w	8007cfa <_dtoa_r+0x88a>
 800784a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800784e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007850:	2a00      	cmp	r2, #0
 8007852:	f2c0 811d 	blt.w	8007a90 <_dtoa_r+0x620>
 8007856:	f1bb 0f0e 	cmp.w	fp, #14
 800785a:	f300 8119 	bgt.w	8007a90 <_dtoa_r+0x620>
 800785e:	4b8a      	ldr	r3, [pc, #552]	; (8007a88 <_dtoa_r+0x618>)
 8007860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007864:	ed93 6b00 	vldr	d6, [r3]
 8007868:	9b08      	ldr	r3, [sp, #32]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f280 80b7 	bge.w	80079de <_dtoa_r+0x56e>
 8007870:	f1b9 0f00 	cmp.w	r9, #0
 8007874:	f300 80b3 	bgt.w	80079de <_dtoa_r+0x56e>
 8007878:	f040 823f 	bne.w	8007cfa <_dtoa_r+0x88a>
 800787c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007880:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007884:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007888:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007890:	464c      	mov	r4, r9
 8007892:	464f      	mov	r7, r9
 8007894:	f280 8215 	bge.w	8007cc2 <_dtoa_r+0x852>
 8007898:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800789c:	2331      	movs	r3, #49	; 0x31
 800789e:	f808 3b01 	strb.w	r3, [r8], #1
 80078a2:	f10b 0b01 	add.w	fp, fp, #1
 80078a6:	e211      	b.n	8007ccc <_dtoa_r+0x85c>
 80078a8:	2202      	movs	r2, #2
 80078aa:	e780      	b.n	80077ae <_dtoa_r+0x33e>
 80078ac:	07cc      	lsls	r4, r1, #31
 80078ae:	d504      	bpl.n	80078ba <_dtoa_r+0x44a>
 80078b0:	ed90 6b00 	vldr	d6, [r0]
 80078b4:	3201      	adds	r2, #1
 80078b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078ba:	1049      	asrs	r1, r1, #1
 80078bc:	3008      	adds	r0, #8
 80078be:	e777      	b.n	80077b0 <_dtoa_r+0x340>
 80078c0:	d022      	beq.n	8007908 <_dtoa_r+0x498>
 80078c2:	f1cb 0100 	rsb	r1, fp, #0
 80078c6:	4a70      	ldr	r2, [pc, #448]	; (8007a88 <_dtoa_r+0x618>)
 80078c8:	f001 000f 	and.w	r0, r1, #15
 80078cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80078d0:	ed92 7b00 	vldr	d7, [r2]
 80078d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80078d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078dc:	486b      	ldr	r0, [pc, #428]	; (8007a8c <_dtoa_r+0x61c>)
 80078de:	1109      	asrs	r1, r1, #4
 80078e0:	2400      	movs	r4, #0
 80078e2:	2202      	movs	r2, #2
 80078e4:	b929      	cbnz	r1, 80078f2 <_dtoa_r+0x482>
 80078e6:	2c00      	cmp	r4, #0
 80078e8:	f43f af6a 	beq.w	80077c0 <_dtoa_r+0x350>
 80078ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078f0:	e766      	b.n	80077c0 <_dtoa_r+0x350>
 80078f2:	07cf      	lsls	r7, r1, #31
 80078f4:	d505      	bpl.n	8007902 <_dtoa_r+0x492>
 80078f6:	ed90 6b00 	vldr	d6, [r0]
 80078fa:	3201      	adds	r2, #1
 80078fc:	2401      	movs	r4, #1
 80078fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007902:	1049      	asrs	r1, r1, #1
 8007904:	3008      	adds	r0, #8
 8007906:	e7ed      	b.n	80078e4 <_dtoa_r+0x474>
 8007908:	2202      	movs	r2, #2
 800790a:	e759      	b.n	80077c0 <_dtoa_r+0x350>
 800790c:	465f      	mov	r7, fp
 800790e:	4648      	mov	r0, r9
 8007910:	e775      	b.n	80077fe <_dtoa_r+0x38e>
 8007912:	ec42 1b17 	vmov	d7, r1, r2
 8007916:	4a5c      	ldr	r2, [pc, #368]	; (8007a88 <_dtoa_r+0x618>)
 8007918:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800791c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007920:	9a01      	ldr	r2, [sp, #4]
 8007922:	1814      	adds	r4, r2, r0
 8007924:	9a07      	ldr	r2, [sp, #28]
 8007926:	b352      	cbz	r2, 800797e <_dtoa_r+0x50e>
 8007928:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800792c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007930:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007934:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007938:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800793c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007940:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007944:	ee14 2a90 	vmov	r2, s9
 8007948:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800794c:	3230      	adds	r2, #48	; 0x30
 800794e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007952:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795a:	f808 2b01 	strb.w	r2, [r8], #1
 800795e:	d439      	bmi.n	80079d4 <_dtoa_r+0x564>
 8007960:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007964:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	d472      	bmi.n	8007a54 <_dtoa_r+0x5e4>
 800796e:	45a0      	cmp	r8, r4
 8007970:	f43f af6b 	beq.w	800784a <_dtoa_r+0x3da>
 8007974:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007978:	ee26 6b03 	vmul.f64	d6, d6, d3
 800797c:	e7e0      	b.n	8007940 <_dtoa_r+0x4d0>
 800797e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007982:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007986:	4621      	mov	r1, r4
 8007988:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800798c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007990:	ee14 2a90 	vmov	r2, s9
 8007994:	3230      	adds	r2, #48	; 0x30
 8007996:	f808 2b01 	strb.w	r2, [r8], #1
 800799a:	45a0      	cmp	r8, r4
 800799c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80079a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80079a4:	d118      	bne.n	80079d8 <_dtoa_r+0x568>
 80079a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80079aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80079ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80079b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b6:	dc4d      	bgt.n	8007a54 <_dtoa_r+0x5e4>
 80079b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	f57f af41 	bpl.w	800784a <_dtoa_r+0x3da>
 80079c8:	4688      	mov	r8, r1
 80079ca:	3901      	subs	r1, #1
 80079cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80079d0:	2b30      	cmp	r3, #48	; 0x30
 80079d2:	d0f9      	beq.n	80079c8 <_dtoa_r+0x558>
 80079d4:	46bb      	mov	fp, r7
 80079d6:	e02a      	b.n	8007a2e <_dtoa_r+0x5be>
 80079d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80079dc:	e7d6      	b.n	800798c <_dtoa_r+0x51c>
 80079de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80079e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80079ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80079f2:	ee15 3a10 	vmov	r3, s10
 80079f6:	3330      	adds	r3, #48	; 0x30
 80079f8:	f808 3b01 	strb.w	r3, [r8], #1
 80079fc:	9b01      	ldr	r3, [sp, #4]
 80079fe:	eba8 0303 	sub.w	r3, r8, r3
 8007a02:	4599      	cmp	r9, r3
 8007a04:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007a08:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007a0c:	d133      	bne.n	8007a76 <_dtoa_r+0x606>
 8007a0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007a12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	dc1a      	bgt.n	8007a52 <_dtoa_r+0x5e2>
 8007a1c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a24:	d103      	bne.n	8007a2e <_dtoa_r+0x5be>
 8007a26:	ee15 3a10 	vmov	r3, s10
 8007a2a:	07d9      	lsls	r1, r3, #31
 8007a2c:	d411      	bmi.n	8007a52 <_dtoa_r+0x5e2>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 fad7 	bl	8007fe4 <_Bfree>
 8007a36:	2300      	movs	r3, #0
 8007a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a3a:	f888 3000 	strb.w	r3, [r8]
 8007a3e:	f10b 0301 	add.w	r3, fp, #1
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f43f ad61 	beq.w	800750e <_dtoa_r+0x9e>
 8007a4c:	f8c3 8000 	str.w	r8, [r3]
 8007a50:	e55d      	b.n	800750e <_dtoa_r+0x9e>
 8007a52:	465f      	mov	r7, fp
 8007a54:	4643      	mov	r3, r8
 8007a56:	4698      	mov	r8, r3
 8007a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a5c:	2a39      	cmp	r2, #57	; 0x39
 8007a5e:	d106      	bne.n	8007a6e <_dtoa_r+0x5fe>
 8007a60:	9a01      	ldr	r2, [sp, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d1f7      	bne.n	8007a56 <_dtoa_r+0x5e6>
 8007a66:	9901      	ldr	r1, [sp, #4]
 8007a68:	2230      	movs	r2, #48	; 0x30
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	700a      	strb	r2, [r1, #0]
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	3201      	adds	r2, #1
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	e7ae      	b.n	80079d4 <_dtoa_r+0x564>
 8007a76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a82:	d1b2      	bne.n	80079ea <_dtoa_r+0x57a>
 8007a84:	e7d3      	b.n	8007a2e <_dtoa_r+0x5be>
 8007a86:	bf00      	nop
 8007a88:	08009898 	.word	0x08009898
 8007a8c:	08009870 	.word	0x08009870
 8007a90:	9907      	ldr	r1, [sp, #28]
 8007a92:	2900      	cmp	r1, #0
 8007a94:	f000 80d0 	beq.w	8007c38 <_dtoa_r+0x7c8>
 8007a98:	9906      	ldr	r1, [sp, #24]
 8007a9a:	2901      	cmp	r1, #1
 8007a9c:	f300 80b4 	bgt.w	8007c08 <_dtoa_r+0x798>
 8007aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	f000 80ac 	beq.w	8007c00 <_dtoa_r+0x790>
 8007aa8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007aac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ab0:	461c      	mov	r4, r3
 8007ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab4:	9b04      	ldr	r3, [sp, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	9b05      	ldr	r3, [sp, #20]
 8007abc:	2101      	movs	r1, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	f000 fb46 	bl	8008154 <__i2b>
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aca:	4607      	mov	r7, r0
 8007acc:	f1b8 0f00 	cmp.w	r8, #0
 8007ad0:	dd0d      	ble.n	8007aee <_dtoa_r+0x67e>
 8007ad2:	9a05      	ldr	r2, [sp, #20]
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	dd0a      	ble.n	8007aee <_dtoa_r+0x67e>
 8007ad8:	4542      	cmp	r2, r8
 8007ada:	9904      	ldr	r1, [sp, #16]
 8007adc:	bfa8      	it	ge
 8007ade:	4642      	movge	r2, r8
 8007ae0:	1a89      	subs	r1, r1, r2
 8007ae2:	9104      	str	r1, [sp, #16]
 8007ae4:	9905      	ldr	r1, [sp, #20]
 8007ae6:	eba8 0802 	sub.w	r8, r8, r2
 8007aea:	1a8a      	subs	r2, r1, r2
 8007aec:	9205      	str	r2, [sp, #20]
 8007aee:	b303      	cbz	r3, 8007b32 <_dtoa_r+0x6c2>
 8007af0:	9a07      	ldr	r2, [sp, #28]
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	f000 80a5 	beq.w	8007c42 <_dtoa_r+0x7d2>
 8007af8:	2c00      	cmp	r4, #0
 8007afa:	dd13      	ble.n	8007b24 <_dtoa_r+0x6b4>
 8007afc:	4639      	mov	r1, r7
 8007afe:	4622      	mov	r2, r4
 8007b00:	4630      	mov	r0, r6
 8007b02:	930d      	str	r3, [sp, #52]	; 0x34
 8007b04:	f000 fbe6 	bl	80082d4 <__pow5mult>
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f000 fb36 	bl	8008180 <__multiply>
 8007b14:	4629      	mov	r1, r5
 8007b16:	900a      	str	r0, [sp, #40]	; 0x28
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 fa63 	bl	8007fe4 <_Bfree>
 8007b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b22:	4615      	mov	r5, r2
 8007b24:	1b1a      	subs	r2, r3, r4
 8007b26:	d004      	beq.n	8007b32 <_dtoa_r+0x6c2>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f000 fbd2 	bl	80082d4 <__pow5mult>
 8007b30:	4605      	mov	r5, r0
 8007b32:	2101      	movs	r1, #1
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 fb0d 	bl	8008154 <__i2b>
 8007b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	f340 8081 	ble.w	8007c46 <_dtoa_r+0x7d6>
 8007b44:	461a      	mov	r2, r3
 8007b46:	4601      	mov	r1, r0
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f000 fbc3 	bl	80082d4 <__pow5mult>
 8007b4e:	9b06      	ldr	r3, [sp, #24]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	4604      	mov	r4, r0
 8007b54:	dd7a      	ble.n	8007c4c <_dtoa_r+0x7dc>
 8007b56:	2300      	movs	r3, #0
 8007b58:	930a      	str	r3, [sp, #40]	; 0x28
 8007b5a:	6922      	ldr	r2, [r4, #16]
 8007b5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007b60:	6910      	ldr	r0, [r2, #16]
 8007b62:	f000 faa7 	bl	80080b4 <__hi0bits>
 8007b66:	f1c0 0020 	rsb	r0, r0, #32
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	4418      	add	r0, r3
 8007b6e:	f010 001f 	ands.w	r0, r0, #31
 8007b72:	f000 808c 	beq.w	8007c8e <_dtoa_r+0x81e>
 8007b76:	f1c0 0220 	rsb	r2, r0, #32
 8007b7a:	2a04      	cmp	r2, #4
 8007b7c:	f340 8085 	ble.w	8007c8a <_dtoa_r+0x81a>
 8007b80:	f1c0 001c 	rsb	r0, r0, #28
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	4403      	add	r3, r0
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	9b05      	ldr	r3, [sp, #20]
 8007b8c:	4403      	add	r3, r0
 8007b8e:	4480      	add	r8, r0
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dd05      	ble.n	8007ba4 <_dtoa_r+0x734>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 fbf3 	bl	8008388 <__lshift>
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	9b05      	ldr	r3, [sp, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dd05      	ble.n	8007bb6 <_dtoa_r+0x746>
 8007baa:	4621      	mov	r1, r4
 8007bac:	461a      	mov	r2, r3
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f000 fbea 	bl	8008388 <__lshift>
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d06a      	beq.n	8007c92 <_dtoa_r+0x822>
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fc52 	bl	8008468 <__mcmp>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	da64      	bge.n	8007c92 <_dtoa_r+0x822>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4629      	mov	r1, r5
 8007bcc:	220a      	movs	r2, #10
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f000 fa2a 	bl	8008028 <__multadd>
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bda:	4605      	mov	r5, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8191 	beq.w	8007f04 <_dtoa_r+0xa94>
 8007be2:	4639      	mov	r1, r7
 8007be4:	2300      	movs	r3, #0
 8007be6:	220a      	movs	r2, #10
 8007be8:	4630      	mov	r0, r6
 8007bea:	f000 fa1d 	bl	8008028 <__multadd>
 8007bee:	f1ba 0f00 	cmp.w	sl, #0
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	f300 808d 	bgt.w	8007d12 <_dtoa_r+0x8a2>
 8007bf8:	9b06      	ldr	r3, [sp, #24]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	dc50      	bgt.n	8007ca0 <_dtoa_r+0x830>
 8007bfe:	e088      	b.n	8007d12 <_dtoa_r+0x8a2>
 8007c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c06:	e751      	b.n	8007aac <_dtoa_r+0x63c>
 8007c08:	f109 34ff 	add.w	r4, r9, #4294967295
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	bfbf      	itttt	lt
 8007c10:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007c12:	1ae3      	sublt	r3, r4, r3
 8007c14:	18d2      	addlt	r2, r2, r3
 8007c16:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007c18:	bfb6      	itet	lt
 8007c1a:	4623      	movlt	r3, r4
 8007c1c:	1b1c      	subge	r4, r3, r4
 8007c1e:	2400      	movlt	r4, #0
 8007c20:	f1b9 0f00 	cmp.w	r9, #0
 8007c24:	bfb5      	itete	lt
 8007c26:	9a04      	ldrlt	r2, [sp, #16]
 8007c28:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007c2c:	eba2 0809 	sublt.w	r8, r2, r9
 8007c30:	464a      	movge	r2, r9
 8007c32:	bfb8      	it	lt
 8007c34:	2200      	movlt	r2, #0
 8007c36:	e73c      	b.n	8007ab2 <_dtoa_r+0x642>
 8007c38:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c3c:	9f07      	ldr	r7, [sp, #28]
 8007c3e:	461c      	mov	r4, r3
 8007c40:	e744      	b.n	8007acc <_dtoa_r+0x65c>
 8007c42:	461a      	mov	r2, r3
 8007c44:	e770      	b.n	8007b28 <_dtoa_r+0x6b8>
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	dc18      	bgt.n	8007c7e <_dtoa_r+0x80e>
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	b9b3      	cbnz	r3, 8007c7e <_dtoa_r+0x80e>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007c56:	b9a2      	cbnz	r2, 8007c82 <_dtoa_r+0x812>
 8007c58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c5c:	0d12      	lsrs	r2, r2, #20
 8007c5e:	0512      	lsls	r2, r2, #20
 8007c60:	b18a      	cbz	r2, 8007c86 <_dtoa_r+0x816>
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	3301      	adds	r3, #1
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	930a      	str	r3, [sp, #40]	; 0x28
 8007c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f47f af70 	bne.w	8007b5a <_dtoa_r+0x6ea>
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e775      	b.n	8007b6a <_dtoa_r+0x6fa>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e7f6      	b.n	8007c70 <_dtoa_r+0x800>
 8007c82:	9b02      	ldr	r3, [sp, #8]
 8007c84:	e7f4      	b.n	8007c70 <_dtoa_r+0x800>
 8007c86:	920a      	str	r2, [sp, #40]	; 0x28
 8007c88:	e7f3      	b.n	8007c72 <_dtoa_r+0x802>
 8007c8a:	d082      	beq.n	8007b92 <_dtoa_r+0x722>
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	301c      	adds	r0, #28
 8007c90:	e778      	b.n	8007b84 <_dtoa_r+0x714>
 8007c92:	f1b9 0f00 	cmp.w	r9, #0
 8007c96:	dc37      	bgt.n	8007d08 <_dtoa_r+0x898>
 8007c98:	9b06      	ldr	r3, [sp, #24]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	dd34      	ble.n	8007d08 <_dtoa_r+0x898>
 8007c9e:	46ca      	mov	sl, r9
 8007ca0:	f1ba 0f00 	cmp.w	sl, #0
 8007ca4:	d10d      	bne.n	8007cc2 <_dtoa_r+0x852>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4653      	mov	r3, sl
 8007caa:	2205      	movs	r2, #5
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f9bb 	bl	8008028 <__multadd>
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 fbd6 	bl	8008468 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f73f adeb 	bgt.w	8007898 <_dtoa_r+0x428>
 8007cc2:	9b08      	ldr	r3, [sp, #32]
 8007cc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cc8:	ea6f 0b03 	mvn.w	fp, r3
 8007ccc:	f04f 0900 	mov.w	r9, #0
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f000 f986 	bl	8007fe4 <_Bfree>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	f43f aea8 	beq.w	8007a2e <_dtoa_r+0x5be>
 8007cde:	f1b9 0f00 	cmp.w	r9, #0
 8007ce2:	d005      	beq.n	8007cf0 <_dtoa_r+0x880>
 8007ce4:	45b9      	cmp	r9, r7
 8007ce6:	d003      	beq.n	8007cf0 <_dtoa_r+0x880>
 8007ce8:	4649      	mov	r1, r9
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f97a 	bl	8007fe4 <_Bfree>
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f976 	bl	8007fe4 <_Bfree>
 8007cf8:	e699      	b.n	8007a2e <_dtoa_r+0x5be>
 8007cfa:	2400      	movs	r4, #0
 8007cfc:	4627      	mov	r7, r4
 8007cfe:	e7e0      	b.n	8007cc2 <_dtoa_r+0x852>
 8007d00:	46bb      	mov	fp, r7
 8007d02:	4604      	mov	r4, r0
 8007d04:	4607      	mov	r7, r0
 8007d06:	e5c7      	b.n	8007898 <_dtoa_r+0x428>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	46ca      	mov	sl, r9
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8100 	beq.w	8007f12 <_dtoa_r+0xaa2>
 8007d12:	f1b8 0f00 	cmp.w	r8, #0
 8007d16:	dd05      	ble.n	8007d24 <_dtoa_r+0x8b4>
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4642      	mov	r2, r8
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 fb33 	bl	8008388 <__lshift>
 8007d22:	4607      	mov	r7, r0
 8007d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05d      	beq.n	8007de6 <_dtoa_r+0x976>
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 f919 	bl	8007f64 <_Balloc>
 8007d32:	4680      	mov	r8, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <_dtoa_r+0x8d2>
 8007d36:	4b82      	ldr	r3, [pc, #520]	; (8007f40 <_dtoa_r+0xad0>)
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d3e:	f7ff bbaf 	b.w	80074a0 <_dtoa_r+0x30>
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	3202      	adds	r2, #2
 8007d46:	0092      	lsls	r2, r2, #2
 8007d48:	f107 010c 	add.w	r1, r7, #12
 8007d4c:	300c      	adds	r0, #12
 8007d4e:	f7fe fe87 	bl	8006a60 <memcpy>
 8007d52:	2201      	movs	r2, #1
 8007d54:	4641      	mov	r1, r8
 8007d56:	4630      	mov	r0, r6
 8007d58:	f000 fb16 	bl	8008388 <__lshift>
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	4453      	add	r3, sl
 8007d66:	9308      	str	r3, [sp, #32]
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	46b9      	mov	r9, r7
 8007d70:	9307      	str	r3, [sp, #28]
 8007d72:	4607      	mov	r7, r0
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	4621      	mov	r1, r4
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	9302      	str	r3, [sp, #8]
 8007d7e:	f7ff fae9 	bl	8007354 <quorem>
 8007d82:	4603      	mov	r3, r0
 8007d84:	3330      	adds	r3, #48	; 0x30
 8007d86:	9005      	str	r0, [sp, #20]
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	f000 fb6b 	bl	8008468 <__mcmp>
 8007d92:	463a      	mov	r2, r7
 8007d94:	4682      	mov	sl, r0
 8007d96:	4621      	mov	r1, r4
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f000 fb81 	bl	80084a0 <__mdiff>
 8007d9e:	68c2      	ldr	r2, [r0, #12]
 8007da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da2:	4680      	mov	r8, r0
 8007da4:	bb0a      	cbnz	r2, 8007dea <_dtoa_r+0x97a>
 8007da6:	4601      	mov	r1, r0
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 fb5d 	bl	8008468 <__mcmp>
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	4602      	mov	r2, r0
 8007db2:	4641      	mov	r1, r8
 8007db4:	4630      	mov	r0, r6
 8007db6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007dba:	f000 f913 	bl	8007fe4 <_Bfree>
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007dc6:	ea43 0102 	orr.w	r1, r3, r2
 8007dca:	9b07      	ldr	r3, [sp, #28]
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd0:	d10d      	bne.n	8007dee <_dtoa_r+0x97e>
 8007dd2:	2b39      	cmp	r3, #57	; 0x39
 8007dd4:	d029      	beq.n	8007e2a <_dtoa_r+0x9ba>
 8007dd6:	f1ba 0f00 	cmp.w	sl, #0
 8007dda:	dd01      	ble.n	8007de0 <_dtoa_r+0x970>
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	3331      	adds	r3, #49	; 0x31
 8007de0:	9a02      	ldr	r2, [sp, #8]
 8007de2:	7013      	strb	r3, [r2, #0]
 8007de4:	e774      	b.n	8007cd0 <_dtoa_r+0x860>
 8007de6:	4638      	mov	r0, r7
 8007de8:	e7b8      	b.n	8007d5c <_dtoa_r+0x8ec>
 8007dea:	2201      	movs	r2, #1
 8007dec:	e7e1      	b.n	8007db2 <_dtoa_r+0x942>
 8007dee:	f1ba 0f00 	cmp.w	sl, #0
 8007df2:	db06      	blt.n	8007e02 <_dtoa_r+0x992>
 8007df4:	9906      	ldr	r1, [sp, #24]
 8007df6:	ea41 0a0a 	orr.w	sl, r1, sl
 8007dfa:	9907      	ldr	r1, [sp, #28]
 8007dfc:	ea5a 0101 	orrs.w	r1, sl, r1
 8007e00:	d120      	bne.n	8007e44 <_dtoa_r+0x9d4>
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	ddec      	ble.n	8007de0 <_dtoa_r+0x970>
 8007e06:	4629      	mov	r1, r5
 8007e08:	2201      	movs	r2, #1
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	f000 fabb 	bl	8008388 <__lshift>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4605      	mov	r5, r0
 8007e16:	f000 fb27 	bl	8008468 <__mcmp>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	9b04      	ldr	r3, [sp, #16]
 8007e1e:	dc02      	bgt.n	8007e26 <_dtoa_r+0x9b6>
 8007e20:	d1de      	bne.n	8007de0 <_dtoa_r+0x970>
 8007e22:	07da      	lsls	r2, r3, #31
 8007e24:	d5dc      	bpl.n	8007de0 <_dtoa_r+0x970>
 8007e26:	2b39      	cmp	r3, #57	; 0x39
 8007e28:	d1d8      	bne.n	8007ddc <_dtoa_r+0x96c>
 8007e2a:	9a02      	ldr	r2, [sp, #8]
 8007e2c:	2339      	movs	r3, #57	; 0x39
 8007e2e:	7013      	strb	r3, [r2, #0]
 8007e30:	4643      	mov	r3, r8
 8007e32:	4698      	mov	r8, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007e3a:	2a39      	cmp	r2, #57	; 0x39
 8007e3c:	d051      	beq.n	8007ee2 <_dtoa_r+0xa72>
 8007e3e:	3201      	adds	r2, #1
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	e745      	b.n	8007cd0 <_dtoa_r+0x860>
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	dd03      	ble.n	8007e50 <_dtoa_r+0x9e0>
 8007e48:	2b39      	cmp	r3, #57	; 0x39
 8007e4a:	d0ee      	beq.n	8007e2a <_dtoa_r+0x9ba>
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	e7c7      	b.n	8007de0 <_dtoa_r+0x970>
 8007e50:	9a04      	ldr	r2, [sp, #16]
 8007e52:	9908      	ldr	r1, [sp, #32]
 8007e54:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e58:	428a      	cmp	r2, r1
 8007e5a:	d02b      	beq.n	8007eb4 <_dtoa_r+0xa44>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	2300      	movs	r3, #0
 8007e60:	220a      	movs	r2, #10
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f8e0 	bl	8008028 <__multadd>
 8007e68:	45b9      	cmp	r9, r7
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	f04f 020a 	mov.w	r2, #10
 8007e74:	4649      	mov	r1, r9
 8007e76:	4630      	mov	r0, r6
 8007e78:	d107      	bne.n	8007e8a <_dtoa_r+0xa1a>
 8007e7a:	f000 f8d5 	bl	8008028 <__multadd>
 8007e7e:	4681      	mov	r9, r0
 8007e80:	4607      	mov	r7, r0
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	3301      	adds	r3, #1
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	e774      	b.n	8007d74 <_dtoa_r+0x904>
 8007e8a:	f000 f8cd 	bl	8008028 <__multadd>
 8007e8e:	4639      	mov	r1, r7
 8007e90:	4681      	mov	r9, r0
 8007e92:	2300      	movs	r3, #0
 8007e94:	220a      	movs	r2, #10
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 f8c6 	bl	8008028 <__multadd>
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	e7f0      	b.n	8007e82 <_dtoa_r+0xa12>
 8007ea0:	f1ba 0f00 	cmp.w	sl, #0
 8007ea4:	9a01      	ldr	r2, [sp, #4]
 8007ea6:	bfcc      	ite	gt
 8007ea8:	46d0      	movgt	r8, sl
 8007eaa:	f04f 0801 	movle.w	r8, #1
 8007eae:	4490      	add	r8, r2
 8007eb0:	f04f 0900 	mov.w	r9, #0
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4630      	mov	r0, r6
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	f000 fa64 	bl	8008388 <__lshift>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	f000 fad0 	bl	8008468 <__mcmp>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	dcb1      	bgt.n	8007e30 <_dtoa_r+0x9c0>
 8007ecc:	d102      	bne.n	8007ed4 <_dtoa_r+0xa64>
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	07db      	lsls	r3, r3, #31
 8007ed2:	d4ad      	bmi.n	8007e30 <_dtoa_r+0x9c0>
 8007ed4:	4643      	mov	r3, r8
 8007ed6:	4698      	mov	r8, r3
 8007ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007edc:	2a30      	cmp	r2, #48	; 0x30
 8007ede:	d0fa      	beq.n	8007ed6 <_dtoa_r+0xa66>
 8007ee0:	e6f6      	b.n	8007cd0 <_dtoa_r+0x860>
 8007ee2:	9a01      	ldr	r2, [sp, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d1a4      	bne.n	8007e32 <_dtoa_r+0x9c2>
 8007ee8:	f10b 0b01 	add.w	fp, fp, #1
 8007eec:	2331      	movs	r3, #49	; 0x31
 8007eee:	e778      	b.n	8007de2 <_dtoa_r+0x972>
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <_dtoa_r+0xad4>)
 8007ef2:	f7ff bb27 	b.w	8007544 <_dtoa_r+0xd4>
 8007ef6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f47f ab03 	bne.w	8007504 <_dtoa_r+0x94>
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <_dtoa_r+0xad8>)
 8007f00:	f7ff bb20 	b.w	8007544 <_dtoa_r+0xd4>
 8007f04:	f1ba 0f00 	cmp.w	sl, #0
 8007f08:	dc03      	bgt.n	8007f12 <_dtoa_r+0xaa2>
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	f73f aec7 	bgt.w	8007ca0 <_dtoa_r+0x830>
 8007f12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f16:	4621      	mov	r1, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f7ff fa1b 	bl	8007354 <quorem>
 8007f1e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f22:	f808 3b01 	strb.w	r3, [r8], #1
 8007f26:	9a01      	ldr	r2, [sp, #4]
 8007f28:	eba8 0202 	sub.w	r2, r8, r2
 8007f2c:	4592      	cmp	sl, r2
 8007f2e:	ddb7      	ble.n	8007ea0 <_dtoa_r+0xa30>
 8007f30:	4629      	mov	r1, r5
 8007f32:	2300      	movs	r3, #0
 8007f34:	220a      	movs	r2, #10
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f876 	bl	8008028 <__multadd>
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	e7ea      	b.n	8007f16 <_dtoa_r+0xaa6>
 8007f40:	080097ff 	.word	0x080097ff
 8007f44:	0800975c 	.word	0x0800975c
 8007f48:	08009780 	.word	0x08009780

08007f4c <_localeconv_r>:
 8007f4c:	4800      	ldr	r0, [pc, #0]	; (8007f50 <_localeconv_r+0x4>)
 8007f4e:	4770      	bx	lr
 8007f50:	20000160 	.word	0x20000160

08007f54 <malloc>:
 8007f54:	4b02      	ldr	r3, [pc, #8]	; (8007f60 <malloc+0xc>)
 8007f56:	4601      	mov	r1, r0
 8007f58:	6818      	ldr	r0, [r3, #0]
 8007f5a:	f000 bc09 	b.w	8008770 <_malloc_r>
 8007f5e:	bf00      	nop
 8007f60:	2000000c 	.word	0x2000000c

08007f64 <_Balloc>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f68:	4604      	mov	r4, r0
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	b976      	cbnz	r6, 8007f8c <_Balloc+0x28>
 8007f6e:	2010      	movs	r0, #16
 8007f70:	f7ff fff0 	bl	8007f54 <malloc>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6260      	str	r0, [r4, #36]	; 0x24
 8007f78:	b920      	cbnz	r0, 8007f84 <_Balloc+0x20>
 8007f7a:	4b18      	ldr	r3, [pc, #96]	; (8007fdc <_Balloc+0x78>)
 8007f7c:	4818      	ldr	r0, [pc, #96]	; (8007fe0 <_Balloc+0x7c>)
 8007f7e:	2166      	movs	r1, #102	; 0x66
 8007f80:	f000 fdd6 	bl	8008b30 <__assert_func>
 8007f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f88:	6006      	str	r6, [r0, #0]
 8007f8a:	60c6      	str	r6, [r0, #12]
 8007f8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f8e:	68f3      	ldr	r3, [r6, #12]
 8007f90:	b183      	cbz	r3, 8007fb4 <_Balloc+0x50>
 8007f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f9a:	b9b8      	cbnz	r0, 8007fcc <_Balloc+0x68>
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007fa2:	1d72      	adds	r2, r6, #5
 8007fa4:	0092      	lsls	r2, r2, #2
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 fb60 	bl	800866c <_calloc_r>
 8007fac:	b160      	cbz	r0, 8007fc8 <_Balloc+0x64>
 8007fae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fb2:	e00e      	b.n	8007fd2 <_Balloc+0x6e>
 8007fb4:	2221      	movs	r2, #33	; 0x21
 8007fb6:	2104      	movs	r1, #4
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 fb57 	bl	800866c <_calloc_r>
 8007fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc0:	60f0      	str	r0, [r6, #12]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e4      	bne.n	8007f92 <_Balloc+0x2e>
 8007fc8:	2000      	movs	r0, #0
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	6802      	ldr	r2, [r0, #0]
 8007fce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fd8:	e7f7      	b.n	8007fca <_Balloc+0x66>
 8007fda:	bf00      	nop
 8007fdc:	0800978d 	.word	0x0800978d
 8007fe0:	08009810 	.word	0x08009810

08007fe4 <_Bfree>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b976      	cbnz	r6, 800800c <_Bfree+0x28>
 8007fee:	2010      	movs	r0, #16
 8007ff0:	f7ff ffb0 	bl	8007f54 <malloc>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ff8:	b920      	cbnz	r0, 8008004 <_Bfree+0x20>
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <_Bfree+0x3c>)
 8007ffc:	4809      	ldr	r0, [pc, #36]	; (8008024 <_Bfree+0x40>)
 8007ffe:	218a      	movs	r1, #138	; 0x8a
 8008000:	f000 fd96 	bl	8008b30 <__assert_func>
 8008004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008008:	6006      	str	r6, [r0, #0]
 800800a:	60c6      	str	r6, [r0, #12]
 800800c:	b13c      	cbz	r4, 800801e <_Bfree+0x3a>
 800800e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008010:	6862      	ldr	r2, [r4, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008018:	6021      	str	r1, [r4, #0]
 800801a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	0800978d 	.word	0x0800978d
 8008024:	08009810 	.word	0x08009810

08008028 <__multadd>:
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	690d      	ldr	r5, [r1, #16]
 800802e:	4607      	mov	r7, r0
 8008030:	460c      	mov	r4, r1
 8008032:	461e      	mov	r6, r3
 8008034:	f101 0c14 	add.w	ip, r1, #20
 8008038:	2000      	movs	r0, #0
 800803a:	f8dc 3000 	ldr.w	r3, [ip]
 800803e:	b299      	uxth	r1, r3
 8008040:	fb02 6101 	mla	r1, r2, r1, r6
 8008044:	0c1e      	lsrs	r6, r3, #16
 8008046:	0c0b      	lsrs	r3, r1, #16
 8008048:	fb02 3306 	mla	r3, r2, r6, r3
 800804c:	b289      	uxth	r1, r1
 800804e:	3001      	adds	r0, #1
 8008050:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008054:	4285      	cmp	r5, r0
 8008056:	f84c 1b04 	str.w	r1, [ip], #4
 800805a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800805e:	dcec      	bgt.n	800803a <__multadd+0x12>
 8008060:	b30e      	cbz	r6, 80080a6 <__multadd+0x7e>
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	42ab      	cmp	r3, r5
 8008066:	dc19      	bgt.n	800809c <__multadd+0x74>
 8008068:	6861      	ldr	r1, [r4, #4]
 800806a:	4638      	mov	r0, r7
 800806c:	3101      	adds	r1, #1
 800806e:	f7ff ff79 	bl	8007f64 <_Balloc>
 8008072:	4680      	mov	r8, r0
 8008074:	b928      	cbnz	r0, 8008082 <__multadd+0x5a>
 8008076:	4602      	mov	r2, r0
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <__multadd+0x84>)
 800807a:	480d      	ldr	r0, [pc, #52]	; (80080b0 <__multadd+0x88>)
 800807c:	21b5      	movs	r1, #181	; 0xb5
 800807e:	f000 fd57 	bl	8008b30 <__assert_func>
 8008082:	6922      	ldr	r2, [r4, #16]
 8008084:	3202      	adds	r2, #2
 8008086:	f104 010c 	add.w	r1, r4, #12
 800808a:	0092      	lsls	r2, r2, #2
 800808c:	300c      	adds	r0, #12
 800808e:	f7fe fce7 	bl	8006a60 <memcpy>
 8008092:	4621      	mov	r1, r4
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff ffa5 	bl	8007fe4 <_Bfree>
 800809a:	4644      	mov	r4, r8
 800809c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080a0:	3501      	adds	r5, #1
 80080a2:	615e      	str	r6, [r3, #20]
 80080a4:	6125      	str	r5, [r4, #16]
 80080a6:	4620      	mov	r0, r4
 80080a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ac:	080097ff 	.word	0x080097ff
 80080b0:	08009810 	.word	0x08009810

080080b4 <__hi0bits>:
 80080b4:	0c03      	lsrs	r3, r0, #16
 80080b6:	041b      	lsls	r3, r3, #16
 80080b8:	b9d3      	cbnz	r3, 80080f0 <__hi0bits+0x3c>
 80080ba:	0400      	lsls	r0, r0, #16
 80080bc:	2310      	movs	r3, #16
 80080be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080c2:	bf04      	itt	eq
 80080c4:	0200      	lsleq	r0, r0, #8
 80080c6:	3308      	addeq	r3, #8
 80080c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080cc:	bf04      	itt	eq
 80080ce:	0100      	lsleq	r0, r0, #4
 80080d0:	3304      	addeq	r3, #4
 80080d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080d6:	bf04      	itt	eq
 80080d8:	0080      	lsleq	r0, r0, #2
 80080da:	3302      	addeq	r3, #2
 80080dc:	2800      	cmp	r0, #0
 80080de:	db05      	blt.n	80080ec <__hi0bits+0x38>
 80080e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080e4:	f103 0301 	add.w	r3, r3, #1
 80080e8:	bf08      	it	eq
 80080ea:	2320      	moveq	r3, #32
 80080ec:	4618      	mov	r0, r3
 80080ee:	4770      	bx	lr
 80080f0:	2300      	movs	r3, #0
 80080f2:	e7e4      	b.n	80080be <__hi0bits+0xa>

080080f4 <__lo0bits>:
 80080f4:	6803      	ldr	r3, [r0, #0]
 80080f6:	f013 0207 	ands.w	r2, r3, #7
 80080fa:	4601      	mov	r1, r0
 80080fc:	d00b      	beq.n	8008116 <__lo0bits+0x22>
 80080fe:	07da      	lsls	r2, r3, #31
 8008100:	d423      	bmi.n	800814a <__lo0bits+0x56>
 8008102:	0798      	lsls	r0, r3, #30
 8008104:	bf49      	itett	mi
 8008106:	085b      	lsrmi	r3, r3, #1
 8008108:	089b      	lsrpl	r3, r3, #2
 800810a:	2001      	movmi	r0, #1
 800810c:	600b      	strmi	r3, [r1, #0]
 800810e:	bf5c      	itt	pl
 8008110:	600b      	strpl	r3, [r1, #0]
 8008112:	2002      	movpl	r0, #2
 8008114:	4770      	bx	lr
 8008116:	b298      	uxth	r0, r3
 8008118:	b9a8      	cbnz	r0, 8008146 <__lo0bits+0x52>
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	2010      	movs	r0, #16
 800811e:	b2da      	uxtb	r2, r3
 8008120:	b90a      	cbnz	r2, 8008126 <__lo0bits+0x32>
 8008122:	3008      	adds	r0, #8
 8008124:	0a1b      	lsrs	r3, r3, #8
 8008126:	071a      	lsls	r2, r3, #28
 8008128:	bf04      	itt	eq
 800812a:	091b      	lsreq	r3, r3, #4
 800812c:	3004      	addeq	r0, #4
 800812e:	079a      	lsls	r2, r3, #30
 8008130:	bf04      	itt	eq
 8008132:	089b      	lsreq	r3, r3, #2
 8008134:	3002      	addeq	r0, #2
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	d403      	bmi.n	8008142 <__lo0bits+0x4e>
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	f100 0001 	add.w	r0, r0, #1
 8008140:	d005      	beq.n	800814e <__lo0bits+0x5a>
 8008142:	600b      	str	r3, [r1, #0]
 8008144:	4770      	bx	lr
 8008146:	4610      	mov	r0, r2
 8008148:	e7e9      	b.n	800811e <__lo0bits+0x2a>
 800814a:	2000      	movs	r0, #0
 800814c:	4770      	bx	lr
 800814e:	2020      	movs	r0, #32
 8008150:	4770      	bx	lr
	...

08008154 <__i2b>:
 8008154:	b510      	push	{r4, lr}
 8008156:	460c      	mov	r4, r1
 8008158:	2101      	movs	r1, #1
 800815a:	f7ff ff03 	bl	8007f64 <_Balloc>
 800815e:	4602      	mov	r2, r0
 8008160:	b928      	cbnz	r0, 800816e <__i2b+0x1a>
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <__i2b+0x24>)
 8008164:	4805      	ldr	r0, [pc, #20]	; (800817c <__i2b+0x28>)
 8008166:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800816a:	f000 fce1 	bl	8008b30 <__assert_func>
 800816e:	2301      	movs	r3, #1
 8008170:	6144      	str	r4, [r0, #20]
 8008172:	6103      	str	r3, [r0, #16]
 8008174:	bd10      	pop	{r4, pc}
 8008176:	bf00      	nop
 8008178:	080097ff 	.word	0x080097ff
 800817c:	08009810 	.word	0x08009810

08008180 <__multiply>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4691      	mov	r9, r2
 8008186:	690a      	ldr	r2, [r1, #16]
 8008188:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800818c:	429a      	cmp	r2, r3
 800818e:	bfb8      	it	lt
 8008190:	460b      	movlt	r3, r1
 8008192:	460c      	mov	r4, r1
 8008194:	bfbc      	itt	lt
 8008196:	464c      	movlt	r4, r9
 8008198:	4699      	movlt	r9, r3
 800819a:	6927      	ldr	r7, [r4, #16]
 800819c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081a0:	68a3      	ldr	r3, [r4, #8]
 80081a2:	6861      	ldr	r1, [r4, #4]
 80081a4:	eb07 060a 	add.w	r6, r7, sl
 80081a8:	42b3      	cmp	r3, r6
 80081aa:	b085      	sub	sp, #20
 80081ac:	bfb8      	it	lt
 80081ae:	3101      	addlt	r1, #1
 80081b0:	f7ff fed8 	bl	8007f64 <_Balloc>
 80081b4:	b930      	cbnz	r0, 80081c4 <__multiply+0x44>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b44      	ldr	r3, [pc, #272]	; (80082cc <__multiply+0x14c>)
 80081ba:	4845      	ldr	r0, [pc, #276]	; (80082d0 <__multiply+0x150>)
 80081bc:	f240 115d 	movw	r1, #349	; 0x15d
 80081c0:	f000 fcb6 	bl	8008b30 <__assert_func>
 80081c4:	f100 0514 	add.w	r5, r0, #20
 80081c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081cc:	462b      	mov	r3, r5
 80081ce:	2200      	movs	r2, #0
 80081d0:	4543      	cmp	r3, r8
 80081d2:	d321      	bcc.n	8008218 <__multiply+0x98>
 80081d4:	f104 0314 	add.w	r3, r4, #20
 80081d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081dc:	f109 0314 	add.w	r3, r9, #20
 80081e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081e4:	9202      	str	r2, [sp, #8]
 80081e6:	1b3a      	subs	r2, r7, r4
 80081e8:	3a15      	subs	r2, #21
 80081ea:	f022 0203 	bic.w	r2, r2, #3
 80081ee:	3204      	adds	r2, #4
 80081f0:	f104 0115 	add.w	r1, r4, #21
 80081f4:	428f      	cmp	r7, r1
 80081f6:	bf38      	it	cc
 80081f8:	2204      	movcc	r2, #4
 80081fa:	9201      	str	r2, [sp, #4]
 80081fc:	9a02      	ldr	r2, [sp, #8]
 80081fe:	9303      	str	r3, [sp, #12]
 8008200:	429a      	cmp	r2, r3
 8008202:	d80c      	bhi.n	800821e <__multiply+0x9e>
 8008204:	2e00      	cmp	r6, #0
 8008206:	dd03      	ble.n	8008210 <__multiply+0x90>
 8008208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800820c:	2b00      	cmp	r3, #0
 800820e:	d05a      	beq.n	80082c6 <__multiply+0x146>
 8008210:	6106      	str	r6, [r0, #16]
 8008212:	b005      	add	sp, #20
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	f843 2b04 	str.w	r2, [r3], #4
 800821c:	e7d8      	b.n	80081d0 <__multiply+0x50>
 800821e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008222:	f1ba 0f00 	cmp.w	sl, #0
 8008226:	d024      	beq.n	8008272 <__multiply+0xf2>
 8008228:	f104 0e14 	add.w	lr, r4, #20
 800822c:	46a9      	mov	r9, r5
 800822e:	f04f 0c00 	mov.w	ip, #0
 8008232:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008236:	f8d9 1000 	ldr.w	r1, [r9]
 800823a:	fa1f fb82 	uxth.w	fp, r2
 800823e:	b289      	uxth	r1, r1
 8008240:	fb0a 110b 	mla	r1, sl, fp, r1
 8008244:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008248:	f8d9 2000 	ldr.w	r2, [r9]
 800824c:	4461      	add	r1, ip
 800824e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008252:	fb0a c20b 	mla	r2, sl, fp, ip
 8008256:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800825a:	b289      	uxth	r1, r1
 800825c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008260:	4577      	cmp	r7, lr
 8008262:	f849 1b04 	str.w	r1, [r9], #4
 8008266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800826a:	d8e2      	bhi.n	8008232 <__multiply+0xb2>
 800826c:	9a01      	ldr	r2, [sp, #4]
 800826e:	f845 c002 	str.w	ip, [r5, r2]
 8008272:	9a03      	ldr	r2, [sp, #12]
 8008274:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008278:	3304      	adds	r3, #4
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	d020      	beq.n	80082c2 <__multiply+0x142>
 8008280:	6829      	ldr	r1, [r5, #0]
 8008282:	f104 0c14 	add.w	ip, r4, #20
 8008286:	46ae      	mov	lr, r5
 8008288:	f04f 0a00 	mov.w	sl, #0
 800828c:	f8bc b000 	ldrh.w	fp, [ip]
 8008290:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008294:	fb09 220b 	mla	r2, r9, fp, r2
 8008298:	4492      	add	sl, r2
 800829a:	b289      	uxth	r1, r1
 800829c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082a0:	f84e 1b04 	str.w	r1, [lr], #4
 80082a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082a8:	f8be 1000 	ldrh.w	r1, [lr]
 80082ac:	0c12      	lsrs	r2, r2, #16
 80082ae:	fb09 1102 	mla	r1, r9, r2, r1
 80082b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082b6:	4567      	cmp	r7, ip
 80082b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082bc:	d8e6      	bhi.n	800828c <__multiply+0x10c>
 80082be:	9a01      	ldr	r2, [sp, #4]
 80082c0:	50a9      	str	r1, [r5, r2]
 80082c2:	3504      	adds	r5, #4
 80082c4:	e79a      	b.n	80081fc <__multiply+0x7c>
 80082c6:	3e01      	subs	r6, #1
 80082c8:	e79c      	b.n	8008204 <__multiply+0x84>
 80082ca:	bf00      	nop
 80082cc:	080097ff 	.word	0x080097ff
 80082d0:	08009810 	.word	0x08009810

080082d4 <__pow5mult>:
 80082d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d8:	4615      	mov	r5, r2
 80082da:	f012 0203 	ands.w	r2, r2, #3
 80082de:	4606      	mov	r6, r0
 80082e0:	460f      	mov	r7, r1
 80082e2:	d007      	beq.n	80082f4 <__pow5mult+0x20>
 80082e4:	4c25      	ldr	r4, [pc, #148]	; (800837c <__pow5mult+0xa8>)
 80082e6:	3a01      	subs	r2, #1
 80082e8:	2300      	movs	r3, #0
 80082ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082ee:	f7ff fe9b 	bl	8008028 <__multadd>
 80082f2:	4607      	mov	r7, r0
 80082f4:	10ad      	asrs	r5, r5, #2
 80082f6:	d03d      	beq.n	8008374 <__pow5mult+0xa0>
 80082f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082fa:	b97c      	cbnz	r4, 800831c <__pow5mult+0x48>
 80082fc:	2010      	movs	r0, #16
 80082fe:	f7ff fe29 	bl	8007f54 <malloc>
 8008302:	4602      	mov	r2, r0
 8008304:	6270      	str	r0, [r6, #36]	; 0x24
 8008306:	b928      	cbnz	r0, 8008314 <__pow5mult+0x40>
 8008308:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <__pow5mult+0xac>)
 800830a:	481e      	ldr	r0, [pc, #120]	; (8008384 <__pow5mult+0xb0>)
 800830c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008310:	f000 fc0e 	bl	8008b30 <__assert_func>
 8008314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008318:	6004      	str	r4, [r0, #0]
 800831a:	60c4      	str	r4, [r0, #12]
 800831c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008324:	b94c      	cbnz	r4, 800833a <__pow5mult+0x66>
 8008326:	f240 2171 	movw	r1, #625	; 0x271
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff ff12 	bl	8008154 <__i2b>
 8008330:	2300      	movs	r3, #0
 8008332:	f8c8 0008 	str.w	r0, [r8, #8]
 8008336:	4604      	mov	r4, r0
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	f04f 0900 	mov.w	r9, #0
 800833e:	07eb      	lsls	r3, r5, #31
 8008340:	d50a      	bpl.n	8008358 <__pow5mult+0x84>
 8008342:	4639      	mov	r1, r7
 8008344:	4622      	mov	r2, r4
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff ff1a 	bl	8008180 <__multiply>
 800834c:	4639      	mov	r1, r7
 800834e:	4680      	mov	r8, r0
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff fe47 	bl	8007fe4 <_Bfree>
 8008356:	4647      	mov	r7, r8
 8008358:	106d      	asrs	r5, r5, #1
 800835a:	d00b      	beq.n	8008374 <__pow5mult+0xa0>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	b938      	cbnz	r0, 8008370 <__pow5mult+0x9c>
 8008360:	4622      	mov	r2, r4
 8008362:	4621      	mov	r1, r4
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ff0b 	bl	8008180 <__multiply>
 800836a:	6020      	str	r0, [r4, #0]
 800836c:	f8c0 9000 	str.w	r9, [r0]
 8008370:	4604      	mov	r4, r0
 8008372:	e7e4      	b.n	800833e <__pow5mult+0x6a>
 8008374:	4638      	mov	r0, r7
 8008376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837a:	bf00      	nop
 800837c:	08009960 	.word	0x08009960
 8008380:	0800978d 	.word	0x0800978d
 8008384:	08009810 	.word	0x08009810

08008388 <__lshift>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	460c      	mov	r4, r1
 800838e:	6849      	ldr	r1, [r1, #4]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	4607      	mov	r7, r0
 800839a:	4691      	mov	r9, r2
 800839c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083a0:	f108 0601 	add.w	r6, r8, #1
 80083a4:	42b3      	cmp	r3, r6
 80083a6:	db0b      	blt.n	80083c0 <__lshift+0x38>
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff fddb 	bl	8007f64 <_Balloc>
 80083ae:	4605      	mov	r5, r0
 80083b0:	b948      	cbnz	r0, 80083c6 <__lshift+0x3e>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <__lshift+0xd8>)
 80083b6:	482b      	ldr	r0, [pc, #172]	; (8008464 <__lshift+0xdc>)
 80083b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083bc:	f000 fbb8 	bl	8008b30 <__assert_func>
 80083c0:	3101      	adds	r1, #1
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	e7ee      	b.n	80083a4 <__lshift+0x1c>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f100 0114 	add.w	r1, r0, #20
 80083cc:	f100 0210 	add.w	r2, r0, #16
 80083d0:	4618      	mov	r0, r3
 80083d2:	4553      	cmp	r3, sl
 80083d4:	db37      	blt.n	8008446 <__lshift+0xbe>
 80083d6:	6920      	ldr	r0, [r4, #16]
 80083d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083dc:	f104 0314 	add.w	r3, r4, #20
 80083e0:	f019 091f 	ands.w	r9, r9, #31
 80083e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80083ec:	d02f      	beq.n	800844e <__lshift+0xc6>
 80083ee:	f1c9 0e20 	rsb	lr, r9, #32
 80083f2:	468a      	mov	sl, r1
 80083f4:	f04f 0c00 	mov.w	ip, #0
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	fa02 f209 	lsl.w	r2, r2, r9
 80083fe:	ea42 020c 	orr.w	r2, r2, ip
 8008402:	f84a 2b04 	str.w	r2, [sl], #4
 8008406:	f853 2b04 	ldr.w	r2, [r3], #4
 800840a:	4298      	cmp	r0, r3
 800840c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008410:	d8f2      	bhi.n	80083f8 <__lshift+0x70>
 8008412:	1b03      	subs	r3, r0, r4
 8008414:	3b15      	subs	r3, #21
 8008416:	f023 0303 	bic.w	r3, r3, #3
 800841a:	3304      	adds	r3, #4
 800841c:	f104 0215 	add.w	r2, r4, #21
 8008420:	4290      	cmp	r0, r2
 8008422:	bf38      	it	cc
 8008424:	2304      	movcc	r3, #4
 8008426:	f841 c003 	str.w	ip, [r1, r3]
 800842a:	f1bc 0f00 	cmp.w	ip, #0
 800842e:	d001      	beq.n	8008434 <__lshift+0xac>
 8008430:	f108 0602 	add.w	r6, r8, #2
 8008434:	3e01      	subs	r6, #1
 8008436:	4638      	mov	r0, r7
 8008438:	612e      	str	r6, [r5, #16]
 800843a:	4621      	mov	r1, r4
 800843c:	f7ff fdd2 	bl	8007fe4 <_Bfree>
 8008440:	4628      	mov	r0, r5
 8008442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008446:	f842 0f04 	str.w	r0, [r2, #4]!
 800844a:	3301      	adds	r3, #1
 800844c:	e7c1      	b.n	80083d2 <__lshift+0x4a>
 800844e:	3904      	subs	r1, #4
 8008450:	f853 2b04 	ldr.w	r2, [r3], #4
 8008454:	f841 2f04 	str.w	r2, [r1, #4]!
 8008458:	4298      	cmp	r0, r3
 800845a:	d8f9      	bhi.n	8008450 <__lshift+0xc8>
 800845c:	e7ea      	b.n	8008434 <__lshift+0xac>
 800845e:	bf00      	nop
 8008460:	080097ff 	.word	0x080097ff
 8008464:	08009810 	.word	0x08009810

08008468 <__mcmp>:
 8008468:	b530      	push	{r4, r5, lr}
 800846a:	6902      	ldr	r2, [r0, #16]
 800846c:	690c      	ldr	r4, [r1, #16]
 800846e:	1b12      	subs	r2, r2, r4
 8008470:	d10e      	bne.n	8008490 <__mcmp+0x28>
 8008472:	f100 0314 	add.w	r3, r0, #20
 8008476:	3114      	adds	r1, #20
 8008478:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800847c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008480:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008484:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008488:	42a5      	cmp	r5, r4
 800848a:	d003      	beq.n	8008494 <__mcmp+0x2c>
 800848c:	d305      	bcc.n	800849a <__mcmp+0x32>
 800848e:	2201      	movs	r2, #1
 8008490:	4610      	mov	r0, r2
 8008492:	bd30      	pop	{r4, r5, pc}
 8008494:	4283      	cmp	r3, r0
 8008496:	d3f3      	bcc.n	8008480 <__mcmp+0x18>
 8008498:	e7fa      	b.n	8008490 <__mcmp+0x28>
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	e7f7      	b.n	8008490 <__mcmp+0x28>

080084a0 <__mdiff>:
 80084a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	460c      	mov	r4, r1
 80084a6:	4606      	mov	r6, r0
 80084a8:	4611      	mov	r1, r2
 80084aa:	4620      	mov	r0, r4
 80084ac:	4690      	mov	r8, r2
 80084ae:	f7ff ffdb 	bl	8008468 <__mcmp>
 80084b2:	1e05      	subs	r5, r0, #0
 80084b4:	d110      	bne.n	80084d8 <__mdiff+0x38>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff fd53 	bl	8007f64 <_Balloc>
 80084be:	b930      	cbnz	r0, 80084ce <__mdiff+0x2e>
 80084c0:	4b3a      	ldr	r3, [pc, #232]	; (80085ac <__mdiff+0x10c>)
 80084c2:	4602      	mov	r2, r0
 80084c4:	f240 2132 	movw	r1, #562	; 0x232
 80084c8:	4839      	ldr	r0, [pc, #228]	; (80085b0 <__mdiff+0x110>)
 80084ca:	f000 fb31 	bl	8008b30 <__assert_func>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d8:	bfa4      	itt	ge
 80084da:	4643      	movge	r3, r8
 80084dc:	46a0      	movge	r8, r4
 80084de:	4630      	mov	r0, r6
 80084e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084e4:	bfa6      	itte	ge
 80084e6:	461c      	movge	r4, r3
 80084e8:	2500      	movge	r5, #0
 80084ea:	2501      	movlt	r5, #1
 80084ec:	f7ff fd3a 	bl	8007f64 <_Balloc>
 80084f0:	b920      	cbnz	r0, 80084fc <__mdiff+0x5c>
 80084f2:	4b2e      	ldr	r3, [pc, #184]	; (80085ac <__mdiff+0x10c>)
 80084f4:	4602      	mov	r2, r0
 80084f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084fa:	e7e5      	b.n	80084c8 <__mdiff+0x28>
 80084fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008500:	6926      	ldr	r6, [r4, #16]
 8008502:	60c5      	str	r5, [r0, #12]
 8008504:	f104 0914 	add.w	r9, r4, #20
 8008508:	f108 0514 	add.w	r5, r8, #20
 800850c:	f100 0e14 	add.w	lr, r0, #20
 8008510:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008514:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008518:	f108 0210 	add.w	r2, r8, #16
 800851c:	46f2      	mov	sl, lr
 800851e:	2100      	movs	r1, #0
 8008520:	f859 3b04 	ldr.w	r3, [r9], #4
 8008524:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008528:	fa1f f883 	uxth.w	r8, r3
 800852c:	fa11 f18b 	uxtah	r1, r1, fp
 8008530:	0c1b      	lsrs	r3, r3, #16
 8008532:	eba1 0808 	sub.w	r8, r1, r8
 8008536:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800853a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800853e:	fa1f f888 	uxth.w	r8, r8
 8008542:	1419      	asrs	r1, r3, #16
 8008544:	454e      	cmp	r6, r9
 8008546:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800854a:	f84a 3b04 	str.w	r3, [sl], #4
 800854e:	d8e7      	bhi.n	8008520 <__mdiff+0x80>
 8008550:	1b33      	subs	r3, r6, r4
 8008552:	3b15      	subs	r3, #21
 8008554:	f023 0303 	bic.w	r3, r3, #3
 8008558:	3304      	adds	r3, #4
 800855a:	3415      	adds	r4, #21
 800855c:	42a6      	cmp	r6, r4
 800855e:	bf38      	it	cc
 8008560:	2304      	movcc	r3, #4
 8008562:	441d      	add	r5, r3
 8008564:	4473      	add	r3, lr
 8008566:	469e      	mov	lr, r3
 8008568:	462e      	mov	r6, r5
 800856a:	4566      	cmp	r6, ip
 800856c:	d30e      	bcc.n	800858c <__mdiff+0xec>
 800856e:	f10c 0203 	add.w	r2, ip, #3
 8008572:	1b52      	subs	r2, r2, r5
 8008574:	f022 0203 	bic.w	r2, r2, #3
 8008578:	3d03      	subs	r5, #3
 800857a:	45ac      	cmp	ip, r5
 800857c:	bf38      	it	cc
 800857e:	2200      	movcc	r2, #0
 8008580:	441a      	add	r2, r3
 8008582:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008586:	b17b      	cbz	r3, 80085a8 <__mdiff+0x108>
 8008588:	6107      	str	r7, [r0, #16]
 800858a:	e7a3      	b.n	80084d4 <__mdiff+0x34>
 800858c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008590:	fa11 f288 	uxtah	r2, r1, r8
 8008594:	1414      	asrs	r4, r2, #16
 8008596:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800859a:	b292      	uxth	r2, r2
 800859c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085a0:	f84e 2b04 	str.w	r2, [lr], #4
 80085a4:	1421      	asrs	r1, r4, #16
 80085a6:	e7e0      	b.n	800856a <__mdiff+0xca>
 80085a8:	3f01      	subs	r7, #1
 80085aa:	e7ea      	b.n	8008582 <__mdiff+0xe2>
 80085ac:	080097ff 	.word	0x080097ff
 80085b0:	08009810 	.word	0x08009810

080085b4 <__d2b>:
 80085b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	4689      	mov	r9, r1
 80085ba:	2101      	movs	r1, #1
 80085bc:	ec57 6b10 	vmov	r6, r7, d0
 80085c0:	4690      	mov	r8, r2
 80085c2:	f7ff fccf 	bl	8007f64 <_Balloc>
 80085c6:	4604      	mov	r4, r0
 80085c8:	b930      	cbnz	r0, 80085d8 <__d2b+0x24>
 80085ca:	4602      	mov	r2, r0
 80085cc:	4b25      	ldr	r3, [pc, #148]	; (8008664 <__d2b+0xb0>)
 80085ce:	4826      	ldr	r0, [pc, #152]	; (8008668 <__d2b+0xb4>)
 80085d0:	f240 310a 	movw	r1, #778	; 0x30a
 80085d4:	f000 faac 	bl	8008b30 <__assert_func>
 80085d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80085dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085e0:	bb35      	cbnz	r5, 8008630 <__d2b+0x7c>
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	d028      	beq.n	800863a <__d2b+0x86>
 80085e8:	4668      	mov	r0, sp
 80085ea:	9600      	str	r6, [sp, #0]
 80085ec:	f7ff fd82 	bl	80080f4 <__lo0bits>
 80085f0:	9900      	ldr	r1, [sp, #0]
 80085f2:	b300      	cbz	r0, 8008636 <__d2b+0x82>
 80085f4:	9a01      	ldr	r2, [sp, #4]
 80085f6:	f1c0 0320 	rsb	r3, r0, #32
 80085fa:	fa02 f303 	lsl.w	r3, r2, r3
 80085fe:	430b      	orrs	r3, r1
 8008600:	40c2      	lsrs	r2, r0
 8008602:	6163      	str	r3, [r4, #20]
 8008604:	9201      	str	r2, [sp, #4]
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	61a3      	str	r3, [r4, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	bf14      	ite	ne
 800860e:	2202      	movne	r2, #2
 8008610:	2201      	moveq	r2, #1
 8008612:	6122      	str	r2, [r4, #16]
 8008614:	b1d5      	cbz	r5, 800864c <__d2b+0x98>
 8008616:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800861a:	4405      	add	r5, r0
 800861c:	f8c9 5000 	str.w	r5, [r9]
 8008620:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008624:	f8c8 0000 	str.w	r0, [r8]
 8008628:	4620      	mov	r0, r4
 800862a:	b003      	add	sp, #12
 800862c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008634:	e7d5      	b.n	80085e2 <__d2b+0x2e>
 8008636:	6161      	str	r1, [r4, #20]
 8008638:	e7e5      	b.n	8008606 <__d2b+0x52>
 800863a:	a801      	add	r0, sp, #4
 800863c:	f7ff fd5a 	bl	80080f4 <__lo0bits>
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	6163      	str	r3, [r4, #20]
 8008644:	2201      	movs	r2, #1
 8008646:	6122      	str	r2, [r4, #16]
 8008648:	3020      	adds	r0, #32
 800864a:	e7e3      	b.n	8008614 <__d2b+0x60>
 800864c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008650:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008654:	f8c9 0000 	str.w	r0, [r9]
 8008658:	6918      	ldr	r0, [r3, #16]
 800865a:	f7ff fd2b 	bl	80080b4 <__hi0bits>
 800865e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008662:	e7df      	b.n	8008624 <__d2b+0x70>
 8008664:	080097ff 	.word	0x080097ff
 8008668:	08009810 	.word	0x08009810

0800866c <_calloc_r>:
 800866c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866e:	fba1 2402 	umull	r2, r4, r1, r2
 8008672:	b94c      	cbnz	r4, 8008688 <_calloc_r+0x1c>
 8008674:	4611      	mov	r1, r2
 8008676:	9201      	str	r2, [sp, #4]
 8008678:	f000 f87a 	bl	8008770 <_malloc_r>
 800867c:	9a01      	ldr	r2, [sp, #4]
 800867e:	4605      	mov	r5, r0
 8008680:	b930      	cbnz	r0, 8008690 <_calloc_r+0x24>
 8008682:	4628      	mov	r0, r5
 8008684:	b003      	add	sp, #12
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	220c      	movs	r2, #12
 800868a:	6002      	str	r2, [r0, #0]
 800868c:	2500      	movs	r5, #0
 800868e:	e7f8      	b.n	8008682 <_calloc_r+0x16>
 8008690:	4621      	mov	r1, r4
 8008692:	f7fe f9f3 	bl	8006a7c <memset>
 8008696:	e7f4      	b.n	8008682 <_calloc_r+0x16>

08008698 <_free_r>:
 8008698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800869a:	2900      	cmp	r1, #0
 800869c:	d044      	beq.n	8008728 <_free_r+0x90>
 800869e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a2:	9001      	str	r0, [sp, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f1a1 0404 	sub.w	r4, r1, #4
 80086aa:	bfb8      	it	lt
 80086ac:	18e4      	addlt	r4, r4, r3
 80086ae:	f000 fa9b 	bl	8008be8 <__malloc_lock>
 80086b2:	4a1e      	ldr	r2, [pc, #120]	; (800872c <_free_r+0x94>)
 80086b4:	9801      	ldr	r0, [sp, #4]
 80086b6:	6813      	ldr	r3, [r2, #0]
 80086b8:	b933      	cbnz	r3, 80086c8 <_free_r+0x30>
 80086ba:	6063      	str	r3, [r4, #4]
 80086bc:	6014      	str	r4, [r2, #0]
 80086be:	b003      	add	sp, #12
 80086c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c4:	f000 ba96 	b.w	8008bf4 <__malloc_unlock>
 80086c8:	42a3      	cmp	r3, r4
 80086ca:	d908      	bls.n	80086de <_free_r+0x46>
 80086cc:	6825      	ldr	r5, [r4, #0]
 80086ce:	1961      	adds	r1, r4, r5
 80086d0:	428b      	cmp	r3, r1
 80086d2:	bf01      	itttt	eq
 80086d4:	6819      	ldreq	r1, [r3, #0]
 80086d6:	685b      	ldreq	r3, [r3, #4]
 80086d8:	1949      	addeq	r1, r1, r5
 80086da:	6021      	streq	r1, [r4, #0]
 80086dc:	e7ed      	b.n	80086ba <_free_r+0x22>
 80086de:	461a      	mov	r2, r3
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	b10b      	cbz	r3, 80086e8 <_free_r+0x50>
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	d9fa      	bls.n	80086de <_free_r+0x46>
 80086e8:	6811      	ldr	r1, [r2, #0]
 80086ea:	1855      	adds	r5, r2, r1
 80086ec:	42a5      	cmp	r5, r4
 80086ee:	d10b      	bne.n	8008708 <_free_r+0x70>
 80086f0:	6824      	ldr	r4, [r4, #0]
 80086f2:	4421      	add	r1, r4
 80086f4:	1854      	adds	r4, r2, r1
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	6011      	str	r1, [r2, #0]
 80086fa:	d1e0      	bne.n	80086be <_free_r+0x26>
 80086fc:	681c      	ldr	r4, [r3, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	6053      	str	r3, [r2, #4]
 8008702:	4421      	add	r1, r4
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	e7da      	b.n	80086be <_free_r+0x26>
 8008708:	d902      	bls.n	8008710 <_free_r+0x78>
 800870a:	230c      	movs	r3, #12
 800870c:	6003      	str	r3, [r0, #0]
 800870e:	e7d6      	b.n	80086be <_free_r+0x26>
 8008710:	6825      	ldr	r5, [r4, #0]
 8008712:	1961      	adds	r1, r4, r5
 8008714:	428b      	cmp	r3, r1
 8008716:	bf04      	itt	eq
 8008718:	6819      	ldreq	r1, [r3, #0]
 800871a:	685b      	ldreq	r3, [r3, #4]
 800871c:	6063      	str	r3, [r4, #4]
 800871e:	bf04      	itt	eq
 8008720:	1949      	addeq	r1, r1, r5
 8008722:	6021      	streq	r1, [r4, #0]
 8008724:	6054      	str	r4, [r2, #4]
 8008726:	e7ca      	b.n	80086be <_free_r+0x26>
 8008728:	b003      	add	sp, #12
 800872a:	bd30      	pop	{r4, r5, pc}
 800872c:	20000908 	.word	0x20000908

08008730 <sbrk_aligned>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	4e0e      	ldr	r6, [pc, #56]	; (800876c <sbrk_aligned+0x3c>)
 8008734:	460c      	mov	r4, r1
 8008736:	6831      	ldr	r1, [r6, #0]
 8008738:	4605      	mov	r5, r0
 800873a:	b911      	cbnz	r1, 8008742 <sbrk_aligned+0x12>
 800873c:	f000 f9e8 	bl	8008b10 <_sbrk_r>
 8008740:	6030      	str	r0, [r6, #0]
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f000 f9e3 	bl	8008b10 <_sbrk_r>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	d00a      	beq.n	8008764 <sbrk_aligned+0x34>
 800874e:	1cc4      	adds	r4, r0, #3
 8008750:	f024 0403 	bic.w	r4, r4, #3
 8008754:	42a0      	cmp	r0, r4
 8008756:	d007      	beq.n	8008768 <sbrk_aligned+0x38>
 8008758:	1a21      	subs	r1, r4, r0
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f9d8 	bl	8008b10 <_sbrk_r>
 8008760:	3001      	adds	r0, #1
 8008762:	d101      	bne.n	8008768 <sbrk_aligned+0x38>
 8008764:	f04f 34ff 	mov.w	r4, #4294967295
 8008768:	4620      	mov	r0, r4
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	2000090c 	.word	0x2000090c

08008770 <_malloc_r>:
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	1ccd      	adds	r5, r1, #3
 8008776:	f025 0503 	bic.w	r5, r5, #3
 800877a:	3508      	adds	r5, #8
 800877c:	2d0c      	cmp	r5, #12
 800877e:	bf38      	it	cc
 8008780:	250c      	movcc	r5, #12
 8008782:	2d00      	cmp	r5, #0
 8008784:	4607      	mov	r7, r0
 8008786:	db01      	blt.n	800878c <_malloc_r+0x1c>
 8008788:	42a9      	cmp	r1, r5
 800878a:	d905      	bls.n	8008798 <_malloc_r+0x28>
 800878c:	230c      	movs	r3, #12
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	2600      	movs	r6, #0
 8008792:	4630      	mov	r0, r6
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	4e2e      	ldr	r6, [pc, #184]	; (8008854 <_malloc_r+0xe4>)
 800879a:	f000 fa25 	bl	8008be8 <__malloc_lock>
 800879e:	6833      	ldr	r3, [r6, #0]
 80087a0:	461c      	mov	r4, r3
 80087a2:	bb34      	cbnz	r4, 80087f2 <_malloc_r+0x82>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7ff ffc2 	bl	8008730 <sbrk_aligned>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	4604      	mov	r4, r0
 80087b0:	d14d      	bne.n	800884e <_malloc_r+0xde>
 80087b2:	6834      	ldr	r4, [r6, #0]
 80087b4:	4626      	mov	r6, r4
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	d140      	bne.n	800883c <_malloc_r+0xcc>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	4631      	mov	r1, r6
 80087be:	4638      	mov	r0, r7
 80087c0:	eb04 0803 	add.w	r8, r4, r3
 80087c4:	f000 f9a4 	bl	8008b10 <_sbrk_r>
 80087c8:	4580      	cmp	r8, r0
 80087ca:	d13a      	bne.n	8008842 <_malloc_r+0xd2>
 80087cc:	6821      	ldr	r1, [r4, #0]
 80087ce:	3503      	adds	r5, #3
 80087d0:	1a6d      	subs	r5, r5, r1
 80087d2:	f025 0503 	bic.w	r5, r5, #3
 80087d6:	3508      	adds	r5, #8
 80087d8:	2d0c      	cmp	r5, #12
 80087da:	bf38      	it	cc
 80087dc:	250c      	movcc	r5, #12
 80087de:	4629      	mov	r1, r5
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ffa5 	bl	8008730 <sbrk_aligned>
 80087e6:	3001      	adds	r0, #1
 80087e8:	d02b      	beq.n	8008842 <_malloc_r+0xd2>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	442b      	add	r3, r5
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	e00e      	b.n	8008810 <_malloc_r+0xa0>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	1b52      	subs	r2, r2, r5
 80087f6:	d41e      	bmi.n	8008836 <_malloc_r+0xc6>
 80087f8:	2a0b      	cmp	r2, #11
 80087fa:	d916      	bls.n	800882a <_malloc_r+0xba>
 80087fc:	1961      	adds	r1, r4, r5
 80087fe:	42a3      	cmp	r3, r4
 8008800:	6025      	str	r5, [r4, #0]
 8008802:	bf18      	it	ne
 8008804:	6059      	strne	r1, [r3, #4]
 8008806:	6863      	ldr	r3, [r4, #4]
 8008808:	bf08      	it	eq
 800880a:	6031      	streq	r1, [r6, #0]
 800880c:	5162      	str	r2, [r4, r5]
 800880e:	604b      	str	r3, [r1, #4]
 8008810:	4638      	mov	r0, r7
 8008812:	f104 060b 	add.w	r6, r4, #11
 8008816:	f000 f9ed 	bl	8008bf4 <__malloc_unlock>
 800881a:	f026 0607 	bic.w	r6, r6, #7
 800881e:	1d23      	adds	r3, r4, #4
 8008820:	1af2      	subs	r2, r6, r3
 8008822:	d0b6      	beq.n	8008792 <_malloc_r+0x22>
 8008824:	1b9b      	subs	r3, r3, r6
 8008826:	50a3      	str	r3, [r4, r2]
 8008828:	e7b3      	b.n	8008792 <_malloc_r+0x22>
 800882a:	6862      	ldr	r2, [r4, #4]
 800882c:	42a3      	cmp	r3, r4
 800882e:	bf0c      	ite	eq
 8008830:	6032      	streq	r2, [r6, #0]
 8008832:	605a      	strne	r2, [r3, #4]
 8008834:	e7ec      	b.n	8008810 <_malloc_r+0xa0>
 8008836:	4623      	mov	r3, r4
 8008838:	6864      	ldr	r4, [r4, #4]
 800883a:	e7b2      	b.n	80087a2 <_malloc_r+0x32>
 800883c:	4634      	mov	r4, r6
 800883e:	6876      	ldr	r6, [r6, #4]
 8008840:	e7b9      	b.n	80087b6 <_malloc_r+0x46>
 8008842:	230c      	movs	r3, #12
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	4638      	mov	r0, r7
 8008848:	f000 f9d4 	bl	8008bf4 <__malloc_unlock>
 800884c:	e7a1      	b.n	8008792 <_malloc_r+0x22>
 800884e:	6025      	str	r5, [r4, #0]
 8008850:	e7de      	b.n	8008810 <_malloc_r+0xa0>
 8008852:	bf00      	nop
 8008854:	20000908 	.word	0x20000908

08008858 <__ssputs_r>:
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	688e      	ldr	r6, [r1, #8]
 800885e:	429e      	cmp	r6, r3
 8008860:	4682      	mov	sl, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4690      	mov	r8, r2
 8008866:	461f      	mov	r7, r3
 8008868:	d838      	bhi.n	80088dc <__ssputs_r+0x84>
 800886a:	898a      	ldrh	r2, [r1, #12]
 800886c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008870:	d032      	beq.n	80088d8 <__ssputs_r+0x80>
 8008872:	6825      	ldr	r5, [r4, #0]
 8008874:	6909      	ldr	r1, [r1, #16]
 8008876:	eba5 0901 	sub.w	r9, r5, r1
 800887a:	6965      	ldr	r5, [r4, #20]
 800887c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008884:	3301      	adds	r3, #1
 8008886:	444b      	add	r3, r9
 8008888:	106d      	asrs	r5, r5, #1
 800888a:	429d      	cmp	r5, r3
 800888c:	bf38      	it	cc
 800888e:	461d      	movcc	r5, r3
 8008890:	0553      	lsls	r3, r2, #21
 8008892:	d531      	bpl.n	80088f8 <__ssputs_r+0xa0>
 8008894:	4629      	mov	r1, r5
 8008896:	f7ff ff6b 	bl	8008770 <_malloc_r>
 800889a:	4606      	mov	r6, r0
 800889c:	b950      	cbnz	r0, 80088b4 <__ssputs_r+0x5c>
 800889e:	230c      	movs	r3, #12
 80088a0:	f8ca 3000 	str.w	r3, [sl]
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b4:	6921      	ldr	r1, [r4, #16]
 80088b6:	464a      	mov	r2, r9
 80088b8:	f7fe f8d2 	bl	8006a60 <memcpy>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	6126      	str	r6, [r4, #16]
 80088ca:	6165      	str	r5, [r4, #20]
 80088cc:	444e      	add	r6, r9
 80088ce:	eba5 0509 	sub.w	r5, r5, r9
 80088d2:	6026      	str	r6, [r4, #0]
 80088d4:	60a5      	str	r5, [r4, #8]
 80088d6:	463e      	mov	r6, r7
 80088d8:	42be      	cmp	r6, r7
 80088da:	d900      	bls.n	80088de <__ssputs_r+0x86>
 80088dc:	463e      	mov	r6, r7
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	4632      	mov	r2, r6
 80088e2:	4641      	mov	r1, r8
 80088e4:	f000 f966 	bl	8008bb4 <memmove>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	1b9b      	subs	r3, r3, r6
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	4433      	add	r3, r6
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e7db      	b.n	80088b0 <__ssputs_r+0x58>
 80088f8:	462a      	mov	r2, r5
 80088fa:	f000 f981 	bl	8008c00 <_realloc_r>
 80088fe:	4606      	mov	r6, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d1e1      	bne.n	80088c8 <__ssputs_r+0x70>
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	4650      	mov	r0, sl
 8008908:	f7ff fec6 	bl	8008698 <_free_r>
 800890c:	e7c7      	b.n	800889e <__ssputs_r+0x46>
	...

08008910 <_svfiprintf_r>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4698      	mov	r8, r3
 8008916:	898b      	ldrh	r3, [r1, #12]
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	b09d      	sub	sp, #116	; 0x74
 800891c:	4607      	mov	r7, r0
 800891e:	460d      	mov	r5, r1
 8008920:	4614      	mov	r4, r2
 8008922:	d50e      	bpl.n	8008942 <_svfiprintf_r+0x32>
 8008924:	690b      	ldr	r3, [r1, #16]
 8008926:	b963      	cbnz	r3, 8008942 <_svfiprintf_r+0x32>
 8008928:	2140      	movs	r1, #64	; 0x40
 800892a:	f7ff ff21 	bl	8008770 <_malloc_r>
 800892e:	6028      	str	r0, [r5, #0]
 8008930:	6128      	str	r0, [r5, #16]
 8008932:	b920      	cbnz	r0, 800893e <_svfiprintf_r+0x2e>
 8008934:	230c      	movs	r3, #12
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	e0d1      	b.n	8008ae2 <_svfiprintf_r+0x1d2>
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	2300      	movs	r3, #0
 8008944:	9309      	str	r3, [sp, #36]	; 0x24
 8008946:	2320      	movs	r3, #32
 8008948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800894c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008950:	2330      	movs	r3, #48	; 0x30
 8008952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008afc <_svfiprintf_r+0x1ec>
 8008956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800895a:	f04f 0901 	mov.w	r9, #1
 800895e:	4623      	mov	r3, r4
 8008960:	469a      	mov	sl, r3
 8008962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008966:	b10a      	cbz	r2, 800896c <_svfiprintf_r+0x5c>
 8008968:	2a25      	cmp	r2, #37	; 0x25
 800896a:	d1f9      	bne.n	8008960 <_svfiprintf_r+0x50>
 800896c:	ebba 0b04 	subs.w	fp, sl, r4
 8008970:	d00b      	beq.n	800898a <_svfiprintf_r+0x7a>
 8008972:	465b      	mov	r3, fp
 8008974:	4622      	mov	r2, r4
 8008976:	4629      	mov	r1, r5
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff ff6d 	bl	8008858 <__ssputs_r>
 800897e:	3001      	adds	r0, #1
 8008980:	f000 80aa 	beq.w	8008ad8 <_svfiprintf_r+0x1c8>
 8008984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008986:	445a      	add	r2, fp
 8008988:	9209      	str	r2, [sp, #36]	; 0x24
 800898a:	f89a 3000 	ldrb.w	r3, [sl]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80a2 	beq.w	8008ad8 <_svfiprintf_r+0x1c8>
 8008994:	2300      	movs	r3, #0
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800899e:	f10a 0a01 	add.w	sl, sl, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089aa:	931a      	str	r3, [sp, #104]	; 0x68
 80089ac:	4654      	mov	r4, sl
 80089ae:	2205      	movs	r2, #5
 80089b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b4:	4851      	ldr	r0, [pc, #324]	; (8008afc <_svfiprintf_r+0x1ec>)
 80089b6:	f7f7 fc4b 	bl	8000250 <memchr>
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	b9d8      	cbnz	r0, 80089f6 <_svfiprintf_r+0xe6>
 80089be:	06d0      	lsls	r0, r2, #27
 80089c0:	bf44      	itt	mi
 80089c2:	2320      	movmi	r3, #32
 80089c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089c8:	0711      	lsls	r1, r2, #28
 80089ca:	bf44      	itt	mi
 80089cc:	232b      	movmi	r3, #43	; 0x2b
 80089ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d2:	f89a 3000 	ldrb.w	r3, [sl]
 80089d6:	2b2a      	cmp	r3, #42	; 0x2a
 80089d8:	d015      	beq.n	8008a06 <_svfiprintf_r+0xf6>
 80089da:	9a07      	ldr	r2, [sp, #28]
 80089dc:	4654      	mov	r4, sl
 80089de:	2000      	movs	r0, #0
 80089e0:	f04f 0c0a 	mov.w	ip, #10
 80089e4:	4621      	mov	r1, r4
 80089e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ea:	3b30      	subs	r3, #48	; 0x30
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d94e      	bls.n	8008a8e <_svfiprintf_r+0x17e>
 80089f0:	b1b0      	cbz	r0, 8008a20 <_svfiprintf_r+0x110>
 80089f2:	9207      	str	r2, [sp, #28]
 80089f4:	e014      	b.n	8008a20 <_svfiprintf_r+0x110>
 80089f6:	eba0 0308 	sub.w	r3, r0, r8
 80089fa:	fa09 f303 	lsl.w	r3, r9, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	46a2      	mov	sl, r4
 8008a04:	e7d2      	b.n	80089ac <_svfiprintf_r+0x9c>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	1d19      	adds	r1, r3, #4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	9103      	str	r1, [sp, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfbb      	ittet	lt
 8008a12:	425b      	neglt	r3, r3
 8008a14:	f042 0202 	orrlt.w	r2, r2, #2
 8008a18:	9307      	strge	r3, [sp, #28]
 8008a1a:	9307      	strlt	r3, [sp, #28]
 8008a1c:	bfb8      	it	lt
 8008a1e:	9204      	strlt	r2, [sp, #16]
 8008a20:	7823      	ldrb	r3, [r4, #0]
 8008a22:	2b2e      	cmp	r3, #46	; 0x2e
 8008a24:	d10c      	bne.n	8008a40 <_svfiprintf_r+0x130>
 8008a26:	7863      	ldrb	r3, [r4, #1]
 8008a28:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2a:	d135      	bne.n	8008a98 <_svfiprintf_r+0x188>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	9203      	str	r2, [sp, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfb8      	it	lt
 8008a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a3c:	3402      	adds	r4, #2
 8008a3e:	9305      	str	r3, [sp, #20]
 8008a40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b0c <_svfiprintf_r+0x1fc>
 8008a44:	7821      	ldrb	r1, [r4, #0]
 8008a46:	2203      	movs	r2, #3
 8008a48:	4650      	mov	r0, sl
 8008a4a:	f7f7 fc01 	bl	8000250 <memchr>
 8008a4e:	b140      	cbz	r0, 8008a62 <_svfiprintf_r+0x152>
 8008a50:	2340      	movs	r3, #64	; 0x40
 8008a52:	eba0 000a 	sub.w	r0, r0, sl
 8008a56:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5a:	9b04      	ldr	r3, [sp, #16]
 8008a5c:	4303      	orrs	r3, r0
 8008a5e:	3401      	adds	r4, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4826      	ldr	r0, [pc, #152]	; (8008b00 <_svfiprintf_r+0x1f0>)
 8008a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a6c:	2206      	movs	r2, #6
 8008a6e:	f7f7 fbef 	bl	8000250 <memchr>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d038      	beq.n	8008ae8 <_svfiprintf_r+0x1d8>
 8008a76:	4b23      	ldr	r3, [pc, #140]	; (8008b04 <_svfiprintf_r+0x1f4>)
 8008a78:	bb1b      	cbnz	r3, 8008ac2 <_svfiprintf_r+0x1b2>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	3308      	adds	r3, #8
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	4433      	add	r3, r6
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	e767      	b.n	800895e <_svfiprintf_r+0x4e>
 8008a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a92:	460c      	mov	r4, r1
 8008a94:	2001      	movs	r0, #1
 8008a96:	e7a5      	b.n	80089e4 <_svfiprintf_r+0xd4>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f04f 0c0a 	mov.w	ip, #10
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aaa:	3a30      	subs	r2, #48	; 0x30
 8008aac:	2a09      	cmp	r2, #9
 8008aae:	d903      	bls.n	8008ab8 <_svfiprintf_r+0x1a8>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0c5      	beq.n	8008a40 <_svfiprintf_r+0x130>
 8008ab4:	9105      	str	r1, [sp, #20]
 8008ab6:	e7c3      	b.n	8008a40 <_svfiprintf_r+0x130>
 8008ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008abc:	4604      	mov	r4, r0
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7f0      	b.n	8008aa4 <_svfiprintf_r+0x194>
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4b0f      	ldr	r3, [pc, #60]	; (8008b08 <_svfiprintf_r+0x1f8>)
 8008aca:	a904      	add	r1, sp, #16
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7fe f86f 	bl	8006bb0 <_printf_float>
 8008ad2:	1c42      	adds	r2, r0, #1
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	d1d6      	bne.n	8008a86 <_svfiprintf_r+0x176>
 8008ad8:	89ab      	ldrh	r3, [r5, #12]
 8008ada:	065b      	lsls	r3, r3, #25
 8008adc:	f53f af2c 	bmi.w	8008938 <_svfiprintf_r+0x28>
 8008ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae2:	b01d      	add	sp, #116	; 0x74
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	462a      	mov	r2, r5
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <_svfiprintf_r+0x1f8>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7fe fae8 	bl	80070c8 <_printf_i>
 8008af8:	e7eb      	b.n	8008ad2 <_svfiprintf_r+0x1c2>
 8008afa:	bf00      	nop
 8008afc:	0800996c 	.word	0x0800996c
 8008b00:	08009976 	.word	0x08009976
 8008b04:	08006bb1 	.word	0x08006bb1
 8008b08:	08008859 	.word	0x08008859
 8008b0c:	08009972 	.word	0x08009972

08008b10 <_sbrk_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d06      	ldr	r5, [pc, #24]	; (8008b2c <_sbrk_r+0x1c>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	f7f8 fb2c 	bl	8001178 <_sbrk>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_sbrk_r+0x1a>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_sbrk_r+0x1a>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20000910 	.word	0x20000910

08008b30 <__assert_func>:
 8008b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b32:	4614      	mov	r4, r2
 8008b34:	461a      	mov	r2, r3
 8008b36:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <__assert_func+0x2c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	68d8      	ldr	r0, [r3, #12]
 8008b3e:	b14c      	cbz	r4, 8008b54 <__assert_func+0x24>
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <__assert_func+0x30>)
 8008b42:	9100      	str	r1, [sp, #0]
 8008b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b48:	4906      	ldr	r1, [pc, #24]	; (8008b64 <__assert_func+0x34>)
 8008b4a:	462b      	mov	r3, r5
 8008b4c:	f000 f80e 	bl	8008b6c <fiprintf>
 8008b50:	f000 faac 	bl	80090ac <abort>
 8008b54:	4b04      	ldr	r3, [pc, #16]	; (8008b68 <__assert_func+0x38>)
 8008b56:	461c      	mov	r4, r3
 8008b58:	e7f3      	b.n	8008b42 <__assert_func+0x12>
 8008b5a:	bf00      	nop
 8008b5c:	2000000c 	.word	0x2000000c
 8008b60:	0800997d 	.word	0x0800997d
 8008b64:	0800998a 	.word	0x0800998a
 8008b68:	080099b8 	.word	0x080099b8

08008b6c <fiprintf>:
 8008b6c:	b40e      	push	{r1, r2, r3}
 8008b6e:	b503      	push	{r0, r1, lr}
 8008b70:	4601      	mov	r1, r0
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	4805      	ldr	r0, [pc, #20]	; (8008b8c <fiprintf+0x20>)
 8008b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	f000 f897 	bl	8008cb0 <_vfiprintf_r>
 8008b82:	b002      	add	sp, #8
 8008b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b88:	b003      	add	sp, #12
 8008b8a:	4770      	bx	lr
 8008b8c:	2000000c 	.word	0x2000000c

08008b90 <__ascii_mbtowc>:
 8008b90:	b082      	sub	sp, #8
 8008b92:	b901      	cbnz	r1, 8008b96 <__ascii_mbtowc+0x6>
 8008b94:	a901      	add	r1, sp, #4
 8008b96:	b142      	cbz	r2, 8008baa <__ascii_mbtowc+0x1a>
 8008b98:	b14b      	cbz	r3, 8008bae <__ascii_mbtowc+0x1e>
 8008b9a:	7813      	ldrb	r3, [r2, #0]
 8008b9c:	600b      	str	r3, [r1, #0]
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	1e10      	subs	r0, r2, #0
 8008ba2:	bf18      	it	ne
 8008ba4:	2001      	movne	r0, #1
 8008ba6:	b002      	add	sp, #8
 8008ba8:	4770      	bx	lr
 8008baa:	4610      	mov	r0, r2
 8008bac:	e7fb      	b.n	8008ba6 <__ascii_mbtowc+0x16>
 8008bae:	f06f 0001 	mvn.w	r0, #1
 8008bb2:	e7f8      	b.n	8008ba6 <__ascii_mbtowc+0x16>

08008bb4 <memmove>:
 8008bb4:	4288      	cmp	r0, r1
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	eb01 0402 	add.w	r4, r1, r2
 8008bbc:	d902      	bls.n	8008bc4 <memmove+0x10>
 8008bbe:	4284      	cmp	r4, r0
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	d807      	bhi.n	8008bd4 <memmove+0x20>
 8008bc4:	1e43      	subs	r3, r0, #1
 8008bc6:	42a1      	cmp	r1, r4
 8008bc8:	d008      	beq.n	8008bdc <memmove+0x28>
 8008bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd2:	e7f8      	b.n	8008bc6 <memmove+0x12>
 8008bd4:	4402      	add	r2, r0
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	428a      	cmp	r2, r1
 8008bda:	d100      	bne.n	8008bde <memmove+0x2a>
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008be6:	e7f7      	b.n	8008bd8 <memmove+0x24>

08008be8 <__malloc_lock>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__malloc_lock+0x8>)
 8008bea:	f000 bc1f 	b.w	800942c <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	20000914 	.word	0x20000914

08008bf4 <__malloc_unlock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__malloc_unlock+0x8>)
 8008bf6:	f000 bc1a 	b.w	800942e <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	20000914 	.word	0x20000914

08008c00 <_realloc_r>:
 8008c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	4680      	mov	r8, r0
 8008c06:	4614      	mov	r4, r2
 8008c08:	460e      	mov	r6, r1
 8008c0a:	b921      	cbnz	r1, 8008c16 <_realloc_r+0x16>
 8008c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	4611      	mov	r1, r2
 8008c12:	f7ff bdad 	b.w	8008770 <_malloc_r>
 8008c16:	b92a      	cbnz	r2, 8008c24 <_realloc_r+0x24>
 8008c18:	f7ff fd3e 	bl	8008698 <_free_r>
 8008c1c:	4625      	mov	r5, r4
 8008c1e:	4628      	mov	r0, r5
 8008c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c24:	f000 fc6a 	bl	80094fc <_malloc_usable_size_r>
 8008c28:	4284      	cmp	r4, r0
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	d802      	bhi.n	8008c34 <_realloc_r+0x34>
 8008c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c32:	d812      	bhi.n	8008c5a <_realloc_r+0x5a>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff fd9a 	bl	8008770 <_malloc_r>
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d0ed      	beq.n	8008c1e <_realloc_r+0x1e>
 8008c42:	42bc      	cmp	r4, r7
 8008c44:	4622      	mov	r2, r4
 8008c46:	4631      	mov	r1, r6
 8008c48:	bf28      	it	cs
 8008c4a:	463a      	movcs	r2, r7
 8008c4c:	f7fd ff08 	bl	8006a60 <memcpy>
 8008c50:	4631      	mov	r1, r6
 8008c52:	4640      	mov	r0, r8
 8008c54:	f7ff fd20 	bl	8008698 <_free_r>
 8008c58:	e7e1      	b.n	8008c1e <_realloc_r+0x1e>
 8008c5a:	4635      	mov	r5, r6
 8008c5c:	e7df      	b.n	8008c1e <_realloc_r+0x1e>

08008c5e <__sfputc_r>:
 8008c5e:	6893      	ldr	r3, [r2, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	b410      	push	{r4}
 8008c66:	6093      	str	r3, [r2, #8]
 8008c68:	da08      	bge.n	8008c7c <__sfputc_r+0x1e>
 8008c6a:	6994      	ldr	r4, [r2, #24]
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	db01      	blt.n	8008c74 <__sfputc_r+0x16>
 8008c70:	290a      	cmp	r1, #10
 8008c72:	d103      	bne.n	8008c7c <__sfputc_r+0x1e>
 8008c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c78:	f000 b94a 	b.w	8008f10 <__swbuf_r>
 8008c7c:	6813      	ldr	r3, [r2, #0]
 8008c7e:	1c58      	adds	r0, r3, #1
 8008c80:	6010      	str	r0, [r2, #0]
 8008c82:	7019      	strb	r1, [r3, #0]
 8008c84:	4608      	mov	r0, r1
 8008c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <__sfputs_r>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	4614      	mov	r4, r2
 8008c94:	18d5      	adds	r5, r2, r3
 8008c96:	42ac      	cmp	r4, r5
 8008c98:	d101      	bne.n	8008c9e <__sfputs_r+0x12>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e007      	b.n	8008cae <__sfputs_r+0x22>
 8008c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca2:	463a      	mov	r2, r7
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff ffda 	bl	8008c5e <__sfputc_r>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d1f3      	bne.n	8008c96 <__sfputs_r+0xa>
 8008cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cb0 <_vfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	b09d      	sub	sp, #116	; 0x74
 8008cb8:	4614      	mov	r4, r2
 8008cba:	4698      	mov	r8, r3
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	b118      	cbz	r0, 8008cc8 <_vfiprintf_r+0x18>
 8008cc0:	6983      	ldr	r3, [r0, #24]
 8008cc2:	b90b      	cbnz	r3, 8008cc8 <_vfiprintf_r+0x18>
 8008cc4:	f000 fb14 	bl	80092f0 <__sinit>
 8008cc8:	4b89      	ldr	r3, [pc, #548]	; (8008ef0 <_vfiprintf_r+0x240>)
 8008cca:	429d      	cmp	r5, r3
 8008ccc:	d11b      	bne.n	8008d06 <_vfiprintf_r+0x56>
 8008cce:	6875      	ldr	r5, [r6, #4]
 8008cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cd2:	07d9      	lsls	r1, r3, #31
 8008cd4:	d405      	bmi.n	8008ce2 <_vfiprintf_r+0x32>
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	059a      	lsls	r2, r3, #22
 8008cda:	d402      	bmi.n	8008ce2 <_vfiprintf_r+0x32>
 8008cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cde:	f000 fba5 	bl	800942c <__retarget_lock_acquire_recursive>
 8008ce2:	89ab      	ldrh	r3, [r5, #12]
 8008ce4:	071b      	lsls	r3, r3, #28
 8008ce6:	d501      	bpl.n	8008cec <_vfiprintf_r+0x3c>
 8008ce8:	692b      	ldr	r3, [r5, #16]
 8008cea:	b9eb      	cbnz	r3, 8008d28 <_vfiprintf_r+0x78>
 8008cec:	4629      	mov	r1, r5
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f000 f96e 	bl	8008fd0 <__swsetup_r>
 8008cf4:	b1c0      	cbz	r0, 8008d28 <_vfiprintf_r+0x78>
 8008cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf8:	07dc      	lsls	r4, r3, #31
 8008cfa:	d50e      	bpl.n	8008d1a <_vfiprintf_r+0x6a>
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008d00:	b01d      	add	sp, #116	; 0x74
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	4b7b      	ldr	r3, [pc, #492]	; (8008ef4 <_vfiprintf_r+0x244>)
 8008d08:	429d      	cmp	r5, r3
 8008d0a:	d101      	bne.n	8008d10 <_vfiprintf_r+0x60>
 8008d0c:	68b5      	ldr	r5, [r6, #8]
 8008d0e:	e7df      	b.n	8008cd0 <_vfiprintf_r+0x20>
 8008d10:	4b79      	ldr	r3, [pc, #484]	; (8008ef8 <_vfiprintf_r+0x248>)
 8008d12:	429d      	cmp	r5, r3
 8008d14:	bf08      	it	eq
 8008d16:	68f5      	ldreq	r5, [r6, #12]
 8008d18:	e7da      	b.n	8008cd0 <_vfiprintf_r+0x20>
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	0598      	lsls	r0, r3, #22
 8008d1e:	d4ed      	bmi.n	8008cfc <_vfiprintf_r+0x4c>
 8008d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d22:	f000 fb84 	bl	800942e <__retarget_lock_release_recursive>
 8008d26:	e7e9      	b.n	8008cfc <_vfiprintf_r+0x4c>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d36:	2330      	movs	r3, #48	; 0x30
 8008d38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008efc <_vfiprintf_r+0x24c>
 8008d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d40:	f04f 0901 	mov.w	r9, #1
 8008d44:	4623      	mov	r3, r4
 8008d46:	469a      	mov	sl, r3
 8008d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4c:	b10a      	cbz	r2, 8008d52 <_vfiprintf_r+0xa2>
 8008d4e:	2a25      	cmp	r2, #37	; 0x25
 8008d50:	d1f9      	bne.n	8008d46 <_vfiprintf_r+0x96>
 8008d52:	ebba 0b04 	subs.w	fp, sl, r4
 8008d56:	d00b      	beq.n	8008d70 <_vfiprintf_r+0xc0>
 8008d58:	465b      	mov	r3, fp
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ff94 	bl	8008c8c <__sfputs_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	f000 80aa 	beq.w	8008ebe <_vfiprintf_r+0x20e>
 8008d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d6c:	445a      	add	r2, fp
 8008d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d70:	f89a 3000 	ldrb.w	r3, [sl]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 80a2 	beq.w	8008ebe <_vfiprintf_r+0x20e>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d84:	f10a 0a01 	add.w	sl, sl, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d90:	931a      	str	r3, [sp, #104]	; 0x68
 8008d92:	4654      	mov	r4, sl
 8008d94:	2205      	movs	r2, #5
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4858      	ldr	r0, [pc, #352]	; (8008efc <_vfiprintf_r+0x24c>)
 8008d9c:	f7f7 fa58 	bl	8000250 <memchr>
 8008da0:	9a04      	ldr	r2, [sp, #16]
 8008da2:	b9d8      	cbnz	r0, 8008ddc <_vfiprintf_r+0x12c>
 8008da4:	06d1      	lsls	r1, r2, #27
 8008da6:	bf44      	itt	mi
 8008da8:	2320      	movmi	r3, #32
 8008daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dae:	0713      	lsls	r3, r2, #28
 8008db0:	bf44      	itt	mi
 8008db2:	232b      	movmi	r3, #43	; 0x2b
 8008db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dbe:	d015      	beq.n	8008dec <_vfiprintf_r+0x13c>
 8008dc0:	9a07      	ldr	r2, [sp, #28]
 8008dc2:	4654      	mov	r4, sl
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f04f 0c0a 	mov.w	ip, #10
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd0:	3b30      	subs	r3, #48	; 0x30
 8008dd2:	2b09      	cmp	r3, #9
 8008dd4:	d94e      	bls.n	8008e74 <_vfiprintf_r+0x1c4>
 8008dd6:	b1b0      	cbz	r0, 8008e06 <_vfiprintf_r+0x156>
 8008dd8:	9207      	str	r2, [sp, #28]
 8008dda:	e014      	b.n	8008e06 <_vfiprintf_r+0x156>
 8008ddc:	eba0 0308 	sub.w	r3, r0, r8
 8008de0:	fa09 f303 	lsl.w	r3, r9, r3
 8008de4:	4313      	orrs	r3, r2
 8008de6:	9304      	str	r3, [sp, #16]
 8008de8:	46a2      	mov	sl, r4
 8008dea:	e7d2      	b.n	8008d92 <_vfiprintf_r+0xe2>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1d19      	adds	r1, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9103      	str	r1, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfbb      	ittet	lt
 8008df8:	425b      	neglt	r3, r3
 8008dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfe:	9307      	strge	r3, [sp, #28]
 8008e00:	9307      	strlt	r3, [sp, #28]
 8008e02:	bfb8      	it	lt
 8008e04:	9204      	strlt	r2, [sp, #16]
 8008e06:	7823      	ldrb	r3, [r4, #0]
 8008e08:	2b2e      	cmp	r3, #46	; 0x2e
 8008e0a:	d10c      	bne.n	8008e26 <_vfiprintf_r+0x176>
 8008e0c:	7863      	ldrb	r3, [r4, #1]
 8008e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e10:	d135      	bne.n	8008e7e <_vfiprintf_r+0x1ce>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	1d1a      	adds	r2, r3, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	9203      	str	r2, [sp, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfb8      	it	lt
 8008e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e22:	3402      	adds	r4, #2
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f0c <_vfiprintf_r+0x25c>
 8008e2a:	7821      	ldrb	r1, [r4, #0]
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	4650      	mov	r0, sl
 8008e30:	f7f7 fa0e 	bl	8000250 <memchr>
 8008e34:	b140      	cbz	r0, 8008e48 <_vfiprintf_r+0x198>
 8008e36:	2340      	movs	r3, #64	; 0x40
 8008e38:	eba0 000a 	sub.w	r0, r0, sl
 8008e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	4303      	orrs	r3, r0
 8008e44:	3401      	adds	r4, #1
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4c:	482c      	ldr	r0, [pc, #176]	; (8008f00 <_vfiprintf_r+0x250>)
 8008e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e52:	2206      	movs	r2, #6
 8008e54:	f7f7 f9fc 	bl	8000250 <memchr>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d03f      	beq.n	8008edc <_vfiprintf_r+0x22c>
 8008e5c:	4b29      	ldr	r3, [pc, #164]	; (8008f04 <_vfiprintf_r+0x254>)
 8008e5e:	bb1b      	cbnz	r3, 8008ea8 <_vfiprintf_r+0x1f8>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	3307      	adds	r3, #7
 8008e64:	f023 0307 	bic.w	r3, r3, #7
 8008e68:	3308      	adds	r3, #8
 8008e6a:	9303      	str	r3, [sp, #12]
 8008e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6e:	443b      	add	r3, r7
 8008e70:	9309      	str	r3, [sp, #36]	; 0x24
 8008e72:	e767      	b.n	8008d44 <_vfiprintf_r+0x94>
 8008e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e78:	460c      	mov	r4, r1
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	e7a5      	b.n	8008dca <_vfiprintf_r+0x11a>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	3401      	adds	r4, #1
 8008e82:	9305      	str	r3, [sp, #20]
 8008e84:	4619      	mov	r1, r3
 8008e86:	f04f 0c0a 	mov.w	ip, #10
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e90:	3a30      	subs	r2, #48	; 0x30
 8008e92:	2a09      	cmp	r2, #9
 8008e94:	d903      	bls.n	8008e9e <_vfiprintf_r+0x1ee>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0c5      	beq.n	8008e26 <_vfiprintf_r+0x176>
 8008e9a:	9105      	str	r1, [sp, #20]
 8008e9c:	e7c3      	b.n	8008e26 <_vfiprintf_r+0x176>
 8008e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e7f0      	b.n	8008e8a <_vfiprintf_r+0x1da>
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	462a      	mov	r2, r5
 8008eae:	4b16      	ldr	r3, [pc, #88]	; (8008f08 <_vfiprintf_r+0x258>)
 8008eb0:	a904      	add	r1, sp, #16
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7fd fe7c 	bl	8006bb0 <_printf_float>
 8008eb8:	4607      	mov	r7, r0
 8008eba:	1c78      	adds	r0, r7, #1
 8008ebc:	d1d6      	bne.n	8008e6c <_vfiprintf_r+0x1bc>
 8008ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec0:	07d9      	lsls	r1, r3, #31
 8008ec2:	d405      	bmi.n	8008ed0 <_vfiprintf_r+0x220>
 8008ec4:	89ab      	ldrh	r3, [r5, #12]
 8008ec6:	059a      	lsls	r2, r3, #22
 8008ec8:	d402      	bmi.n	8008ed0 <_vfiprintf_r+0x220>
 8008eca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ecc:	f000 faaf 	bl	800942e <__retarget_lock_release_recursive>
 8008ed0:	89ab      	ldrh	r3, [r5, #12]
 8008ed2:	065b      	lsls	r3, r3, #25
 8008ed4:	f53f af12 	bmi.w	8008cfc <_vfiprintf_r+0x4c>
 8008ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eda:	e711      	b.n	8008d00 <_vfiprintf_r+0x50>
 8008edc:	ab03      	add	r3, sp, #12
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <_vfiprintf_r+0x258>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7fe f8ee 	bl	80070c8 <_printf_i>
 8008eec:	e7e4      	b.n	8008eb8 <_vfiprintf_r+0x208>
 8008eee:	bf00      	nop
 8008ef0:	08009ae4 	.word	0x08009ae4
 8008ef4:	08009b04 	.word	0x08009b04
 8008ef8:	08009ac4 	.word	0x08009ac4
 8008efc:	0800996c 	.word	0x0800996c
 8008f00:	08009976 	.word	0x08009976
 8008f04:	08006bb1 	.word	0x08006bb1
 8008f08:	08008c8d 	.word	0x08008c8d
 8008f0c:	08009972 	.word	0x08009972

08008f10 <__swbuf_r>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	460e      	mov	r6, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	4605      	mov	r5, r0
 8008f18:	b118      	cbz	r0, 8008f22 <__swbuf_r+0x12>
 8008f1a:	6983      	ldr	r3, [r0, #24]
 8008f1c:	b90b      	cbnz	r3, 8008f22 <__swbuf_r+0x12>
 8008f1e:	f000 f9e7 	bl	80092f0 <__sinit>
 8008f22:	4b21      	ldr	r3, [pc, #132]	; (8008fa8 <__swbuf_r+0x98>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	d12b      	bne.n	8008f80 <__swbuf_r+0x70>
 8008f28:	686c      	ldr	r4, [r5, #4]
 8008f2a:	69a3      	ldr	r3, [r4, #24]
 8008f2c:	60a3      	str	r3, [r4, #8]
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	071a      	lsls	r2, r3, #28
 8008f32:	d52f      	bpl.n	8008f94 <__swbuf_r+0x84>
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	b36b      	cbz	r3, 8008f94 <__swbuf_r+0x84>
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	6820      	ldr	r0, [r4, #0]
 8008f3c:	1ac0      	subs	r0, r0, r3
 8008f3e:	6963      	ldr	r3, [r4, #20]
 8008f40:	b2f6      	uxtb	r6, r6
 8008f42:	4283      	cmp	r3, r0
 8008f44:	4637      	mov	r7, r6
 8008f46:	dc04      	bgt.n	8008f52 <__swbuf_r+0x42>
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f000 f93c 	bl	80091c8 <_fflush_r>
 8008f50:	bb30      	cbnz	r0, 8008fa0 <__swbuf_r+0x90>
 8008f52:	68a3      	ldr	r3, [r4, #8]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	60a3      	str	r3, [r4, #8]
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	701e      	strb	r6, [r3, #0]
 8008f60:	6963      	ldr	r3, [r4, #20]
 8008f62:	3001      	adds	r0, #1
 8008f64:	4283      	cmp	r3, r0
 8008f66:	d004      	beq.n	8008f72 <__swbuf_r+0x62>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	07db      	lsls	r3, r3, #31
 8008f6c:	d506      	bpl.n	8008f7c <__swbuf_r+0x6c>
 8008f6e:	2e0a      	cmp	r6, #10
 8008f70:	d104      	bne.n	8008f7c <__swbuf_r+0x6c>
 8008f72:	4621      	mov	r1, r4
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 f927 	bl	80091c8 <_fflush_r>
 8008f7a:	b988      	cbnz	r0, 8008fa0 <__swbuf_r+0x90>
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <__swbuf_r+0x9c>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	d101      	bne.n	8008f8a <__swbuf_r+0x7a>
 8008f86:	68ac      	ldr	r4, [r5, #8]
 8008f88:	e7cf      	b.n	8008f2a <__swbuf_r+0x1a>
 8008f8a:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <__swbuf_r+0xa0>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	bf08      	it	eq
 8008f90:	68ec      	ldreq	r4, [r5, #12]
 8008f92:	e7ca      	b.n	8008f2a <__swbuf_r+0x1a>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 f81a 	bl	8008fd0 <__swsetup_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d0cb      	beq.n	8008f38 <__swbuf_r+0x28>
 8008fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa4:	e7ea      	b.n	8008f7c <__swbuf_r+0x6c>
 8008fa6:	bf00      	nop
 8008fa8:	08009ae4 	.word	0x08009ae4
 8008fac:	08009b04 	.word	0x08009b04
 8008fb0:	08009ac4 	.word	0x08009ac4

08008fb4 <__ascii_wctomb>:
 8008fb4:	b149      	cbz	r1, 8008fca <__ascii_wctomb+0x16>
 8008fb6:	2aff      	cmp	r2, #255	; 0xff
 8008fb8:	bf85      	ittet	hi
 8008fba:	238a      	movhi	r3, #138	; 0x8a
 8008fbc:	6003      	strhi	r3, [r0, #0]
 8008fbe:	700a      	strbls	r2, [r1, #0]
 8008fc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fc4:	bf98      	it	ls
 8008fc6:	2001      	movls	r0, #1
 8008fc8:	4770      	bx	lr
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4770      	bx	lr
	...

08008fd0 <__swsetup_r>:
 8008fd0:	4b32      	ldr	r3, [pc, #200]	; (800909c <__swsetup_r+0xcc>)
 8008fd2:	b570      	push	{r4, r5, r6, lr}
 8008fd4:	681d      	ldr	r5, [r3, #0]
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	b125      	cbz	r5, 8008fe6 <__swsetup_r+0x16>
 8008fdc:	69ab      	ldr	r3, [r5, #24]
 8008fde:	b913      	cbnz	r3, 8008fe6 <__swsetup_r+0x16>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f000 f985 	bl	80092f0 <__sinit>
 8008fe6:	4b2e      	ldr	r3, [pc, #184]	; (80090a0 <__swsetup_r+0xd0>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	d10f      	bne.n	800900c <__swsetup_r+0x3c>
 8008fec:	686c      	ldr	r4, [r5, #4]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff4:	0719      	lsls	r1, r3, #28
 8008ff6:	d42c      	bmi.n	8009052 <__swsetup_r+0x82>
 8008ff8:	06dd      	lsls	r5, r3, #27
 8008ffa:	d411      	bmi.n	8009020 <__swsetup_r+0x50>
 8008ffc:	2309      	movs	r3, #9
 8008ffe:	6033      	str	r3, [r6, #0]
 8009000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009004:	81a3      	strh	r3, [r4, #12]
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	e03e      	b.n	800908a <__swsetup_r+0xba>
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <__swsetup_r+0xd4>)
 800900e:	429c      	cmp	r4, r3
 8009010:	d101      	bne.n	8009016 <__swsetup_r+0x46>
 8009012:	68ac      	ldr	r4, [r5, #8]
 8009014:	e7eb      	b.n	8008fee <__swsetup_r+0x1e>
 8009016:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <__swsetup_r+0xd8>)
 8009018:	429c      	cmp	r4, r3
 800901a:	bf08      	it	eq
 800901c:	68ec      	ldreq	r4, [r5, #12]
 800901e:	e7e6      	b.n	8008fee <__swsetup_r+0x1e>
 8009020:	0758      	lsls	r0, r3, #29
 8009022:	d512      	bpl.n	800904a <__swsetup_r+0x7a>
 8009024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009026:	b141      	cbz	r1, 800903a <__swsetup_r+0x6a>
 8009028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <__swsetup_r+0x66>
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff fb31 	bl	8008698 <_free_r>
 8009036:	2300      	movs	r3, #0
 8009038:	6363      	str	r3, [r4, #52]	; 0x34
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	2300      	movs	r3, #0
 8009044:	6063      	str	r3, [r4, #4]
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f043 0308 	orr.w	r3, r3, #8
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	b94b      	cbnz	r3, 800906a <__swsetup_r+0x9a>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800905c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009060:	d003      	beq.n	800906a <__swsetup_r+0x9a>
 8009062:	4621      	mov	r1, r4
 8009064:	4630      	mov	r0, r6
 8009066:	f000 fa09 	bl	800947c <__smakebuf_r>
 800906a:	89a0      	ldrh	r0, [r4, #12]
 800906c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009070:	f010 0301 	ands.w	r3, r0, #1
 8009074:	d00a      	beq.n	800908c <__swsetup_r+0xbc>
 8009076:	2300      	movs	r3, #0
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	6963      	ldr	r3, [r4, #20]
 800907c:	425b      	negs	r3, r3
 800907e:	61a3      	str	r3, [r4, #24]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	b943      	cbnz	r3, 8009096 <__swsetup_r+0xc6>
 8009084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009088:	d1ba      	bne.n	8009000 <__swsetup_r+0x30>
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	0781      	lsls	r1, r0, #30
 800908e:	bf58      	it	pl
 8009090:	6963      	ldrpl	r3, [r4, #20]
 8009092:	60a3      	str	r3, [r4, #8]
 8009094:	e7f4      	b.n	8009080 <__swsetup_r+0xb0>
 8009096:	2000      	movs	r0, #0
 8009098:	e7f7      	b.n	800908a <__swsetup_r+0xba>
 800909a:	bf00      	nop
 800909c:	2000000c 	.word	0x2000000c
 80090a0:	08009ae4 	.word	0x08009ae4
 80090a4:	08009b04 	.word	0x08009b04
 80090a8:	08009ac4 	.word	0x08009ac4

080090ac <abort>:
 80090ac:	b508      	push	{r3, lr}
 80090ae:	2006      	movs	r0, #6
 80090b0:	f000 fa54 	bl	800955c <raise>
 80090b4:	2001      	movs	r0, #1
 80090b6:	f7f7 ffe7 	bl	8001088 <_exit>
	...

080090bc <__sflush_r>:
 80090bc:	898a      	ldrh	r2, [r1, #12]
 80090be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c2:	4605      	mov	r5, r0
 80090c4:	0710      	lsls	r0, r2, #28
 80090c6:	460c      	mov	r4, r1
 80090c8:	d458      	bmi.n	800917c <__sflush_r+0xc0>
 80090ca:	684b      	ldr	r3, [r1, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dc05      	bgt.n	80090dc <__sflush_r+0x20>
 80090d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	dc02      	bgt.n	80090dc <__sflush_r+0x20>
 80090d6:	2000      	movs	r0, #0
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090de:	2e00      	cmp	r6, #0
 80090e0:	d0f9      	beq.n	80090d6 <__sflush_r+0x1a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e8:	682f      	ldr	r7, [r5, #0]
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	d032      	beq.n	8009154 <__sflush_r+0x98>
 80090ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	075a      	lsls	r2, r3, #29
 80090f4:	d505      	bpl.n	8009102 <__sflush_r+0x46>
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	1ac0      	subs	r0, r0, r3
 80090fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090fc:	b10b      	cbz	r3, 8009102 <__sflush_r+0x46>
 80090fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009100:	1ac0      	subs	r0, r0, r3
 8009102:	2300      	movs	r3, #0
 8009104:	4602      	mov	r2, r0
 8009106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009108:	6a21      	ldr	r1, [r4, #32]
 800910a:	4628      	mov	r0, r5
 800910c:	47b0      	blx	r6
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	d106      	bne.n	8009122 <__sflush_r+0x66>
 8009114:	6829      	ldr	r1, [r5, #0]
 8009116:	291d      	cmp	r1, #29
 8009118:	d82c      	bhi.n	8009174 <__sflush_r+0xb8>
 800911a:	4a2a      	ldr	r2, [pc, #168]	; (80091c4 <__sflush_r+0x108>)
 800911c:	40ca      	lsrs	r2, r1
 800911e:	07d6      	lsls	r6, r2, #31
 8009120:	d528      	bpl.n	8009174 <__sflush_r+0xb8>
 8009122:	2200      	movs	r2, #0
 8009124:	6062      	str	r2, [r4, #4]
 8009126:	04d9      	lsls	r1, r3, #19
 8009128:	6922      	ldr	r2, [r4, #16]
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	d504      	bpl.n	8009138 <__sflush_r+0x7c>
 800912e:	1c42      	adds	r2, r0, #1
 8009130:	d101      	bne.n	8009136 <__sflush_r+0x7a>
 8009132:	682b      	ldr	r3, [r5, #0]
 8009134:	b903      	cbnz	r3, 8009138 <__sflush_r+0x7c>
 8009136:	6560      	str	r0, [r4, #84]	; 0x54
 8009138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913a:	602f      	str	r7, [r5, #0]
 800913c:	2900      	cmp	r1, #0
 800913e:	d0ca      	beq.n	80090d6 <__sflush_r+0x1a>
 8009140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009144:	4299      	cmp	r1, r3
 8009146:	d002      	beq.n	800914e <__sflush_r+0x92>
 8009148:	4628      	mov	r0, r5
 800914a:	f7ff faa5 	bl	8008698 <_free_r>
 800914e:	2000      	movs	r0, #0
 8009150:	6360      	str	r0, [r4, #52]	; 0x34
 8009152:	e7c1      	b.n	80090d8 <__sflush_r+0x1c>
 8009154:	6a21      	ldr	r1, [r4, #32]
 8009156:	2301      	movs	r3, #1
 8009158:	4628      	mov	r0, r5
 800915a:	47b0      	blx	r6
 800915c:	1c41      	adds	r1, r0, #1
 800915e:	d1c7      	bne.n	80090f0 <__sflush_r+0x34>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0c4      	beq.n	80090f0 <__sflush_r+0x34>
 8009166:	2b1d      	cmp	r3, #29
 8009168:	d001      	beq.n	800916e <__sflush_r+0xb2>
 800916a:	2b16      	cmp	r3, #22
 800916c:	d101      	bne.n	8009172 <__sflush_r+0xb6>
 800916e:	602f      	str	r7, [r5, #0]
 8009170:	e7b1      	b.n	80090d6 <__sflush_r+0x1a>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	e7ad      	b.n	80090d8 <__sflush_r+0x1c>
 800917c:	690f      	ldr	r7, [r1, #16]
 800917e:	2f00      	cmp	r7, #0
 8009180:	d0a9      	beq.n	80090d6 <__sflush_r+0x1a>
 8009182:	0793      	lsls	r3, r2, #30
 8009184:	680e      	ldr	r6, [r1, #0]
 8009186:	bf08      	it	eq
 8009188:	694b      	ldreq	r3, [r1, #20]
 800918a:	600f      	str	r7, [r1, #0]
 800918c:	bf18      	it	ne
 800918e:	2300      	movne	r3, #0
 8009190:	eba6 0807 	sub.w	r8, r6, r7
 8009194:	608b      	str	r3, [r1, #8]
 8009196:	f1b8 0f00 	cmp.w	r8, #0
 800919a:	dd9c      	ble.n	80090d6 <__sflush_r+0x1a>
 800919c:	6a21      	ldr	r1, [r4, #32]
 800919e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091a0:	4643      	mov	r3, r8
 80091a2:	463a      	mov	r2, r7
 80091a4:	4628      	mov	r0, r5
 80091a6:	47b0      	blx	r6
 80091a8:	2800      	cmp	r0, #0
 80091aa:	dc06      	bgt.n	80091ba <__sflush_r+0xfe>
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e78e      	b.n	80090d8 <__sflush_r+0x1c>
 80091ba:	4407      	add	r7, r0
 80091bc:	eba8 0800 	sub.w	r8, r8, r0
 80091c0:	e7e9      	b.n	8009196 <__sflush_r+0xda>
 80091c2:	bf00      	nop
 80091c4:	20400001 	.word	0x20400001

080091c8 <_fflush_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	690b      	ldr	r3, [r1, #16]
 80091cc:	4605      	mov	r5, r0
 80091ce:	460c      	mov	r4, r1
 80091d0:	b913      	cbnz	r3, 80091d8 <_fflush_r+0x10>
 80091d2:	2500      	movs	r5, #0
 80091d4:	4628      	mov	r0, r5
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	b118      	cbz	r0, 80091e2 <_fflush_r+0x1a>
 80091da:	6983      	ldr	r3, [r0, #24]
 80091dc:	b90b      	cbnz	r3, 80091e2 <_fflush_r+0x1a>
 80091de:	f000 f887 	bl	80092f0 <__sinit>
 80091e2:	4b14      	ldr	r3, [pc, #80]	; (8009234 <_fflush_r+0x6c>)
 80091e4:	429c      	cmp	r4, r3
 80091e6:	d11b      	bne.n	8009220 <_fflush_r+0x58>
 80091e8:	686c      	ldr	r4, [r5, #4]
 80091ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0ef      	beq.n	80091d2 <_fflush_r+0xa>
 80091f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091f4:	07d0      	lsls	r0, r2, #31
 80091f6:	d404      	bmi.n	8009202 <_fflush_r+0x3a>
 80091f8:	0599      	lsls	r1, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_fflush_r+0x3a>
 80091fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091fe:	f000 f915 	bl	800942c <__retarget_lock_acquire_recursive>
 8009202:	4628      	mov	r0, r5
 8009204:	4621      	mov	r1, r4
 8009206:	f7ff ff59 	bl	80090bc <__sflush_r>
 800920a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920c:	07da      	lsls	r2, r3, #31
 800920e:	4605      	mov	r5, r0
 8009210:	d4e0      	bmi.n	80091d4 <_fflush_r+0xc>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	059b      	lsls	r3, r3, #22
 8009216:	d4dd      	bmi.n	80091d4 <_fflush_r+0xc>
 8009218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921a:	f000 f908 	bl	800942e <__retarget_lock_release_recursive>
 800921e:	e7d9      	b.n	80091d4 <_fflush_r+0xc>
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <_fflush_r+0x70>)
 8009222:	429c      	cmp	r4, r3
 8009224:	d101      	bne.n	800922a <_fflush_r+0x62>
 8009226:	68ac      	ldr	r4, [r5, #8]
 8009228:	e7df      	b.n	80091ea <_fflush_r+0x22>
 800922a:	4b04      	ldr	r3, [pc, #16]	; (800923c <_fflush_r+0x74>)
 800922c:	429c      	cmp	r4, r3
 800922e:	bf08      	it	eq
 8009230:	68ec      	ldreq	r4, [r5, #12]
 8009232:	e7da      	b.n	80091ea <_fflush_r+0x22>
 8009234:	08009ae4 	.word	0x08009ae4
 8009238:	08009b04 	.word	0x08009b04
 800923c:	08009ac4 	.word	0x08009ac4

08009240 <std>:
 8009240:	2300      	movs	r3, #0
 8009242:	b510      	push	{r4, lr}
 8009244:	4604      	mov	r4, r0
 8009246:	e9c0 3300 	strd	r3, r3, [r0]
 800924a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800924e:	6083      	str	r3, [r0, #8]
 8009250:	8181      	strh	r1, [r0, #12]
 8009252:	6643      	str	r3, [r0, #100]	; 0x64
 8009254:	81c2      	strh	r2, [r0, #14]
 8009256:	6183      	str	r3, [r0, #24]
 8009258:	4619      	mov	r1, r3
 800925a:	2208      	movs	r2, #8
 800925c:	305c      	adds	r0, #92	; 0x5c
 800925e:	f7fd fc0d 	bl	8006a7c <memset>
 8009262:	4b05      	ldr	r3, [pc, #20]	; (8009278 <std+0x38>)
 8009264:	6263      	str	r3, [r4, #36]	; 0x24
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <std+0x3c>)
 8009268:	62a3      	str	r3, [r4, #40]	; 0x28
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <std+0x40>)
 800926c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800926e:	4b05      	ldr	r3, [pc, #20]	; (8009284 <std+0x44>)
 8009270:	6224      	str	r4, [r4, #32]
 8009272:	6323      	str	r3, [r4, #48]	; 0x30
 8009274:	bd10      	pop	{r4, pc}
 8009276:	bf00      	nop
 8009278:	08009595 	.word	0x08009595
 800927c:	080095b7 	.word	0x080095b7
 8009280:	080095ef 	.word	0x080095ef
 8009284:	08009613 	.word	0x08009613

08009288 <_cleanup_r>:
 8009288:	4901      	ldr	r1, [pc, #4]	; (8009290 <_cleanup_r+0x8>)
 800928a:	f000 b8af 	b.w	80093ec <_fwalk_reent>
 800928e:	bf00      	nop
 8009290:	080091c9 	.word	0x080091c9

08009294 <__sfmoreglue>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	2268      	movs	r2, #104	; 0x68
 8009298:	1e4d      	subs	r5, r1, #1
 800929a:	4355      	muls	r5, r2
 800929c:	460e      	mov	r6, r1
 800929e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092a2:	f7ff fa65 	bl	8008770 <_malloc_r>
 80092a6:	4604      	mov	r4, r0
 80092a8:	b140      	cbz	r0, 80092bc <__sfmoreglue+0x28>
 80092aa:	2100      	movs	r1, #0
 80092ac:	e9c0 1600 	strd	r1, r6, [r0]
 80092b0:	300c      	adds	r0, #12
 80092b2:	60a0      	str	r0, [r4, #8]
 80092b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092b8:	f7fd fbe0 	bl	8006a7c <memset>
 80092bc:	4620      	mov	r0, r4
 80092be:	bd70      	pop	{r4, r5, r6, pc}

080092c0 <__sfp_lock_acquire>:
 80092c0:	4801      	ldr	r0, [pc, #4]	; (80092c8 <__sfp_lock_acquire+0x8>)
 80092c2:	f000 b8b3 	b.w	800942c <__retarget_lock_acquire_recursive>
 80092c6:	bf00      	nop
 80092c8:	20000915 	.word	0x20000915

080092cc <__sfp_lock_release>:
 80092cc:	4801      	ldr	r0, [pc, #4]	; (80092d4 <__sfp_lock_release+0x8>)
 80092ce:	f000 b8ae 	b.w	800942e <__retarget_lock_release_recursive>
 80092d2:	bf00      	nop
 80092d4:	20000915 	.word	0x20000915

080092d8 <__sinit_lock_acquire>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__sinit_lock_acquire+0x8>)
 80092da:	f000 b8a7 	b.w	800942c <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	20000916 	.word	0x20000916

080092e4 <__sinit_lock_release>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__sinit_lock_release+0x8>)
 80092e6:	f000 b8a2 	b.w	800942e <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	20000916 	.word	0x20000916

080092f0 <__sinit>:
 80092f0:	b510      	push	{r4, lr}
 80092f2:	4604      	mov	r4, r0
 80092f4:	f7ff fff0 	bl	80092d8 <__sinit_lock_acquire>
 80092f8:	69a3      	ldr	r3, [r4, #24]
 80092fa:	b11b      	cbz	r3, 8009304 <__sinit+0x14>
 80092fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009300:	f7ff bff0 	b.w	80092e4 <__sinit_lock_release>
 8009304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009308:	6523      	str	r3, [r4, #80]	; 0x50
 800930a:	4b13      	ldr	r3, [pc, #76]	; (8009358 <__sinit+0x68>)
 800930c:	4a13      	ldr	r2, [pc, #76]	; (800935c <__sinit+0x6c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	62a2      	str	r2, [r4, #40]	; 0x28
 8009312:	42a3      	cmp	r3, r4
 8009314:	bf04      	itt	eq
 8009316:	2301      	moveq	r3, #1
 8009318:	61a3      	streq	r3, [r4, #24]
 800931a:	4620      	mov	r0, r4
 800931c:	f000 f820 	bl	8009360 <__sfp>
 8009320:	6060      	str	r0, [r4, #4]
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f81c 	bl	8009360 <__sfp>
 8009328:	60a0      	str	r0, [r4, #8]
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f818 	bl	8009360 <__sfp>
 8009330:	2200      	movs	r2, #0
 8009332:	60e0      	str	r0, [r4, #12]
 8009334:	2104      	movs	r1, #4
 8009336:	6860      	ldr	r0, [r4, #4]
 8009338:	f7ff ff82 	bl	8009240 <std>
 800933c:	68a0      	ldr	r0, [r4, #8]
 800933e:	2201      	movs	r2, #1
 8009340:	2109      	movs	r1, #9
 8009342:	f7ff ff7d 	bl	8009240 <std>
 8009346:	68e0      	ldr	r0, [r4, #12]
 8009348:	2202      	movs	r2, #2
 800934a:	2112      	movs	r1, #18
 800934c:	f7ff ff78 	bl	8009240 <std>
 8009350:	2301      	movs	r3, #1
 8009352:	61a3      	str	r3, [r4, #24]
 8009354:	e7d2      	b.n	80092fc <__sinit+0xc>
 8009356:	bf00      	nop
 8009358:	08009748 	.word	0x08009748
 800935c:	08009289 	.word	0x08009289

08009360 <__sfp>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	4607      	mov	r7, r0
 8009364:	f7ff ffac 	bl	80092c0 <__sfp_lock_acquire>
 8009368:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <__sfp+0x84>)
 800936a:	681e      	ldr	r6, [r3, #0]
 800936c:	69b3      	ldr	r3, [r6, #24]
 800936e:	b913      	cbnz	r3, 8009376 <__sfp+0x16>
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff ffbd 	bl	80092f0 <__sinit>
 8009376:	3648      	adds	r6, #72	; 0x48
 8009378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800937c:	3b01      	subs	r3, #1
 800937e:	d503      	bpl.n	8009388 <__sfp+0x28>
 8009380:	6833      	ldr	r3, [r6, #0]
 8009382:	b30b      	cbz	r3, 80093c8 <__sfp+0x68>
 8009384:	6836      	ldr	r6, [r6, #0]
 8009386:	e7f7      	b.n	8009378 <__sfp+0x18>
 8009388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800938c:	b9d5      	cbnz	r5, 80093c4 <__sfp+0x64>
 800938e:	4b16      	ldr	r3, [pc, #88]	; (80093e8 <__sfp+0x88>)
 8009390:	60e3      	str	r3, [r4, #12]
 8009392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009396:	6665      	str	r5, [r4, #100]	; 0x64
 8009398:	f000 f847 	bl	800942a <__retarget_lock_init_recursive>
 800939c:	f7ff ff96 	bl	80092cc <__sfp_lock_release>
 80093a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093a8:	6025      	str	r5, [r4, #0]
 80093aa:	61a5      	str	r5, [r4, #24]
 80093ac:	2208      	movs	r2, #8
 80093ae:	4629      	mov	r1, r5
 80093b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093b4:	f7fd fb62 	bl	8006a7c <memset>
 80093b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093c0:	4620      	mov	r0, r4
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c4:	3468      	adds	r4, #104	; 0x68
 80093c6:	e7d9      	b.n	800937c <__sfp+0x1c>
 80093c8:	2104      	movs	r1, #4
 80093ca:	4638      	mov	r0, r7
 80093cc:	f7ff ff62 	bl	8009294 <__sfmoreglue>
 80093d0:	4604      	mov	r4, r0
 80093d2:	6030      	str	r0, [r6, #0]
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1d5      	bne.n	8009384 <__sfp+0x24>
 80093d8:	f7ff ff78 	bl	80092cc <__sfp_lock_release>
 80093dc:	230c      	movs	r3, #12
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	e7ee      	b.n	80093c0 <__sfp+0x60>
 80093e2:	bf00      	nop
 80093e4:	08009748 	.word	0x08009748
 80093e8:	ffff0001 	.word	0xffff0001

080093ec <_fwalk_reent>:
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f0:	4606      	mov	r6, r0
 80093f2:	4688      	mov	r8, r1
 80093f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093f8:	2700      	movs	r7, #0
 80093fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093fe:	f1b9 0901 	subs.w	r9, r9, #1
 8009402:	d505      	bpl.n	8009410 <_fwalk_reent+0x24>
 8009404:	6824      	ldr	r4, [r4, #0]
 8009406:	2c00      	cmp	r4, #0
 8009408:	d1f7      	bne.n	80093fa <_fwalk_reent+0xe>
 800940a:	4638      	mov	r0, r7
 800940c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009410:	89ab      	ldrh	r3, [r5, #12]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d907      	bls.n	8009426 <_fwalk_reent+0x3a>
 8009416:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800941a:	3301      	adds	r3, #1
 800941c:	d003      	beq.n	8009426 <_fwalk_reent+0x3a>
 800941e:	4629      	mov	r1, r5
 8009420:	4630      	mov	r0, r6
 8009422:	47c0      	blx	r8
 8009424:	4307      	orrs	r7, r0
 8009426:	3568      	adds	r5, #104	; 0x68
 8009428:	e7e9      	b.n	80093fe <_fwalk_reent+0x12>

0800942a <__retarget_lock_init_recursive>:
 800942a:	4770      	bx	lr

0800942c <__retarget_lock_acquire_recursive>:
 800942c:	4770      	bx	lr

0800942e <__retarget_lock_release_recursive>:
 800942e:	4770      	bx	lr

08009430 <__swhatbuf_r>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	460e      	mov	r6, r1
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	2900      	cmp	r1, #0
 800943a:	b096      	sub	sp, #88	; 0x58
 800943c:	4614      	mov	r4, r2
 800943e:	461d      	mov	r5, r3
 8009440:	da08      	bge.n	8009454 <__swhatbuf_r+0x24>
 8009442:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	061a      	lsls	r2, r3, #24
 800944c:	d410      	bmi.n	8009470 <__swhatbuf_r+0x40>
 800944e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009452:	e00e      	b.n	8009472 <__swhatbuf_r+0x42>
 8009454:	466a      	mov	r2, sp
 8009456:	f000 f903 	bl	8009660 <_fstat_r>
 800945a:	2800      	cmp	r0, #0
 800945c:	dbf1      	blt.n	8009442 <__swhatbuf_r+0x12>
 800945e:	9a01      	ldr	r2, [sp, #4]
 8009460:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009464:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009468:	425a      	negs	r2, r3
 800946a:	415a      	adcs	r2, r3
 800946c:	602a      	str	r2, [r5, #0]
 800946e:	e7ee      	b.n	800944e <__swhatbuf_r+0x1e>
 8009470:	2340      	movs	r3, #64	; 0x40
 8009472:	2000      	movs	r0, #0
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	b016      	add	sp, #88	; 0x58
 8009478:	bd70      	pop	{r4, r5, r6, pc}
	...

0800947c <__smakebuf_r>:
 800947c:	898b      	ldrh	r3, [r1, #12]
 800947e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009480:	079d      	lsls	r5, r3, #30
 8009482:	4606      	mov	r6, r0
 8009484:	460c      	mov	r4, r1
 8009486:	d507      	bpl.n	8009498 <__smakebuf_r+0x1c>
 8009488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	2301      	movs	r3, #1
 8009492:	6163      	str	r3, [r4, #20]
 8009494:	b002      	add	sp, #8
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	ab01      	add	r3, sp, #4
 800949a:	466a      	mov	r2, sp
 800949c:	f7ff ffc8 	bl	8009430 <__swhatbuf_r>
 80094a0:	9900      	ldr	r1, [sp, #0]
 80094a2:	4605      	mov	r5, r0
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff f963 	bl	8008770 <_malloc_r>
 80094aa:	b948      	cbnz	r0, 80094c0 <__smakebuf_r+0x44>
 80094ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b0:	059a      	lsls	r2, r3, #22
 80094b2:	d4ef      	bmi.n	8009494 <__smakebuf_r+0x18>
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	e7e3      	b.n	8009488 <__smakebuf_r+0xc>
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <__smakebuf_r+0x7c>)
 80094c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	9b00      	ldr	r3, [sp, #0]
 80094d0:	6163      	str	r3, [r4, #20]
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	6120      	str	r0, [r4, #16]
 80094d6:	b15b      	cbz	r3, 80094f0 <__smakebuf_r+0x74>
 80094d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094dc:	4630      	mov	r0, r6
 80094de:	f000 f8d1 	bl	8009684 <_isatty_r>
 80094e2:	b128      	cbz	r0, 80094f0 <__smakebuf_r+0x74>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	89a0      	ldrh	r0, [r4, #12]
 80094f2:	4305      	orrs	r5, r0
 80094f4:	81a5      	strh	r5, [r4, #12]
 80094f6:	e7cd      	b.n	8009494 <__smakebuf_r+0x18>
 80094f8:	08009289 	.word	0x08009289

080094fc <_malloc_usable_size_r>:
 80094fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009500:	1f18      	subs	r0, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfbc      	itt	lt
 8009506:	580b      	ldrlt	r3, [r1, r0]
 8009508:	18c0      	addlt	r0, r0, r3
 800950a:	4770      	bx	lr

0800950c <_raise_r>:
 800950c:	291f      	cmp	r1, #31
 800950e:	b538      	push	{r3, r4, r5, lr}
 8009510:	4604      	mov	r4, r0
 8009512:	460d      	mov	r5, r1
 8009514:	d904      	bls.n	8009520 <_raise_r+0x14>
 8009516:	2316      	movs	r3, #22
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	f04f 30ff 	mov.w	r0, #4294967295
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009522:	b112      	cbz	r2, 800952a <_raise_r+0x1e>
 8009524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009528:	b94b      	cbnz	r3, 800953e <_raise_r+0x32>
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f830 	bl	8009590 <_getpid_r>
 8009530:	462a      	mov	r2, r5
 8009532:	4601      	mov	r1, r0
 8009534:	4620      	mov	r0, r4
 8009536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953a:	f000 b817 	b.w	800956c <_kill_r>
 800953e:	2b01      	cmp	r3, #1
 8009540:	d00a      	beq.n	8009558 <_raise_r+0x4c>
 8009542:	1c59      	adds	r1, r3, #1
 8009544:	d103      	bne.n	800954e <_raise_r+0x42>
 8009546:	2316      	movs	r3, #22
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	2001      	movs	r0, #1
 800954c:	e7e7      	b.n	800951e <_raise_r+0x12>
 800954e:	2400      	movs	r4, #0
 8009550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009554:	4628      	mov	r0, r5
 8009556:	4798      	blx	r3
 8009558:	2000      	movs	r0, #0
 800955a:	e7e0      	b.n	800951e <_raise_r+0x12>

0800955c <raise>:
 800955c:	4b02      	ldr	r3, [pc, #8]	; (8009568 <raise+0xc>)
 800955e:	4601      	mov	r1, r0
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	f7ff bfd3 	b.w	800950c <_raise_r>
 8009566:	bf00      	nop
 8009568:	2000000c 	.word	0x2000000c

0800956c <_kill_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	; (800958c <_kill_r+0x20>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	f7f7 fd75 	bl	8001068 <_kill>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	d102      	bne.n	8009588 <_kill_r+0x1c>
 8009582:	682b      	ldr	r3, [r5, #0]
 8009584:	b103      	cbz	r3, 8009588 <_kill_r+0x1c>
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	bf00      	nop
 800958c:	20000910 	.word	0x20000910

08009590 <_getpid_r>:
 8009590:	f7f7 bd62 	b.w	8001058 <_getpid>

08009594 <__sread>:
 8009594:	b510      	push	{r4, lr}
 8009596:	460c      	mov	r4, r1
 8009598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959c:	f000 f894 	bl	80096c8 <_read_r>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	bfab      	itete	ge
 80095a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095a6:	89a3      	ldrhlt	r3, [r4, #12]
 80095a8:	181b      	addge	r3, r3, r0
 80095aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ae:	bfac      	ite	ge
 80095b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80095b2:	81a3      	strhlt	r3, [r4, #12]
 80095b4:	bd10      	pop	{r4, pc}

080095b6 <__swrite>:
 80095b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ba:	461f      	mov	r7, r3
 80095bc:	898b      	ldrh	r3, [r1, #12]
 80095be:	05db      	lsls	r3, r3, #23
 80095c0:	4605      	mov	r5, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	4616      	mov	r6, r2
 80095c6:	d505      	bpl.n	80095d4 <__swrite+0x1e>
 80095c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095cc:	2302      	movs	r3, #2
 80095ce:	2200      	movs	r2, #0
 80095d0:	f000 f868 	bl	80096a4 <_lseek_r>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	4632      	mov	r2, r6
 80095e2:	463b      	mov	r3, r7
 80095e4:	4628      	mov	r0, r5
 80095e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ea:	f000 b817 	b.w	800961c <_write_r>

080095ee <__sseek>:
 80095ee:	b510      	push	{r4, lr}
 80095f0:	460c      	mov	r4, r1
 80095f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f6:	f000 f855 	bl	80096a4 <_lseek_r>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	bf15      	itete	ne
 8009600:	6560      	strne	r0, [r4, #84]	; 0x54
 8009602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800960a:	81a3      	strheq	r3, [r4, #12]
 800960c:	bf18      	it	ne
 800960e:	81a3      	strhne	r3, [r4, #12]
 8009610:	bd10      	pop	{r4, pc}

08009612 <__sclose>:
 8009612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009616:	f000 b813 	b.w	8009640 <_close_r>
	...

0800961c <_write_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4d07      	ldr	r5, [pc, #28]	; (800963c <_write_r+0x20>)
 8009620:	4604      	mov	r4, r0
 8009622:	4608      	mov	r0, r1
 8009624:	4611      	mov	r1, r2
 8009626:	2200      	movs	r2, #0
 8009628:	602a      	str	r2, [r5, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	f7f7 fd53 	bl	80010d6 <_write>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_write_r+0x1e>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b103      	cbz	r3, 800963a <_write_r+0x1e>
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	20000910 	.word	0x20000910

08009640 <_close_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d06      	ldr	r5, [pc, #24]	; (800965c <_close_r+0x1c>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	f7f7 fd5f 	bl	800110e <_close>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_close_r+0x1a>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_close_r+0x1a>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	20000910 	.word	0x20000910

08009660 <_fstat_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d07      	ldr	r5, [pc, #28]	; (8009680 <_fstat_r+0x20>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	4611      	mov	r1, r2
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	f7f7 fd5a 	bl	8001126 <_fstat>
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	d102      	bne.n	800967c <_fstat_r+0x1c>
 8009676:	682b      	ldr	r3, [r5, #0]
 8009678:	b103      	cbz	r3, 800967c <_fstat_r+0x1c>
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	bd38      	pop	{r3, r4, r5, pc}
 800967e:	bf00      	nop
 8009680:	20000910 	.word	0x20000910

08009684 <_isatty_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d06      	ldr	r5, [pc, #24]	; (80096a0 <_isatty_r+0x1c>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	f7f7 fd59 	bl	8001146 <_isatty>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_isatty_r+0x1a>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_isatty_r+0x1a>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	20000910 	.word	0x20000910

080096a4 <_lseek_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d07      	ldr	r5, [pc, #28]	; (80096c4 <_lseek_r+0x20>)
 80096a8:	4604      	mov	r4, r0
 80096aa:	4608      	mov	r0, r1
 80096ac:	4611      	mov	r1, r2
 80096ae:	2200      	movs	r2, #0
 80096b0:	602a      	str	r2, [r5, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f7f7 fd52 	bl	800115c <_lseek>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_lseek_r+0x1e>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_lseek_r+0x1e>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	20000910 	.word	0x20000910

080096c8 <_read_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	; (80096e8 <_read_r+0x20>)
 80096cc:	4604      	mov	r4, r0
 80096ce:	4608      	mov	r0, r1
 80096d0:	4611      	mov	r1, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	602a      	str	r2, [r5, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f7f7 fce0 	bl	800109c <_read>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_read_r+0x1e>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_read_r+0x1e>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	20000910 	.word	0x20000910

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
